// This file is part of the bwip-js project available at:
//
// 	  http://metafloor.github.io/bwip-js
//
// Copyright (c) 2011-2021 Mark Warren
//
// This file contains code automatically generated from:
// Barcode Writer in Pure PostScript - Version 2020-10-02
// Copyright (c) 2004-2019 Terry Burton
//
// The MIT License
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//
(function (root, factory) {
    if (typeof define === 'function' && define.amd) {
        define([], factory);
    } else if (typeof module === 'object' && module.exports) {
        module.exports = factory();
    } else {
        root.bwipjs = factory();
	}
}(typeof self !== 'undefined' ? self : this, function () {
"use strict";
// exports.js

//@@BEGIN-NODE-JS-ONLY@@
var url = require('url');

// bwipjs.request(req, res [, overrides])
//
// Returns a PNG image from the query args of a node.js http request object.
//
// This function is asynchronous.
//
// Node.js usage only.
function Request(req, res, extra) {
	var opts = url.parse(req.url, true).query;

	// Convert boolean empty parameters to true
	for (var id in opts) {
		if (opts[id] === '') {
			opts[id] = true;
		}
	}

	// Add in server options/overrides
	if (extra) {
		for (var id in extra) {
			opts[id] = extra[id];
		}
	}

	ToBuffer(opts, function(err, png) {
		if (err) {
			res.writeHead(400, { 'Content-Type':'text/plain' });
			res.end('' + (err.stack || err), 'utf-8');
		} else {
			res.writeHead(200, { 'Content-Type':'image/png' });
			res.end(png, 'binary');
		}
	});
}

// bwipjs.toBuffer(options[, callback])
//
// Uses the built-in graphics drawing and zlib PNG encoding to return a
// barcode image in a node.js Buffer.
//
// `options` are a bwip-js/BWIPP options object.
// `callback` is an optional callback handler with prototype:
//
// 		function callback(err, png)
//
// 		`err` is an Error object or string.  If `err` is set, `png` is null.
// 		`png` is a node Buffer containing the PNG image.
//
// If `callback` is not provided, a Promise is returned.
//
// Node.js usage only.
function ToBuffer(opts, callback) {
	try {
		FixupOptions(opts);
		return Render(opts, DrawingZlibPng(opts, callback));
	} catch (e) {
		if (callback) {
			callback(e);
		} else {
			return new Promise(function(resolve, reject) {
				reject(e);
			});
		}
	}
}
//@@ENDOF-NODE-JS-ONLY@@


// bwipjs.fixupOptions(options)
//
// Call this before passing your options object to a drawing constructor.
function FixupOptions(opts) {
	var scale	= opts.scale || 2;
	var scaleX	= +opts.scaleX || scale;
	var scaleY	= +opts.scaleY || scaleX;

	// Fix up padding.
	opts.paddingleft = padding(opts.paddingleft, opts.paddingwidth, opts.padding, scaleX);
	opts.paddingright = padding(opts.paddingright, opts.paddingwidth, opts.padding, scaleX);
	opts.paddingtop = padding(opts.paddingtop, opts.paddingheight, opts.padding, scaleY);
	opts.paddingbottom = padding(opts.paddingbottom, opts.paddingheight, opts.padding, scaleY);

	// We override BWIPP's background color functionality.  If in CMYK, convert to RGB so
	// the drawing interface is consistent.
	if (/^[0-9a-fA-F]{8}$/.test(''+opts.backgroundcolor)) {
		var cmyk = opts.backgroundcolor;
		var c = parseInt(cmyk.substr(0,2), 16) / 255;
		var m = parseInt(cmyk.substr(2,2), 16) / 255;
		var y = parseInt(cmyk.substr(4,2), 16) / 255;
		var k = parseInt(cmyk.substr(6,2), 16) / 255;
		var r = Math.floor((1-c) * (1-k) * 255).toString(16);
		var g = Math.floor((1-m) * (1-k) * 255).toString(16);
		var b = Math.floor((1-y) * (1-k) * 255).toString(16);
		opts.backgroundcolor = (r.length == 1 ? '0' : '') + r +
							   (g.length == 1 ? '0' : '') + g +
							   (b.length == 1 ? '0' : '') + b;
	}

	return opts;

	function padding(a, b, c, s) {
		if (a != null) {
			return a*s;
		}
		if (b != null) {
			return b*s;
		}
		return c*s || 0;
	}
}

var BWIPJS_OPTIONS = {
	bcid:1,
	text:1,
	scale:1,
	scaleX:1,
	scaleY:1,
	rotate:1,
	padding:1,
	paddingwidth:1,
	paddingheight:1,
	paddingtop:1,
	paddingleft:1,
	paddingright:1,
	paddingbottom:1,
	backgroundcolor:1,
};

// bwipjs.render(options, drawing)
//
// Renders a barcode using the provided drawing object.
//
// This function is synchronous and throws on error.
function Render(params, drawing) {
	// Set the bwip-js defaults
	var scale	= params.scale || 2;
	var scaleX	= +params.scaleX || scale;
	var scaleY	= +params.scaleY || scaleX;
	var rotate	= params.rotate || 'N';

	// The required parameters
	var bcid = params.bcid;
	var text = params.text;

	if (!text) {
		throw new ReferenceError('bwip-js: bar code text not specified.');
	}
	if (!bcid) {
		throw new ReferenceError('bwip-js: bar code type not specified.');
	}

	// Create a barcode writer object.  This is the interface between
	// the low-level BWIPP code, the bwip-js graphics context, and the
	// drawing interface.
	var bw = new BWIPJS(drawing);

	// Set the BWIPP options
	var opts = {};
	for (var id in params) {
		if (!BWIPJS_OPTIONS[id]) {
			opts[id] = params[id];
		}
	}

	// Fix a disconnect in the BWIPP rendering logic
	if (opts.alttext) {
		opts.includetext = true;
	}
	// We use mm rather than inches for height - except pharmacode2 height
	// which is already in mm.
	if (+opts.height && bcid != 'pharmacode2') {
		opts.height = opts.height / 25.4 || 0.5;
	}
	// Likewise, width
	if (+opts.width) {
		opts.width = opts.width / 25.4 || 0;
	}

	// Scale the image
	bw.scale(scaleX, scaleY);

	// Call into the BWIPP cross-compiled code and render the image.
	BWIPP()(bw, bcid, text, opts);
	return bw.render();		// Return whatever drawing.end() returns
}

// bwipjs.raw(options)
// bwipjs.raw(encoder, text, opts-string)
//
// Invokes the low level BWIPP code and returns the raw encoding data.
//
// This function is synchronous and throws on error.
function Raw(encoder, text, options) {
	if (arguments.length == 1) {
		options = encoder;
		encoder = options.bcid;
		text = options.text;
	}

	// The drawing interface is just needed for the pre-init() calls.
	var bw = new BWIPJS(DrawingBuiltin({}));
	var stack = BWIPP()(bw, encoder, text, options, true);

	// bwip-js uses Maps to emulate PostScript dictionary objects; but Maps
	// are not a typical/expected return value.  Convert to plain-old-objects.
	var ids = { pixs:1, pixx:1, pixy:1, sbs:1, bbs:1, bhs:1, width:1, height:1 };
	for (var i = 0; i < stack.length; i++) {
		var elt = stack[i];
		if (elt instanceof Map) {
			var obj = {};
			// Could they make Maps any harder to iterate over???
			for (var keys = elt.keys(), size = elt.size, k = 0; k < size; k++) {
				var id = keys.next().value;
				if (ids[id]) {
					var val = elt.get(id);
					if (val instanceof Array) {
						// The postscript arrays have extra named properties
						// to emulate array views.  Return cleaned up arrays.
						obj[id] = val.b.slice(val.o, val.o + val.length);
					} else {
						obj[id] = val;
					}
				}
			}
			stack[i] = obj;
		} else {
			// This should never exec...
			stack.splice(i--, 1);
		}
	}
	return stack;
}
function BWIPP() {
	"use strict";
	// bwip-js/barcode-hdr.js
	//
	// This code is injected above the cross-compiled barcode.ps.

	// The BWIPJS object (graphics interface)
	var $$ = null;

	// The global dictionary.  Each renderer and encoder declare a
	// $1 local dict.
	var $0 = {
		$error: new Map // the postscript error object
	};

	var $j = 0; // stack pointer
	var $k = []; // operand stack

	// Array ctor
	//	$a()	: Build a new array up to the Infinity-marker on the stack.
	//	$a(arr)	: Convert native array to a "view" of the array.
	//	$a(len)	: Create a new array of length `len`
	function $a(a) {
		if (!arguments.length) {
			for (var i = $j - 1; i >= 0 && $k[i] !== Infinity; i--);
			if (i < 0) {
				throw new Error('array-marker-not-found');
			}
			a = $k.splice(i + 1, $j - 1 - i);
			$j = i;
		} else if (!(a instanceof Array)) {
			a = new Array(+arguments[0]);
			for (var i = 0, l = a.length; i < l; i++) {
				a[i] = null;
			}
		}
		a.b = a; // base array
		a.o = 0; // offset into base
		return a;
	}

	// dict ctor
	//	$d() : look for the Infinity marker on the stack
	function $d() {
		// Build the dictionary in the order the keys/values were pushed so enumeration
		// occurs in the correct sequence.
		for (var mark = $j - 1; mark >= 0 && $k[mark] !== Infinity; mark -= 2) {
			if ($k[mark - 1] === Infinity) {
				throw new Error('dict-malformed-stack');
			}
		}
		if (mark < 0) {
			throw 'dict-marker-not-found';
		}
		var d = new Map;
		for (var i = mark + 1; i < $j; i += 2) {
			// Unlike javascript, postscript dict keys differentiate between
			// numbers and the string representation of a number.
			var k = $k[i]; // "key" into the dict entry
			var t = typeof k;
			if (t == 'number' || t == 'string') {
				d.set(k, $k[i + 1]);
			} else if (k instanceof Uint8Array) {
				d.set($z(k), $k[i + 1]);
			} else {
				throw 'dict-not-a-valid-key(' + k + ')';
			}
		}
		$j = mark;
		return d;
	}

	// string ctor
	//	s(number)	: create zero-filled string of number-length
	//	s(string)	: make a copy of the string
	//	s(uint8[])	: make a copy of the string
	//
	// Returns a Uint8Array-string.
	function $s(v) {
		var t = typeof v;
		if (t === 'number') {
			return new Uint8Array(v);
		}
		if (t !== 'string') {
			v = '' + v;
		}
		var s = new Uint8Array(v.length);
		for (var i = 0; i < v.length; i++) {
			s[i] = v.charCodeAt(i);
		}
		return s;
	}

	// ... n c roll
	function $r(n, c) {
		if ($j < n) {
			throw 'roll: --stack-underflow--';
		}
		if (!c) {
			return;
		}
		if (c < 0) {
			var t = $k.splice($j - n, -c);
		} else {
			var t = $k.splice($j - n, n - c);
		}
		$k.splice.apply($k, [$j - t.length, 0].concat(t));
	}

	// Primarily designed to convert uint8-string to string, but will call the
	// the toString() method on any value.
	function $z(s) {
		if (s instanceof Uint8Array) {
			// Postscript treats nul-char as end of string, even if string is
			// longer.
			for (var i = 0, l = s.length; i < l && s[i]; i++);
			if (i < l) {
				return String.fromCharCode.apply(null, s.subarray(0, i));
			}
			return String.fromCharCode.apply(null, s)
		}
		return '' + s;
	}

	// Copies source to dest and returns a view of just the copied characters
	function $strcpy(dst, src) {
		if (typeof dst === 'string') {
			dst = $s(dst);
		}
		if (src instanceof Uint8Array) {
			for (var i = 0, l = src.length; i < l; i++) {
				dst[i] = src[i];
			}
		} else {
			for (var i = 0, l = src.length; i < l; i++) {
				dst[i] = src.charCodeAt(i);
			}
		}
		return src.length < dst.length ? dst.subarray(0, src.length) : dst;
	}

	// Copies source to dest and should (but doesn't) return a view of just the copied elements
	function $arrcpy(dst, src) {
		for (var i = 0, l = src.length; i < l; i++) {
			dst[i] = src[i];
		}
		dst.length = src.length;
		return dst;
	}

	// cvs operator - convert a value to its string representation
	//	s : string to store into
	//	v : any value
	function $cvs(s, v) {
		var t = typeof v;
		if (t == 'number' || t == 'boolean' || v === null) {
			v = '' + v;
		} else if (t !== 'string') {
			v = '--nostringval--';
		}
		for (var i = 0, l = v.length; i < l; i++) {
			s[i] = v.charCodeAt(i);
		}
		$k[$j++] = i < s.length ? s.subarray(0, i) : s;
	}
	// cvrs operator - convert a number to a radix string
	//	s : string to store into
	//	n : number
	//	r : radix
	function $cvrs(s, n, r) {
		return $strcpy(s, (~~n).toString(r).toUpperCase());
	}

	// get operator
	//	s : source
	//	k : key
	function $get(s, k) {
		if (s instanceof Uint8Array) {
			return s[k];
		}
		if (typeof s === 'string') {
			return s.charCodeAt(k);
		}
		if (s instanceof Array) {
			return s.b[s.o + k];
		}
		if (k instanceof Uint8Array) {
			return s.get($z(k));
		}
		return s.get(k);
	}

	// put operator
	//	d : dest
	//	k : key
	//	v : value
	function $put(d, k, v) {
		if (d instanceof Uint8Array) {
			d[k] = v;
		} else if (d instanceof Array) {
			d.b[d.o + k] = v;
		} else if (typeof d == 'object') {
			if (k instanceof Uint8Array) {
				d.set($z(k), v);
			} else {
				d.set(k, v);
			}
		} else {
			throw 'put-not-writable-' + (typeof d);
		}
	}

	// getinterval operator
	//	s : src
	//	o : offset
	//	l : length
	function $geti(s, o, l) {
		if (s instanceof Uint8Array) {
			return s.subarray(o, o + l);
		}
		if (s instanceof Array) {
			var a = new Array(l);
			a.b = s.b; // base array
			a.o = s.o + o; // offset into base
			return a;
		}
		// Must be a string
		return s.substr(o, l);
	}

	// putinterval operator
	//	d : dst
	//	o : offset
	//	s : src
	function $puti(d, o, s) {
		if (d instanceof Uint8Array) {
			if (typeof s == 'string') {
				for (var i = 0, l = s.length; i < l; i++) {
					d[o + i] = s.charCodeAt(i);
				}
			} else {
				// When both d and s are the same, we want to copy
				// backwards, which works for the general case as well.
				for (var i = s.length - 1; i >= 0; i--) {
					d[o + i] = s[i];
				}
			}
		} else if (d instanceof Array) {
			// Operate on the base arrays
			var darr = d.b;
			var doff = o + d.o;
			var sarr = s.b;
			var soff = s.o;

			for (var i = 0, l = s.length; i < l; i++) {
				darr[doff + i] = sarr[soff + i];
			}
		} else {
			throw 'putinterval-not-writable-' + (typeof d);
		}
	}

	// type operator
	function $type(v) {
		// null can be mis-typed - get it out of the way
		if (v === null || v === undefined) {
			return 'nulltype';
		}
		var t = typeof v;
		if (t == 'number') {
			return v % 1 ? 'realtype' : 'integertype';
		}
		if (t == 'boolean') {
			return 'booleantype';
		}
		if (t == 'string' || v instanceof Uint8Array) {
			return 'stringtype';
		}
		if (t == 'function') {
			return 'operatortype';
		}
		if (v instanceof Array) {
			return 'arraytype';
		}
		return 'dicttype';
		// filetype
		// fonttype
		// gstatetype
		// marktype	(v === Infinity)
		// nametype
		// savetype
	}

	// search operator
	//		string seek search suffix match prefix true %if-found
	//						   string false				%if-not-found
	function $search(str, seek) {
		if (!(str instanceof Uint8Array)) {
			str = $s(str);
		}
		var ls = str.length;

		// Virtually all uses of search in BWIPP are for single-characters.
		// Optimize for that case.
		if (seek.length == 1) {
			var lk = 1;
			var cd = seek instanceof Uint8Array ? seek[0] : seek.charCodeAt(0);
			for (var i = 0; i < ls && str[i] != cd; i++);
		} else {
			// Slow path, 
			if (!(seek instanceof Uint8Array)) {
				seek = $(seek);
			}
			var lk = seek.length;
			var cd = seek[0];
			for (var i = 0; i < ls && str[i] != cd; i++);
			while (i < ls) {
				for (var j = 1; j < lk && str[i + j] === seek[j]; j++);
				if (j === lk) {
					break;
				}
				for (i++; i < ls && str[i] != cd; i++);
			}
		}
		if (i < ls) {
			$k[$j++] = str.subarray(i + lk);
			$k[$j++] = str.subarray(i, i + lk);
			$k[$j++] = str.subarray(0, i);
			$k[$j++] = true;
		} else {
			$k[$j++] = str;
			$k[$j++] = false;
		}
	}

	// The callback is omitted when forall is being used just to push onto the
	// stack.  The callback normally returns undefined.  A return of true means break.
	function $forall(o, cb) {
		if (o instanceof Uint8Array) {
			for (var i = 0, l = o.length; i < l; i++) {
				if (!o[i]) {
					break;
				}
				$k[$j++] = o[i];
				if (cb && cb()) break;
			}
		} else if (o instanceof Array) {
			// The array may be a view.
			for (var a = o.b, i = o.o, l = o.o + o.length; i < l; i++) {
				$k[$j++] = a[i];
				if (cb && cb()) break;
			}
		} else if (typeof o === 'string') {
			for (var i = 0, l = o.length; i < l; i++) {
				$k[$j++] = o.charCodeAt(i);
				if (cb && cb()) break;
			}
		} else if (o instanceof Map) {
			for (var keys = o.keys(), i = 0, l = o.size; i < l; i++) {
				var id = keys.next().value;
				$k[$j++] = id;
				$k[$j++] = o.get(id);
				if (cb && cb()) break;
			}
		} else {
			for (var id in o) {
				$k[$j++] = id;
				$k[$j++] = o[id];
				if (cb && cb()) break;
			}
		}
	}

	function $cleartomark() {
		while ($j > 0 && $k[--$j] !== Infinity);
	}

	function $counttomark() {
		for (var i = $j - 1; i >= 0 && $k[i] !== Infinity; i--);
		return $j - i - 1;
	}

	function $aload(a) {
		for (var i = 0, l = a.length, b = a.b, o = a.o; i < l; i++) {
			$k[$j++] = b[o + i];
		}
		// This push has been optimized out.  See $.aload() in psc.js.
		//$k[$j++] = a;
	}

	function $astore(a) {
		for (var i = 0, l = a.length, b = a.b, o = a.o + l - 1; i < l; i++) {
			b[o - i] = $k[--$j];
		}
		$k[$j++] = a;
	}

	function $eq(a, b) {
		if (typeof a === 'string' && typeof b === 'string') {
			return a == b;
		}
		if (a instanceof Uint8Array && b instanceof Uint8Array) {
			if (a.length != b.length) {
				return false;
			}
			for (var i = 0, l = a.length; i < l; i++) {
				if (a[i] != b[i]) {
					return false;
				}
			}
			return true;
		}
		if (a instanceof Uint8Array && typeof b === 'string' ||
			b instanceof Uint8Array && typeof a === 'string') {
			if (a instanceof Uint8Array) {
				a = $z(a);
			} else {
				b = $z(b);
			}
			return a == b;
		}
		return a == b;
	}

	function $ne(a, b) {
		return !$eq(a, b);
	}

	function $lt(a, b) {
		if (a instanceof Uint8Array) {
			a = $z(a);
		}
		if (b instanceof Uint8Array) {
			b = $z(b);
		}
		return a < b;
	}

	function $le(a, b) {
		if (a instanceof Uint8Array) {
			a = $z(a);
		}
		if (b instanceof Uint8Array) {
			b = $z(b);
		}
		return a <= b;
	}

	function $gt(a, b) {
		if (a instanceof Uint8Array) {
			a = $z(a);
		}
		if (b instanceof Uint8Array) {
			b = $z(b);
		}
		return a > b;
	}

	function $ge(a, b) {
		if (a instanceof Uint8Array) {
			a = $z(a);
		}
		if (b instanceof Uint8Array) {
			b = $z(b);
		}
		return a >= b;
	}

	function $an(a, b) { // and
		return (typeof a === 'boolean') ? a && b : a & b;
	}

	function $or(a, b) { // or
		return (typeof a === 'boolean') ? a || b : a | b;
	}

	function $xo(a, b) { // xor
		return (typeof a === 'boolean') ? !a && b || a && !b : a ^ b;
	}

	function $nt(a) {
		return typeof a == 'boolean' ? !a : ~a;
	}
	// emulate single-precision floating-point (pseudo-polyfill for Math.fround)
	var $f = (function(fa) {
		return function(v) {
			return fa[0] = v, fa[0];
		};
	})(new Float32Array(1));

	// DEBUG-BEGIN
	function $stack() {
		console.log('[[[');
		for (var i = $j - 1; i >= 0; i--) {
			console.log(tostring($k[i]));
		}
		console.log(']]]');

		function tostring(v) {
			// null can be mis-typed - get it out of the way
			if (v === null) {
				return 'null';
			} else if (v === undefined) {
				return '<undefined>';
			} else if (v instanceof Array) {
				var s = '<array,' + v.o + ',' + v.length + '>[';
				for (var j = v.o, a = v.b, l = v.length + v.o; j < l; j++) {
					s += (j == v.o ? '' : ',') + tostring(a[j]);
				}
				return s + ']';
			} else if (v instanceof Uint8Array) {
				return '(' + $z[v] + ')';
			} else if (typeof v === 'object') {
				var s = '<<';
				for (var id in v) {
					s += (s.length == 7 ? '' : ',') + id + ':' + tostring(v[id]);
				}
				return s + '>>';
			} else if (typeof v === 'string') {
				return '"' + v + '"';
			} else {
				return '' + v;
			}
		}
	}
	// DEBUG-END
	$0.raiseerror = function() {
		$put($0.$error, 'errorinfo', $k[--$j]); /*55*/
		$put($0.$error, 'errorname', $k[--$j]); /*56*/
		$put($0.$error, 'command', null); /*57*/
		$put($0.$error, 'newerror', true); /*58*/
		throw new Error($z($0.$error.get("errorname")) + ": " + $z($0.$error.get("errorinfo"))); /*59*/
	};
	$0.renmatrix = function() {
		if ($0.bwipjs_dontdraw) { //no-else/*326*/
			return; /*326*/
		} /*326*/
		var $1 = {}; /*328*/
		$1.args = $k[--$j]; /*330*/
		$1.width = 1; /*333*/
		$1.height = 1; /*334*/
		$1.barcolor = "unset"; /*335*/
		$1.backgroundcolor = "unset"; /*336*/
		$1.colormap = "unset"; /*337*/
		$1.dotty = false; /*338*/
		$1.inkspread = 0; /*339*/
		$1.inkspreadh = 0; /*340*/
		$1.inkspreadv = 0; /*341*/
		$1.includetext = false; /*342*/
		$1.txt = $a([]); /*343*/
		$1.textcolor = "unset"; /*344*/
		$1.textxalign = "unset"; /*345*/
		$1.textyalign = "unset"; /*346*/
		$1.textfont = "OCR-B"; /*347*/
		$1.textsize = 10; /*348*/
		$1.textxoffset = 0; /*349*/
		$1.textyoffset = 0; /*350*/
		$1.textgaps = 0; /*351*/
		$1.alttext = ""; /*352*/
		$forall($1.args, function() {
			/*355*/
			var _4 = $k[--$j]; /*355*/
			$1[$k[--$j]] = _4; /*355*/
		}); /*355*/
		var _6 = $1.opt; /*356*/
		for (var _B = _6.size, _A = _6.keys(), _9 = 0; _9 < _B; _9++) {
			/*356*/
			var _7 = _A.next().value; /*356*/
			$1[_7] = _6.get(_7); /*356*/
		} /*356*/
		$1.width = +$1.width; /*358*/
		$1.height = +$1.height; /*359*/
		$1.barcolor = "" + $1.barcolor; /*360*/
		$1.backgroundcolor = "" + $1.backgroundcolor; /*361*/
		$1.inkspread = +$1.inkspread; /*362*/
		$1.inkspreadh = +$1.inkspreadh; /*363*/
		$1.inkspreadv = +$1.inkspreadv; /*364*/
		$1.textcolor = "" + $1.textcolor; /*365*/
		$1.textxalign = "" + $1.textxalign; /*366*/
		$1.textyalign = "" + $1.textyalign; /*367*/
		$1.textfont = "" + $1.textfont; /*368*/
		$1.textsize = +$1.textsize; /*369*/
		$1.textxoffset = +$1.textxoffset; /*370*/
		$1.textyoffset = +$1.textyoffset; /*371*/
		$1.textgaps = +$1.textgaps; /*372*/
		$1.alttext = "" + $1.alttext; /*373*/
		if ($1.inkspread != 0) { //no-else/*375*/
			$1.inkspreadh = $1.inkspread; /*375*/
		} /*375*/
		if ($1.inkspread != 0) { //no-else/*376*/
			$1.inkspreadv = $1.inkspread; /*376*/
		} /*376*/
		$1.xyget = function() {
			var _X = $k[--$j]; /*378*/
			var _a = $get($1.pixs, $k[--$j] + (_X * $1.pixx)); /*378*/
			$k[$j++] = _a; /*378*/
		}; /*378*/
		$1.cget = function() {
			var _c = $k[--$j]; /*379*/
			var _f = $get($1.cache, $k[--$j] + (_c * $1.pixx)); /*379*/
			var _g = $k[--$j]; /*379*/
			$k[$j++] = $an(_g, _f); /*379*/
		}; /*379*/
		$1.cput = function() {
			var _h = $k[--$j]; /*381*/
			$k[$j++] = _h; /*385*/
			if ((_h % 4) == 0) {
				/*384*/
				var _i = $k[--$j]; /*382*/
				var _j = $k[--$j]; /*382*/
				var _k = $k[--$j]; /*382*/
				var _l = $1.pixx; /*382*/
				var _m = $1.cache; /*382*/
				$put(_m, _k + (_j * _l), $or($get(_m, _k + (_j * _l)), _i)); /*382*/
			} else {
				/*384*/
				$j -= 3; /*384*/
			} /*384*/
		}; /*386*/
		$1.abcd = function() {
			$k[$j++] = $s(4); /*393*/
			$k[$j++] = 0; /*393*/
			$k[$j++] = Infinity; /*393*/
			var _p = $k[--$j]; /*390*/
			var _q = $k[--$j]; /*390*/
			var _r = $k[--$j]; /*390*/
			var _s = $k[--$j]; /*390*/
			var _v = $k[--$j] + (_s * $1.pixx); /*391*/
			$k[$j++] = _r; /*392*/
			$k[$j++] = _q; /*392*/
			$k[$j++] = _p; /*392*/
			$k[$j++] = _v; /*392*/
			$aload($geti($1.pixs, _v, 2)); /*392*/
			var _y = $k[--$j]; /*392*/
			var _z = $k[--$j]; /*392*/
			var _13 = $geti($1.pixs, $k[--$j] + $1.pixx, 2); /*393*/
			$k[$j++] = _z; /*393*/
			$k[$j++] = _y; /*393*/
			$aload(_13); /*393*/
			var _14 = $a(); /*393*/
			for (var _15 = 0, _16 = _14.length; _15 < _16; _15++) {
				/*394*/
				var _18 = $k[--$j]; /*394*/
				var _19 = $k[--$j]; /*394*/
				$put(_19, _18, $get(_14, _15) + 48); /*394*/
				$k[$j++] = _19; /*394*/
				$k[$j++] = _18 + 1; /*394*/
			} /*394*/
			$j--; /*394*/
		}; /*395*/
		$1.right = function() {
			if ($1.dir != 1) { //no-else/*397*/
				$k[$j++] = $1.x; /*397*/
				$k[$j++] = $1.y; /*397*/
				$k[$j++] = $1.dir; /*397*/
				$1.cput(); /*397*/
				$k[$j++] = $a([$1.x, $1.y]); /*397*/
			} /*397*/
			$1.x = $1.x + 1; /*397*/
			$1.dir = 1; /*397*/
		}; /*397*/
		$1.down = function() {
			if ($1.dir != 2) { //no-else/*398*/
				$k[$j++] = $1.x; /*398*/
				$k[$j++] = $1.y; /*398*/
				$k[$j++] = $1.dir; /*398*/
				$1.cput(); /*398*/
				$k[$j++] = $a([$1.x, $1.y]); /*398*/
			} /*398*/
			$1.y = $1.y + 1; /*398*/
			$1.dir = 2; /*398*/
		}; /*398*/
		$1.left = function() {
			if ($1.dir != 4) { //no-else/*399*/
				$k[$j++] = $1.x; /*399*/
				$k[$j++] = $1.y; /*399*/
				$k[$j++] = $1.dir; /*399*/
				$1.cput(); /*399*/
				$k[$j++] = $a([$1.x, $1.y]); /*399*/
			} /*399*/
			$1.x = $1.x - 1; /*399*/
			$1.dir = 4; /*399*/
		}; /*399*/
		$1.up = function() {
			if ($1.dir != 8) { //no-else/*400*/
				$k[$j++] = $1.x; /*400*/
				$k[$j++] = $1.y; /*400*/
				$k[$j++] = $1.dir; /*400*/
				$1.cput(); /*400*/
				$k[$j++] = $a([$1.x, $1.y]); /*400*/
			} /*400*/
			$1.y = $1.y - 1; /*400*/
			$1.dir = 8; /*400*/
		}; /*400*/
		$1.trace = function() {
			$1.y = $k[--$j]; /*404*/
			$1.x = $k[--$j]; /*404*/
			$k[$j++] = 'dir'; /*406*/
			$k[$j++] = $1.x + 1; /*406*/
			$k[$j++] = $1.y + 1; /*406*/
			$1.xyget(); /*406*/
			var _1l = ($k[--$j] == 1) ? 8 : 4; /*406*/
			$1[$k[--$j]] = _1l; /*406*/
			$1.sx = $1.x; /*407*/
			$1.sy = $1.y; /*407*/
			$1.sdir = $1.dir; /*407*/
			$k[$j++] = Infinity; /*411*/
			for (;;) {
				/*425*/
				$k[$j++] = $1.x; /*412*/
				$k[$j++] = $1.y; /*412*/
				$1.abcd(); /*412*/
				for (var _1s = 0, _1t = 1; _1s < _1t; _1s++) {
					/*423*/
					var _1u = $k[--$j]; /*414*/
					$k[$j++] = _1u; /*414*/
					if ($eq(_1u, "0001") || ($eq(_1u, "0011") || $eq(_1u, "1011"))) { //no-else/*414*/
						$j--; /*414*/
						$1.right(); /*414*/
						break; /*414*/
					} /*414*/
					var _1v = $k[--$j]; /*415*/
					$k[$j++] = _1v; /*415*/
					if ($eq(_1v, "0010") || ($eq(_1v, "1010") || $eq(_1v, "1110"))) { //no-else/*415*/
						$j--; /*415*/
						$1.down(); /*415*/
						break; /*415*/
					} /*415*/
					var _1w = $k[--$j]; /*416*/
					$k[$j++] = _1w; /*416*/
					if ($eq(_1w, "1000") || ($eq(_1w, "1100") || $eq(_1w, "1101"))) { //no-else/*416*/
						$j--; /*416*/
						$1.left(); /*416*/
						break; /*416*/
					} /*416*/
					var _1x = $k[--$j]; /*417*/
					$k[$j++] = _1x; /*417*/
					if ($eq(_1x, "0100") || ($eq(_1x, "0101") || $eq(_1x, "0111"))) { //no-else/*417*/
						$j--; /*417*/
						$1.up(); /*417*/
						break; /*417*/
					} /*417*/
					var _1y = $k[--$j]; /*418*/
					$k[$j++] = _1y; /*422*/
					if ($eq(_1y, "1001")) {
						/*421*/
						if ($1.dir == 2) {
							/*419*/
							$j--; /*419*/
							$1.left(); /*419*/
							break; /*419*/
						} else {
							/*419*/
							$j--; /*419*/
							$1.right(); /*419*/
							break; /*419*/
						} /*419*/
					} else {
						/*421*/
						if ($1.dir == 1) {
							/*421*/
							$j--; /*421*/
							$1.down(); /*421*/
							break; /*421*/
						} else {
							/*421*/
							$j--; /*421*/
							$1.up(); /*421*/
							break; /*421*/
						} /*421*/
					} /*421*/
				} /*421*/
				if (($eq($1.x, $1.sx) && $eq($1.y, $1.sy)) && ($1.dir == $1.sdir)) { //no-else/*424*/
					break; /*424*/
				} /*424*/
			} /*424*/
			$astore($a($counttomark())); /*426*/
			var _29 = $k[--$j]; /*426*/
			var _2A = $k[--$j]; /*426*/
			$k[$j++] = _29; /*426*/
		}; /*428*/
		$1.drawlayer = function() {
			$1.pixsorig = $1.pixs; /*444*/
			$1.pixs = $k[--$j]; /*445*/
			$k[$j++] = Infinity; /*455*/
			for (var _2E = 0, _2F = $1.pixx + 2; _2E < _2F; _2E++) {
				/*449*/
				$k[$j++] = 0; /*449*/
			} /*449*/
			for (var _2J = 0, _2K = $1.pixx, _2I = $1.pixs.length - 1; _2K < 0 ? _2J >= _2I : _2J <= _2I; _2J += _2K) {
				/*454*/
				$k[$j++] = 0; /*452*/
				$aload($geti($1.pixs, _2J, $1.pixx)); /*452*/
				$k[$j++] = 0; /*453*/
			} /*453*/
			for (var _2P = 0, _2Q = $1.pixx + 2; _2P < _2Q; _2P++) {
				/*455*/
				$k[$j++] = 0; /*455*/
			} /*455*/
			$1.pixs = $a(); /*455*/
			$1.pixx = $1.pixx + 2; /*457*/
			$1.pixy = $1.pixy + 2; /*458*/
			$k[$j++] = Infinity; /*461*/
			for (var _2V = 0, _2W = $1.pixs.length; _2V < _2W; _2V++) {
				/*461*/
				$k[$j++] = 0; /*461*/
			} /*461*/
			$1.cache = $a(); /*461*/
			$k[$j++] = Infinity; /*477*/
			for (var _2a = 0, _2Z = $1.pixy - 2; _2a <= _2Z; _2a += 1) {
				/*481*/
				$1.j = _2a; /*466*/
				for (var _2d = 0, _2c = $1.pixx - 2; _2d <= _2c; _2d += 1) {
					/*480*/
					$1.i = _2d; /*468*/
					$k[$j++] = 'k'; /*469*/
					$k[$j++] = $1.i; /*469*/
					$k[$j++] = $1.j; /*469*/
					$1.abcd(); /*469*/
					var _2g = $k[--$j]; /*469*/
					$1[$k[--$j]] = _2g; /*469*/
					if ($eq($1.k, "0001") || $eq($1.k, "1001")) { //no-else/*474*/
						$k[$j++] = 8; /*471*/
						$k[$j++] = $1.i; /*471*/
						$k[$j++] = $1.j; /*471*/
						$1.cget(); /*471*/
						if ($k[--$j] == 0) { //no-else/*473*/
							$k[$j++] = $1.i; /*472*/
							$k[$j++] = $1.j; /*472*/
							$1.trace(); /*472*/
						} /*472*/
					} /*472*/
					if ($eq($1.k, "1110")) { //no-else/*479*/
						$k[$j++] = 4; /*476*/
						$k[$j++] = $1.i; /*476*/
						$k[$j++] = $1.j; /*476*/
						$1.cget(); /*476*/
						if ($k[--$j] == 0) { //no-else/*478*/
							$k[$j++] = $1.i; /*477*/
							$k[$j++] = $1.j; /*477*/
							$1.trace(); /*477*/
						} /*477*/
					} /*477*/
				} /*477*/
			} /*477*/
			$1.paths = $a(); /*477*/
			$1.pixx = $1.pixx - 2; /*485*/
			$1.pixy = $1.pixy - 2; /*486*/
			$$.newpath(); /*489*/
			var _2y = $1.paths; /*490*/
			for (var _2z = 0, _30 = _2y.length; _2z < _30; _2z++) {
				/*508*/
				$1.p = $get(_2y, _2z); /*491*/
				$1.len = $1.p.length; /*492*/
				$aload($get($1.p, $1.len - 1)); /*493*/
				$aload($get($1.p, 0)); /*494*/
				for (var _3A = 0, _39 = $1.len - 1; _3A <= _39; _3A += 1) {
					/*505*/
					$1.i = _3A; /*496*/
					$aload($get($1.p, ($1.i + 1) % $1.len)); /*497*/
					var _3F = $k[--$j]; /*497*/
					var _3G = $k[--$j]; /*497*/
					var _3H = $k[--$j]; /*497*/
					var _3I = $k[--$j]; /*497*/
					var _3J = $k[--$j]; /*497*/
					var _3K = $k[--$j]; /*497*/
					$k[$j++] = _3I; /*499*/
					$k[$j++] = _3H; /*499*/
					$k[$j++] = _3G; /*499*/
					$k[$j++] = _3F; /*499*/
					$k[$j++] = _3K; /*499*/
					$k[$j++] = _3I; /*499*/
					$k[$j++] = $1.inkspreadh; /*499*/
					if ($lt(_3F, _3J)) {
						/*499*/
						var _3M = $k[--$j]; /*499*/
						var _3N = $k[--$j]; /*499*/
						$k[$j++] = _3N + _3M; /*499*/
					} else {
						/*499*/
						var _3O = $k[--$j]; /*499*/
						var _3P = $k[--$j]; /*499*/
						$k[$j++] = _3P - _3O; /*499*/
					} /*499*/
					var _3Q = $k[--$j]; /*500*/
					var _3R = $k[--$j]; /*500*/
					var _3S = $k[--$j]; /*500*/
					var _3T = $k[--$j]; /*500*/
					var _3U = $k[--$j]; /*501*/
					$k[$j++] = _3U; /*502*/
					$k[$j++] = _3Q; /*502*/
					$k[$j++] = _3T; /*502*/
					$k[$j++] = _3S; /*502*/
					$k[$j++] = _3U; /*502*/
					$k[$j++] = $1.inkspreadv; /*502*/
					if ($gt(_3T, _3R)) {
						/*502*/
						var _3W = $k[--$j]; /*502*/
						var _3X = $k[--$j]; /*502*/
						$k[$j++] = _3X + _3W; /*502*/
					} else {
						/*502*/
						var _3Y = $k[--$j]; /*502*/
						var _3Z = $k[--$j]; /*502*/
						$k[$j++] = _3Z - _3Y; /*502*/
					} /*502*/
					var _3a = $k[--$j]; /*503*/
					var _3b = $k[--$j]; /*503*/
					var _3c = $k[--$j]; /*503*/
					var _3d = $k[--$j]; /*503*/
					$k[$j++] = _3c; /*504*/
					$k[$j++] = _3b; /*504*/
					$k[$j++] = _3d; /*504*/
					$k[$j++] = $1.pixy - _3a; /*504*/
					if ($1.i == 0) {
						/*504*/
						var _3g = $k[--$j]; /*504*/
						$$.moveto($k[--$j], _3g); /*504*/
					} else {
						/*504*/
						var _3i = $k[--$j]; /*504*/
						$$.lineto($k[--$j], _3i); /*504*/
					} /*504*/
				} /*504*/
				$$.closepath(); /*506*/
				$j -= 4; /*507*/
			} /*507*/
			$$.fill(); /*509*/
			$1.pixs = $1.pixsorig; /*511*/
		}; /*513*/
		$1.drawlayerdots = function() {
			$1.pixsorig = $1.pixs; /*517*/
			$1.pixs = $k[--$j]; /*518*/
			$$.newpath(); /*520*/
			for (var _3p = 0, _3o = $1.pixs.length - 1; _3p <= _3o; _3p += 1) {
				/*528*/
				$1.x = _3p % $1.pixx; /*522*/
				$1.y = ~~(_3p / $1.pixx); /*523*/
				$k[$j++] = $1.x; /*524*/
				$k[$j++] = $1.y; /*524*/
				$1.xyget(); /*524*/
				if ($k[--$j] == 1) { //no-else/*527*/
					$$.moveto($1.x + 0.5, ($1.pixy - $1.y) - 0.5); /*525*/
					$$.arc($1.x + 0.5, ($1.pixy - $1.y) - 0.5, 0.5 - $1.inkspread, 0, 360, 1); /*526*/
				} /*526*/
			} /*526*/
			$$.fill(); /*529*/
			$1.pixs = $1.pixsorig; /*531*/
		}; /*533*/
		$$.save(); /*535*/
		$1.inkspread = $1.inkspread / 2; /*538*/
		$1.inkspreadh = $1.inkspreadh / 2; /*539*/
		$1.inkspreadv = $1.inkspreadv / 2; /*540*/
		var _46 = $$.currpos(); /*541*/
		$$.translate(_46.x, _46.y); /*541*/
		$$.scale(($1.width / $1.pixx) * 72, ($1.height / $1.pixy) * 72); /*542*/
		$$.moveto(0, 0); /*543*/
		$$.lineto($1.pixx, 0); /*543*/
		$$.lineto($1.pixx, $1.pixy); /*543*/
		$$.lineto(0, $1.pixy); /*543*/
		$$.closepath(); /*543*/
		if ($eq($1.colormap, "unset")) { //no-else/*548*/
			var _4H = new Map([
				[1, $1.barcolor]
			]); /*547*/
			$1.colormap = _4H; /*547*/
		} /*547*/
		var _4I = $1.colormap; /*550*/
		for (var _4N = _4I.size, _4M = _4I.keys(), _4L = 0; _4L < _4N; _4L++) {
			/*556*/
			var _4J = _4M.next().value; /*556*/
			$$.setcolor(_4I.get(_4J)); /*551*/
			$1.key = _4J; /*552*/
			$k[$j++] = Infinity; /*554*/
			var _4O = $1.pixs; /*554*/
			for (var _4P = 0, _4Q = _4O.length; _4P < _4Q; _4P++) {
				/*554*/
				var _4T = $eq($get(_4O, _4P), $1.key) ? 1 : 0; /*554*/
				$k[$j++] = _4T; /*554*/
			} /*554*/
			var _4U = $a(); /*554*/
			$k[$j++] = _4U; /*555*/
			if ($1.dotty) {
				/*555*/
				$1.drawlayerdots(); /*555*/
			} else {
				/*555*/
				$1.drawlayer(); /*555*/
			} /*555*/
		} /*555*/
		if ($ne($1.textcolor, "unset")) { //no-else/*559*/
			$$.setcolor($1.textcolor); /*559*/
		} /*559*/
		if ($1.includetext) { //no-else/*616*/
			if (($eq($1.textxalign, "unset") && $eq($1.textyalign, "unset")) && $eq($1.alttext, "")) {
				/*614*/
				$1.s = 0; /*562*/
				$1.fn = ""; /*562*/
				var _4c = $1.txt; /*563*/
				for (var _4d = 0, _4e = _4c.length; _4d < _4e; _4d++) {
					/*572*/
					$forall($get(_4c, _4d)); /*564*/
					var _4g = $k[--$j]; /*565*/
					var _4h = $k[--$j]; /*565*/
					$k[$j++] = _4h; /*570*/
					$k[$j++] = _4g; /*570*/
					if ((_4g != $1.s) || $ne(_4h, $1.fn)) {
						/*569*/
						var _4k = $k[--$j]; /*566*/
						var _4l = $k[--$j]; /*566*/
						$1.s = _4k; /*566*/
						$1.fn = _4l; /*566*/
						$$.selectfont(_4l, _4k); /*567*/
					} else {
						/*569*/
						$j -= 2; /*569*/
					} /*569*/
					var _4m = $k[--$j]; /*571*/
					$$.moveto($k[--$j], _4m); /*571*/
					$$.show($k[--$j], 0, 0); /*571*/
				} /*571*/
			} else {
				/*614*/
				$$.selectfont($1.textfont, $1.textsize); /*574*/
				if ($eq($1.alttext, "")) {
					/*580*/
					$k[$j++] = Infinity; /*576*/
					var _4s = $1.txt; /*576*/
					for (var _4t = 0, _4u = _4s.length; _4t < _4u; _4t++) {
						/*576*/
						$forall($get($get(_4s, _4t), 0)); /*576*/
					} /*576*/
					$1.txt = $a(); /*576*/
					$1.tstr = $s($1.txt.length); /*577*/
					for (var _52 = 0, _51 = $1.txt.length - 1; _52 <= _51; _52 += 1) {
						/*578*/
						$put($1.tstr, _52, $get($1.txt, _52)); /*578*/
					} /*578*/
				} else {
					/*580*/
					$1.tstr = $1.alttext; /*580*/
				} /*580*/
				if ($1.tstr.length == 0) {
					/*590*/
					$k[$j++] = 0; /*585*/
				} else {
					/*590*/
					$$.save(); /*587*/
					$$.newpath(); /*588*/
					$$.moveto(0, 0); /*588*/
					$$.charpath("0", false); /*588*/
					var _58 = $$.pathbbox(); /*588*/
					$$.restore(); /*590*/
					$k[$j++] = _58.ury; /*590*/
				} /*590*/
				$1.textascent = $k[--$j]; /*599*/
				var _5B = $$.stringwidth($1.tstr); /*600*/
				$1.textwidth = _5B.w + (($1.tstr.length - 1) * $1.textgaps); /*600*/
				$1.textxpos = $1.textxoffset + (($1.x - $1.textwidth) / 2); /*602*/
				if ($eq($1.textxalign, "left")) { //no-else/*603*/
					$1.textxpos = $1.textxoffset; /*603*/
				} /*603*/
				if ($eq($1.textxalign, "right")) { //no-else/*604*/
					$1.textxpos = ($1.x - $1.textxoffset) - $1.textwidth; /*604*/
				} /*604*/
				if ($eq($1.textxalign, "offleft")) { //no-else/*605*/
					$1.textxpos = -($1.textwidth + $1.textxoffset); /*605*/
				} /*605*/
				if ($eq($1.textxalign, "offright")) { //no-else/*606*/
					$1.textxpos = $1.x + $1.textxoffset; /*606*/
				} /*606*/
				if ($eq($1.textxalign, "justify") && ($1.textwidth < $1.x)) { //no-else/*610*/
					$1.textxpos = 0; /*608*/
					$1.textgaps = ($1.x - $1.textwidth) / ($1.tstr.length - 1); /*609*/
				} /*609*/
				$1.textypos = -(($1.textyoffset + $1.textascent) + 1); /*611*/
				if ($eq($1.textyalign, "above")) { //no-else/*612*/
					$1.textypos = ($1.textyoffset + $1.pixy) + 1; /*612*/
				} /*612*/
				if ($eq($1.textyalign, "center")) { //no-else/*613*/
					$1.textypos = $1.textyoffset + (($1.pixy - $1.textascent) / 2); /*613*/
				} /*613*/
				$$.moveto($1.textxpos, $1.textypos); /*614*/
				$$.show($1.tstr, $1.textgaps, 0); /*614*/
			} /*614*/
		} /*614*/
		$$.restore(); /*618*/
	};
	$0.ean5 = function() {
		var $1 = {}; /*736*/
		$1.options = $k[--$j]; /*738*/
		$1.barcode = $k[--$j]; /*739*/
		$1.dontdraw = false; /*741*/
		$1.includetext = false; /*742*/
		$1.textfont = "OCR-B"; /*743*/
		$1.textsize = 12; /*744*/
		$1.textxoffset = 0; /*745*/
		$1.textyoffset = "unset"; /*746*/
		$1.height = 0.7; /*747*/
		$forall($1.options, function() {
			/*758*/
			var _3 = $k[--$j]; /*758*/
			$1[$k[--$j]] = _3; /*758*/
		}); /*758*/
		$1.textfont = "" + $1.textfont; /*760*/
		$1.textsize = +$1.textsize; /*761*/
		$1.height = +$1.height; /*762*/
		$1.textxoffset = +$1.textxoffset; /*763*/
		if ($eq($1.textyoffset, "unset")) {
			/*767*/
			$1.textyoffset = ($1.height * 72) + 1; /*765*/
		} else {
			/*767*/
			$1.textyoffset = +$1.textyoffset; /*767*/
		} /*767*/
		if ($1.barcode.length != 5) { //no-else/*773*/
			$k[$j++] = 'bwipp.ean5badLength'; /*772*/
			$k[$j++] = "EAN-5 add-on must be 5 digits"; /*772*/
			$0.raiseerror(); /*772*/
		} /*772*/
		$forall($1.barcode, function() {
			/*778*/
			var _E = $k[--$j]; /*775*/
			if ((_E < 48) || (_E > 57)) { //no-else/*777*/
				$k[$j++] = 'bwipp.ean5badCharacter'; /*776*/
				$k[$j++] = "EAN-5 add-on must contain only digits"; /*776*/
				$0.raiseerror(); /*776*/
			} /*776*/
		}); /*776*/
		$1.encs = $a(["3211", "2221", "2122", "1411", "1132", "1231", "1114", "1312", "1213", "3112", "112", "11"]); /*785*/
		$1.barchars = "0123456789"; /*788*/
		$1.mirrormaps = $a(["11000", "10100", "10010", "10001", "01100", "00110", "00011", "01010", "01001", "00101"]); /*794*/
		$1.checksum = 0; /*795*/
		for (var _H = 0; _H <= 4; _H += 1) {
			/*804*/
			$1.i = _H; /*797*/
			$1.barchar = $get($1.barcode, $1.i) - 48; /*798*/
			if (($1.i % 2) == 0) {
				/*802*/
				$1.checksum = ($1.barchar * 3) + $1.checksum; /*800*/
			} else {
				/*802*/
				$1.checksum = ($1.barchar * 9) + $1.checksum; /*802*/
			} /*802*/
		} /*802*/
		$1.checksum = $1.checksum % 10; /*805*/
		$1.mirrormap = $get($1.mirrormaps, $1.checksum); /*806*/
		$1.sbs = $s(31); /*808*/
		$1.txt = $a(5); /*809*/
		for (var _W = 0; _W <= 4; _W += 1) {
			/*839*/
			$1.i = _W; /*812*/
			if ($1.i == 0) {
				/*818*/
				$puti($1.sbs, 0, $get($1.encs, 10)); /*816*/
			} else {
				/*818*/
				$puti($1.sbs, (($1.i - 1) * 6) + 7, $get($1.encs, 11)); /*818*/
			} /*818*/
			$search($1.barchars, $geti($1.barcode, $1.i, 1)); /*822*/
			$j--; /*823*/
			$1.indx = $k[--$j].length; /*824*/
			$j -= 2; /*825*/
			$1.enc = $get($1.encs, $1.indx); /*826*/
			if ($get($1.mirrormap, $1.i) == 49) { //no-else/*836*/
				$1.enclen = $1.enc.length; /*828*/
				$1.revenc = $s($1.enclen); /*829*/
				for (var _v = 0, _u = $1.enclen - 1; _v <= _u; _v += 1) {
					/*834*/
					$1.j = _v; /*831*/
					$1.char = $get($1.enc, $1.j); /*832*/
					$put($1.revenc, ($1.enclen - $1.j) - 1, $1.char); /*833*/
				} /*833*/
				$1.enc = $1.revenc; /*835*/
			} /*835*/
			$puti($1.sbs, ($1.i * 6) + 3, $1.enc); /*837*/
			$put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), ((($1.i - 1) * 9) + 13) + $1.textxoffset, $1.textyoffset, $1.textfont, $1.textsize])); /*838*/
		} /*838*/
		$k[$j++] = Infinity; /*853*/
		$k[$j++] = Infinity; /*844*/
		var _1I = $1.sbs; /*844*/
		for (var _1J = 0, _1K = _1I.length; _1J < _1K; _1J++) {
			/*844*/
			$k[$j++] = $get(_1I, _1J) - 48; /*844*/
		} /*844*/
		var _1M = $a(); /*844*/
		$k[$j++] = Infinity; /*845*/
		for (var _1N = 0, _1O = 16; _1N < _1O; _1N++) {
			/*845*/
			$k[$j++] = $1.height; /*845*/
		} /*845*/
		var _1Q = $a(); /*845*/
		$k[$j++] = Infinity; /*846*/
		for (var _1R = 0, _1S = 16; _1R < _1S; _1R++) {
			/*846*/
			$k[$j++] = 0; /*846*/
		} /*846*/
		var _1T = $a(); /*846*/
		$k[$j++] = 'ren'; /*849*/
		$k[$j++] = $0.renlinear; /*849*/
		$k[$j++] = 'sbs'; /*849*/
		$k[$j++] = _1M; /*849*/
		$k[$j++] = 'bhs'; /*849*/
		$k[$j++] = _1Q; /*849*/
		$k[$j++] = 'bbs'; /*849*/
		$k[$j++] = _1T; /*849*/
		if ($1.includetext) { //no-else/*849*/
			$k[$j++] = 'txt'; /*848*/
			$k[$j++] = $1.txt; /*848*/
		} /*848*/
		$k[$j++] = 'opt'; /*853*/
		$k[$j++] = $1.options; /*853*/
		$k[$j++] = 'guardrightpos'; /*853*/
		$k[$j++] = 10; /*853*/
		$k[$j++] = 'guardrightypos'; /*853*/
		$k[$j++] = $1.textyoffset + 4; /*853*/
		$k[$j++] = 'bordertop'; /*853*/
		$k[$j++] = 10; /*853*/
		var _1Y = $d(); /*853*/
		$k[$j++] = _1Y; /*856*/
		if (!$1.dontdraw) { //no-else/*856*/
			$0.renlinear(); /*856*/
		} /*856*/
	};
	$0.ean2 = function() {
		var $1 = {}; /*885*/
		$1.options = $k[--$j]; /*887*/
		$1.barcode = $k[--$j]; /*888*/
		$1.dontdraw = false; /*890*/
		$1.includetext = false; /*891*/
		$1.textfont = "OCR-B"; /*892*/
		$1.textsize = 12; /*893*/
		$1.textxoffset = 0; /*894*/
		$1.textyoffset = "unset"; /*895*/
		$1.height = 0.7; /*896*/
		$forall($1.options, function() {
			/*907*/
			var _3 = $k[--$j]; /*907*/
			$1[$k[--$j]] = _3; /*907*/
		}); /*907*/
		$1.textfont = "" + $1.textfont; /*909*/
		$1.textsize = +$1.textsize; /*910*/
		$1.height = +$1.height; /*911*/
		$1.textxoffset = +$1.textxoffset; /*912*/
		if ($eq($1.textyoffset, "unset")) {
			/*916*/
			$1.textyoffset = ($1.height * 72) + 1; /*914*/
		} else {
			/*916*/
			$1.textyoffset = +$1.textyoffset; /*916*/
		} /*916*/
		if ($1.barcode.length != 2) { //no-else/*922*/
			$k[$j++] = 'bwipp.ean2badLength'; /*921*/
			$k[$j++] = "EAN-2 add-on must be 2 digits"; /*921*/
			$0.raiseerror(); /*921*/
		} /*921*/
		$forall($1.barcode, function() {
			/*927*/
			var _E = $k[--$j]; /*924*/
			if ((_E < 48) || (_E > 57)) { //no-else/*926*/
				$k[$j++] = 'bwipp.ean2badCharacter'; /*925*/
				$k[$j++] = "EAN-2 add-on must contain only digits"; /*925*/
				$0.raiseerror(); /*925*/
			} /*925*/
		}); /*925*/
		$1.encs = $a(["3211", "2221", "2122", "1411", "1132", "1231", "1114", "1312", "1213", "3112", "112", "11"]); /*934*/
		$1.barchars = "0123456789"; /*937*/
		$1.mirrormap = $get($a(["00", "01", "10", "11"]), (~~$z($geti($1.barcode, 0, 2))) % 4); /*940*/
		$1.sbs = $s(13); /*942*/
		$1.txt = $a(2); /*943*/
		for (var _M = 0; _M <= 1; _M += 1) {
			/*973*/
			$1.i = _M; /*946*/
			if ($1.i == 0) {
				/*952*/
				$puti($1.sbs, 0, $get($1.encs, 10)); /*950*/
			} else {
				/*952*/
				$puti($1.sbs, (($1.i - 1) * 6) + 7, $get($1.encs, 11)); /*952*/
			} /*952*/
			$search($1.barchars, $geti($1.barcode, $1.i, 1)); /*956*/
			$j--; /*957*/
			$1.indx = $k[--$j].length; /*958*/
			$j -= 2; /*959*/
			$1.enc = $get($1.encs, $1.indx); /*960*/
			if ($get($1.mirrormap, $1.i) == 49) { //no-else/*970*/
				$1.enclen = $1.enc.length; /*962*/
				$1.revenc = $s($1.enclen); /*963*/
				for (var _l = 0, _k = $1.enclen - 1; _l <= _k; _l += 1) {
					/*968*/
					$1.j = _l; /*965*/
					$1.char = $get($1.enc, $1.j); /*966*/
					$put($1.revenc, ($1.enclen - $1.j) - 1, $1.char); /*967*/
				} /*967*/
				$1.enc = $1.revenc; /*969*/
			} /*969*/
			$puti($1.sbs, ($1.i * 6) + 3, $1.enc); /*971*/
			$put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), ((($1.i - 1) * 9) + 13) + $1.textxoffset, $1.textyoffset, $1.textfont, $1.textsize])); /*972*/
		} /*972*/
		$k[$j++] = Infinity; /*987*/
		$k[$j++] = Infinity; /*978*/
		var _18 = $1.sbs; /*978*/
		for (var _19 = 0, _1A = _18.length; _19 < _1A; _19++) {
			/*978*/
			$k[$j++] = $get(_18, _19) - 48; /*978*/
		} /*978*/
		var _1C = $a(); /*978*/
		$k[$j++] = Infinity; /*979*/
		for (var _1D = 0, _1E = 12; _1D < _1E; _1D++) {
			/*979*/
			$k[$j++] = $1.height; /*979*/
		} /*979*/
		var _1G = $a(); /*979*/
		$k[$j++] = Infinity; /*980*/
		for (var _1H = 0, _1I = 12; _1H < _1I; _1H++) {
			/*980*/
			$k[$j++] = 0; /*980*/
		} /*980*/
		var _1J = $a(); /*980*/
		$k[$j++] = 'ren'; /*983*/
		$k[$j++] = $0.renlinear; /*983*/
		$k[$j++] = 'sbs'; /*983*/
		$k[$j++] = _1C; /*983*/
		$k[$j++] = 'bhs'; /*983*/
		$k[$j++] = _1G; /*983*/
		$k[$j++] = 'bbs'; /*983*/
		$k[$j++] = _1J; /*983*/
		if ($1.includetext) { //no-else/*983*/
			$k[$j++] = 'txt'; /*982*/
			$k[$j++] = $1.txt; /*982*/
		} /*982*/
		$k[$j++] = 'opt'; /*987*/
		$k[$j++] = $1.options; /*987*/
		$k[$j++] = 'guardrightpos'; /*987*/
		$k[$j++] = 10; /*987*/
		$k[$j++] = 'guardrightypos'; /*987*/
		$k[$j++] = $1.textyoffset + 4; /*987*/
		$k[$j++] = 'bordertop'; /*987*/
		$k[$j++] = 10; /*987*/
		var _1O = $d(); /*987*/
		$k[$j++] = _1O; /*990*/
		if (!$1.dontdraw) { //no-else/*990*/
			$0.renlinear(); /*990*/
		} /*990*/
	};
	$0.ean13 = function() {
		var $1 = {}; /*1021*/
		$1.options = $k[--$j]; /*1023*/
		$1.barcode = $k[--$j]; /*1024*/
		$1.dontdraw = false; /*1026*/
		$1.includetext = false; /*1027*/
		$1.textfont = "OCR-B"; /*1028*/
		$1.textsize = 12; /*1029*/
		$1.textxoffset = -10; /*1030*/
		$1.textyoffset = -4.5; /*1031*/
		$1.height = 1; /*1032*/
		$1.addongap = 12; /*1033*/
		$1.addontextfont = "unset"; /*1034*/
		$1.addontextsize = "unset"; /*1035*/
		$1.addontextxoffset = "unset"; /*1036*/
		$1.addontextyoffset = "unset"; /*1037*/
		$forall($1.options, function() {
			/*1048*/
			var _3 = $k[--$j]; /*1048*/
			$1[$k[--$j]] = _3; /*1048*/
		}); /*1048*/
		$1.textfont = "" + $1.textfont; /*1050*/
		$1.textsize = +$1.textsize; /*1051*/
		$1.textxoffset = +$1.textxoffset; /*1052*/
		$1.textyoffset = +$1.textyoffset; /*1053*/
		$1.height = +$1.height; /*1054*/
		$1.addongap = +$1.addongap; /*1055*/
		if ($ne($1.addontextfont, "unset")) { //no-else/*1056*/
			$1.addontextfont = "" + $1.addontextfont; /*1056*/
		} /*1056*/
		if ($ne($1.addontextsize, "unset")) { //no-else/*1057*/
			$1.addontextsize = +$1.addontextsize; /*1057*/
		} /*1057*/
		if ($ne($1.addontextxoffset, "unset")) { //no-else/*1058*/
			$1.addontextxoffset = +$1.addontextxoffset; /*1058*/
		} /*1058*/
		if ($ne($1.addontextyoffset, "unset")) { //no-else/*1059*/
			$1.addontextyoffset = +$1.addontextyoffset; /*1059*/
		} /*1059*/
		$search($1.barcode, " "); /*1062*/
		if ($k[--$j]) {
			/*1068*/
			$1.barcode = $k[--$j]; /*1063*/
			$j--; /*1064*/
			$1.addon = $k[--$j]; /*1065*/
		} else {
			/*1068*/
			$j--; /*1067*/
			$1.addon = ""; /*1068*/
		} /*1068*/
		if (($1.barcode.length != 12) && ($1.barcode.length != 13)) { //no-else/*1074*/
			$k[$j++] = 'bwipp.ean13badLength'; /*1073*/
			$k[$j++] = "EAN-13 must be 12 or 13 digits"; /*1073*/
			$0.raiseerror(); /*1073*/
		} /*1073*/
		$forall($1.barcode, function() {
			/*1079*/
			var _Q = $k[--$j]; /*1076*/
			if ((_Q < 48) || (_Q > 57)) { //no-else/*1078*/
				$k[$j++] = 'bwipp.ean13badCharacter'; /*1077*/
				$k[$j++] = "EAN-13 must contain only digits"; /*1077*/
				$0.raiseerror(); /*1077*/
			} /*1077*/
		}); /*1077*/
		if ((($1.addon.length != 0) && ($1.addon.length != 2)) && ($1.addon.length != 5)) { //no-else/*1082*/
			$k[$j++] = 'bwipp.ean13badAddOnLength'; /*1081*/
			$k[$j++] = "Add-on for EAN-13 must be 2 or 5 digits"; /*1081*/
			$0.raiseerror(); /*1081*/
		} /*1081*/
		$1.pad = $s(13); /*1085*/
		$1.checksum = 0; /*1086*/
		for (var _V = 0; _V <= 11; _V += 1) {
			/*1095*/
			$1.i = _V; /*1088*/
			$1.barchar = $get($1.barcode, $1.i) - 48; /*1089*/
			if (($1.i % 2) == 0) {
				/*1093*/
				$1.checksum = $1.barchar + $1.checksum; /*1091*/
			} else {
				/*1093*/
				$1.checksum = ($1.barchar * 3) + $1.checksum; /*1093*/
			} /*1093*/
		} /*1093*/
		$1.checksum = (10 - ($1.checksum % 10)) % 10; /*1096*/
		if ($1.barcode.length == 13) { //no-else/*1101*/
			if ($get($1.barcode, 12) != ($1.checksum + 48)) { //no-else/*1100*/
				$k[$j++] = 'bwipp.ean13badCheckDigit'; /*1099*/
				$k[$j++] = "Incorrect EAN-13 check digit provided"; /*1099*/
				$0.raiseerror(); /*1099*/
			} /*1099*/
		} /*1099*/
		$puti($1.pad, 0, $1.barcode); /*1102*/
		$put($1.pad, 12, $1.checksum + 48); /*1103*/
		$1.barcode = $1.pad; /*1104*/
		$1.encs = $a(["3211", "2221", "2122", "1411", "1132", "1231", "1114", "1312", "1213", "3112", "111", "11111", "111"]); /*1111*/
		$1.barchars = "0123456789"; /*1114*/
		$1.mirrormaps = $a(["000000", "001011", "001101", "001110", "010011", "011001", "011100", "010101", "010110", "011010"]); /*1120*/
		$1.sbs = $s(59); /*1122*/
		$1.txt = $a(13); /*1123*/
		$puti($1.sbs, 0, $get($1.encs, 10)); /*1126*/
		$1.mirrormap = $get($1.mirrormaps, $get($1.barcode, 0) - 48); /*1129*/
		$put($1.txt, 0, $a([$geti($1.barcode, 0, 1), $1.textxoffset, $1.textyoffset, $1.textfont, $1.textsize])); /*1130*/
		for (var _17 = 1; _17 <= 6; _17 += 1) {
			/*1153*/
			$1.i = _17; /*1135*/
			$search($1.barchars, $geti($1.barcode, $1.i, 1)); /*1136*/
			$j--; /*1137*/
			$1.indx = $k[--$j].length; /*1138*/
			$j -= 2; /*1139*/
			$1.enc = $get($1.encs, $1.indx); /*1140*/
			if ($get($1.mirrormap, $1.i - 1) == 49) { //no-else/*1150*/
				$1.enclen = $1.enc.length; /*1142*/
				$1.revenc = $s($1.enclen); /*1143*/
				for (var _1O = 0, _1N = $1.enclen - 1; _1O <= _1N; _1O += 1) {
					/*1148*/
					$1.j = _1O; /*1145*/
					$1.char = $get($1.enc, $1.j); /*1146*/
					$put($1.revenc, ($1.enclen - $1.j) - 1, $1.char); /*1147*/
				} /*1147*/
				$1.enc = $1.revenc; /*1149*/
			} /*1149*/
			$puti($1.sbs, (($1.i - 1) * 4) + 3, $1.enc); /*1151*/
			$put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), ((($1.i - 1) * 7) + 14) + $1.textxoffset, $1.textyoffset, $1.textfont, $1.textsize])); /*1152*/
		} /*1152*/
		$puti($1.sbs, ((7 - 1) * 4) + 3, $get($1.encs, 11)); /*1156*/
		for (var _1o = 7; _1o <= 12; _1o += 1) {
			/*1169*/
			$1.i = _1o; /*1161*/
			$search($1.barchars, $geti($1.barcode, $1.i, 1)); /*1162*/
			$j--; /*1163*/
			$1.indx = $k[--$j].length; /*1164*/
			$j -= 2; /*1165*/
			$1.enc = $get($1.encs, $1.indx); /*1166*/
			$puti($1.sbs, (($1.i - 1) * 4) + 8, $1.enc); /*1167*/
			$put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), ((($1.i - 1) * 7) + 18) + $1.textxoffset, $1.textyoffset, $1.textfont, $1.textsize])); /*1168*/
		} /*1168*/
		$puti($1.sbs, 56, $get($1.encs, 12)); /*1172*/
		$k[$j++] = Infinity; /*1174*/
		var _2E = $1.sbs; /*1174*/
		for (var _2F = 0, _2G = _2E.length; _2F < _2G; _2F++) {
			/*1174*/
			$k[$j++] = $get(_2E, _2F) - 48; /*1174*/
		} /*1174*/
		$1.sbs = $a(); /*1174*/
		if ($1.includetext) {
			/*1181*/
			$k[$j++] = Infinity; /*1176*/
			$k[$j++] = $1.height; /*1176*/
			$k[$j++] = $1.height; /*1176*/
			for (var _2M = 0, _2N = 12; _2M < _2N; _2M++) {
				/*1176*/
				$k[$j++] = $1.height - 0.075; /*1176*/
			} /*1176*/
			$k[$j++] = $1.height; /*1176*/
			$k[$j++] = $1.height; /*1176*/
			for (var _2R = 0, _2S = 12; _2R < _2S; _2R++) {
				/*1176*/
				$k[$j++] = $1.height - 0.075; /*1176*/
			} /*1176*/
			$k[$j++] = $1.height; /*1176*/
			$k[$j++] = $1.height; /*1176*/
			$1.bhs = $a(); /*1176*/
			$k[$j++] = Infinity; /*1177*/
			$k[$j++] = 0; /*1177*/
			$k[$j++] = 0; /*1177*/
			for (var _2X = 0, _2Y = 12; _2X < _2Y; _2X++) {
				/*1177*/
				$k[$j++] = 0.075; /*1177*/
			} /*1177*/
			$k[$j++] = 0; /*1177*/
			$k[$j++] = 0; /*1177*/
			for (var _2Z = 0, _2a = 12; _2Z < _2a; _2Z++) {
				/*1177*/
				$k[$j++] = 0.075; /*1177*/
			} /*1177*/
			$k[$j++] = 0; /*1177*/
			$k[$j++] = 0; /*1177*/
			$1.bbs = $a(); /*1177*/
		} else {
			/*1181*/
			$k[$j++] = Infinity; /*1179*/
			for (var _2c = 0, _2d = 30; _2c < _2d; _2c++) {
				/*1179*/
				$k[$j++] = $1.height; /*1179*/
			} /*1179*/
			$1.bhs = $a(); /*1179*/
			$k[$j++] = Infinity; /*1180*/
			for (var _2g = 0, _2h = 30; _2g < _2h; _2g++) {
				/*1180*/
				$k[$j++] = 0; /*1180*/
			} /*1180*/
			$1.bbs = $a(); /*1180*/
			$1.txt = $a([]); /*1181*/
		} /*1181*/
		$1.guardrightypos = 0; /*1183*/
		if ($ne($1.addon, "")) { //no-else/*1204*/
			$k[$j++] = Infinity; /*1194*/
			$k[$j++] = 'dontdraw'; /*1191*/
			$k[$j++] = true; /*1191*/
			$k[$j++] = 'includetext'; /*1191*/
			$k[$j++] = true; /*1191*/
			$k[$j++] = 'height'; /*1191*/
			$k[$j++] = $1.height - 0.15; /*1191*/
			$k[$j++] = 'textxoffset'; /*1191*/
			if ($1.addontextxoffset != "unset") {
				/*1191*/
				$k[$j++] = $1.addontextxoffset; /*1191*/
			} else {
				/*1191*/
				$k[$j++] = 95 + $1.addongap; /*1191*/
			} /*1191*/
			if ($1.addontextyoffset != "unset") { //no-else/*1192*/
				$k[$j++] = 'textyoffset'; /*1192*/
				$k[$j++] = $1.addontextyoffset; /*1192*/
			} /*1192*/
			var _2s = ($1.addontextsize != "unset") ? $1.addontextsize : $1.textsize; /*1193*/
			var _2u = $ne($1.addontextfont, "unset") ? $1.addontextfont : $1.textfont; /*1194*/
			$k[$j++] = 'textsize'; /*1194*/
			$k[$j++] = _2s; /*1194*/
			$k[$j++] = 'textfont'; /*1194*/
			$k[$j++] = _2u; /*1194*/
			$1.addopts = $d(); /*1195*/
			if ($1.addon.length == 2) { //no-else/*1196*/
				$k[$j++] = $1.addon; /*1196*/
				$k[$j++] = $1.addopts; /*1196*/
				$0.ean2(); /*1196*/
			} /*1196*/
			if ($1.addon.length == 5) { //no-else/*1197*/
				$k[$j++] = $1.addon; /*1197*/
				$k[$j++] = $1.addopts; /*1197*/
				$0.ean5(); /*1197*/
			} /*1197*/
			$1.addcode = $k[--$j]; /*1198*/
			$k[$j++] = Infinity; /*1199*/
			$aload($1.sbs); /*1199*/
			$k[$j++] = $1.addongap; /*1199*/
			$aload($get($1.addcode, "sbs")); /*1199*/
			$1.sbs = $a(); /*1199*/
			$k[$j++] = Infinity; /*1200*/
			$aload($1.bhs); /*1200*/
			$forall($get($1.addcode, "bhs"), function() {
				/*1200*/
				var _3B = $k[--$j]; /*1200*/
				$k[$j++] = _3B - 0.075; /*1200*/
			}); /*1200*/
			$1.bhs = $a(); /*1200*/
			$k[$j++] = Infinity; /*1201*/
			$aload($1.bbs); /*1201*/
			$forall($get($1.addcode, "bbs"), function() {
				/*1201*/
				var _3G = $k[--$j]; /*1201*/
				$k[$j++] = _3G + 0.075; /*1201*/
			}); /*1201*/
			$1.bbs = $a(); /*1201*/
			$k[$j++] = Infinity; /*1202*/
			$aload($1.txt); /*1202*/
			$aload($get($1.addcode, "txt")); /*1202*/
			$1.txt = $a(); /*1202*/
			$1.guardrightypos = ($1.height * 72) - 6; /*1203*/
		} /*1203*/
		var _3T = new Map([
			["ren", $0.renlinear],
			["sbs", $1.sbs],
			["bhs", $1.bhs],
			["bbs", $1.bbs],
			["txt", $1.txt],
			["opt", $1.options],
			["guardrightpos", 10],
			["guardrightypos", $1.guardrightypos],
			["borderbottom", 5]
		]); /*1216*/
		$k[$j++] = _3T; /*1219*/
		if (!$1.dontdraw) { //no-else/*1219*/
			$0.renlinear(); /*1219*/
		} /*1219*/
	};
	$0.ean8 = function() {
		var $1 = {}; /*1250*/
		$1.options = $k[--$j]; /*1252*/
		$1.barcode = $k[--$j]; /*1253*/
		$1.dontdraw = false; /*1255*/
		$1.includetext = false; /*1256*/
		$1.textfont = "OCR-B"; /*1257*/
		$1.textsize = 12; /*1258*/
		$1.textxoffset = 4; /*1259*/
		$1.textyoffset = -4.5; /*1260*/
		$1.height = 1; /*1261*/
		$1.addongap = 12; /*1262*/
		$1.addontextfont = "unset"; /*1263*/
		$1.addontextsize = "unset"; /*1264*/
		$1.addontextxoffset = "unset"; /*1265*/
		$1.addontextyoffset = "unset"; /*1266*/
		$forall($1.options, function() {
			/*1277*/
			var _3 = $k[--$j]; /*1277*/
			$1[$k[--$j]] = _3; /*1277*/
		}); /*1277*/
		$1.textfont = "" + $1.textfont; /*1279*/
		$1.textsize = +$1.textsize; /*1280*/
		$1.textxoffset = +$1.textxoffset; /*1281*/
		$1.textyoffset = +$1.textyoffset; /*1282*/
		$1.height = +$1.height; /*1283*/
		$1.addongap = +$1.addongap; /*1284*/
		if ($ne($1.addontextfont, "unset")) { //no-else/*1285*/
			$1.addontextfont = "" + $1.addontextfont; /*1285*/
		} /*1285*/
		if ($ne($1.addontextsize, "unset")) { //no-else/*1286*/
			$1.addontextsize = +$1.addontextsize; /*1286*/
		} /*1286*/
		if ($ne($1.addontextxoffset, "unset")) { //no-else/*1287*/
			$1.addontextxoffset = +$1.addontextxoffset; /*1287*/
		} /*1287*/
		if ($ne($1.addontextyoffset, "unset")) { //no-else/*1288*/
			$1.addontextyoffset = +$1.addontextyoffset; /*1288*/
		} /*1288*/
		$search($1.barcode, " "); /*1291*/
		if ($k[--$j]) {
			/*1297*/
			$1.barcode = $k[--$j]; /*1292*/
			$j--; /*1293*/
			$1.addon = $k[--$j]; /*1294*/
		} else {
			/*1297*/
			$j--; /*1296*/
			$1.addon = ""; /*1297*/
		} /*1297*/
		if (($1.barcode.length != 7) && ($1.barcode.length != 8)) { //no-else/*1303*/
			$k[$j++] = 'bwipp.ean8badLength'; /*1302*/
			$k[$j++] = "EAN-8 must be 7 or 8 digits"; /*1302*/
			$0.raiseerror(); /*1302*/
		} /*1302*/
		$forall($1.barcode, function() {
			/*1308*/
			var _Q = $k[--$j]; /*1305*/
			if ((_Q < 48) || (_Q > 57)) { //no-else/*1307*/
				$k[$j++] = 'bwipp.ean8badCharacter'; /*1306*/
				$k[$j++] = "EAN-8 must contain only digits"; /*1306*/
				$0.raiseerror(); /*1306*/
			} /*1306*/
		}); /*1306*/
		if ((($1.addon.length != 0) && ($1.addon.length != 2)) && ($1.addon.length != 5)) { //no-else/*1311*/
			$k[$j++] = 'bwipp.ean8badAddOnLength'; /*1310*/
			$k[$j++] = "Add-on for EAN-8 must be 2 or 5 digits"; /*1310*/
			$0.raiseerror(); /*1310*/
		} /*1310*/
		$1.pad = $s(8); /*1314*/
		$1.checksum = 0; /*1315*/
		for (var _V = 0; _V <= 6; _V += 1) {
			/*1324*/
			$1.i = _V; /*1317*/
			$1.barchar = $get($1.barcode, $1.i) - 48; /*1318*/
			if (($1.i % 2) != 0) {
				/*1322*/
				$1.checksum = $1.barchar + $1.checksum; /*1320*/
			} else {
				/*1322*/
				$1.checksum = ($1.barchar * 3) + $1.checksum; /*1322*/
			} /*1322*/
		} /*1322*/
		$1.checksum = (10 - ($1.checksum % 10)) % 10; /*1325*/
		if ($1.barcode.length == 8) { //no-else/*1330*/
			if ($get($1.barcode, 7) != ($1.checksum + 48)) { //no-else/*1329*/
				$k[$j++] = 'bwipp.ean8badCheckDigit'; /*1328*/
				$k[$j++] = "Incorrect EAN-8 check digit provided"; /*1328*/
				$0.raiseerror(); /*1328*/
			} /*1328*/
		} /*1328*/
		$puti($1.pad, 0, $1.barcode); /*1331*/
		$put($1.pad, 7, $1.checksum + 48); /*1332*/
		$1.barcode = $1.pad; /*1333*/
		$1.encs = $a(["3211", "2221", "2122", "1411", "1132", "1231", "1114", "1312", "1213", "3112", "111", "11111", "111"]); /*1340*/
		$1.barchars = "0123456789"; /*1343*/
		$1.sbs = $s(43); /*1345*/
		$1.txt = $a(8); /*1346*/
		$puti($1.sbs, 0, $get($1.encs, 10)); /*1349*/
		for (var _u = 0; _u <= 3; _u += 1) {
			/*1362*/
			$1.i = _u; /*1354*/
			$search($1.barchars, $geti($1.barcode, $1.i, 1)); /*1355*/
			$j--; /*1356*/
			$1.indx = $k[--$j].length; /*1357*/
			$j -= 2; /*1358*/
			$1.enc = $get($1.encs, $1.indx); /*1359*/
			$puti($1.sbs, ($1.i * 4) + 3, $1.enc); /*1360*/
			$put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), ($1.i * 7) + $1.textxoffset, $1.textyoffset, $1.textfont, $1.textsize])); /*1361*/
		} /*1361*/
		$puti($1.sbs, (4 * 4) + 3, $get($1.encs, 11)); /*1365*/
		for (var _1K = 4; _1K <= 7; _1K += 1) {
			/*1378*/
			$1.i = _1K; /*1370*/
			$search($1.barchars, $geti($1.barcode, $1.i, 1)); /*1371*/
			$j--; /*1372*/
			$1.indx = $k[--$j].length; /*1373*/
			$j -= 2; /*1374*/
			$1.enc = $get($1.encs, $1.indx); /*1375*/
			$puti($1.sbs, ($1.i * 4) + 8, $1.enc); /*1376*/
			$put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), (($1.i * 7) + $1.textxoffset) + 4, $1.textyoffset, $1.textfont, $1.textsize])); /*1377*/
		} /*1377*/
		$puti($1.sbs, 40, $get($1.encs, 12)); /*1381*/
		$k[$j++] = Infinity; /*1383*/
		var _1k = $1.sbs; /*1383*/
		for (var _1l = 0, _1m = _1k.length; _1l < _1m; _1l++) {
			/*1383*/
			$k[$j++] = $get(_1k, _1l) - 48; /*1383*/
		} /*1383*/
		$1.sbs = $a(); /*1383*/
		if ($1.includetext) {
			/*1390*/
			$k[$j++] = Infinity; /*1385*/
			$k[$j++] = $1.height; /*1385*/
			$k[$j++] = $1.height; /*1385*/
			for (var _1s = 0, _1t = 8; _1s < _1t; _1s++) {
				/*1385*/
				$k[$j++] = $1.height - 0.075; /*1385*/
			} /*1385*/
			$k[$j++] = $1.height; /*1385*/
			$k[$j++] = $1.height; /*1385*/
			for (var _1x = 0, _1y = 8; _1x < _1y; _1x++) {
				/*1385*/
				$k[$j++] = $1.height - 0.075; /*1385*/
			} /*1385*/
			$k[$j++] = $1.height; /*1385*/
			$k[$j++] = $1.height; /*1385*/
			$1.bhs = $a(); /*1385*/
			$k[$j++] = Infinity; /*1386*/
			$k[$j++] = 0; /*1386*/
			$k[$j++] = 0; /*1386*/
			for (var _23 = 0, _24 = 8; _23 < _24; _23++) {
				/*1386*/
				$k[$j++] = 0.075; /*1386*/
			} /*1386*/
			$k[$j++] = 0; /*1386*/
			$k[$j++] = 0; /*1386*/
			for (var _25 = 0, _26 = 8; _25 < _26; _25++) {
				/*1386*/
				$k[$j++] = 0.075; /*1386*/
			} /*1386*/
			$k[$j++] = 0; /*1386*/
			$k[$j++] = 0; /*1386*/
			$1.bbs = $a(); /*1386*/
		} else {
			/*1390*/
			$k[$j++] = Infinity; /*1388*/
			for (var _28 = 0, _29 = 22; _28 < _29; _28++) {
				/*1388*/
				$k[$j++] = $1.height; /*1388*/
			} /*1388*/
			$1.bhs = $a(); /*1388*/
			$k[$j++] = Infinity; /*1389*/
			for (var _2C = 0, _2D = 22; _2C < _2D; _2C++) {
				/*1389*/
				$k[$j++] = 0; /*1389*/
			} /*1389*/
			$1.bbs = $a(); /*1389*/
			$1.txt = $a([]); /*1390*/
		} /*1390*/
		$1.guardrightypos = 0; /*1392*/
		if ($ne($1.addon, "")) { //no-else/*1413*/
			$k[$j++] = Infinity; /*1403*/
			$k[$j++] = 'dontdraw'; /*1400*/
			$k[$j++] = true; /*1400*/
			$k[$j++] = 'includetext'; /*1400*/
			$k[$j++] = true; /*1400*/
			$k[$j++] = 'height'; /*1400*/
			$k[$j++] = $1.height - 0.15; /*1400*/
			$k[$j++] = 'textxoffset'; /*1400*/
			if ($1.addontextxoffset != "unset") {
				/*1400*/
				$k[$j++] = $1.addontextxoffset; /*1400*/
			} else {
				/*1400*/
				$k[$j++] = 67 + $1.addongap; /*1400*/
			} /*1400*/
			if ($1.addontextyoffset != "unset") { //no-else/*1401*/
				$k[$j++] = 'textyoffset'; /*1401*/
				$k[$j++] = $1.addontextyoffset; /*1401*/
			} /*1401*/
			var _2O = ($1.addontextsize != "unset") ? $1.addontextsize : $1.textsize; /*1402*/
			var _2Q = $ne($1.addontextfont, "unset") ? $1.addontextfont : $1.textfont; /*1403*/
			$k[$j++] = 'textsize'; /*1403*/
			$k[$j++] = _2O; /*1403*/
			$k[$j++] = 'textfont'; /*1403*/
			$k[$j++] = _2Q; /*1403*/
			$1.addopts = $d(); /*1404*/
			if ($1.addon.length == 2) { //no-else/*1405*/
				$k[$j++] = $1.addon; /*1405*/
				$k[$j++] = $1.addopts; /*1405*/
				$0.ean2(); /*1405*/
			} /*1405*/
			if ($1.addon.length == 5) { //no-else/*1406*/
				$k[$j++] = $1.addon; /*1406*/
				$k[$j++] = $1.addopts; /*1406*/
				$0.ean5(); /*1406*/
			} /*1406*/
			$1.addcode = $k[--$j]; /*1407*/
			$k[$j++] = Infinity; /*1408*/
			$aload($1.sbs); /*1408*/
			$k[$j++] = $1.addongap; /*1408*/
			$aload($get($1.addcode, "sbs")); /*1408*/
			$1.sbs = $a(); /*1408*/
			$k[$j++] = Infinity; /*1409*/
			$aload($1.bhs); /*1409*/
			$forall($get($1.addcode, "bhs"), function() {
				/*1409*/
				var _2h = $k[--$j]; /*1409*/
				$k[$j++] = _2h - 0.075; /*1409*/
			}); /*1409*/
			$1.bhs = $a(); /*1409*/
			$k[$j++] = Infinity; /*1410*/
			$aload($1.bbs); /*1410*/
			$forall($get($1.addcode, "bbs"), function() {
				/*1410*/
				var _2m = $k[--$j]; /*1410*/
				$k[$j++] = _2m + 0.075; /*1410*/
			}); /*1410*/
			$1.bbs = $a(); /*1410*/
			$k[$j++] = Infinity; /*1411*/
			$aload($1.txt); /*1411*/
			$aload($get($1.addcode, "txt")); /*1411*/
			$1.txt = $a(); /*1411*/
			$1.guardrightypos = ($1.height * 72) - 6; /*1412*/
		} /*1412*/
		var _2z = new Map([
			["ren", $0.renlinear],
			["sbs", $1.sbs],
			["bhs", $1.bhs],
			["bbs", $1.bbs],
			["txt", $1.txt],
			["opt", $1.options],
			["guardleftpos", 10],
			["guardrightpos", 10],
			["guardrightypos", $1.guardrightypos],
			["borderbottom", 5]
		]); /*1426*/
		$k[$j++] = _2z; /*1429*/
		if (!$1.dontdraw) { //no-else/*1429*/
			$0.renlinear(); /*1429*/
		} /*1429*/
	};
	$0.upca = function() {
		var $1 = {}; /*1460*/
		$1.options = $k[--$j]; /*1462*/
		$1.barcode = $k[--$j]; /*1463*/
		$1.dontdraw = false; /*1465*/
		$1.includetext = false; /*1466*/
		$1.textfont = "OCR-B"; /*1467*/
		$1.textsize = 12; /*1468*/
		$1.textxoffset = -7; /*1469*/
		$1.textyoffset = -4.5; /*1470*/
		$1.height = 1; /*1471*/
		$1.addongap = 12; /*1472*/
		$1.addontextfont = "unset"; /*1473*/
		$1.addontextsize = "unset"; /*1474*/
		$1.addontextxoffset = "unset"; /*1475*/
		$1.addontextyoffset = "unset"; /*1476*/
		$forall($1.options, function() {
			/*1487*/
			var _3 = $k[--$j]; /*1487*/
			$1[$k[--$j]] = _3; /*1487*/
		}); /*1487*/
		$1.textfont = "" + $1.textfont; /*1489*/
		$1.textsize = +$1.textsize; /*1490*/
		$1.textxoffset = +$1.textxoffset; /*1491*/
		$1.textyoffset = +$1.textyoffset; /*1492*/
		$1.height = +$1.height; /*1493*/
		$1.addongap = +$1.addongap; /*1494*/
		if ($ne($1.addontextfont, "unset")) { //no-else/*1495*/
			$1.addontextfont = "" + $1.addontextfont; /*1495*/
		} /*1495*/
		if ($ne($1.addontextsize, "unset")) { //no-else/*1496*/
			$1.addontextsize = +$1.addontextsize; /*1496*/
		} /*1496*/
		if ($ne($1.addontextxoffset, "unset")) { //no-else/*1497*/
			$1.addontextxoffset = +$1.addontextxoffset; /*1497*/
		} /*1497*/
		if ($ne($1.addontextyoffset, "unset")) { //no-else/*1498*/
			$1.addontextyoffset = +$1.addontextyoffset; /*1498*/
		} /*1498*/
		$search($1.barcode, " "); /*1501*/
		if ($k[--$j]) {
			/*1507*/
			$1.barcode = $k[--$j]; /*1502*/
			$j--; /*1503*/
			$1.addon = $k[--$j]; /*1504*/
		} else {
			/*1507*/
			$j--; /*1506*/
			$1.addon = ""; /*1507*/
		} /*1507*/
		if (($1.barcode.length == 7) || ($1.barcode.length == 8)) { //no-else/*1553*/
			$forall($1.barcode, function() {
				/*1517*/
				var _Q = $k[--$j]; /*1514*/
				if ((_Q < 48) || (_Q > 57)) { //no-else/*1516*/
					$k[$j++] = 'bwipp.upcAupcEbadCharacter'; /*1515*/
					$k[$j++] = "UPC-E must contain only digits"; /*1515*/
					$0.raiseerror(); /*1515*/
				} /*1515*/
			}); /*1515*/
			var _S = $get($1.barcode, 0); /*1518*/
			if ((_S != 48) && (_S != 49)) { //no-else/*1520*/
				$k[$j++] = 'bwipp.upcAupcEbadNumberSystem'; /*1519*/
				$k[$j++] = "UPC-E must have number system 0 or 1"; /*1519*/
				$0.raiseerror(); /*1519*/
			} /*1519*/
			for (var _T = 0, _U = 1; _T < _U; _T++) {
				/*1548*/
				var _W = ($1.barcode.length == 8) ? 12 : 11; /*1522*/
				$1.upcacode = $s(_W); /*1522*/
				if (($get($1.barcode, 6) - 48) <= 2) { //no-else/*1529*/
					$puti($1.upcacode, 0, $geti($1.barcode, 0, 3)); /*1524*/
					$puti($1.upcacode, 3, $geti($1.barcode, 6, 1)); /*1525*/
					$puti($1.upcacode, 4, "0000"); /*1526*/
					$puti($1.upcacode, 8, $geti($1.barcode, 3, 3)); /*1527*/
					break; /*1528*/
				} /*1528*/
				if (($get($1.barcode, 6) - 48) == 3) { //no-else/*1535*/
					$puti($1.upcacode, 0, $geti($1.barcode, 0, 4)); /*1531*/
					$puti($1.upcacode, 4, "00000"); /*1532*/
					$puti($1.upcacode, 9, $geti($1.barcode, 4, 2)); /*1533*/
					break; /*1534*/
				} /*1534*/
				if (($get($1.barcode, 6) - 48) == 4) { //no-else/*1541*/
					$puti($1.upcacode, 0, $geti($1.barcode, 0, 5)); /*1537*/
					$puti($1.upcacode, 5, "00000"); /*1538*/
					$puti($1.upcacode, 10, $geti($1.barcode, 5, 1)); /*1539*/
					break; /*1540*/
				} /*1540*/
				if (($get($1.barcode, 6) - 48) >= 5) { //no-else/*1547*/
					$puti($1.upcacode, 0, $geti($1.barcode, 0, 6)); /*1543*/
					$puti($1.upcacode, 6, "0000"); /*1544*/
					$puti($1.upcacode, 10, $geti($1.barcode, 6, 1)); /*1545*/
					break; /*1546*/
				} /*1546*/
			} /*1546*/
			if ($1.barcode.length == 8) { //no-else/*1551*/
				$puti($1.upcacode, 11, $geti($1.barcode, 7, 1)); /*1550*/
			} /*1550*/
			$1.barcode = $1.upcacode; /*1552*/
		} /*1552*/
		if (($1.barcode.length != 11) && ($1.barcode.length != 12)) { //no-else/*1558*/
			$k[$j++] = 'bwipp.upcAbadLength'; /*1557*/
			$k[$j++] = "UPC-A must be 11 or 12 digits"; /*1557*/
			$0.raiseerror(); /*1557*/
		} /*1557*/
		var _1I = $1.barcode; /*1559*/
		for (var _1J = 0, _1K = _1I.length; _1J < _1K; _1J++) {
			/*1563*/
			var _1L = $get(_1I, _1J); /*1563*/
			if ((_1L < 48) || (_1L > 57)) { //no-else/*1562*/
				$k[$j++] = 'bwipp.upcAbadCharacter'; /*1561*/
				$k[$j++] = "UPC-A must contain only digits"; /*1561*/
				$0.raiseerror(); /*1561*/
			} /*1561*/
		} /*1561*/
		if ((($1.addon.length != 0) && ($1.addon.length != 2)) && ($1.addon.length != 5)) { //no-else/*1566*/
			$k[$j++] = 'bwipp.upcAbadAddOnLength'; /*1565*/
			$k[$j++] = "Add-on for UPC-A must be 2 or 5 digits"; /*1565*/
			$0.raiseerror(); /*1565*/
		} /*1565*/
		$1.pad = $s(12); /*1569*/
		$1.checksum = 0; /*1570*/
		for (var _1Q = 0; _1Q <= 10; _1Q += 1) {
			/*1579*/
			$1.i = _1Q; /*1572*/
			$1.barchar = $get($1.barcode, $1.i) - 48; /*1573*/
			if (($1.i % 2) != 0) {
				/*1577*/
				$1.checksum = $1.checksum + $1.barchar; /*1575*/
			} else {
				/*1577*/
				$1.checksum = $1.checksum + ($1.barchar * 3); /*1577*/
			} /*1577*/
		} /*1577*/
		$1.checksum = (10 - ($1.checksum % 10)) % 10; /*1580*/
		if ($1.barcode.length == 12) { //no-else/*1585*/
			if ($get($1.barcode, 11) != ($1.checksum + 48)) { //no-else/*1584*/
				$k[$j++] = 'bwipp.upcAbadCheckDigit'; /*1583*/
				$k[$j++] = "Incorrect UPC check digit provided"; /*1583*/
				$0.raiseerror(); /*1583*/
			} /*1583*/
		} /*1583*/
		$puti($1.pad, 0, $1.barcode); /*1586*/
		$put($1.pad, 11, $1.checksum + 48); /*1587*/
		$1.barcode = $1.pad; /*1588*/
		$1.encs = $a(["3211", "2221", "2122", "1411", "1132", "1231", "1114", "1312", "1213", "3112", "111", "11111", "111"]); /*1595*/
		$1.barchars = "0123456789"; /*1598*/
		$1.sbs = $s(59); /*1600*/
		$1.txt = $a(12); /*1601*/
		$puti($1.sbs, 0, $get($1.encs, 10)); /*1604*/
		for (var _1p = 0; _1p <= 5; _1p += 1) {
			/*1621*/
			$1.i = _1p; /*1609*/
			$search($1.barchars, $geti($1.barcode, $1.i, 1)); /*1610*/
			$j--; /*1611*/
			$1.indx = $k[--$j].length; /*1612*/
			$j -= 2; /*1613*/
			$1.enc = $get($1.encs, $1.indx); /*1614*/
			$puti($1.sbs, ($1.i * 4) + 3, $1.enc); /*1615*/
			if ($1.i == 0) {
				/*1619*/
				$put($1.txt, 0, $a([$geti($1.barcode, 0, 1), $1.textxoffset, $1.textyoffset, $1.textfont, $1.textsize - 2])); /*1617*/
			} else {
				/*1619*/
				$put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), (($1.i * 7) + 11) + $1.textxoffset, $1.textyoffset, $1.textfont, $1.textsize])); /*1619*/
			} /*1619*/
		} /*1619*/
		$puti($1.sbs, (6 * 4) + 3, $get($1.encs, 11)); /*1624*/
		for (var _2O = 6; _2O <= 11; _2O += 1) {
			/*1641*/
			$1.i = _2O; /*1629*/
			$search($1.barchars, $geti($1.barcode, $1.i, 1)); /*1630*/
			$j--; /*1631*/
			$1.indx = $k[--$j].length; /*1632*/
			$j -= 2; /*1633*/
			$1.enc = $get($1.encs, $1.indx); /*1634*/
			$puti($1.sbs, ($1.i * 4) + 8, $1.enc); /*1635*/
			if ($1.i == 11) {
				/*1639*/
				$put($1.txt, 11, $a([$geti($1.barcode, 11, 1), $1.textxoffset + 104, $1.textyoffset, $1.textfont, $1.textsize - 2])); /*1637*/
			} else {
				/*1639*/
				$put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), (($1.i * 7) + $1.textxoffset) + 15, $1.textyoffset, $1.textfont, $1.textsize])); /*1639*/
			} /*1639*/
		} /*1639*/
		$puti($1.sbs, 56, $get($1.encs, 12)); /*1644*/
		$k[$j++] = Infinity; /*1646*/
		var _2x = $1.sbs; /*1646*/
		for (var _2y = 0, _2z = _2x.length; _2y < _2z; _2y++) {
			/*1646*/
			$k[$j++] = $get(_2x, _2y) - 48; /*1646*/
		} /*1646*/
		$1.sbs = $a(); /*1646*/
		if ($1.includetext) {
			/*1653*/
			$k[$j++] = Infinity; /*1648*/
			for (var _33 = 0, _34 = 4; _33 < _34; _33++) {
				/*1648*/
				$k[$j++] = $1.height; /*1648*/
			} /*1648*/
			for (var _36 = 0, _37 = 10; _36 < _37; _36++) {
				/*1648*/
				$k[$j++] = $1.height - 0.075; /*1648*/
			} /*1648*/
			$k[$j++] = $1.height; /*1648*/
			$k[$j++] = $1.height; /*1648*/
			for (var _3B = 0, _3C = 10; _3B < _3C; _3B++) {
				/*1648*/
				$k[$j++] = $1.height - 0.075; /*1648*/
			} /*1648*/
			for (var _3E = 0, _3F = 4; _3E < _3F; _3E++) {
				/*1648*/
				$k[$j++] = $1.height; /*1648*/
			} /*1648*/
			$1.bhs = $a(); /*1648*/
			$k[$j++] = Infinity; /*1649*/
			$k[$j++] = 0; /*1649*/
			$k[$j++] = 0; /*1649*/
			$k[$j++] = 0; /*1649*/
			$k[$j++] = 0; /*1649*/
			for (var _3I = 0, _3J = 10; _3I < _3J; _3I++) {
				/*1649*/
				$k[$j++] = 0.075; /*1649*/
			} /*1649*/
			$k[$j++] = 0; /*1649*/
			$k[$j++] = 0; /*1649*/
			for (var _3K = 0, _3L = 10; _3K < _3L; _3K++) {
				/*1649*/
				$k[$j++] = 0.075; /*1649*/
			} /*1649*/
			$k[$j++] = 0; /*1649*/
			$k[$j++] = 0; /*1649*/
			$k[$j++] = 0; /*1649*/
			$k[$j++] = 0; /*1649*/
			$1.bbs = $a(); /*1649*/
		} else {
			/*1653*/
			$k[$j++] = Infinity; /*1651*/
			for (var _3N = 0, _3O = 30; _3N < _3O; _3N++) {
				/*1651*/
				$k[$j++] = $1.height; /*1651*/
			} /*1651*/
			$1.bhs = $a(); /*1651*/
			$k[$j++] = Infinity; /*1652*/
			for (var _3R = 0, _3S = 30; _3R < _3S; _3R++) {
				/*1652*/
				$k[$j++] = 0; /*1652*/
			} /*1652*/
			$1.bbs = $a(); /*1652*/
			$1.txt = $a([]); /*1653*/
		} /*1653*/
		$1.guardrightypos = 0; /*1655*/
		if ($ne($1.addon, "")) { //no-else/*1676*/
			$k[$j++] = Infinity; /*1666*/
			$k[$j++] = 'dontdraw'; /*1663*/
			$k[$j++] = true; /*1663*/
			$k[$j++] = 'includetext'; /*1663*/
			$k[$j++] = true; /*1663*/
			$k[$j++] = 'height'; /*1663*/
			$k[$j++] = $1.height - 0.15; /*1663*/
			$k[$j++] = 'textxoffset'; /*1663*/
			if ($1.addontextxoffset != "unset") {
				/*1663*/
				$k[$j++] = $1.addontextxoffset; /*1663*/
			} else {
				/*1663*/
				$k[$j++] = 95 + $1.addongap; /*1663*/
			} /*1663*/
			if ($1.addontextyoffset != "unset") { //no-else/*1664*/
				$k[$j++] = 'textyoffset'; /*1664*/
				$k[$j++] = $1.addontextyoffset; /*1664*/
			} /*1664*/
			var _3d = ($1.addontextsize != "unset") ? $1.addontextsize : $1.textsize; /*1665*/
			var _3f = $ne($1.addontextfont, "unset") ? $1.addontextfont : $1.textfont; /*1666*/
			$k[$j++] = 'textsize'; /*1666*/
			$k[$j++] = _3d; /*1666*/
			$k[$j++] = 'textfont'; /*1666*/
			$k[$j++] = _3f; /*1666*/
			$1.addopts = $d(); /*1667*/
			if ($1.addon.length == 2) { //no-else/*1668*/
				$k[$j++] = $1.addon; /*1668*/
				$k[$j++] = $1.addopts; /*1668*/
				$0.ean2(); /*1668*/
			} /*1668*/
			if ($1.addon.length == 5) { //no-else/*1669*/
				$k[$j++] = $1.addon; /*1669*/
				$k[$j++] = $1.addopts; /*1669*/
				$0.ean5(); /*1669*/
			} /*1669*/
			$1.addcode = $k[--$j]; /*1670*/
			$k[$j++] = Infinity; /*1671*/
			$aload($1.sbs); /*1671*/
			$k[$j++] = $1.addongap; /*1671*/
			$aload($get($1.addcode, "sbs")); /*1671*/
			$1.sbs = $a(); /*1671*/
			$k[$j++] = Infinity; /*1672*/
			$aload($1.bhs); /*1672*/
			$forall($get($1.addcode, "bhs"), function() {
				/*1672*/
				var _3w = $k[--$j]; /*1672*/
				$k[$j++] = _3w - 0.075; /*1672*/
			}); /*1672*/
			$1.bhs = $a(); /*1672*/
			$k[$j++] = Infinity; /*1673*/
			$aload($1.bbs); /*1673*/
			$forall($get($1.addcode, "bbs"), function() {
				/*1673*/
				var _41 = $k[--$j]; /*1673*/
				$k[$j++] = _41 + 0.075; /*1673*/
			}); /*1673*/
			$1.bbs = $a(); /*1673*/
			$k[$j++] = Infinity; /*1674*/
			$aload($1.txt); /*1674*/
			$aload($get($1.addcode, "txt")); /*1674*/
			$1.txt = $a(); /*1674*/
			$1.guardrightypos = ($1.height * 72) - 6; /*1675*/
		} /*1675*/
		var _4E = new Map([
			["ren", $0.renlinear],
			["sbs", $1.sbs],
			["bhs", $1.bhs],
			["bbs", $1.bbs],
			["txt", $1.txt],
			["opt", $1.options],
			["guardrightpos", 10],
			["guardrightypos", $1.guardrightypos],
			["borderbottom", 5]
		]); /*1688*/
		$k[$j++] = _4E; /*1691*/
		if (!$1.dontdraw) { //no-else/*1691*/
			$0.renlinear(); /*1691*/
		} /*1691*/
	};
	$0.upce = function() {
		var $1 = {}; /*1722*/
		$1.options = $k[--$j]; /*1724*/
		$1.barcode = $k[--$j]; /*1725*/
		$1.dontdraw = false; /*1727*/
		$1.includetext = false; /*1728*/
		$1.textfont = "OCR-B"; /*1729*/
		$1.textsize = 12; /*1730*/
		$1.textxoffset = -7; /*1731*/
		$1.textyoffset = -4.5; /*1732*/
		$1.height = 1; /*1733*/
		$1.addongap = 12; /*1734*/
		$1.addontextfont = "unset"; /*1735*/
		$1.addontextsize = "unset"; /*1736*/
		$1.addontextxoffset = "unset"; /*1737*/
		$1.addontextyoffset = "unset"; /*1738*/
		$forall($1.options, function() {
			/*1749*/
			var _3 = $k[--$j]; /*1749*/
			$1[$k[--$j]] = _3; /*1749*/
		}); /*1749*/
		$1.textfont = "" + $1.textfont; /*1751*/
		$1.textsize = +$1.textsize; /*1752*/
		$1.textxoffset = +$1.textxoffset; /*1753*/
		$1.textyoffset = +$1.textyoffset; /*1754*/
		$1.height = +$1.height; /*1755*/
		$1.addongap = +$1.addongap; /*1756*/
		if ($ne($1.addontextfont, "unset")) { //no-else/*1757*/
			$1.addontextfont = "" + $1.addontextfont; /*1757*/
		} /*1757*/
		if ($ne($1.addontextsize, "unset")) { //no-else/*1758*/
			$1.addontextsize = +$1.addontextsize; /*1758*/
		} /*1758*/
		if ($ne($1.addontextxoffset, "unset")) { //no-else/*1759*/
			$1.addontextxoffset = +$1.addontextxoffset; /*1759*/
		} /*1759*/
		if ($ne($1.addontextyoffset, "unset")) { //no-else/*1760*/
			$1.addontextyoffset = +$1.addontextyoffset; /*1760*/
		} /*1760*/
		$search($1.barcode, " "); /*1763*/
		if ($k[--$j]) {
			/*1769*/
			$1.barcode = $k[--$j]; /*1764*/
			$j--; /*1765*/
			$1.addon = $k[--$j]; /*1766*/
		} else {
			/*1769*/
			$j--; /*1768*/
			$1.addon = ""; /*1769*/
		} /*1769*/
		if (($1.barcode.length == 11) || ($1.barcode.length == 12)) { //no-else/*1811*/
			$forall($1.barcode, function() {
				/*1779*/
				var _Q = $k[--$j]; /*1776*/
				if ((_Q < 48) || (_Q > 57)) { //no-else/*1778*/
					$k[$j++] = 'bwipp.upcEupcAbadCharacter'; /*1777*/
					$k[$j++] = "UPC-A must contain only digits"; /*1777*/
					$0.raiseerror(); /*1777*/
				} /*1777*/
			}); /*1777*/
			for (var _R = 0, _S = 1; _R < _S; _R++) {
				/*1806*/
				var _U = ($1.barcode.length == 12) ? 8 : 7; /*1781*/
				$1.upcecode = $s(_U); /*1781*/
				if ((($get($1.barcode, 3) - 48) <= 2) && $eq($geti($1.barcode, 4, 4), "0000")) { //no-else/*1787*/
					$puti($1.upcecode, 0, $geti($1.barcode, 0, 3)); /*1783*/
					$puti($1.upcecode, 3, $geti($1.barcode, 8, 3)); /*1784*/
					$puti($1.upcecode, 6, $geti($1.barcode, 3, 1)); /*1785*/
					break; /*1786*/
				} /*1786*/
				if ($eq($geti($1.barcode, 4, 5), "00000")) { //no-else/*1793*/
					$puti($1.upcecode, 0, $geti($1.barcode, 0, 4)); /*1789*/
					$puti($1.upcecode, 4, $geti($1.barcode, 9, 2)); /*1790*/
					$puti($1.upcecode, 6, "3"); /*1791*/
					break; /*1792*/
				} /*1792*/
				if ($eq($geti($1.barcode, 5, 5), "00000")) { //no-else/*1799*/
					$puti($1.upcecode, 0, $geti($1.barcode, 0, 5)); /*1795*/
					$puti($1.upcecode, 5, $geti($1.barcode, 10, 1)); /*1796*/
					$puti($1.upcecode, 6, "4"); /*1797*/
					break; /*1798*/
				} /*1798*/
				if ((($get($1.barcode, 10) - 48) >= 5) && $eq($geti($1.barcode, 6, 4), "0000")) { //no-else/*1804*/
					$puti($1.upcecode, 0, $geti($1.barcode, 0, 6)); /*1801*/
					$puti($1.upcecode, 6, $geti($1.barcode, 10, 1)); /*1802*/
					break; /*1803*/
				} /*1803*/
				$k[$j++] = 'bwipp.upcEupcAnotCompressible'; /*1805*/
				$k[$j++] = "UPC-A cannot be converted to a UPC-E"; /*1805*/
				$0.raiseerror(); /*1805*/
			} /*1805*/
			if ($1.barcode.length == 12) { //no-else/*1809*/
				$puti($1.upcecode, 7, $geti($1.barcode, 11, 1)); /*1808*/
			} /*1808*/
			$1.barcode = $1.upcecode; /*1810*/
		} /*1810*/
		if (($1.barcode.length != 7) && ($1.barcode.length != 8)) { //no-else/*1816*/
			$k[$j++] = 'bwipp.upcEbadLength'; /*1815*/
			$k[$j++] = "UPC-E must be 7 or 8 digits"; /*1815*/
			$0.raiseerror(); /*1815*/
		} /*1815*/
		var _1I = $1.barcode; /*1817*/
		for (var _1J = 0, _1K = _1I.length; _1J < _1K; _1J++) {
			/*1821*/
			var _1L = $get(_1I, _1J); /*1821*/
			if ((_1L < 48) || (_1L > 57)) { //no-else/*1820*/
				$k[$j++] = 'bwipp.upcEbadCharacter'; /*1819*/
				$k[$j++] = "UPC-E must contain only digits"; /*1819*/
				$0.raiseerror(); /*1819*/
			} /*1819*/
		} /*1819*/
		if ((($1.addon.length != 0) && ($1.addon.length != 2)) && ($1.addon.length != 5)) { //no-else/*1824*/
			$k[$j++] = 'bwipp.upcEbadAddOnLength'; /*1823*/
			$k[$j++] = "Add-on for UPC-E must be 2 or 5 digits"; /*1823*/
			$0.raiseerror(); /*1823*/
		} /*1823*/
		var _1Q = $get($1.barcode, 0); /*1827*/
		if ((_1Q != 48) && (_1Q != 49)) { //no-else/*1829*/
			$k[$j++] = 'bwipp.upcEbadNumberSystem'; /*1828*/
			$k[$j++] = "UPC-E must have number system 0 or 1"; /*1828*/
			$0.raiseerror(); /*1828*/
		} /*1828*/
		$1.encs = $a(["3211", "2221", "2122", "1411", "1132", "1231", "1114", "1312", "1213", "3112", "111", "111111"]); /*1836*/
		$1.barchars = "0123456789"; /*1839*/
		$1.mirrormaps = $a(["000111", "001011", "001101", "001110", "010011", "011001", "011100", "010101", "010110", "011010"]); /*1844*/
		for (var _1T = 0, _1U = 1; _1T < _1U; _1T++) {
			/*1874*/
			$1.upcacode = $s(11); /*1848*/
			if (($get($1.barcode, 6) - 48) <= 2) { //no-else/*1855*/
				$puti($1.upcacode, 0, $geti($1.barcode, 0, 3)); /*1850*/
				$puti($1.upcacode, 3, $geti($1.barcode, 6, 1)); /*1851*/
				$puti($1.upcacode, 4, "0000"); /*1852*/
				$puti($1.upcacode, 8, $geti($1.barcode, 3, 3)); /*1853*/
				break; /*1854*/
			} /*1854*/
			if (($get($1.barcode, 6) - 48) == 3) { //no-else/*1861*/
				$puti($1.upcacode, 0, $geti($1.barcode, 0, 4)); /*1857*/
				$puti($1.upcacode, 4, "00000"); /*1858*/
				$puti($1.upcacode, 9, $geti($1.barcode, 4, 2)); /*1859*/
				break; /*1860*/
			} /*1860*/
			if (($get($1.barcode, 6) - 48) == 4) { //no-else/*1867*/
				$puti($1.upcacode, 0, $geti($1.barcode, 0, 5)); /*1863*/
				$puti($1.upcacode, 5, "00000"); /*1864*/
				$puti($1.upcacode, 10, $geti($1.barcode, 5, 1)); /*1865*/
				break; /*1866*/
			} /*1866*/
			if (($get($1.barcode, 6) - 48) >= 5) { //no-else/*1873*/
				$puti($1.upcacode, 0, $geti($1.barcode, 0, 6)); /*1869*/
				$puti($1.upcacode, 6, "0000"); /*1870*/
				$puti($1.upcacode, 10, $geti($1.barcode, 6, 1)); /*1871*/
				break; /*1872*/
			} /*1872*/
		} /*1872*/
		$1.checksum = 0; /*1875*/
		for (var _29 = 0; _29 <= 10; _29 += 1) {
			/*1884*/
			$1.i = _29; /*1877*/
			$1.barchar = $get($1.upcacode, $1.i) - 48; /*1878*/
			if (($1.i % 2) != 0) {
				/*1882*/
				$1.checksum = $1.checksum + $1.barchar; /*1880*/
			} else {
				/*1882*/
				$1.checksum = $1.checksum + ($1.barchar * 3); /*1882*/
			} /*1882*/
		} /*1882*/
		$1.checksum = (10 - ($1.checksum % 10)) % 10; /*1885*/
		if ($1.barcode.length == 8) { //no-else/*1890*/
			if ($get($1.barcode, 7) != ($1.checksum + 48)) { //no-else/*1889*/
				$k[$j++] = 'bwipp.upcEbadCheckDigit'; /*1888*/
				$k[$j++] = "Incorrect UPC check digit provided"; /*1888*/
				$0.raiseerror(); /*1888*/
			} /*1888*/
		} /*1888*/
		$1.pad = $s(8); /*1891*/
		$puti($1.pad, 0, $1.barcode); /*1892*/
		$put($1.pad, 7, $1.checksum + 48); /*1893*/
		$1.barcode = $1.pad; /*1894*/
		$1.txt = $a(8); /*1895*/
		$put($1.txt, 0, $a([$geti($1.barcode, 0, 1), $1.textxoffset, $1.textyoffset, $1.textfont, $1.textsize - 2])); /*1896*/
		$1.mirrormap = $get($1.mirrormaps, $1.checksum); /*1899*/
		if ($get($1.barcode, 0) == 48) { //no-else/*1913*/
			$1.invt = $s($1.mirrormap.length); /*1903*/
			for (var _2l = 0, _2k = $1.mirrormap.length - 1; _2l <= _2k; _2l += 1) {
				/*1911*/
				$1.i = _2l; /*1905*/
				if ($get($1.mirrormap, $1.i) == 48) {
					/*1909*/
					$put($1.invt, $1.i, 49); /*1907*/
				} else {
					/*1909*/
					$put($1.invt, $1.i, 48); /*1909*/
				} /*1909*/
			} /*1909*/
			$1.mirrormap = $1.invt; /*1912*/
		} /*1912*/
		$1.sbs = $s(33); /*1915*/
		$puti($1.sbs, 0, $get($1.encs, 10)); /*1918*/
		for (var _2y = 1; _2y <= 6; _2y += 1) {
			/*1940*/
			$1.i = _2y; /*1921*/
			$search($1.barchars, $geti($1.barcode, $1.i, 1)); /*1923*/
			$j--; /*1924*/
			$1.indx = $k[--$j].length; /*1925*/
			$j -= 2; /*1926*/
			$1.enc = $get($1.encs, $1.indx); /*1927*/
			if ($get($1.mirrormap, $1.i - 1) == 49) { //no-else/*1937*/
				$1.enclen = $1.enc.length; /*1929*/
				$1.revenc = $s($1.enclen); /*1930*/
				for (var _3F = 0, _3E = $1.enclen - 1; _3F <= _3E; _3F += 1) {
					/*1935*/
					$1.j = _3F; /*1932*/
					$1.char = $get($1.enc, $1.j); /*1933*/
					$put($1.revenc, ($1.enclen - $1.j) - 1, $1.char); /*1934*/
				} /*1934*/
				$1.enc = $1.revenc; /*1936*/
			} /*1936*/
			$puti($1.sbs, (($1.i - 1) * 4) + 3, $1.enc); /*1938*/
			$put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), ((($1.i - 1) * 7) + 11) + $1.textxoffset, $1.textyoffset, $1.textfont, $1.textsize])); /*1939*/
		} /*1939*/
		$put($1.txt, 7, $a([$geti($1.barcode, 7, 1), ((6 * 7) + 18) + $1.textxoffset, $1.textyoffset, $1.textfont, $1.textsize - 2])); /*1942*/
		$puti($1.sbs, 27, $get($1.encs, 11)); /*1945*/
		$k[$j++] = Infinity; /*1947*/
		var _3n = $1.sbs; /*1947*/
		for (var _3o = 0, _3p = _3n.length; _3o < _3p; _3o++) {
			/*1947*/
			$k[$j++] = $get(_3n, _3o) - 48; /*1947*/
		} /*1947*/
		$1.sbs = $a(); /*1947*/
		if ($1.includetext) {
			/*1954*/
			$k[$j++] = Infinity; /*1949*/
			$k[$j++] = $1.height; /*1949*/
			$k[$j++] = $1.height; /*1949*/
			for (var _3v = 0, _3w = 12; _3v < _3w; _3v++) {
				/*1949*/
				$k[$j++] = $1.height - 0.075; /*1949*/
			} /*1949*/
			$k[$j++] = $1.height; /*1949*/
			$k[$j++] = $1.height; /*1949*/
			$k[$j++] = $1.height; /*1949*/
			$1.bhs = $a(); /*1949*/
			$k[$j++] = Infinity; /*1950*/
			$k[$j++] = 0; /*1950*/
			$k[$j++] = 0; /*1950*/
			for (var _42 = 0, _43 = 12; _42 < _43; _42++) {
				/*1950*/
				$k[$j++] = 0.075; /*1950*/
			} /*1950*/
			$k[$j++] = 0; /*1950*/
			$k[$j++] = 0; /*1950*/
			$k[$j++] = 0; /*1950*/
			$1.bbs = $a(); /*1950*/
		} else {
			/*1954*/
			$k[$j++] = Infinity; /*1952*/
			for (var _45 = 0, _46 = 17; _45 < _46; _45++) {
				/*1952*/
				$k[$j++] = $1.height; /*1952*/
			} /*1952*/
			$1.bhs = $a(); /*1952*/
			$k[$j++] = Infinity; /*1953*/
			for (var _49 = 0, _4A = 17; _49 < _4A; _49++) {
				/*1953*/
				$k[$j++] = 0; /*1953*/
			} /*1953*/
			$1.bbs = $a(); /*1953*/
			$1.txt = $a([]); /*1954*/
		} /*1954*/
		$1.guardrightypos = 0; /*1956*/
		if ($ne($1.addon, "")) { //no-else/*1977*/
			$k[$j++] = Infinity; /*1967*/
			$k[$j++] = 'dontdraw'; /*1964*/
			$k[$j++] = true; /*1964*/
			$k[$j++] = 'includetext'; /*1964*/
			$k[$j++] = true; /*1964*/
			$k[$j++] = 'height'; /*1964*/
			$k[$j++] = $1.height - 0.15; /*1964*/
			$k[$j++] = 'textxoffset'; /*1964*/
			if ($1.addontextxoffset != "unset") {
				/*1964*/
				$k[$j++] = $1.addontextxoffset; /*1964*/
			} else {
				/*1964*/
				$k[$j++] = 51 + $1.addongap; /*1964*/
			} /*1964*/
			if ($1.addontextyoffset != "unset") { //no-else/*1965*/
				$k[$j++] = 'textyoffset'; /*1965*/
				$k[$j++] = $1.addontextyoffset; /*1965*/
			} /*1965*/
			var _4L = ($1.addontextsize != "unset") ? $1.addontextsize : $1.textsize; /*1966*/
			var _4N = $ne($1.addontextfont, "unset") ? $1.addontextfont : $1.textfont; /*1967*/
			$k[$j++] = 'textsize'; /*1967*/
			$k[$j++] = _4L; /*1967*/
			$k[$j++] = 'textfont'; /*1967*/
			$k[$j++] = _4N; /*1967*/
			$1.addopts = $d(); /*1968*/
			if ($1.addon.length == 2) { //no-else/*1969*/
				$k[$j++] = $1.addon; /*1969*/
				$k[$j++] = $1.addopts; /*1969*/
				$0.ean2(); /*1969*/
			} /*1969*/
			if ($1.addon.length == 5) { //no-else/*1970*/
				$k[$j++] = $1.addon; /*1970*/
				$k[$j++] = $1.addopts; /*1970*/
				$0.ean5(); /*1970*/
			} /*1970*/
			$1.addcode = $k[--$j]; /*1971*/
			$k[$j++] = Infinity; /*1972*/
			$aload($1.sbs); /*1972*/
			$k[$j++] = $1.addongap; /*1972*/
			$aload($get($1.addcode, "sbs")); /*1972*/
			$1.sbs = $a(); /*1972*/
			$k[$j++] = Infinity; /*1973*/
			$aload($1.bhs); /*1973*/
			$forall($get($1.addcode, "bhs"), function() {
				/*1973*/
				var _4e = $k[--$j]; /*1973*/
				$k[$j++] = _4e - 0.075; /*1973*/
			}); /*1973*/
			$1.bhs = $a(); /*1973*/
			$k[$j++] = Infinity; /*1974*/
			$aload($1.bbs); /*1974*/
			$forall($get($1.addcode, "bbs"), function() {
				/*1974*/
				var _4j = $k[--$j]; /*1974*/
				$k[$j++] = _4j + 0.075; /*1974*/
			}); /*1974*/
			$1.bbs = $a(); /*1974*/
			$k[$j++] = Infinity; /*1975*/
			$aload($1.txt); /*1975*/
			$aload($get($1.addcode, "txt")); /*1975*/
			$1.txt = $a(); /*1975*/
			$1.guardrightypos = ($1.height * 72) - 6; /*1976*/
		} /*1976*/
		var _4w = new Map([
			["ren", $0.renlinear],
			["sbs", $1.sbs],
			["bhs", $1.bhs],
			["bbs", $1.bbs],
			["txt", $1.txt],
			["opt", $1.options],
			["guardrightpos", 10],
			["guardrightypos", $1.guardrightypos],
			["borderbottom", 5]
		]); /*1989*/
		$k[$j++] = _4w; /*1992*/
		if (!$1.dontdraw) { //no-else/*1992*/
			$0.renlinear(); /*1992*/
		} /*1992*/
	};
	$0.isbn = function() {
		var $1 = {}; /*2022*/
		$1.options = $k[--$j]; /*2024*/
		$1.barcode = $k[--$j]; /*2025*/
		$1.dontdraw = false; /*2027*/
		$1.includetext = false; /*2028*/
		$1.isbntextfont = 'OCR-A'; /*2029*/
		$1.isbntextsize = 8; /*2030*/
		$1.isbntextxoffset = "unset"; /*2031*/
		$1.isbntextyoffset = "unset"; /*2032*/
		$1.height = 1; /*2033*/
		$1.addongap = 12; /*2034*/
		$1.legacy = false; /*2035*/
		$forall($1.options, function() {
			/*2046*/
			var _3 = $k[--$j]; /*2046*/
			$1[$k[--$j]] = _3; /*2046*/
		}); /*2046*/
		$1.isbntextfont = "" + $1.isbntextfont; /*2048*/
		$1.isbntextsize = +$1.isbntextsize; /*2049*/
		if ($ne($1.isbntextxoffset, "unset")) { //no-else/*2050*/
			$1.isbntextxoffset = +$1.isbntextxoffset; /*2050*/
		} /*2050*/
		if ($ne($1.isbntextyoffset, "unset")) { //no-else/*2051*/
			$1.isbntextyoffset = +$1.isbntextyoffset; /*2051*/
		} /*2051*/
		$1.height = +$1.height; /*2052*/
		$1.addongap = +$1.addongap; /*2053*/
		$search($1.barcode, " "); /*2056*/
		if ($k[--$j]) {
			/*2062*/
			$1.barcode = $k[--$j]; /*2057*/
			$j--; /*2058*/
			$1.addon = $k[--$j]; /*2059*/
		} else {
			/*2062*/
			$j--; /*2061*/
			$1.addon = ""; /*2062*/
		} /*2062*/
		if ((($1.barcode.length != 15) && ($1.barcode.length != 17)) && (($1.barcode.length != 11) && ($1.barcode.length != 13))) { //no-else/*2069*/
			$k[$j++] = 'bwipp.isbnBadLength'; /*2068*/
			$k[$j++] = "ISBN-13 must be 15 or 17 characters including dashes. ISBN-10 must be 11 or 13 characters including dashes"; /*2068*/
			$0.raiseerror(); /*2068*/
		} /*2068*/
		if ((($1.addon.length != 0) && ($1.addon.length != 2)) && ($1.addon.length != 5)) { //no-else/*2072*/
			$k[$j++] = 'bwipp.isbnBadAddOnLength'; /*2071*/
			$k[$j++] = "Add-on for ISBN must be 2 or 5 digits"; /*2071*/
			$0.raiseerror(); /*2071*/
		} /*2071*/
		if ($1.barcode.length >= 15) {
			/*2136*/
			var _Q = $geti($1.barcode, 0, 4); /*2074*/
			if ($ne(_Q, "978-") && $ne(_Q, "979-")) { //no-else/*2076*/
				$k[$j++] = 'bwipp.isbn13badPrefix'; /*2075*/
				$k[$j++] = "ISBN-13 prefix must be 978- or 979-"; /*2075*/
				$0.raiseerror(); /*2075*/
			} /*2075*/
			$1.wasdash = false; /*2077*/
			$1.numdash = 0; /*2077*/
			$1.numdigit = 0; /*2077*/
			$forall($geti($1.barcode, 5, 9), function() {
				/*2091*/
				var _T = $k[--$j]; /*2079*/
				$k[$j++] = _T; /*2086*/
				if (_T == 45) { //no-else/*2086*/
					if ($1.wasdash) { //no-else/*2083*/
						$k[$j++] = 'bwipp.isbn13adjacentDashes'; /*2082*/
						$k[$j++] = "ISBN-13 does not permit adjacent dashes"; /*2082*/
						$0.raiseerror(); /*2082*/
					} /*2082*/
					$1.wasdash = true; /*2084*/
					$1.numdash = $1.numdash + 1; /*2085*/
				} /*2085*/
				var _W = $k[--$j]; /*2087*/
				if ((_W >= 48) && (_W <= 57)) { //no-else/*2090*/
					$1.wasdash = false; /*2088*/
					$1.numdigit = $1.numdigit + 1; /*2089*/
				} /*2089*/
			}); /*2089*/
			if (($1.numdash != 2) || ($1.numdigit != 7)) { //no-else/*2094*/
				$k[$j++] = 'bwipp.isbn13numDashesDigits'; /*2093*/
				$k[$j++] = "Incorrect number of dashes and digits for ISBN-13"; /*2093*/
				$0.raiseerror(); /*2093*/
			} /*2093*/
			var _b = $get($1.barcode, 14); /*2095*/
			if ((_b < 48) || (_b > 57)) { //no-else/*2097*/
				$k[$j++] = 'bwipp.isbn13character15'; /*2096*/
				$k[$j++] = "ISBN-13 character 15 must be a digit"; /*2096*/
				$0.raiseerror(); /*2096*/
			} /*2096*/
			if ($1.barcode.length == 17) { //no-else/*2105*/
				if ($ne($geti($1.barcode, 15, 1), "-")) { //no-else/*2101*/
					$k[$j++] = 'bwipp.isbn13character16'; /*2100*/
					$k[$j++] = "ISBN-13 penultimate character must be a dash"; /*2100*/
					$0.raiseerror(); /*2100*/
				} /*2100*/
				var _g = $get($1.barcode, 16); /*2102*/
				if ((_g < 48) || (_g > 57)) { //no-else/*2104*/
					$k[$j++] = 'bwipp.isbn13character17'; /*2103*/
					$k[$j++] = "ISBN-13 final character must be a digit"; /*2103*/
					$0.raiseerror(); /*2103*/
				} /*2103*/
			} /*2103*/
		} else {
			/*2136*/
			var _i = $get($1.barcode, 0); /*2107*/
			if ((_i < 48) || (_i > 57)) { //no-else/*2109*/
				$k[$j++] = 'bwipp.isbn10FirstDigit'; /*2108*/
				$k[$j++] = "ISBN-10 first character must be a digit"; /*2108*/
				$0.raiseerror(); /*2108*/
			} /*2108*/
			$1.wasdash = false; /*2110*/
			$1.numdash = 0; /*2110*/
			$1.numdigit = 0; /*2110*/
			$forall($geti($1.barcode, 1, 9), function() {
				/*2124*/
				var _l = $k[--$j]; /*2112*/
				$k[$j++] = _l; /*2119*/
				if (_l == 45) { //no-else/*2119*/
					if ($1.wasdash) { //no-else/*2116*/
						$k[$j++] = 'bwipp.isbn10adjacentDashes'; /*2115*/
						$k[$j++] = "ISBN-10 does not permit adjacent dashes"; /*2115*/
						$0.raiseerror(); /*2115*/
					} /*2115*/
					$1.wasdash = true; /*2117*/
					$1.numdash = $1.numdash + 1; /*2118*/
				} /*2118*/
				var _o = $k[--$j]; /*2120*/
				if ((_o >= 48) && (_o <= 57)) { //no-else/*2123*/
					$1.wasdash = false; /*2121*/
					$1.numdigit = $1.numdigit + 1; /*2122*/
				} /*2122*/
			}); /*2122*/
			if (($1.numdash != 2) || ($1.numdigit != 7)) { //no-else/*2127*/
				$k[$j++] = 'bwipp.isbn10numDashesDigits'; /*2126*/
				$k[$j++] = "Incorrect number of dashes and digits for ISBN-10"; /*2126*/
				$0.raiseerror(); /*2126*/
			} /*2126*/
			var _t = $get($1.barcode, 10); /*2128*/
			if ((_t < 48) || (_t > 57)) { //no-else/*2130*/
				$k[$j++] = 'bwipp.isbn10character11'; /*2129*/
				$k[$j++] = "ISBN-10 character 11 must be a digit"; /*2129*/
				$0.raiseerror(); /*2129*/
			} /*2129*/
			if ($1.barcode.length == 13) { //no-else/*2138*/
				if ($ne($geti($1.barcode, 11, 1), "-")) { //no-else/*2134*/
					$k[$j++] = 'bwipp.isbn10character12'; /*2133*/
					$k[$j++] = "ISBN-10 penultimate character must be a dash"; /*2133*/
					$0.raiseerror(); /*2133*/
				} /*2133*/
				var _y = $get($1.barcode, 12); /*2135*/
				if (((_y < 48) || (_y > 57)) && (_y != 88)) { //no-else/*2137*/
					$k[$j++] = 'bwipp.isbn10character13'; /*2136*/
					$k[$j++] = "ISBN-10 final character must be a digit or X"; /*2136*/
					$0.raiseerror(); /*2136*/
				} /*2136*/
			} /*2136*/
		} /*2136*/
		$1.isbntxt = $1.barcode; /*2141*/
		if ($1.isbntxt.length <= 13) { //no-else/*2167*/
			$1.isbn = $s(10); /*2145*/
			$1.checksum = 0; /*2146*/
			$1.i = 0; /*2147*/
			$1.n = 0; /*2147*/
			for (;;) {
				/*2159*/
				$1.isbnchar = $get($1.isbntxt, $1.i) - 48; /*2149*/
				if ($1.isbnchar != -3) { //no-else/*2156*/
					$put($1.isbn, $1.n, $1.isbnchar + 48); /*2151*/
					if ($1.n < 9) { //no-else/*2154*/
						$1.checksum = $1.checksum + ((10 - $1.n) * $1.isbnchar); /*2153*/
					} /*2153*/
					$1.n = $1.n + 1; /*2155*/
				} /*2155*/
				$1.i = $1.i + 1; /*2157*/
				if ($1.i == $1.isbntxt.length) { //no-else/*2158*/
					break; /*2158*/
				} /*2158*/
			} /*2158*/
			var _1I = (11 - ($1.checksum % 11)) % 11; /*2160*/
			$k[$j++] = 'checksum'; /*2160*/
			$k[$j++] = _1I; /*2160*/
			if (_1I == 10) { //no-else/*2160*/
				$j--; /*2160*/
				$k[$j++] = 40; /*2160*/
			} /*2160*/
			var _1J = $k[--$j]; /*2160*/
			$1[$k[--$j]] = _1J + 48; /*2160*/
			$1.isbn = $geti($1.isbn, 0, 9); /*2161*/
			if ($1.isbntxt.length == 13) { //no-else/*2166*/
				if ($get($1.isbntxt, 12) != $1.checksum) { //no-else/*2165*/
					$k[$j++] = 'bwipp.isbn10badCheckDigit'; /*2164*/
					$k[$j++] = "Incorrect ISBN-10 check digit provided"; /*2164*/
					$0.raiseerror(); /*2164*/
				} /*2164*/
			} /*2164*/
		} /*2164*/
		if ((!$1.legacy) || ($1.isbntxt.length >= 15)) { //no-else/*2203*/
			if ($1.isbntxt.length <= 13) { //no-else/*2177*/
				$1.pad = $s(15); /*2173*/
				$puti($1.pad, 0, "978-"); /*2174*/
				$puti($1.pad, 4, $geti($1.isbntxt, 0, 11)); /*2175*/
				$1.isbntxt = $1.pad; /*2176*/
			} /*2176*/
			$1.isbn = $s(13); /*2180*/
			$1.checksum = 0; /*2181*/
			$1.i = 0; /*2182*/
			$1.n = 0; /*2182*/
			for (;;) {
				/*2194*/
				$1.isbnchar = $get($1.isbntxt, $1.i) - 48; /*2184*/
				if ($1.isbnchar != -3) { //no-else/*2191*/
					$put($1.isbn, $1.n, $1.isbnchar + 48); /*2186*/
					if ($1.n < 12) { //no-else/*2189*/
						$k[$j++] = 'checksum'; /*2188*/
						$k[$j++] = $1.isbnchar; /*2188*/
						if (($1.n % 2) != 0) { //no-else/*2188*/
							var _1l = $k[--$j]; /*2188*/
							$k[$j++] = _1l * 3; /*2188*/
						} /*2188*/
						var _1n = $k[--$j]; /*2188*/
						$1[$k[--$j]] = _1n + $1.checksum; /*2188*/
					} /*2188*/
					$1.n = $1.n + 1; /*2190*/
				} /*2190*/
				$1.i = $1.i + 1; /*2192*/
				if ($1.i == $1.isbntxt.length) { //no-else/*2193*/
					break; /*2193*/
				} /*2193*/
			} /*2193*/
			$1.checksum = ((10 - ($1.checksum % 10)) % 10) + 48; /*2195*/
			$1.isbn = $geti($1.isbn, 0, 12); /*2196*/
			if ($1.isbntxt.length == 17) { //no-else/*2201*/
				if ($get($1.isbntxt, 16) != $1.checksum) { //no-else/*2200*/
					$k[$j++] = 'bwipp.isbn13badCheckDigit'; /*2199*/
					$k[$j++] = "Incorrect ISBN-13 check digit provided"; /*2199*/
					$0.raiseerror(); /*2199*/
				} /*2199*/
			} /*2199*/
		} /*2199*/
		var _21 = ($1.isbn.length == 12) ? 22 : 18; /*2206*/
		$1.pad = $s(_21); /*2206*/
		$puti($1.pad, 0, "ISBN "); /*2207*/
		$puti($1.pad, 5, $1.isbntxt); /*2208*/
		$put($1.pad, $1.pad.length - 2, 45); /*2209*/
		$put($1.pad, $1.pad.length - 1, $1.checksum); /*2210*/
		$1.isbntxt = $1.pad; /*2211*/
		$1.barcode = $s(12); /*2214*/
		if ($1.isbn.length == 9) {
			/*2219*/
			$puti($1.barcode, 0, "978"); /*2216*/
			$puti($1.barcode, 3, $1.isbn); /*2217*/
		} else {
			/*2219*/
			$puti($1.barcode, 0, $1.isbn); /*2219*/
		} /*2219*/
		if ($ne($1.addon, "")) { //no-else/*2229*/
			var _2L = $s((12 + $1.addon.length) + 1); /*2224*/
			$puti(_2L, 0, $1.barcode); /*2225*/
			$puti(_2L, 12, " "); /*2226*/
			$puti(_2L, 13, $1.addon); /*2227*/
			$1.barcode = _2L; /*2228*/
		} /*2228*/
		$put($1.options, "dontdraw", true); /*2232*/
		$put($1.options, "addongap", $1.addongap); /*2233*/
		$k[$j++] = 'args'; /*2234*/
		$k[$j++] = $1.barcode; /*2234*/
		$k[$j++] = $1.options; /*2234*/
		$0.ean13(); /*2234*/
		var _2T = $k[--$j]; /*2234*/
		$1[$k[--$j]] = _2T; /*2234*/
		if ($1.includetext) { //no-else/*2253*/
			if ($1.isbntextxoffset == "unset") { //no-else/*2240*/
				$k[$j++] = 'isbntextxoffset'; /*2239*/
				if ($1.isbn.length == 9) {
					/*2239*/
					$k[$j++] = -1; /*2239*/
				} else {
					/*2239*/
					$k[$j++] = -12; /*2239*/
				} /*2239*/
				var _2Y = $k[--$j]; /*2239*/
				$1[$k[--$j]] = _2Y; /*2239*/
			} /*2239*/
			if ($1.isbntextyoffset == "unset") { //no-else/*2243*/
				$1.isbntextyoffset = ($1.height * 72) + 3; /*2242*/
			} /*2242*/
			var _2d = $get($1.args, "txt") !== undefined; /*2244*/
			if (_2d) {
				/*2251*/
				$1.txt = $get($1.args, "txt"); /*2245*/
				$1.newtxt = $a($1.txt.length + 1); /*2246*/
				$puti($1.newtxt, 0, $1.txt); /*2247*/
				$put($1.newtxt, $1.newtxt.length - 1, $a([$1.isbntxt, $1.isbntextxoffset, $1.isbntextyoffset, $1.isbntextfont, $1.isbntextsize])); /*2248*/
				$put($1.args, "txt", $1.newtxt); /*2249*/
			} else {
				/*2251*/
				$put($1.args, "txt", $a([$a([$1.isbntxt, $1.isbntextxoffset, $1.isbntextyoffset, $1.isbntextfont, $1.isbntextsize])])); /*2251*/
			} /*2251*/
		} /*2251*/
		$put($1.args, "opt", $1.options); /*2255*/
		$k[$j++] = $1.args; /*2258*/
		if (!$1.dontdraw) { //no-else/*2258*/
			$0.renlinear(); /*2258*/
		} /*2258*/
	};
	$0.ismn = function() {
		var $1 = {}; /*2288*/
		$1.options = $k[--$j]; /*2290*/
		$1.barcode = $k[--$j]; /*2291*/
		$1.dontdraw = false; /*2293*/
		$1.includetext = false; /*2294*/
		$1.ismntextfont = 'OCR-A'; /*2295*/
		$1.ismntextsize = 8; /*2296*/
		$1.ismntextxoffset = "unset"; /*2297*/
		$1.ismntextyoffset = "unset"; /*2298*/
		$1.height = 1; /*2299*/
		$1.addongap = 12; /*2300*/
		$1.legacy = false; /*2301*/
		$forall($1.options, function() {
			/*2312*/
			var _3 = $k[--$j]; /*2312*/
			$1[$k[--$j]] = _3; /*2312*/
		}); /*2312*/
		$1.ismntextfont = "" + $1.ismntextfont; /*2314*/
		$1.ismntextsize = +$1.ismntextsize; /*2315*/
		if ($ne($1.ismntextxoffset, "unset")) { //no-else/*2316*/
			$1.ismntextxoffset = +$1.ismntextxoffset; /*2316*/
		} /*2316*/
		if ($ne($1.ismntextyoffset, "unset")) { //no-else/*2317*/
			$1.ismntextyoffset = +$1.ismntextyoffset; /*2317*/
		} /*2317*/
		$1.height = +$1.height; /*2318*/
		$1.addongap = +$1.addongap; /*2319*/
		$search($1.barcode, " "); /*2322*/
		if ($k[--$j]) {
			/*2328*/
			$1.barcode = $k[--$j]; /*2323*/
			$j--; /*2324*/
			$1.addon = $k[--$j]; /*2325*/
		} else {
			/*2328*/
			$j--; /*2327*/
			$1.addon = ""; /*2328*/
		} /*2328*/
		if ((($1.barcode.length != 15) && ($1.barcode.length != 17)) && (($1.barcode.length != 11) && ($1.barcode.length != 13))) { //no-else/*2335*/
			$k[$j++] = 'bwipp.ismnBadLength'; /*2334*/
			$k[$j++] = "ISMN-13 must be 15 or 17 characters including dashes. ISMN-10 must be 11 or 13 characters including dashes"; /*2334*/
			$0.raiseerror(); /*2334*/
		} /*2334*/
		if ((($1.addon.length != 0) && ($1.addon.length != 2)) && ($1.addon.length != 5)) { //no-else/*2338*/
			$k[$j++] = 'bwipp.ismnBadAddOnLength'; /*2337*/
			$k[$j++] = "Add-on for ISMN must be 2 or 5 digits"; /*2337*/
			$0.raiseerror(); /*2337*/
		} /*2337*/
		if ($1.barcode.length >= 15) {
			/*2405*/
			if ($ne($geti($1.barcode, 0, 4), "979-")) { //no-else/*2342*/
				$k[$j++] = 'bwipp.ismn13badPrefix'; /*2341*/
				$k[$j++] = "ISMN-13 prefix must be 979-"; /*2341*/
				$0.raiseerror(); /*2341*/
			} /*2341*/
			$1.wasdash = false; /*2343*/
			$1.numdash = 0; /*2343*/
			$1.numdigit = 0; /*2343*/
			$forall($geti($1.barcode, 5, 9), function() {
				/*2357*/
				var _T = $k[--$j]; /*2345*/
				$k[$j++] = _T; /*2352*/
				if (_T == 45) { //no-else/*2352*/
					if ($1.wasdash) { //no-else/*2349*/
						$k[$j++] = 'bwipp.ismn13adjacentDashes'; /*2348*/
						$k[$j++] = "ISMN-13 does not permit adjacent dashes"; /*2348*/
						$0.raiseerror(); /*2348*/
					} /*2348*/
					$1.wasdash = true; /*2350*/
					$1.numdash = $1.numdash + 1; /*2351*/
				} /*2351*/
				var _W = $k[--$j]; /*2353*/
				if ((_W >= 48) && (_W <= 57)) { //no-else/*2356*/
					$1.wasdash = false; /*2354*/
					$1.numdigit = $1.numdigit + 1; /*2355*/
				} /*2355*/
			}); /*2355*/
			if (($1.numdash != 2) || ($1.numdigit != 7)) { //no-else/*2360*/
				$k[$j++] = 'bwipp.ismn13numDashesDigits'; /*2359*/
				$k[$j++] = "Incorrect number of dashes and digits for ISMN-13"; /*2359*/
				$0.raiseerror(); /*2359*/
			} /*2359*/
			var _b = $get($1.barcode, 14); /*2361*/
			if ((_b < 48) || (_b > 57)) { //no-else/*2363*/
				$k[$j++] = 'bwipp.ismn13character15'; /*2362*/
				$k[$j++] = "ISMN-13 character 15 must be a digit"; /*2362*/
				$0.raiseerror(); /*2362*/
			} /*2362*/
			if ($1.barcode.length == 17) { //no-else/*2371*/
				if ($ne($geti($1.barcode, 15, 1), "-")) { //no-else/*2367*/
					$k[$j++] = 'bwipp.ismn13character16'; /*2366*/
					$k[$j++] = "ISMN-13 penultimate character must be a dash"; /*2366*/
					$0.raiseerror(); /*2366*/
				} /*2366*/
				var _g = $get($1.barcode, 16); /*2368*/
				if ((_g < 48) || (_g > 57)) { //no-else/*2370*/
					$k[$j++] = 'bwipp.ismn13character17'; /*2369*/
					$k[$j++] = "ISMN-13 final character must be a digit"; /*2369*/
					$0.raiseerror(); /*2369*/
				} /*2369*/
			} /*2369*/
		} else {
			/*2405*/
			if ($ne($geti($1.barcode, 0, 2), "M-")) { //no-else/*2375*/
				$k[$j++] = 'bwipp.ismn10badPrefix'; /*2374*/
				$k[$j++] = "ISMN-10 prefix must be M-"; /*2374*/
				$0.raiseerror(); /*2374*/
			} /*2374*/
			var _k = $get($1.barcode, 2); /*2376*/
			if ((_k < 48) || (_k > 57)) { //no-else/*2378*/
				$k[$j++] = 'bwipp.ismn10character3'; /*2377*/
				$k[$j++] = "ISMN-10 character 3 must be a digit"; /*2377*/
				$0.raiseerror(); /*2377*/
			} /*2377*/
			$1.wasdash = false; /*2379*/
			$1.numdash = 0; /*2379*/
			$1.numdigit = 0; /*2379*/
			$forall($geti($1.barcode, 3, 7), function() {
				/*2393*/
				var _n = $k[--$j]; /*2381*/
				$k[$j++] = _n; /*2388*/
				if (_n == 45) { //no-else/*2388*/
					if ($1.wasdash) { //no-else/*2385*/
						$k[$j++] = 'bwipp.ismn10adjacentDashes'; /*2384*/
						$k[$j++] = "ISMN-10 does not permit adjacent dashes"; /*2384*/
						$0.raiseerror(); /*2384*/
					} /*2384*/
					$1.wasdash = true; /*2386*/
					$1.numdash = $1.numdash + 1; /*2387*/
				} /*2387*/
				var _q = $k[--$j]; /*2389*/
				if ((_q >= 48) && (_q <= 57)) { //no-else/*2392*/
					$1.wasdash = false; /*2390*/
					$1.numdigit = $1.numdigit + 1; /*2391*/
				} /*2391*/
			}); /*2391*/
			if (($1.numdash != 1) || ($1.numdigit != 6)) { //no-else/*2396*/
				$k[$j++] = 'bwipp.ismn10numDashesDigits'; /*2395*/
				$k[$j++] = "Incorrect number of dashes and digits for ISMN-10"; /*2395*/
				$0.raiseerror(); /*2395*/
			} /*2395*/
			var _v = $get($1.barcode, 10); /*2397*/
			if ((_v < 48) || (_v > 57)) { //no-else/*2399*/
				$k[$j++] = 'bwipp.ismn10character11'; /*2398*/
				$k[$j++] = "ISMN-10 character 11 must be a digit"; /*2398*/
				$0.raiseerror(); /*2398*/
			} /*2398*/
			if ($1.barcode.length == 13) { //no-else/*2407*/
				if ($ne($geti($1.barcode, 11, 1), "-")) { //no-else/*2403*/
					$k[$j++] = 'bwipp.ismn10character12'; /*2402*/
					$k[$j++] = "ISMN-10 penultimate character must be a dash"; /*2402*/
					$0.raiseerror(); /*2402*/
				} /*2402*/
				var _10 = $get($1.barcode, 12); /*2404*/
				if (((_10 < 48) || (_10 > 57)) && (_10 != 88)) { //no-else/*2406*/
					$k[$j++] = 'bwipp.ismn10character13'; /*2405*/
					$k[$j++] = "ISMN-10 final character must be a digit or X"; /*2405*/
					$0.raiseerror(); /*2405*/
				} /*2405*/
			} /*2405*/
		} /*2405*/
		$1.ismntxt = $1.barcode; /*2410*/
		$1.legacytxt = ""; /*2413*/
		if ($1.ismntxt.length <= 13) { //no-else/*2420*/
			$1.legacytxt = $1.ismntxt; /*2415*/
			$1.pad = $s($1.ismntxt.length + 4); /*2416*/
			$puti($1.pad, 0, "979-0-"); /*2417*/
			$puti($1.pad, 6, $geti($1.ismntxt, 2, $1.ismntxt.length - 2)); /*2418*/
			$1.ismntxt = $1.pad; /*2419*/
		} /*2419*/
		$1.ismn = $s(13); /*2423*/
		$1.checksum = 0; /*2424*/
		$1.i = 0; /*2425*/
		$1.n = 0; /*2425*/
		for (;;) {
			/*2441*/
			$1.ismnchar = $get($1.ismntxt, $1.i) - 48; /*2427*/
			if ($1.ismnchar != -3) { //no-else/*2438*/
				$put($1.ismn, $1.n, $1.ismnchar + 48); /*2429*/
				if ($1.n < 12) { //no-else/*2436*/
					if (($1.n % 2) == 0) {
						/*2434*/
						$1.checksum = $1.ismnchar + $1.checksum; /*2432*/
					} else {
						/*2434*/
						$1.checksum = ($1.ismnchar * 3) + $1.checksum; /*2434*/
					} /*2434*/
				} /*2434*/
				$1.n = $1.n + 1; /*2437*/
			} /*2437*/
			$1.i = $1.i + 1; /*2439*/
			if ($1.i == $1.ismntxt.length) { //no-else/*2440*/
				break; /*2440*/
			} /*2440*/
		} /*2440*/
		$1.checksum = ((10 - ($1.checksum % 10)) % 10) + 48; /*2442*/
		if (($1.barcode.length == 13) || ($1.barcode.length == 17)) { //no-else/*2449*/
			var _1X = $1.barcode; /*2446*/
			if ($get(_1X, _1X.length - 1) != $1.checksum) { //no-else/*2448*/
				$k[$j++] = 'bwipp.ismnBadCheckDigit'; /*2447*/
				$k[$j++] = "Incorrect ISMN check digit provided"; /*2447*/
				$0.raiseerror(); /*2447*/
			} /*2447*/
		} /*2447*/
		if ($1.legacy && $ne($1.legacytxt, "")) {
			/*2456*/
			$1.ismntxt = $1.legacytxt; /*2453*/
			$1.pad = $s(18); /*2454*/
		} else {
			/*2456*/
			$1.pad = $s(22); /*2456*/
		} /*2456*/
		$puti($1.pad, 0, "ISMN "); /*2458*/
		$puti($1.pad, 5, $1.ismntxt); /*2459*/
		$put($1.pad, $1.pad.length - 2, 45); /*2460*/
		$put($1.pad, $1.pad.length - 1, $1.checksum); /*2461*/
		$1.ismntxt = $1.pad; /*2462*/
		$1.barcode = $geti($1.ismn, 0, 12); /*2465*/
		if ($ne($1.addon, "")) { //no-else/*2474*/
			var _1s = $s((12 + $1.addon.length) + 1); /*2469*/
			$puti(_1s, 0, $1.barcode); /*2470*/
			$puti(_1s, 12, " "); /*2471*/
			$puti(_1s, 13, $1.addon); /*2472*/
			$1.barcode = _1s; /*2473*/
		} /*2473*/
		$put($1.options, "dontdraw", true); /*2477*/
		$put($1.options, "addongap", $1.addongap); /*2478*/
		$k[$j++] = 'args'; /*2479*/
		$k[$j++] = $1.barcode; /*2479*/
		$k[$j++] = $1.options; /*2479*/
		$0.ean13(); /*2479*/
		var _20 = $k[--$j]; /*2479*/
		$1[$k[--$j]] = _20; /*2479*/
		if ($1.includetext) { //no-else/*2498*/
			if ($1.ismntextxoffset == "unset") { //no-else/*2485*/
				$k[$j++] = 'ismntextxoffset'; /*2484*/
				if ($1.ismntxt.length == 18) {
					/*2484*/
					$k[$j++] = -1; /*2484*/
				} else {
					/*2484*/
					$k[$j++] = -12; /*2484*/
				} /*2484*/
				var _25 = $k[--$j]; /*2484*/
				$1[$k[--$j]] = _25; /*2484*/
			} /*2484*/
			if ($1.ismntextyoffset == "unset") { //no-else/*2488*/
				$1.ismntextyoffset = ($1.height * 72) + 3; /*2487*/
			} /*2487*/
			var _2A = $get($1.args, "txt") !== undefined; /*2489*/
			if (_2A) {
				/*2496*/
				$1.txt = $get($1.args, "txt"); /*2490*/
				$1.newtxt = $a($1.txt.length + 1); /*2491*/
				$puti($1.newtxt, 0, $1.txt); /*2492*/
				$put($1.newtxt, $1.newtxt.length - 1, $a([$1.ismntxt, $1.ismntextxoffset, $1.ismntextyoffset, $1.ismntextfont, $1.ismntextsize])); /*2493*/
				$put($1.args, "txt", $1.newtxt); /*2494*/
			} else {
				/*2496*/
				$put($1.args, "txt", $a([$a([$1.ismntxt, $1.ismntextxoffset, $1.ismntextyoffset, $1.ismntextfont, $1.ismntextsize])])); /*2496*/
			} /*2496*/
		} /*2496*/
		$put($1.args, "opt", $1.options); /*2500*/
		$k[$j++] = $1.args; /*2503*/
		if (!$1.dontdraw) { //no-else/*2503*/
			$0.renlinear(); /*2503*/
		} /*2503*/
	};
	$0.issn = function() {
		var $1 = {}; /*2533*/
		$1.options = $k[--$j]; /*2535*/
		$1.issntxt = $k[--$j]; /*2536*/
		$1.dontdraw = false; /*2538*/
		$1.includetext = false; /*2539*/
		$1.issntextfont = 'OCR-A'; /*2540*/
		$1.issntextsize = 8; /*2541*/
		$1.issntextxoffset = "unset"; /*2542*/
		$1.issntextyoffset = "unset"; /*2543*/
		$1.height = 1; /*2544*/
		$1.addongap = 12; /*2545*/
		$forall($1.options, function() {
			/*2556*/
			var _3 = $k[--$j]; /*2556*/
			$1[$k[--$j]] = _3; /*2556*/
		}); /*2556*/
		$1.issntextfont = "" + $1.issntextfont; /*2558*/
		$1.issntextsize = +$1.issntextsize; /*2559*/
		if ($ne($1.issntextxoffset, "unset")) { //no-else/*2560*/
			$1.issntextxoffset = +$1.issntextxoffset; /*2560*/
		} /*2560*/
		if ($ne($1.issntextyoffset, "unset")) { //no-else/*2561*/
			$1.issntextyoffset = +$1.issntextyoffset; /*2561*/
		} /*2561*/
		$1.height = +$1.height; /*2562*/
		$1.addongap = +$1.addongap; /*2563*/
		$search($1.issntxt, " "); /*2566*/
		if ($k[--$j]) {
			/*2572*/
			$1.issntxt = $k[--$j]; /*2567*/
			$j--; /*2568*/
			$1.seqvar = $k[--$j]; /*2569*/
		} else {
			/*2572*/
			$j--; /*2571*/
			$1.seqvar = "00"; /*2572*/
		} /*2572*/
		$search($1.seqvar, " "); /*2576*/
		if ($k[--$j]) {
			/*2582*/
			$1.seqvar = $k[--$j]; /*2577*/
			$j--; /*2578*/
			$1.addon = $k[--$j]; /*2579*/
		} else {
			/*2582*/
			$j--; /*2581*/
			$1.addon = ""; /*2582*/
		} /*2582*/
		if (($1.issntxt.length != 8) && ($1.issntxt.length != 9)) { //no-else/*2588*/
			$k[$j++] = 'bwipp.issnBadLength'; /*2587*/
			$k[$j++] = "ISSN must be 8 or 9 characters including dash, in the format XXXX-XXXX"; /*2587*/
			$0.raiseerror(); /*2587*/
		} /*2587*/
		$forall($geti($1.issntxt, 0, 4), function() {
			/*2593*/
			var _P = $k[--$j]; /*2590*/
			if ((_P < 48) || (_P > 57)) { //no-else/*2592*/
				$k[$j++] = 'bwipp.issnFirstThroughFourthNotNumeric'; /*2591*/
				$k[$j++] = "ISSN first four characters must be numeral characters"; /*2591*/
				$0.raiseerror(); /*2591*/
			} /*2591*/
		}); /*2591*/
		if ($ne($geti($1.issntxt, 4, 1), "-")) { //no-else/*2596*/
			$k[$j++] = 'bwipp.issnNeedsDash'; /*2595*/
			$k[$j++] = "ISSN fifth character must be a dash"; /*2595*/
			$0.raiseerror(); /*2595*/
		} /*2595*/
		$forall($geti($1.issntxt, 5, 3), function() {
			/*2601*/
			var _U = $k[--$j]; /*2598*/
			if ((_U < 48) || (_U > 57)) { //no-else/*2600*/
				$k[$j++] = 'bwipp.issnSixthThroughEighthNotNumeric'; /*2599*/
				$k[$j++] = "ISSN sixth through eighth characters must be numerals"; /*2599*/
				$0.raiseerror(); /*2599*/
			} /*2599*/
		}); /*2599*/
		if ($1.issntxt.length == 9) { //no-else/*2606*/
			var _X = $get($1.issntxt, 8); /*2603*/
			if (((_X < 48) || (_X > 57)) && (_X != 88)) { //no-else/*2605*/
				$k[$j++] = 'bwipp.issnNinthCharacterBadFormat'; /*2604*/
				$k[$j++] = "ISSN ninth character must be a number or the character X"; /*2604*/
				$0.raiseerror(); /*2604*/
			} /*2604*/
		} /*2604*/
		if ($1.seqvar.length != 2) { //no-else/*2609*/
			$k[$j++] = 'bwipp.issnBadSequenceVariantLength'; /*2608*/
			$k[$j++] = "Sequence variant for ISSN must be 2 digits"; /*2608*/
			$0.raiseerror(); /*2608*/
		} /*2608*/
		$forall($1.seqvar, function() {
			/*2614*/
			var _a = $k[--$j]; /*2611*/
			if ((_a < 48) || (_a > 57)) { //no-else/*2613*/
				$k[$j++] = 'bwipp.issnSequenceVariantBadCharacter'; /*2612*/
				$k[$j++] = "Sequence variant for ISSN must contain only digits"; /*2612*/
				$0.raiseerror(); /*2612*/
			} /*2612*/
		}); /*2612*/
		if ((($1.addon.length != 0) && ($1.addon.length != 2)) && ($1.addon.length != 5)) { //no-else/*2617*/
			$k[$j++] = 'bwipp.issnBadAddOnLength'; /*2616*/
			$k[$j++] = "Add-on for ISSN must be 2 or 5 digits"; /*2616*/
			$0.raiseerror(); /*2616*/
		} /*2616*/
		$1.issn = $s(8); /*2620*/
		$1.checksum = 0; /*2621*/
		$1.i = 0; /*2622*/
		$1.n = 0; /*2622*/
		for (;;) {
			/*2634*/
			$1.issnchar = $get($1.issntxt, $1.i) - 48; /*2624*/
			if ($1.issnchar != -3) { //no-else/*2631*/
				$put($1.issn, $1.n, $1.issnchar + 48); /*2626*/
				if ($1.n < 7) { //no-else/*2629*/
					$1.checksum = $1.checksum + ($1.issnchar * (8 - $1.n)); /*2628*/
				} /*2628*/
				$1.n = $1.n + 1; /*2630*/
			} /*2630*/
			$1.i = $1.i + 1; /*2632*/
			if ($1.i == $1.issntxt.length) { //no-else/*2633*/
				break; /*2633*/
			} /*2633*/
		} /*2633*/
		$1.checksum = (11 - ($1.checksum % 11)) % 11; /*2635*/
		var _w = $1.checksum + 48; /*2636*/
		$k[$j++] = 'checksum'; /*2636*/
		$k[$j++] = _w; /*2636*/
		if (_w == 58) { //no-else/*2636*/
			$j--; /*2636*/
			$k[$j++] = 88; /*2636*/
		} /*2636*/
		var _x = $k[--$j]; /*2636*/
		$1[$k[--$j]] = _x; /*2636*/
		if ($1.issntxt.length == 9) { //no-else/*2641*/
			if ($get($1.issntxt, 8) != $1.checksum) { //no-else/*2640*/
				$k[$j++] = 'bwipp.issnBadCheckDigit'; /*2639*/
				$k[$j++] = "Incorrect ISSN check digit provided"; /*2639*/
				$0.raiseerror(); /*2639*/
			} /*2639*/
		} /*2639*/
		$1.pad = $s(14); /*2644*/
		$puti($1.pad, 0, "ISSN "); /*2645*/
		$puti($1.pad, 5, $1.issntxt); /*2646*/
		$put($1.pad, 13, $1.checksum); /*2647*/
		$1.issntxt = $1.pad; /*2648*/
		$1.barcode = $geti($1.issn, 0, 7); /*2651*/
		$1.barcode = $s(12); /*2654*/
		$puti($1.barcode, 0, "977"); /*2655*/
		$puti($1.barcode, 3, $1.issn); /*2656*/
		$puti($1.barcode, 10, $1.seqvar); /*2657*/
		if ($ne($1.addon, "")) { //no-else/*2666*/
			var _1K = $s((12 + $1.addon.length) + 1); /*2661*/
			$puti(_1K, 0, $1.barcode); /*2662*/
			$puti(_1K, 12, " "); /*2663*/
			$puti(_1K, 13, $1.addon); /*2664*/
			$1.barcode = _1K; /*2665*/
		} /*2665*/
		$put($1.options, "dontdraw", true); /*2669*/
		$put($1.options, "addongap", $1.addongap); /*2670*/
		$k[$j++] = 'args'; /*2671*/
		$k[$j++] = $1.barcode; /*2671*/
		$k[$j++] = $1.options; /*2671*/
		$0.ean13(); /*2671*/
		var _1S = $k[--$j]; /*2671*/
		$1[$k[--$j]] = _1S; /*2671*/
		if ($1.includetext) { //no-else/*2688*/
			if ($1.issntextxoffset == "unset") { //no-else/*2675*/
				$1.issntextxoffset = 10; /*2675*/
			} /*2675*/
			if ($1.issntextyoffset == "unset") { //no-else/*2678*/
				$1.issntextyoffset = ($1.height * 72) + 3; /*2677*/
			} /*2677*/
			var _1Z = $get($1.args, "txt") !== undefined; /*2679*/
			if (_1Z) {
				/*2686*/
				$1.txt = $get($1.args, "txt"); /*2680*/
				$1.newtxt = $a($1.txt.length + 1); /*2681*/
				$puti($1.newtxt, 0, $1.txt); /*2682*/
				$put($1.newtxt, $1.newtxt.length - 1, $a([$1.issntxt, $1.issntextxoffset, $1.issntextyoffset, $1.issntextfont, $1.issntextsize])); /*2683*/
				$put($1.args, "txt", $1.newtxt); /*2684*/
			} else {
				/*2686*/
				$put($1.args, "txt", $a([$a([$1.issntxt, $1.issntextxoffset, $1.issntextyoffset, $1.issntextfont, $1.issntextsize])])); /*2686*/
			} /*2686*/
		} /*2686*/
		$put($1.args, "opt", $1.options); /*2690*/
		$k[$j++] = $1.args; /*2693*/
		if (!$1.dontdraw) { //no-else/*2693*/
			$0.renlinear(); /*2693*/
		} /*2693*/
	};
	$0.code128 = function() {
		var $1 = {}; /*2722*/
		$1.options = $k[--$j]; /*2724*/
		$1.barcode = $k[--$j]; /*2725*/
		$1.dontdraw = false; /*2727*/
		$1.includetext = false; /*2728*/
		$1.textfont = "OCR-B"; /*2729*/
		$1.textsize = 10; /*2730*/
		$1.textxoffset = 0; /*2731*/
		$1.textyoffset = -8.5; /*2732*/
		$1.height = 1; /*2733*/
		$1.encoding = "auto"; /*2734*/
		$1.raw = false; /*2735*/
		$1.parse = false; /*2736*/
		$1.parsefnc = false; /*2737*/
		$forall($1.options, function() {
			/*2748*/
			var _3 = $k[--$j]; /*2748*/
			$1[$k[--$j]] = _3; /*2748*/
		}); /*2748*/
		$1.textfont = "" + $1.textfont; /*2750*/
		$1.textsize = +$1.textsize; /*2751*/
		$1.textxoffset = +$1.textxoffset; /*2752*/
		$1.textyoffset = +$1.textyoffset; /*2753*/
		$1.height = +$1.height; /*2754*/
		$1.barlen = $1.barcode.length; /*2777*/
		$1.sta = -1; /*2780*/
		$1.stb = -2; /*2780*/
		$1.stc = -3; /*2780*/
		$1.swa = -4; /*2781*/
		$1.swb = -5; /*2781*/
		$1.swc = -6; /*2781*/
		$1.fn1 = -7; /*2782*/
		$1.fn2 = -8; /*2782*/
		$1.fn3 = -9; /*2782*/
		$1.fn4 = -10; /*2783*/
		$1.sft = -11; /*2783*/
		$1.stp = -12; /*2783*/
		$1.lka = -13; /*2784*/
		$1.lkc = -14; /*2784*/
		$1.charmaps = $a([$a([32, 32, "00"]), $a(["!", "!", "01"]), $a(["\"", "\"", "02"]), $a(["#", "#", "03"]), $a(["$", "$", "04"]), $a(["%", "%", "05"]), $a(["&", "&", "06"]), $a(["'", "'", "07"]), $a([40, 40, "08"]), $a([41, 41, "09"]), $a(["*", "*", "10"]), $a(["+", "+", "11"]), $a([",", ",", "12"]), $a(["-", "-", "13"]), $a([".", ".", "14"]), $a(["/", "/", "15"]), $a(["0", "0", "16"]), $a(["1", "1", "17"]), $a(["2", "2", "18"]), $a(["3", "3", "19"]), $a(["4", "4", "20"]), $a(["5", "5", "21"]), $a(["6", "6", "22"]), $a(["7", "7", "23"]), $a(["8", "8", "24"]), $a(["9", "9", "25"]), $a([":", ":", "26"]), $a([";", ";", "27"]), $a(["<", "<", "28"]), $a(["=", "=", "29"]), $a([">", ">", "30"]), $a(["?", "?", "31"]), $a(["@", "@", "32"]), $a(["A", "A", "33"]), $a(["B", "B", "34"]), $a(["C", "C", "35"]), $a(["D", "D", "36"]), $a(["E", "E", "37"]), $a(["F", "F", "38"]), $a(["G", "G", "39"]), $a(["H", "H", "40"]), $a(["I", "I", "41"]), $a(["J", "J", "42"]), $a(["K", "K", "43"]), $a(["L", "L", "44"]), $a(["M", "M", "45"]), $a(["N", "N", "46"]), $a(["O", "O", "47"]), $a(["P", "P", "48"]), $a(["Q", "Q", "49"]), $a(["R", "R", "50"]), $a(["S", "S", "51"]), $a(["T", "T", "52"]), $a(["U", "U", "53"]), $a(["V", "V", "54"]), $a(["W", "W", "55"]), $a(["X", "X", "56"]), $a(["Y", "Y", "57"]), $a(["Z", "Z", "58"]), $a(["[", "[", "59"]), $a([92, 92, "60"]), $a(["]", "]", "61"]), $a(["^", "^", "62"]), $a(["_", "_", "63"]), $a([0, "`", "64"]), $a([1, "a", "65"]), $a([2, "b", "66"]), $a([3, "c", "67"]), $a([4, "d", "68"]), $a([5, "e", "69"]), $a([6, "f", "70"]), $a([7, "g", "71"]), $a([8, "h", "72"]), $a([9, "i", "73"]), $a([10, "j", "74"]), $a([11, "k", "75"]), $a([12, "l", "76"]), $a([13, "m", "77"]), $a([14, "n", "78"]), $a([15, "o", "79"]), $a([16, "p", "80"]), $a([17, "q", "81"]), $a([18, "r", "82"]), $a([19, "s", "83"]), $a([20, "t", "84"]), $a([21, "u", "85"]), $a([22, "v", "86"]), $a([23, "w", "87"]), $a([24, "x", "88"]), $a([25, "y", "89"]), $a([26, "z", "90"]), $a([27, "{", "91"]), $a([28, "|", "92"]), $a([29, "}", "93"]), $a([30, "~", "94"]), $a([31, 127, "95"]), $a([$1.fn3, $1.fn3, "96"]), $a([$1.fn2, $1.fn2, "97"]), $a([$1.sft, $1.sft, "98"]), $a([$1.swc, $1.swc, "99"]), $a([$1.swb, $1.fn4, $1.swb]), $a([$1.fn4, $1.swa, $1.swa]), $a([$1.fn1, $1.fn1, $1.fn1]), $a([$1.sta, $1.sta, $1.sta]), $a([$1.stb, $1.stb, $1.stb]), $a([$1.stc, $1.stc, $1.stc]), $a([$1.stp, $1.stp, $1.stp])]); /*2825*/
		$1.charvals = $a([new Map, new Map, new Map]); /*2828*/
		for (var _2R = 0, _2Q = $1.charmaps.length - 1; _2R <= _2Q; _2R += 1) {
			/*2837*/
			$1.i = _2R; /*2830*/
			$1.encs = $get($1.charmaps, $1.i); /*2831*/
			for (var _2V = 0; _2V <= 2; _2V += 1) {
				/*2836*/
				$1.j = _2V; /*2833*/
				var _2Y = $get($1.encs, $1.j); /*2834*/
				$k[$j++] = _2Y; /*2834*/
				if ($eq($type(_2Y), 'stringtype')) { //no-else/*2834*/
					var _2b = $get($k[--$j], 0); /*2834*/
					$k[$j++] = _2b; /*2834*/
				} /*2834*/
				$put($get($1.charvals, $1.j), $k[--$j], $1.i); /*2835*/
			} /*2835*/
		} /*2835*/
		$1.seta = $get($1.charvals, 0); /*2838*/
		$1.setb = $get($1.charvals, 1); /*2839*/
		$1.setc = $get($1.charvals, 2); /*2840*/
		$put($1.seta, $1.lka, $get($1.seta, $1.swb)); /*2843*/
		$put($1.seta, $1.lkc, $get($1.seta, $1.swc)); /*2843*/
		$put($1.setb, $1.lka, $get($1.setb, $1.swc)); /*2844*/
		$put($1.setb, $1.lkc, $get($1.setb, $1.swa)); /*2844*/
		$put($1.setc, $1.lka, $get($1.setc, $1.swa)); /*2845*/
		$put($1.setc, $1.lkc, $get($1.setc, $1.swb)); /*2845*/
		if ($1.raw) { //no-else/*2847*/
			$1.encoding = "raw"; /*2847*/
		} /*2847*/
		if ($eq($1.encoding, "raw")) { //no-else/*2861*/
			$1.cws = $a($1.barlen); /*2850*/
			$1.i = 0; /*2851*/
			$1.j = 0; /*2851*/
			for (;;) {
				/*2858*/
				if ($1.i == $1.barlen) { //no-else/*2853*/
					break; /*2853*/
				} /*2853*/
				$1.cw = ~~$z($geti($1.barcode, $1.i + 1, 3)); /*2854*/
				$put($1.cws, $1.j, $1.cw); /*2855*/
				$1.i = $1.i + 4; /*2856*/
				$1.j = $1.j + 1; /*2857*/
			} /*2857*/
			$1.cws = $geti($1.cws, 0, $1.j); /*2859*/
			$1.text = ""; /*2860*/
		} /*2860*/
		if ($eq($1.encoding, "auto")) { //no-else/*3138*/
			var _3e = new Map([
				["FNC1", $1.fn1],
				["FNC2", $1.fn2],
				["FNC3", $1.fn3],
				["LNKA", $1.lka],
				["LNKC", $1.lkc]
			]); /*2871*/
			$1.fncvals = _3e; /*2872*/
			$1.msg = $a($1.barlen); /*2875*/
			$1.text = $s($1.barlen); /*2876*/
			$1.i = 0; /*2877*/
			$1.j = 0; /*2877*/
			for (;;) {
				/*2918*/
				if ($1.i == $1.barlen) { //no-else/*2878*/
					break; /*2878*/
				} /*2878*/
				$1.char = $get($1.barcode, $1.i); /*2879*/
				$put($1.text, $1.j, $1.char); /*2880*/
				$1.i = $1.i + 1; /*2881*/
				if (($1.parsefnc && ($1.char == 94)) && ($1.i < $1.barlen)) { //no-else/*2915*/
					if ($get($1.barcode, $1.i) != 94) {
						/*2913*/
						$puti($1.text, $1.j, " "); /*2884*/
						if ($1.i >= ($1.barlen - 3)) { //no-else/*2887*/
							$k[$j++] = 'bwipp.truncatedFNC'; /*2886*/
							$k[$j++] = "Function character truncated"; /*2886*/
							$0.raiseerror(); /*2886*/
						} /*2886*/
						var _45 = $geti($1.barcode, $1.i, 4); /*2888*/
						$k[$j++] = _45; /*2910*/
						if ($ne($geti(_45, 0, 3), "ECI")) {
							/*2909*/
							var _47 = $k[--$j]; /*2890*/
							var _49 = $get($1.fncvals, _47) !== undefined; /*2890*/
							$k[$j++] = _47; /*2894*/
							if (!_49) { //no-else/*2894*/
								var _4A = $k[--$j]; /*2891*/
								var _4B = $s(_4A.length + 28); /*2891*/
								$puti(_4B, 28, _4A); /*2891*/
								$puti(_4B, 0, "Unknown function character: "); /*2892*/
								$k[$j++] = 'bwipp.unknownFNC'; /*2893*/
								$k[$j++] = _4B; /*2893*/
								$0.raiseerror(); /*2893*/
							} /*2893*/
							var _4E = $get($1.fncvals, $k[--$j]); /*2895*/
							$1.i = $1.i + 4; /*2896*/
							$k[$j++] = _4E; /*2896*/
						} else {
							/*2909*/
							$j--; /*2898*/
							if ($1.i >= ($1.barlen - 8)) { //no-else/*2901*/
								$k[$j++] = 'bwipp.truncatedECI'; /*2900*/
								$k[$j++] = "ECI truncated"; /*2900*/
								$0.raiseerror(); /*2900*/
							} /*2900*/
							var _4K = $geti($1.barcode, $1.i + 3, 6); /*2902*/
							$k[$j++] = _4K; /*2907*/
							$forall(_4K, function() {
								/*2907*/
								var _4L = $k[--$j]; /*2904*/
								if ((_4L < 48) || (_4L > 57)) { //no-else/*2906*/
									$k[$j++] = 'bwipp.invalidECI'; /*2905*/
									$k[$j++] = "ECI must be 000000 to 999999"; /*2905*/
									$0.raiseerror(); /*2905*/
								} /*2905*/
							}); /*2905*/
							var _4M = $k[--$j]; /*2908*/
							$k[$j++] = 0; /*2908*/
							$forall(_4M, function() {
								/*2908*/
								var _4N = $k[--$j]; /*2908*/
								var _4O = $k[--$j]; /*2908*/
								$k[$j++] = (_4O - (_4N - 48)) * 10; /*2908*/
							}); /*2908*/
							var _4P = $k[--$j]; /*2908*/
							$1.i = $1.i + 9; /*2909*/
							$k[$j++] = (~~(_4P / 10)) - 1000000; /*2909*/
						} /*2909*/
						$1.char = $k[--$j]; /*2911*/
					} else {
						/*2913*/
						$1.i = $1.i + 1; /*2913*/
					} /*2913*/
				} /*2913*/
				$put($1.msg, $1.j, $1.char); /*2916*/
				$1.j = $1.j + 1; /*2917*/
			} /*2917*/
			$1.msg = $geti($1.msg, 0, $1.j); /*2919*/
			$1.msglen = $1.msg.length; /*2920*/
			$1.text = $geti($1.text, 0, $1.j); /*2921*/
			$k[$j++] = Infinity; /*2924*/
			for (var _4f = 0, _4g = $1.msglen; _4f < _4g; _4f++) {
				/*2924*/
				$k[$j++] = 0; /*2924*/
			} /*2924*/
			$k[$j++] = 0; /*2924*/
			$1.numSA = $a(); /*2924*/
			$k[$j++] = Infinity; /*2925*/
			for (var _4j = 0, _4k = $1.msglen; _4j < _4k; _4j++) {
				/*2925*/
				$k[$j++] = 0; /*2925*/
			} /*2925*/
			$k[$j++] = 0; /*2925*/
			$1.numEA = $a(); /*2925*/
			for (var _4n = $1.msglen - 1; _4n >= 0; _4n -= 1) {
				/*2935*/
				$1.i = _4n; /*2927*/
				if ($get($1.msg, $1.i) >= 0) { //no-else/*2934*/
					if ($get($1.msg, $1.i) >= 128) {
						/*2932*/
						$put($1.numEA, $1.i, $get($1.numEA, $1.i + 1) + 1); /*2930*/
					} else {
						/*2932*/
						$put($1.numSA, $1.i, $get($1.numSA, $1.i + 1) + 1); /*2932*/
					} /*2932*/
				} /*2932*/
			} /*2932*/
			$1.ea = false; /*2938*/
			$1.msgtmp = $a([]); /*2938*/
			for (var _57 = 0, _56 = $1.msglen - 1; _57 <= _56; _57 += 1) {
				/*2953*/
				$1.i = _57; /*2940*/
				$1.c = $get($1.msg, $1.i); /*2941*/
				if ((!$xo($1.ea, $1.c < 128)) && ($1.c >= 0)) { //no-else/*2951*/
					if ($1.ea) {
						/*2943*/
						$k[$j++] = $1.numSA; /*2943*/
					} else {
						/*2943*/
						$k[$j++] = $1.numEA; /*2943*/
					} /*2943*/
					var _5J = $get($k[--$j], $1.i); /*2943*/
					var _5M = ((_5J + $1.i) == $1.msglen) ? 3 : 5; /*2944*/
					if (_5J < _5M) {
						/*2949*/
						$k[$j++] = Infinity; /*2946*/
						$aload($1.msgtmp); /*2946*/
						$k[$j++] = $1.fn4; /*2946*/
						$1.msgtmp = $a(); /*2946*/
					} else {
						/*2949*/
						$k[$j++] = Infinity; /*2948*/
						$aload($1.msgtmp); /*2948*/
						$k[$j++] = $1.fn4; /*2948*/
						$k[$j++] = $1.fn4; /*2948*/
						$1.msgtmp = $a(); /*2948*/
						$1.ea = !$1.ea; /*2949*/
					} /*2949*/
				} /*2949*/
				$k[$j++] = Infinity; /*2952*/
				$aload($1.msgtmp); /*2952*/
				if ($1.c >= 0) {
					/*2952*/
					$k[$j++] = $1.c & 127; /*2952*/
				} else {
					/*2952*/
					$k[$j++] = $1.c; /*2952*/
				} /*2952*/
				$1.msgtmp = $a(); /*2952*/
			} /*2952*/
			$1.msg = $1.msgtmp; /*2954*/
			$1.msglen = $1.msg.length; /*2955*/
			$1.numsscr = function() {
				$1.n = 0; /*2959*/
				$1.s = 0; /*2959*/
				$1.p = $k[--$j]; /*2960*/
				for (;;) {
					/*2973*/
					if ($1.p >= $1.msglen) { //no-else/*2961*/
						break; /*2961*/
					} /*2961*/
					var _5h = $get($1.msg, $1.p); /*2962*/
					var _5j = $get($1.setc, _5h) !== undefined; /*2963*/
					$k[$j++] = _5h; /*2963*/
					if (!_5j) { //no-else/*2963*/
						$j--; /*2963*/
						break; /*2963*/
					} /*2963*/
					var _5k = $k[--$j]; /*2964*/
					$k[$j++] = _5k; /*2969*/
					if (_5k <= -1) {
						/*2968*/
						if (($k[--$j] == $1.fn1) && (($1.s % 2) == 0)) {
							/*2966*/
							$1.s = $1.s + 1; /*2966*/
						} else {
							/*2966*/
							break; /*2966*/
						} /*2966*/
					} else {
						/*2968*/
						$j--; /*2968*/
					} /*2968*/
					$1.n = $1.n + 1; /*2970*/
					$1.s = $1.s + 1; /*2971*/
					$1.p = $1.p + 1; /*2972*/
				} /*2972*/
				$k[$j++] = $1.n; /*2974*/
				$k[$j++] = $1.s; /*2974*/
			}; /*2975*/
			$1.enca = function() {
				$put($1.cws, $1.j, $get($1.seta, $k[--$j])); /*2979*/
				$1.j = $1.j + 1; /*2980*/
			}; /*2981*/
			$1.encb = function() {
				$put($1.cws, $1.j, $get($1.setb, $k[--$j])); /*2983*/
				$1.j = $1.j + 1; /*2984*/
			}; /*2985*/
			$1.encc = function() {
				var _66 = $k[--$j]; /*2987*/
				$k[$j++] = _66; /*2991*/
				if ($ne($type(_66), 'arraytype')) {
					/*2990*/
					var _6A = $get($1.setc, $k[--$j]); /*2988*/
					$k[$j++] = _6A; /*2988*/
				} else {
					/*2990*/
					$aload($k[--$j]); /*2990*/
					var _6C = $k[--$j]; /*2990*/
					var _6D = $k[--$j]; /*2990*/
					$k[$j++] = (_6C - 48) + ((_6D - 48) * 10); /*2990*/
				} /*2990*/
				$put($1.cws, $1.j, $k[--$j]); /*2992*/
				$1.j = $1.j + 1; /*2993*/
			}; /*2994*/
			$1.anotb = function() {
				var _6I = $k[--$j]; /*2997*/
				var _6K = $get($1.seta, _6I) !== undefined; /*2997*/
				var _6M = $get($1.setb, _6I) !== undefined; /*2997*/
				$k[$j++] = _6K && (!_6M); /*2997*/
			}; /*2997*/
			$1.bnota = function() {
				var _6N = $k[--$j]; /*2998*/
				var _6P = $get($1.setb, _6N) !== undefined; /*2998*/
				var _6R = $get($1.seta, _6N) !== undefined; /*2998*/
				$k[$j++] = _6P && (!_6R); /*2998*/
			}; /*2998*/
			$k[$j++] = Infinity; /*3001*/
			for (var _6T = 0, _6U = $1.msg.length; _6T < _6U; _6T++) {
				/*3001*/
				$k[$j++] = 0; /*3001*/
			} /*3001*/
			$k[$j++] = 9999; /*3001*/
			$1.nextanotb = $a(); /*3001*/
			$k[$j++] = Infinity; /*3002*/
			for (var _6X = 0, _6Y = $1.msg.length; _6X < _6Y; _6X++) {
				/*3002*/
				$k[$j++] = 0; /*3002*/
			} /*3002*/
			$k[$j++] = 9999; /*3002*/
			$1.nextbnota = $a(); /*3002*/
			for (var _6b = $1.msg.length - 1; _6b >= 0; _6b -= 1) {
				/*3015*/
				$1.i = _6b; /*3004*/
				$k[$j++] = $get($1.msg, $1.i); /*3005*/
				$1.anotb(); /*3005*/
				if ($k[--$j]) {
					/*3008*/
					$put($1.nextanotb, $1.i, 0); /*3006*/
				} else {
					/*3008*/
					$put($1.nextanotb, $1.i, $get($1.nextanotb, $1.i + 1) + 1); /*3008*/
				} /*3008*/
				$k[$j++] = $get($1.msg, $1.i); /*3010*/
				$1.bnota(); /*3010*/
				if ($k[--$j]) {
					/*3013*/
					$put($1.nextbnota, $1.i, 0); /*3011*/
				} else {
					/*3013*/
					$put($1.nextbnota, $1.i, $get($1.nextbnota, $1.i + 1) + 1); /*3013*/
				} /*3013*/
			} /*3013*/
			$1.abeforeb = function() {
				var _6y = $k[--$j]; /*3018*/
				$k[$j++] = $lt($get($1.nextanotb, _6y), $get($1.nextbnota, _6y)); /*3018*/
			}; /*3018*/
			$1.bbeforea = function() {
				var _73 = $k[--$j]; /*3019*/
				$k[$j++] = $lt($get($1.nextbnota, _73), $get($1.nextanotb, _73)); /*3019*/
			}; /*3019*/
			$1.cws = $a(($1.barcode.length * 2) + 3); /*3021*/
			$1.j = 0; /*3024*/
			if ($1.msglen > 0) {
				/*3025*/
				$k[$j++] = 0; /*3025*/
				$1.numsscr(); /*3025*/
			} else {
				/*3025*/
				$k[$j++] = -1; /*3025*/
				$k[$j++] = -1; /*3025*/
			} /*3025*/
			$1.nums = $k[--$j]; /*3025*/
			$1.nchars = $k[--$j]; /*3025*/
			for (;;) {
				/*3050*/
				if ($1.msglen == 0) { //no-else/*3031*/
					$k[$j++] = $1.stb; /*3028*/
					$1.enca(); /*3028*/
					$1.cset = "setb"; /*3029*/
					break; /*3030*/
				} /*3030*/
				if (($1.msglen == 2) && ($1.nums == 2)) { //no-else/*3036*/
					$k[$j++] = $1.stc; /*3033*/
					$1.enca(); /*3033*/
					$1.cset = "setc"; /*3034*/
					break; /*3035*/
				} /*3035*/
				if ($1.nums >= 4) { //no-else/*3041*/
					$k[$j++] = $1.stc; /*3038*/
					$1.enca(); /*3038*/
					$1.cset = "setc"; /*3039*/
					break; /*3040*/
				} /*3040*/
				$k[$j++] = 0; /*3042*/
				$1.abeforeb(); /*3042*/
				if ($k[--$j]) { //no-else/*3046*/
					$k[$j++] = $1.sta; /*3043*/
					$1.enca(); /*3043*/
					$1.cset = "seta"; /*3044*/
					break; /*3045*/
				} /*3045*/
				$k[$j++] = $1.stb; /*3047*/
				$1.enca(); /*3047*/
				$1.cset = "setb"; /*3048*/
				break; /*3049*/
			} /*3049*/
			$1.i = 0; /*3053*/
			for (;;) {
				/*3136*/
				if ($1.i == $1.msglen) { //no-else/*3054*/
					break; /*3054*/
				} /*3054*/
				$k[$j++] = $1.i; /*3056*/
				$1.numsscr(); /*3056*/
				$1.nums = $k[--$j]; /*3056*/
				$1.nchars = $k[--$j]; /*3056*/
				for (;;) {
					/*3134*/
					if ((($eq($1.cset, "seta") || $eq($1.cset, "setb")) && ($1.nums >= 4)) && ($get($1.msg, $1.i) != $1.fn1)) { //no-else/*3073*/
						if (($1.nums % 2) == 0) {
							/*3071*/
							$k[$j++] = $1.swc; /*3063*/
							if ($eq($1.cset, "seta")) {
								/*3063*/
								$1.enca(); /*3063*/
							} else {
								/*3063*/
								$1.encb(); /*3063*/
							} /*3063*/
							$1.cset = "setc"; /*3064*/
							break; /*3065*/
						} else {
							/*3071*/
							$k[$j++] = $get($1.msg, $1.i); /*3067*/
							if ($eq($1.cset, "seta")) {
								/*3067*/
								$1.enca(); /*3067*/
							} else {
								/*3067*/
								$1.encb(); /*3067*/
							} /*3067*/
							$1.i = $1.i + 1; /*3068*/
							$k[$j++] = $1.swc; /*3069*/
							if ($eq($1.cset, "seta")) {
								/*3069*/
								$1.enca(); /*3069*/
							} else {
								/*3069*/
								$1.encb(); /*3069*/
							} /*3069*/
							$1.cset = "setc"; /*3070*/
							break; /*3071*/
						} /*3071*/
					} /*3071*/
					$k[$j++] = $eq($1.cset, "setb"); /*3074*/
					$k[$j++] = $get($1.msg, $1.i); /*3074*/
					$1.anotb(); /*3074*/
					var _7n = $k[--$j]; /*3074*/
					if (($k[--$j] && _7n)) { //no-else/*3086*/
						if ($1.i < ($1.msglen - 1)) { //no-else/*3082*/
							$k[$j++] = $1.i + 1; /*3076*/
							$1.bbeforea(); /*3076*/
							if ($k[--$j]) { //no-else/*3081*/
								$k[$j++] = $1.sft; /*3077*/
								$1.encb(); /*3077*/
								$k[$j++] = $get($1.msg, $1.i); /*3078*/
								$1.enca(); /*3078*/
								$1.i = $1.i + 1; /*3079*/
								break; /*3080*/
							} /*3080*/
						} /*3080*/
						$k[$j++] = $1.swa; /*3083*/
						$1.encb(); /*3083*/
						$1.cset = "seta"; /*3084*/
						break; /*3085*/
					} /*3085*/
					$k[$j++] = $eq($1.cset, "seta"); /*3087*/
					$k[$j++] = $get($1.msg, $1.i); /*3087*/
					$1.bnota(); /*3087*/
					var _83 = $k[--$j]; /*3087*/
					if (($k[--$j] && _83)) { //no-else/*3099*/
						if ($1.i < ($1.msglen - 1)) { //no-else/*3095*/
							$k[$j++] = $1.i + 1; /*3089*/
							$1.abeforeb(); /*3089*/
							if ($k[--$j]) { //no-else/*3094*/
								$k[$j++] = $1.sft; /*3090*/
								$1.enca(); /*3090*/
								$k[$j++] = $get($1.msg, $1.i); /*3091*/
								$1.encb(); /*3091*/
								$1.i = $1.i + 1; /*3092*/
								break; /*3093*/
							} /*3093*/
						} /*3093*/
						$k[$j++] = $1.swb; /*3096*/
						$1.enca(); /*3096*/
						$1.cset = "setb"; /*3097*/
						break; /*3098*/
					} /*3098*/
					if (($eq($1.cset, "setc") && ($1.nums < 2)) && ($get($1.msg, $1.i) > -1)) { //no-else/*3109*/
						$k[$j++] = $1.i; /*3101*/
						$1.abeforeb(); /*3101*/
						if ($k[--$j]) { //no-else/*3105*/
							$k[$j++] = $1.swa; /*3102*/
							$1.encc(); /*3102*/
							$1.cset = "seta"; /*3103*/
							break; /*3104*/
						} /*3104*/
						$k[$j++] = $1.swb; /*3106*/
						$1.encc(); /*3106*/
						$1.cset = "setb"; /*3107*/
						break; /*3108*/
					} /*3108*/
					if ($eq($1.cset, "seta")) { //no-else/*3116*/
						$k[$j++] = $get($1.msg, $1.i); /*3113*/
						$1.enca(); /*3113*/
						$1.i = $1.i + 1; /*3114*/
						break; /*3115*/
					} /*3115*/
					if ($eq($1.cset, "setb")) { //no-else/*3121*/
						$k[$j++] = $get($1.msg, $1.i); /*3118*/
						$1.encb(); /*3118*/
						$1.i = $1.i + 1; /*3119*/
						break; /*3120*/
					} /*3120*/
					if ($eq($1.cset, "setc")) { //no-else/*3131*/
						if ($get($1.msg, $1.i) <= -1) {
							/*3128*/
							$k[$j++] = $get($1.msg, $1.i); /*3124*/
							$1.encc(); /*3124*/
							$1.i = $1.i + 1; /*3125*/
						} else {
							/*3128*/
							$k[$j++] = $geti($1.msg, $1.i, 2); /*3127*/
							$1.encc(); /*3127*/
							$1.i = $1.i + 2; /*3128*/
						} /*3128*/
						break; /*3130*/
					} /*3130*/
					break; /*3133*/
				} /*3133*/
			} /*3133*/
			$1.cws = $geti($1.cws, 0, $1.j); /*3137*/
		} /*3137*/
		var _8o = $a($1.j + 2); /*3141*/
		$puti(_8o, 0, $1.cws); /*3141*/
		$1.cws = _8o; /*3141*/
		$1.csum = $get($1.cws, 0); /*3142*/
		for (var _8u = 1, _8t = $1.j - 1; _8u <= _8t; _8u += 1) {
			/*3146*/
			$1.i = _8u; /*3144*/
			$1.csum = $1.csum + ($get($1.cws, $1.i) * $1.i); /*3145*/
		} /*3145*/
		$1.csum = $1.csum % 103; /*3147*/
		$put($1.cws, $1.j, $1.csum); /*3148*/
		$put($1.cws, $1.j + 1, $get($1.seta, $1.stp)); /*3149*/
		$1.encs = $a(["212222", "222122", "222221", "121223", "121322", "131222", "122213", "122312", "132212", "221213", "221312", "231212", "112232", "122132", "122231", "113222", "123122", "123221", "223211", "221132", "221231", "213212", "223112", "312131", "311222", "321122", "321221", "312212", "322112", "322211", "212123", "212321", "232121", "111323", "131123", "131321", "112313", "132113", "132311", "211313", "231113", "231311", "112133", "112331", "132131", "113123", "113321", "133121", "313121", "211331", "231131", "213113", "213311", "213131", "311123", "311321", "331121", "312113", "312311", "332111", "314111", "221411", "431111", "111224", "111422", "121124", "121421", "141122", "141221", "112214", "112412", "122114", "122411", "142112", "142211", "241211", "221114", "413111", "241112", "134111", "111242", "121142", "121241", "114212", "124112", "124211", "411212", "421112", "421211", "212141", "214121", "412121", "111143", "111341", "131141", "114113", "114311", "411113", "411311", "113141", "114131", "311141", "411131", "211412", "211214", "211232", "2331112"]); /*3169*/
		$1.sbs = $s(($1.cws.length * 6) + 1); /*3172*/
		for (var _9E = 0, _9D = $1.cws.length - 1; _9E <= _9D; _9E += 1) {
			/*3176*/
			$1.i = _9E; /*3174*/
			$puti($1.sbs, $1.i * 6, $get($1.encs, $get($1.cws, $1.i))); /*3175*/
		} /*3175*/
		$k[$j++] = Infinity; /*3186*/
		$k[$j++] = Infinity; /*3181*/
		var _9M = $1.sbs; /*3181*/
		for (var _9N = 0, _9O = _9M.length; _9N < _9O; _9N++) {
			/*3181*/
			$k[$j++] = $get(_9M, _9N) - 48; /*3181*/
		} /*3181*/
		var _9Q = $a(); /*3181*/
		$k[$j++] = Infinity; /*3182*/
		for (var _9S = 0, _9T = ~~(($1.sbs.length + 1) / 2); _9S < _9T; _9S++) {
			/*3182*/
			$k[$j++] = $1.height; /*3182*/
		} /*3182*/
		var _9V = $a(); /*3182*/
		$k[$j++] = Infinity; /*3183*/
		for (var _9X = 0, _9Y = ~~(($1.sbs.length + 1) / 2); _9X < _9Y; _9X++) {
			/*3183*/
			$k[$j++] = 0; /*3183*/
		} /*3183*/
		var _9Z = $a(); /*3183*/
		$k[$j++] = 'ren'; /*3186*/
		$k[$j++] = $0.renlinear; /*3186*/
		$k[$j++] = 'sbs'; /*3186*/
		$k[$j++] = _9Q; /*3186*/
		$k[$j++] = 'bhs'; /*3186*/
		$k[$j++] = _9V; /*3186*/
		$k[$j++] = 'bbs'; /*3186*/
		$k[$j++] = _9Z; /*3186*/
		$k[$j++] = 'txt'; /*3186*/
		$k[$j++] = $a([$a([$1.text, $1.textxoffset, $1.textyoffset, $1.textfont, $1.textsize])]); /*3186*/
		$k[$j++] = 'textxalign'; /*3186*/
		$k[$j++] = "center"; /*3186*/
		$k[$j++] = 'opt'; /*3186*/
		$k[$j++] = $1.options; /*3186*/
		var _9i = $d(); /*3186*/
		$k[$j++] = _9i; /*3189*/
		if (!$1.dontdraw) { //no-else/*3189*/
			$0.renlinear(); /*3189*/
		} /*3189*/
	};
	$0['gs1-128'] = function() {
		var $1 = {}; /*3219*/
		$1.options = $k[--$j]; /*3221*/
		$1.barcode = $k[--$j]; /*3222*/
		$1.dontdraw = false; /*3224*/
		$1.includetext = false; /*3225*/
		$1.textfont = "OCR-B"; /*3226*/
		$1.textsize = 10; /*3227*/
		$1.textxoffset = 0; /*3228*/
		$1.textyoffset = -8.5; /*3229*/
		$1.height = 0.5; /*3230*/
		$1.linkagea = false; /*3231*/
		$1.linkagec = false; /*3232*/
		$forall($1.options, function() {
			/*3243*/
			var _3 = $k[--$j]; /*3243*/
			$1[$k[--$j]] = _3; /*3243*/
		}); /*3243*/
		$1.textfont = "" + $1.textfont; /*3245*/
		$1.textsize = +$1.textsize; /*3246*/
		$1.textxoffset = +$1.textxoffset; /*3247*/
		$1.textyoffset = +$1.textyoffset; /*3248*/
		$1.height = +$1.height; /*3249*/
		$1.text = $1.barcode; /*3251*/
		$1.expand = function() {
			$1.in = $k[--$j]; /*3255*/
			$1.out = $s($1.in.length); /*3256*/
			$1.j = 0; /*3257*/
			$k[$j++] = $1.in; /*3271*/
			for (;;) {
				/*3271*/
				$search($k[--$j], "^"); /*3260*/
				if ($k[--$j]) {
					/*3269*/
					var _H = $k[--$j]; /*3261*/
					$puti($1.out, $1.j, _H); /*3261*/
					$1.j = (_H.length + $1.j) + 1; /*3262*/
					$j--; /*3263*/
					var _L = $k[--$j]; /*3264*/
					$put($1.out, $1.j - 1, ~~$z($geti(_L, 0, 3))); /*3264*/
					$k[$j++] = $geti(_L, 3, _L.length - 3); /*3265*/
				} else {
					/*3269*/
					var _Q = $k[--$j]; /*3267*/
					$puti($1.out, $1.j, _Q); /*3267*/
					$1.j = _Q.length + $1.j; /*3268*/
					$k[$j++] = $geti($1.out, 0, $1.j); /*3269*/
					break; /*3269*/
				} /*3269*/
			} /*3269*/
		}; /*3272*/
		$1.ais = $a([]); /*3275*/
		$1.vals = $a([]); /*3276*/
		var _Z = $1.barcode; /*3277*/
		$k[$j++] = $geti(_Z, 1, _Z.length - 1); /*3290*/
		for (;;) {
			/*3290*/
			var _b = $k[--$j]; /*3279*/
			$k[$j++] = _b; /*3279*/
			if ($eq(_b, "")) { //no-else/*3279*/
				break; /*3279*/
			} /*3279*/
			$search($k[--$j], ")"); /*3280*/
			$j--; /*3280*/
			var _d = $k[--$j]; /*3281*/
			var _e = $k[--$j]; /*3281*/
			var _f = $k[--$j]; /*3282*/
			$k[$j++] = _d; /*3282*/
			$search(_f, "("); /*3282*/
			if ($k[--$j]) {
				/*3285*/
				var _h = $k[--$j]; /*3283*/
				var _i = $k[--$j]; /*3283*/
				var _j = $k[--$j]; /*3283*/
				var _k = $k[--$j]; /*3283*/
				$k[$j++] = _j; /*3283*/
				$k[$j++] = _k; /*3283*/
				$k[$j++] = _h; /*3283*/
			} else {
				/*3285*/
				var _l = $k[--$j]; /*3285*/
				var _m = $k[--$j]; /*3285*/
				$k[$j++] = ""; /*3285*/
				$k[$j++] = _m; /*3285*/
				$k[$j++] = _l; /*3285*/
			} /*3285*/
			$k[$j++] = Infinity; /*3287*/
			$aload($1.ais); /*3287*/
			var _p = $k[$j - 1 - ($counttomark() + 2)]; /*3287*/
			$k[$j++] = _p; /*3287*/
			$1.ais = $a(); /*3287*/
			$k[$j++] = Infinity; /*3288*/
			$aload($1.vals); /*3288*/
			var _t = $k[$j - 1 - ($counttomark() + 1)]; /*3288*/
			$k[$j++] = _t; /*3288*/
			$1.expand(); /*3288*/
			$1.vals = $a(); /*3288*/
			$j -= 2; /*3289*/
		} /*3289*/
		$j--; /*3291*/
		$1.aifixed = new Map; /*3296*/
		$k[$j++] = Infinity; /*3298*/
		for (var _v = 0; _v <= 4; _v += 1) {
			/*3298*/
			$k[$j++] = _v; /*3298*/
		} /*3298*/
		var _w = $a(); /*3298*/
		for (var _x = 0, _y = _w.length; _x < _y; _x++) {
			/*3301*/
			var _11 = $strcpy($s(2), "00"); /*3300*/
			$put(_11, 1, $get(_w, _x) + 48); /*3300*/
			$put($1.aifixed, _11, _11); /*3300*/
		} /*3300*/
		$k[$j++] = Infinity; /*3306*/
		for (var _13 = 11; _13 <= 20; _13 += 1) {
			/*3303*/
			$k[$j++] = _13; /*3303*/
		} /*3303*/
		$k[$j++] = 23; /*3305*/
		for (var _14 = 31; _14 <= 36; _14 += 1) {
			/*3305*/
			$k[$j++] = _14; /*3305*/
		} /*3305*/
		$k[$j++] = 41; /*3306*/
		var _15 = $a(); /*3306*/
		for (var _16 = 0, _17 = _15.length; _16 < _17; _16++) {
			/*3309*/
			var _1A = $cvrs($s(2), $get(_15, _16), 10); /*3308*/
			$put($1.aifixed, _1A, _1A); /*3308*/
		} /*3308*/
		$1.fnc1 = -1; /*3312*/
		$1.c128 = $a([$1.fnc1]); /*3313*/
		for (var _1G = 0, _1F = $1.ais.length - 1; _1G <= _1F; _1G += 1) {
			/*3329*/
			$1.i = _1G; /*3315*/
			$1.ai = $get($1.ais, $1.i); /*3316*/
			$1.val = $get($1.vals, $1.i); /*3317*/
			var _1Q = $a(($1.c128.length + $1.ai.length) + $1.val.length); /*3318*/
			$puti(_1Q, 0, $1.c128); /*3319*/
			$k[$j++] = _1Q; /*3320*/
			$k[$j++] = _1Q; /*3320*/
			$k[$j++] = $1.c128.length; /*3320*/
			$k[$j++] = $1.ai; /*3320*/
			$k[$j++] = Infinity; /*3320*/
			var _1U = $k[--$j]; /*3320*/
			var _1V = $k[--$j]; /*3320*/
			$k[$j++] = _1U; /*3320*/
			$forall(_1V); /*3320*/
			var _1W = $a(); /*3320*/
			var _1X = $k[--$j]; /*3320*/
			$puti($k[--$j], _1X, _1W); /*3320*/
			var _1Z = $k[--$j]; /*3321*/
			$k[$j++] = _1Z; /*3321*/
			$k[$j++] = _1Z; /*3321*/
			$k[$j++] = $1.c128.length + $1.ai.length; /*3321*/
			$k[$j++] = $1.val; /*3321*/
			$k[$j++] = Infinity; /*3321*/
			var _1d = $k[--$j]; /*3321*/
			var _1e = $k[--$j]; /*3321*/
			$k[$j++] = _1d; /*3321*/
			$forall(_1e); /*3321*/
			var _1f = $a(); /*3321*/
			var _1g = $k[--$j]; /*3321*/
			$puti($k[--$j], _1g, _1f); /*3321*/
			$1.c128 = $k[--$j]; /*3322*/
			var _1o = $get($1.aifixed, $geti($1.ai, 0, 2)) !== undefined; /*3323*/
			if (($1.i != ($1.ais.length - 1)) && (!_1o)) { //no-else/*3328*/
				var _1q = $a($1.c128.length + 1); /*3324*/
				$puti(_1q, 0, $1.c128); /*3325*/
				$put(_1q, $1.c128.length, $1.fnc1); /*3326*/
				$1.c128 = _1q; /*3327*/
			} /*3327*/
		} /*3327*/
		$1.barcode = $s(($1.c128.length + 1) * 5); /*3332*/
		$1.i = 0; /*3333*/
		$1.j = 0; /*3333*/
		for (;;) {
			/*3343*/
			if ($1.i == $1.c128.length) { //no-else/*3334*/
				break; /*3334*/
			} /*3334*/
			var _20 = $get($1.c128, $1.i); /*3335*/
			$k[$j++] = _20; /*3340*/
			if (_20 == $1.fnc1) {
				/*3339*/
				$j--; /*3336*/
				$puti($1.barcode, $1.j, "^FNC1"); /*3336*/
				$1.j = $1.j + 4; /*3337*/
			} else {
				/*3339*/
				$put($1.barcode, $1.j, $k[--$j]); /*3339*/
			} /*3339*/
			$1.i = $1.i + 1; /*3341*/
			$1.j = $1.j + 1; /*3342*/
		} /*3342*/
		if ($1.linkagea || $1.linkagec) { //no-else/*3347*/
			$k[$j++] = $1.barcode; /*3345*/
			$k[$j++] = $1.j; /*3345*/
			if ($1.linkagea) {
				/*3345*/
				$k[$j++] = "^LNKA"; /*3345*/
			} else {
				/*3345*/
				$k[$j++] = "^LNKC"; /*3345*/
			} /*3345*/
			var _2F = $k[--$j]; /*3345*/
			var _2G = $k[--$j]; /*3345*/
			$puti($k[--$j], _2G, _2F); /*3345*/
			$1.j = $1.j + 5; /*3346*/
		} /*3346*/
		$1.barcode = $geti($1.barcode, 0, $1.j); /*3348*/
		$put($1.options, "height", $1.height); /*3351*/
		$put($1.options, "dontdraw", true); /*3352*/
		$put($1.options, "parsefnc", true); /*3353*/
		$k[$j++] = 'args'; /*3354*/
		$k[$j++] = $1.barcode; /*3354*/
		$k[$j++] = $1.options; /*3354*/
		$0.code128(); /*3354*/
		var _2S = $k[--$j]; /*3354*/
		$1[$k[--$j]] = _2S; /*3354*/
		$put($1.args, "txt", $a([$a([$1.text, $1.textxoffset, $1.textyoffset, $1.textfont, $1.textsize])])); /*3356*/
		$put($1.args, "textxalign", "center"); /*3357*/
		$put($1.args, "opt", $1.options); /*3358*/
		$k[$j++] = $1.args; /*3361*/
		if (!$1.dontdraw) { //no-else/*3361*/
			$0.renlinear(); /*3361*/
		} /*3361*/
	};
	$0.ean14 = function() {
		var $1 = {}; /*3391*/
		$1.options = $k[--$j]; /*3393*/
		$1.barcode = $k[--$j]; /*3394*/
		$1.dontdraw = false; /*3396*/
		$1.includetext = false; /*3397*/
		$1.textfont = "OCR-B"; /*3398*/
		$1.textsize = 10; /*3399*/
		$1.textxoffset = 0; /*3400*/
		$1.textyoffset = -8.5; /*3401*/
		$1.height = 1; /*3402*/
		$forall($1.options, function() {
			/*3413*/
			var _3 = $k[--$j]; /*3413*/
			$1[$k[--$j]] = _3; /*3413*/
		}); /*3413*/
		$1.textfont = "" + $1.textfont; /*3415*/
		$1.textsize = +$1.textsize; /*3416*/
		$1.textxoffset = +$1.textxoffset; /*3417*/
		$1.textyoffset = +$1.textyoffset; /*3418*/
		$1.height = +$1.height; /*3419*/
		$1.text = $1.barcode; /*3422*/
		var _B = $1.barcode; /*3423*/
		$k[$j++] = $s(_B.length); /*3424*/
		$k[$j++] = 0; /*3424*/
		$forall(_B, function() {
			/*3424*/
			var _D = $k[--$j]; /*3424*/
			$k[$j++] = _D; /*3424*/
			if (_D != 32) {
				/*3424*/
				var _E = $k[--$j]; /*3424*/
				var _F = $k[--$j]; /*3424*/
				var _G = $k[--$j]; /*3424*/
				$put(_G, _F, _E); /*3424*/
				$k[$j++] = _G; /*3424*/
				$k[$j++] = _F + 1; /*3424*/
			} else {
				/*3424*/
				$j--; /*3424*/
			} /*3424*/
		}); /*3424*/
		var _H = $k[--$j]; /*3425*/
		$1.barcode = $geti($k[--$j], 0, _H); /*3425*/
		$1.hasspace = $1.text.length != $1.barcode.length; /*3426*/
		if ($ne($geti($1.barcode, 0, 4), "(01)")) { //no-else/*3431*/
			$k[$j++] = 'bwipp.ean14badAI'; /*3430*/
			$k[$j++] = "GS1-14 must begin with (01) application identifier"; /*3430*/
			$0.raiseerror(); /*3430*/
		} /*3430*/
		if (($1.barcode.length != 17) && ($1.barcode.length != 18)) { //no-else/*3434*/
			$k[$j++] = 'bwipp.ean14badLength'; /*3433*/
			$k[$j++] = "GS1-14 must be 13 or 14 digits"; /*3433*/
			$0.raiseerror(); /*3433*/
		} /*3433*/
		$forall($geti($1.barcode, 4, $1.barcode.length - 4), function() {
			/*3439*/
			var _T = $k[--$j]; /*3436*/
			if ((_T < 48) || (_T > 57)) { //no-else/*3438*/
				$k[$j++] = 'bwipp.ean14badCharacter'; /*3437*/
				$k[$j++] = "GS1-14 must contain only digits"; /*3437*/
				$0.raiseerror(); /*3437*/
			} /*3437*/
		}); /*3437*/
		$1.checksum = 0; /*3442*/
		for (var _U = 0; _U <= 12; _U += 1) {
			/*3446*/
			$1.i = _U; /*3444*/
			$k[$j++] = 'checksum'; /*3445*/
			$k[$j++] = $1.checksum; /*3445*/
			$k[$j++] = $get($1.barcode, $1.i + 4) - 48; /*3445*/
			if (($1.i % 2) == 0) { //no-else/*3445*/
				var _a = $k[--$j]; /*3445*/
				$k[$j++] = _a * 3; /*3445*/
			} /*3445*/
			var _b = $k[--$j]; /*3445*/
			var _c = $k[--$j]; /*3445*/
			$1[$k[--$j]] = _c + _b; /*3445*/
		} /*3445*/
		$1.checksum = (10 - ($1.checksum % 10)) % 10; /*3447*/
		if ($1.barcode.length == 18) {
			/*3461*/
			if ($get($1.barcode, 17) != ($1.checksum + 48)) { //no-else/*3451*/
				$k[$j++] = 'bwipp.ean14badCheckDigit'; /*3450*/
				$k[$j++] = "Incorrect GS1-14 check digit provided"; /*3450*/
				$0.raiseerror(); /*3450*/
			} /*3450*/
		} else {
			/*3461*/
			var _j = $s(18); /*3453*/
			$puti(_j, 0, $1.barcode); /*3454*/
			$put(_j, 17, $1.checksum + 48); /*3455*/
			$1.barcode = _j; /*3456*/
			var _o = $1.hasspace ? 2 : 1; /*3457*/
			var _p = $s($1.text.length + _o); /*3457*/
			$puti(_p, _p.length - 2, " "); /*3458*/
			$put(_p, _p.length - 1, $1.checksum + 48); /*3459*/
			$puti(_p, 0, $1.text); /*3460*/
			$1.text = _p; /*3461*/
		} /*3461*/
		$1.gtin = $geti($1.barcode, 4, 14); /*3463*/
		$1.barcode = $s(21); /*3466*/
		$puti($1.barcode, 0, "^FNC101"); /*3467*/
		$puti($1.barcode, 7, $1.gtin); /*3468*/
		$put($1.options, "dontdraw", true); /*3471*/
		$put($1.options, "parsefnc", true); /*3472*/
		$k[$j++] = 'args'; /*3473*/
		$k[$j++] = $1.barcode; /*3473*/
		$k[$j++] = $1.options; /*3473*/
		$0.code128(); /*3473*/
		var _12 = $k[--$j]; /*3473*/
		$1[$k[--$j]] = _12; /*3473*/
		$put($1.args, "txt", $a([$a([$1.text, $1.textxoffset, $1.textyoffset, $1.textfont, $1.textsize])])); /*3475*/
		$put($1.args, "textxalign", "center"); /*3476*/
		$put($1.args, "opt", $1.options); /*3477*/
		$k[$j++] = $1.args; /*3480*/
		if (!$1.dontdraw) { //no-else/*3480*/
			$0.renlinear(); /*3480*/
		} /*3480*/
	};
	$0.sscc18 = function() {
		var $1 = {}; /*3510*/
		$1.options = $k[--$j]; /*3512*/
		$1.barcode = $k[--$j]; /*3513*/
		$1.dontdraw = false; /*3515*/
		$1.includetext = false; /*3516*/
		$1.textfont = "OCR-B"; /*3517*/
		$1.textsize = 10; /*3518*/
		$1.textxoffset = 0; /*3519*/
		$1.textyoffset = -8.5; /*3520*/
		$1.height = 1; /*3521*/
		$forall($1.options, function() {
			/*3532*/
			var _3 = $k[--$j]; /*3532*/
			$1[$k[--$j]] = _3; /*3532*/
		}); /*3532*/
		$1.textfont = "" + $1.textfont; /*3534*/
		$1.textsize = +$1.textsize; /*3535*/
		$1.textxoffset = +$1.textxoffset; /*3536*/
		$1.textyoffset = +$1.textyoffset; /*3537*/
		$1.height = +$1.height; /*3538*/
		$1.text = $1.barcode; /*3541*/
		var _B = $1.barcode; /*3542*/
		$k[$j++] = $s(_B.length); /*3543*/
		$k[$j++] = 0; /*3543*/
		$forall(_B, function() {
			/*3543*/
			var _D = $k[--$j]; /*3543*/
			$k[$j++] = _D; /*3543*/
			if (_D != 32) {
				/*3543*/
				var _E = $k[--$j]; /*3543*/
				var _F = $k[--$j]; /*3543*/
				var _G = $k[--$j]; /*3543*/
				$put(_G, _F, _E); /*3543*/
				$k[$j++] = _G; /*3543*/
				$k[$j++] = _F + 1; /*3543*/
			} else {
				/*3543*/
				$j--; /*3543*/
			} /*3543*/
		}); /*3543*/
		var _H = $k[--$j]; /*3544*/
		$1.barcode = $geti($k[--$j], 0, _H); /*3544*/
		$1.hasspace = $1.text.length != $1.barcode.length; /*3545*/
		if ($ne($geti($1.barcode, 0, 4), "(00)")) { //no-else/*3550*/
			$k[$j++] = 'bwipp.sscc18badAI'; /*3549*/
			$k[$j++] = "SSCC-18 must begin with (00) application identifier"; /*3549*/
			$0.raiseerror(); /*3549*/
		} /*3549*/
		if (($1.barcode.length != 21) && ($1.barcode.length != 22)) { //no-else/*3553*/
			$k[$j++] = 'bwipp.sscc18badLength'; /*3552*/
			$k[$j++] = "SSCC-18 must be 17 or 18 digits"; /*3552*/
			$0.raiseerror(); /*3552*/
		} /*3552*/
		$forall($geti($1.barcode, 4, $1.barcode.length - 4), function() {
			/*3558*/
			var _T = $k[--$j]; /*3555*/
			if ((_T < 48) || (_T > 57)) { //no-else/*3557*/
				$k[$j++] = 'bwipp.sscc18badCharacter'; /*3556*/
				$k[$j++] = "SSCC-18 must contain only digits"; /*3556*/
				$0.raiseerror(); /*3556*/
			} /*3556*/
		}); /*3556*/
		$1.checksum = 0; /*3561*/
		for (var _U = 0; _U <= 16; _U += 1) {
			/*3565*/
			$1.i = _U; /*3563*/
			$k[$j++] = 'checksum'; /*3564*/
			$k[$j++] = $1.checksum; /*3564*/
			$k[$j++] = $get($1.barcode, $1.i + 4) - 48; /*3564*/
			if (($1.i % 2) == 0) { //no-else/*3564*/
				var _a = $k[--$j]; /*3564*/
				$k[$j++] = _a * 3; /*3564*/
			} /*3564*/
			var _b = $k[--$j]; /*3564*/
			var _c = $k[--$j]; /*3564*/
			$1[$k[--$j]] = _c + _b; /*3564*/
		} /*3564*/
		$1.checksum = (10 - ($1.checksum % 10)) % 10; /*3566*/
		if ($1.barcode.length == 22) {
			/*3580*/
			if ($get($1.barcode, 21) != ($1.checksum + 48)) { //no-else/*3570*/
				$k[$j++] = 'bwipp.sscc18badCheckDigit'; /*3569*/
				$k[$j++] = "Incorrect SSCC-18 check digit provided"; /*3569*/
				$0.raiseerror(); /*3569*/
			} /*3569*/
		} else {
			/*3580*/
			var _j = $s(22); /*3572*/
			$puti(_j, 0, $1.barcode); /*3573*/
			$put(_j, 21, $1.checksum + 48); /*3574*/
			$1.barcode = _j; /*3575*/
			var _o = $1.hasspace ? 2 : 1; /*3576*/
			var _p = $s($1.text.length + _o); /*3576*/
			$puti(_p, _p.length - 2, " "); /*3577*/
			$put(_p, _p.length - 1, $1.checksum + 48); /*3578*/
			$puti(_p, 0, $1.text); /*3579*/
			$1.text = _p; /*3580*/
		} /*3580*/
		$1.sscc = $geti($1.barcode, 4, 18); /*3582*/
		$1.barcode = $s(25); /*3585*/
		$puti($1.barcode, 0, "^FNC100"); /*3586*/
		$puti($1.barcode, 7, $1.sscc); /*3587*/
		$put($1.options, "dontdraw", true); /*3590*/
		$put($1.options, "parsefnc", true); /*3591*/
		$k[$j++] = 'args'; /*3592*/
		$k[$j++] = $1.barcode; /*3592*/
		$k[$j++] = $1.options; /*3592*/
		$0.code128(); /*3592*/
		var _12 = $k[--$j]; /*3592*/
		$1[$k[--$j]] = _12; /*3592*/
		$put($1.args, "txt", $a([$a([$1.text, $1.textxoffset, $1.textyoffset, $1.textfont, $1.textsize])])); /*3594*/
		$put($1.args, "textxalign", "center"); /*3595*/
		$put($1.args, "opt", $1.options); /*3596*/
		$k[$j++] = $1.args; /*3599*/
		if (!$1.dontdraw) { //no-else/*3599*/
			$0.renlinear(); /*3599*/
		} /*3599*/
	};
	$0.code39 = function() {
		var $1 = {}; /*3628*/
		$1.options = $k[--$j]; /*3630*/
		$1.barcode = $k[--$j]; /*3631*/
		$1.dontdraw = false; /*3633*/
		$1.includecheck = false; /*3634*/
		$1.validatecheck = false; /*3635*/
		$1.includetext = false; /*3636*/
		$1.includecheckintext = false; /*3637*/
		$1.hidestars = false; /*3638*/
		$1.textfont = "OCR-B"; /*3639*/
		$1.textsize = 10; /*3640*/
		$1.textyoffset = -8.5; /*3641*/
		$1.height = 1; /*3642*/
		$forall($1.options, function() {
			/*3653*/
			var _3 = $k[--$j]; /*3653*/
			$1[$k[--$j]] = _3; /*3653*/
		}); /*3653*/
		$1.textfont = "" + $1.textfont; /*3655*/
		$1.textsize = +$1.textsize; /*3656*/
		$1.textyoffset = +$1.textyoffset; /*3657*/
		$1.height = +$1.height; /*3658*/
		$1.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; /*3661*/
		$1.charvals = new Map; /*3662*/
		for (var _9 = 0; _9 <= 42; _9 += 1) {
			/*3663*/
			$put($1.charvals, $geti($1.barchars, _9, 1), _9); /*3663*/
		} /*3663*/
		for (var _F = 0, _E = $1.barcode.length - 1; _F <= _E; _F += 1) {
			/*3670*/
			var _J = $get($1.charvals, $geti($1.barcode, _F, 1)) !== undefined; /*3667*/
			if (!_J) { //no-else/*3669*/
				$k[$j++] = 'bwipp.code39badCharacter'; /*3668*/
				$k[$j++] = "Code 39 must contain only digits, capital letters, spaces and the symbols -.$/+%"; /*3668*/
				$0.raiseerror(); /*3668*/
			} /*3668*/
		} /*3668*/
		$k[$j++] = 'barlen'; /*3672*/
		$k[$j++] = $1.barcode.length; /*3672*/
		if ($1.validatecheck) { //no-else/*3672*/
			var _M = $k[--$j]; /*3672*/
			$k[$j++] = _M - 1; /*3672*/
		} /*3672*/
		var _N = $k[--$j]; /*3672*/
		$1[$k[--$j]] = _N; /*3672*/
		$1.checksum = 0; /*3674*/
		for (var _R = 0, _Q = $1.barlen - 1; _R <= _Q; _R += 1) {
			/*3678*/
			$1.checksum = $get($1.charvals, $geti($1.barcode, _R, 1)) + $1.checksum; /*3677*/
		} /*3677*/
		$1.checksum = $1.checksum % 43; /*3679*/
		if ($1.validatecheck) { //no-else/*3686*/
			if ($get($1.barcode, $1.barlen) != $get($1.barchars, $1.checksum)) { //no-else/*3683*/
				$k[$j++] = 'bwipp.code39badCheckDigit'; /*3682*/
				$k[$j++] = "Incorrect Code 39 check digit provided"; /*3682*/
				$0.raiseerror(); /*3682*/
			} /*3682*/
			$1.barcode = $geti($1.barcode, 0, $1.barlen); /*3684*/
			$1.includecheck = true; /*3685*/
		} /*3685*/
		$1.encs = $a(["1113313111", "3113111131", "1133111131", "3133111111", "1113311131", "3113311111", "1133311111", "1113113131", "3113113111", "1133113111", "3111131131", "1131131131", "3131131111", "1111331131", "3111331111", "1131331111", "1111133131", "3111133111", "1131133111", "1111333111", "3111111331", "1131111331", "3131111311", "1111311331", "3111311311", "1131311311", "1111113331", "3111113311", "1131113311", "1111313311", "3311111131", "1331111131", "3331111111", "1311311131", "3311311111", "1331311111", "1311113131", "3311113111", "1331113111", "1313131111", "1313111311", "1311131311", "1113131311", "1311313111"]); /*3699*/
		var _l = $1.includecheck ? 3 : 2; /*3701*/
		$1.sbs = $s(($1.barlen + _l) * 10); /*3701*/
		var _p = $1.includecheck ? 3 : 2; /*3702*/
		$1.txt = $a($1.barlen + _p); /*3702*/
		$puti($1.sbs, 0, $get($1.encs, 43)); /*3705*/
		if (!$1.hidestars) {
			/*3709*/
			$put($1.txt, 0, $a(["*", 0, $1.textyoffset, $1.textfont, $1.textsize])); /*3707*/
		} else {
			/*3709*/
			$put($1.txt, 0, $a(["", 0, $1.textyoffset, $1.textfont, $1.textsize])); /*3709*/
		} /*3709*/
		for (var _17 = 0, _16 = $1.barlen - 1; _17 <= _16; _17 += 1) {
			/*3717*/
			$1.i = _17; /*3713*/
			$1.indx = $get($1.charvals, $geti($1.barcode, $1.i, 1)); /*3714*/
			$puti($1.sbs, ($1.i * 10) + 10, $get($1.encs, $1.indx)); /*3715*/
			$put($1.txt, $1.i + 1, $a([$geti($1.barcode, $1.i, 1), ($1.i + 1) * 16, $1.textyoffset, $1.textfont, $1.textsize])); /*3716*/
		} /*3716*/
		if ($1.includecheck) {
			/*3738*/
			$puti($1.sbs, ($1.barlen * 10) + 10, $get($1.encs, $1.checksum)); /*3721*/
			if ($1.includecheckintext) {
				/*3725*/
				$put($1.txt, $1.barlen + 1, $a([$geti($1.barchars, $1.checksum, 1), ($1.barlen + 1) * 16, $1.textyoffset, $1.textfont, $1.textsize])); /*3723*/
			} else {
				/*3725*/
				$put($1.txt, $1.barlen + 1, $a(["", ($1.barlen + 1) * 16, $1.textyoffset, $1.textfont, $1.textsize])); /*3725*/
			} /*3725*/
			$puti($1.sbs, ($1.barlen * 10) + 20, $get($1.encs, 43)); /*3727*/
			if (!$1.hidestars) {
				/*3731*/
				$put($1.txt, $1.barlen + 2, $a(["*", ($1.barlen + 2) * 16, $1.textyoffset, $1.textfont, $1.textsize])); /*3729*/
			} else {
				/*3731*/
				$put($1.txt, $1.barlen + 2, $a(["", ($1.barlen + 2) * 16, $1.textyoffset, $1.textfont, $1.textsize])); /*3731*/
			} /*3731*/
		} else {
			/*3738*/
			$puti($1.sbs, ($1.barlen * 10) + 10, $get($1.encs, 43)); /*3734*/
			if (!$1.hidestars) {
				/*3738*/
				$put($1.txt, $1.barlen + 1, $a(["*", ($1.barlen + 1) * 16, $1.textyoffset, $1.textfont, $1.textsize])); /*3736*/
			} else {
				/*3738*/
				$put($1.txt, $1.barlen + 1, $a(["", ($1.barlen + 1) * 16, $1.textyoffset, $1.textfont, $1.textsize])); /*3738*/
			} /*3738*/
		} /*3738*/
		$k[$j++] = Infinity; /*3751*/
		$k[$j++] = Infinity; /*3745*/
		var _2S = $1.sbs; /*3745*/
		for (var _2T = 0, _2U = _2S.length; _2T < _2U; _2T++) {
			/*3745*/
			$k[$j++] = $get(_2S, _2T) - 48; /*3745*/
		} /*3745*/
		var _2W = $a(); /*3745*/
		$k[$j++] = Infinity; /*3746*/
		for (var _2Y = 0, _2Z = ~~(($1.sbs.length + 1) / 2); _2Y < _2Z; _2Y++) {
			/*3746*/
			$k[$j++] = $1.height; /*3746*/
		} /*3746*/
		var _2b = $a(); /*3746*/
		$k[$j++] = Infinity; /*3747*/
		for (var _2d = 0, _2e = ~~(($1.sbs.length + 1) / 2); _2d < _2e; _2d++) {
			/*3747*/
			$k[$j++] = 0; /*3747*/
		} /*3747*/
		var _2f = $a(); /*3747*/
		$k[$j++] = 'ren'; /*3750*/
		$k[$j++] = $0.renlinear; /*3750*/
		$k[$j++] = 'sbs'; /*3750*/
		$k[$j++] = _2W; /*3750*/
		$k[$j++] = 'bhs'; /*3750*/
		$k[$j++] = _2b; /*3750*/
		$k[$j++] = 'bbs'; /*3750*/
		$k[$j++] = _2f; /*3750*/
		if ($1.includetext) { //no-else/*3750*/
			$k[$j++] = 'txt'; /*3749*/
			$k[$j++] = $1.txt; /*3749*/
		} /*3749*/
		$k[$j++] = 'opt'; /*3751*/
		$k[$j++] = $1.options; /*3751*/
		var _2j = $d(); /*3751*/
		$k[$j++] = _2j; /*3754*/
		if (!$1.dontdraw) { //no-else/*3754*/
			$0.renlinear(); /*3754*/
		} /*3754*/
	};
	$0.code39ext = function() {
		var $1 = {}; /*3784*/
		$1.options = $k[--$j]; /*3786*/
		$1.barcode = $k[--$j]; /*3787*/
		$1.dontdraw = false; /*3789*/
		$1.includetext = false; /*3790*/
		$1.parse = false; /*3791*/
		$forall($1.options, function() {
			/*3802*/
			var _3 = $k[--$j]; /*3802*/
			$1[$k[--$j]] = _3; /*3802*/
		}); /*3802*/
		$forall($1.barcode, function() {
			/*3830*/
			if ($k[--$j] >= 128) { //no-else/*3829*/
				$k[$j++] = 'bwipp.code39extBadCharacter'; /*3828*/
				$k[$j++] = "Code 39 Extended must contain only ASCII characters"; /*3828*/
				$0.raiseerror(); /*3828*/
			} /*3828*/
		}); /*3828*/
		$1.barlen = $1.barcode.length; /*3832*/
		$1.extencs = $a
		$1.newcode = $s($1.barlen * 2); /*3846*/
		$1.newtext = $s($1.barlen * 2); /*3847*/
		$1.j = 0; /*3848*/
		for (var _F = 0, _E = $1.barlen - 1; _F <= _E; _F += 1) {
			/*3856*/
			$1.i = _F; /*3850*/
			$1.extchar = $get($1.extencs, $get($1.barcode, $1.i)); /*3851*/
			$puti($1.newcode, $1.j, $1.extchar); /*3852*/
			$put($1.newtext, $1.j, $get($1.barcode, $1.i)); /*3853*/
			if ($1.extchar.length != 1) { //no-else/*3854*/
				$puti($1.newtext, $1.j + 1, " "); /*3854*/
			} /*3854*/
			$1.j = $1.j + $1.extchar.length; /*3855*/
		} /*3855*/
		$1.newcode = $geti($1.newcode, 0, $1.j); /*3857*/
		$1.newtext = $geti($1.newtext, 0, $1.j); /*3858*/
		$put($1.options, "dontdraw", true); /*3861*/
		$k[$j++] = 'args'; /*3862*/
		$k[$j++] = $1.newcode; /*3862*/
		$k[$j++] = $1.options; /*3862*/
		$0.code39(); /*3862*/
		var _h = $k[--$j]; /*3862*/
		$1[$k[--$j]] = _h; /*3862*/
		if ($1.includetext) { //no-else/*3874*/
			$1.txt = $get($1.args, "txt"); /*3866*/
			for (var _o = 0, _n = $1.newtext.length - 1; _o <= _n; _o += 1) {
				/*3872*/
				$1.i = _o; /*3868*/
				$1.txtentry = $get($1.txt, $1.i + 1); /*3869*/
				$put($1.txtentry, 0, $geti($1.newtext, $1.i, 1)); /*3870*/
				$put($1.txt, $1.i + 1, $1.txtentry); /*3871*/
			} /*3871*/
			$put($1.args, "txt", $1.txt); /*3873*/
		} /*3873*/
		$put($1.args, "opt", $1.options); /*3875*/
		$k[$j++] = $1.args; /*3878*/
		if (!$1.dontdraw) { //no-else/*3878*/
			$0.renlinear(); /*3878*/
		} /*3878*/
	};
	$0.code32 = function() {
		var $1 = {}; /*3908*/
		$1.options = $k[--$j]; /*3910*/
		$1.barcode = $k[--$j]; /*3911*/
		$1.dontdraw = false; /*3913*/
		$1.includetext = false; /*3914*/
		$1.textfont = "OCR-B"; /*3915*/
		$1.textsize = 10; /*3916*/
		$1.textyoffset = -8.5; /*3917*/
		$1.textxoffset = 0; /*3918*/
		$1.height = 1; /*3919*/
		$forall($1.options, function() {
			/*3930*/
			var _3 = $k[--$j]; /*3930*/
			$1[$k[--$j]] = _3; /*3930*/
		}); /*3930*/
		$1.textfont = "" + $1.textfont; /*3932*/
		$1.textsize = +$1.textsize; /*3933*/
		$1.textyoffset = +$1.textyoffset; /*3934*/
		$1.height = +$1.height; /*3935*/
		if (($1.barcode.length != 8) && ($1.barcode.length != 9)) { //no-else/*3940*/
			$k[$j++] = 'bwipp.code32badLength'; /*3939*/
			$k[$j++] = "Italian Pharmacode must be 8 or 9 digits"; /*3939*/
			$0.raiseerror(); /*3939*/
		} /*3939*/
		$forall($1.barcode, function() {
			/*3945*/
			var _C = $k[--$j]; /*3942*/
			if ((_C < 48) || (_C > 57)) { //no-else/*3944*/
				$k[$j++] = 'bwipp.code32badCharacter'; /*3943*/
				$k[$j++] = "Italian Pharmacode must contain only digits"; /*3943*/
				$0.raiseerror(); /*3943*/
			} /*3943*/
		}); /*3943*/
		$1.checksum = 0; /*3948*/
		for (var _D = 0; _D <= 7; _D += 1) {
			/*3953*/
			$1.i = _D; /*3950*/
			$k[$j++] = $get($1.barcode, $1.i) - 48; /*3951*/
			if (($1.i % 2) != 0) { //no-else/*3951*/
				var _I = $k[--$j]; /*3951*/
				$k[$j++] = _I * 2; /*3951*/
			} /*3951*/
			var _J = $k[--$j]; /*3951*/
			$k[$j++] = _J; /*3951*/
			if (_J > 9) { //no-else/*3951*/
				var _K = $k[--$j]; /*3951*/
				$k[$j++] = _K - 9; /*3951*/
			} /*3951*/
			$1.checksum = $k[--$j] + $1.checksum; /*3952*/
		} /*3952*/
		$1.checksum = $1.checksum % 10; /*3954*/
		if ($1.barcode.length == 9) { //no-else/*3959*/
			if ($get($1.barcode, 8) != ($1.checksum + 48)) { //no-else/*3958*/
				$k[$j++] = 'bwipp.code32badCheckDigit'; /*3957*/
				$k[$j++] = "Incorrect Italian Pharmacode check digit provided"; /*3957*/
				$0.raiseerror(); /*3957*/
			} /*3957*/
		} /*3957*/
		var _S = $s(10); /*3960*/
		$puti(_S, 0, $1.barcode); /*3961*/
		$put(_S, 8, $1.checksum + 48); /*3962*/
		$1.text = _S; /*3963*/
		$1.val = $cvrs($s(6), ~~$z($1.text), 32); /*3966*/
		$1.barcode = $s(6); /*3967*/
		for (var _Z = 0; _Z <= 5; _Z += 1) {
			/*3968*/
			$put($1.barcode, _Z, 48); /*3968*/
		} /*3968*/
		$puti($1.barcode, 6 - $1.val.length, $1.val); /*3969*/
		for (var _e = 0; _e <= 5; _e += 1) {
			/*3976*/
			var _g = $get($1.barcode, _e); /*3973*/
			$k[$j++] = _e; /*3974*/
			$k[$j++] = _g; /*3974*/
			$k[$j++] = _g; /*3974*/
			for (var _h = 0, _i = "AEIO".length; _h < _i; _h++) {
				/*3974*/
				if ($k[--$j] >= $get("AEIO", _h)) { //no-else/*3974*/
					var _l = $k[--$j]; /*3974*/
					$k[$j++] = _l + 1; /*3974*/
				} /*3974*/
				var _m = $k[--$j]; /*3974*/
				$k[$j++] = _m; /*3974*/
				$k[$j++] = _m; /*3974*/
			} /*3974*/
			$j--; /*3974*/
			var _o = $k[--$j]; /*3975*/
			$put($1.barcode, $k[--$j], _o); /*3975*/
		} /*3975*/
		$puti($1.text, 1, $geti($1.text, 0, 9)); /*3979*/
		$put($1.text, 0, 65); /*3980*/
		$put($1.options, "dontdraw", true); /*3983*/
		$k[$j++] = 'args'; /*3984*/
		$k[$j++] = $1.barcode; /*3984*/
		$k[$j++] = $1.options; /*3984*/
		$0.code39(); /*3984*/
		var _x = $k[--$j]; /*3984*/
		$1[$k[--$j]] = _x; /*3984*/
		$put($1.args, "txt", $a([$a([$1.text, $1.textxoffset, $1.textyoffset, $1.textfont, $1.textsize])])); /*3986*/
		$put($1.args, "textxalign", "center"); /*3987*/
		$put($1.args, "opt", $1.options); /*3988*/
		$k[$j++] = $1.args; /*3991*/
		if (!$1.dontdraw) { //no-else/*3991*/
			$0.renlinear(); /*3991*/
		} /*3991*/
	};
	$0.pzn = function() {
		var $1 = {}; /*4021*/
		$1.options = $k[--$j]; /*4023*/
		$1.barcode = $k[--$j]; /*4024*/
		$1.dontdraw = false; /*4026*/
		$1.includetext = false; /*4027*/
		$1.textfont = "OCR-B"; /*4028*/
		$1.textsize = 10; /*4029*/
		$1.textyoffset = -8.5; /*4030*/
		$1.textxoffset = 0; /*4031*/
		$1.height = 1; /*4032*/
		$1.pzn8 = false; /*4033*/
		$forall($1.options, function() {
			/*4044*/
			var _3 = $k[--$j]; /*4044*/
			$1[$k[--$j]] = _3; /*4044*/
		}); /*4044*/
		$1.textfont = "" + $1.textfont; /*4046*/
		$1.textsize = +$1.textsize; /*4047*/
		$1.textyoffset = +$1.textyoffset; /*4048*/
		$1.textxoffset = +$1.textxoffset; /*4049*/
		$1.height = +$1.height; /*4050*/
		if ($1.pzn8) {
			/*4059*/
			if (($1.barcode.length != 7) && ($1.barcode.length != 8)) { //no-else/*4056*/
				$k[$j++] = 'bwipp.pzn8badLength'; /*4055*/
				$k[$j++] = "PZN8 must be 7 or 8 digits"; /*4055*/
				$0.raiseerror(); /*4055*/
			} /*4055*/
		} else {
			/*4059*/
			if (($1.barcode.length != 6) && ($1.barcode.length != 7)) { //no-else/*4060*/
				$k[$j++] = 'bwipp.pzn7badLength'; /*4059*/
				$k[$j++] = "PZN7 must be 6 or 7 digits"; /*4059*/
				$0.raiseerror(); /*4059*/
			} /*4059*/
		} /*4059*/
		$forall($1.barcode, function() {
			/*4066*/
			var _G = $k[--$j]; /*4063*/
			if ((_G < 48) || (_G > 57)) { //no-else/*4065*/
				$k[$j++] = 'bwipp.pznBadCharacter'; /*4064*/
				$k[$j++] = "PZN must contain only digits"; /*4064*/
				$0.raiseerror(); /*4064*/
			} /*4064*/
		}); /*4064*/
		var _I = $1.pzn8 ? 9 : 8; /*4069*/
		$1.msglen = _I; /*4069*/
		$1.checksum = 0; /*4070*/
		for (var _L = 0, _K = $1.msglen - 3; _L <= _K; _L += 1) {
			/*4075*/
			$1.i = _L; /*4072*/
			var _R = $1.pzn8 ? 1 : 2; /*4073*/
			$1.checksum = (($get($1.barcode, $1.i) - 48) * ($1.i + _R)) + $1.checksum; /*4074*/
		} /*4074*/
		$1.checksum = $1.checksum % 11; /*4076*/
		if ($1.checksum == 10) { //no-else/*4079*/
			$k[$j++] = 'bwipp.pznBadInputSequence'; /*4078*/
			$k[$j++] = "Incorrect PZN input sequence provided"; /*4078*/
			$0.raiseerror(); /*4078*/
		} /*4078*/
		if ($1.barcode.length == ($1.msglen - 1)) { //no-else/*4084*/
			if ($get($1.barcode, $1.msglen - 2) != ($1.checksum + 48)) { //no-else/*4083*/
				$k[$j++] = 'bwipp.pznBadCheckDigit'; /*4082*/
				$k[$j++] = "Incorrect PZN check digit provided"; /*4082*/
				$0.raiseerror(); /*4082*/
			} /*4082*/
		} /*4082*/
		var _c = $s($1.msglen); /*4085*/
		$put(_c, 0, 45); /*4086*/
		$puti(_c, 1, $1.barcode); /*4087*/
		$put(_c, $1.msglen - 1, $1.checksum + 48); /*4088*/
		$1.msg = _c; /*4089*/
		$put($1.options, "dontdraw", true); /*4092*/
		$k[$j++] = 'args'; /*4093*/
		$k[$j++] = $1.msg; /*4093*/
		$k[$j++] = $1.options; /*4093*/
		$0.code39(); /*4093*/
		var _j = $k[--$j]; /*4093*/
		$1[$k[--$j]] = _j; /*4093*/
		$1.text = $s($1.msglen + 5); /*4096*/
		$puti($1.text, 0, "PZN - "); /*4097*/
		$puti($1.text, 6, $geti($1.msg, 1, $1.msglen - 1)); /*4098*/
		$put($1.args, "txt", $a([$a([$1.text, $1.textxoffset, $1.textyoffset, $1.textfont, $1.textsize])])); /*4100*/
		$put($1.args, "textxalign", "center"); /*4101*/
		$put($1.args, "opt", $1.options); /*4102*/
		$k[$j++] = $1.args; /*4105*/
		if (!$1.dontdraw) { //no-else/*4105*/
			$0.renlinear(); /*4105*/
		} /*4105*/
	};
	$0.code93 = function() {
		var $1 = {}; /*4134*/
		$1.options = $k[--$j]; /*4136*/
		$1.barcode = $k[--$j]; /*4137*/
		$1.dontdraw = false; /*4139*/
		$1.includecheck = false; /*4140*/
		$1.includetext = false; /*4141*/
		$1.textfont = "OCR-B"; /*4142*/
		$1.textsize = 10; /*4143*/
		$1.textyoffset = -8.5; /*4144*/
		$1.height = 1; /*4145*/
		$1.parsefnc = false; /*4146*/
		$forall($1.options, function() {
			/*4157*/
			var _3 = $k[--$j]; /*4157*/
			$1[$k[--$j]] = _3; /*4157*/
		}); /*4157*/
		$1.textfont = "" + $1.textfont; /*4159*/
		$1.textsize = +$1.textsize; /*4160*/
		$1.textyoffset = +$1.textyoffset; /*4161*/
		$1.height = +$1.height; /*4162*/
		$1.encs = $a(["131112", "111213", "111312", "111411", "121113", "121212", "121311", "111114", "131211", "141111", "211113", "211212", "211311", "221112", "221211", "231111", "112113", "112212", "112311", "122112", "132111", "111123", "111222", "111321", "121122", "131121", "212112", "212211", "211122", "211221", "221121", "222111", "112122", "112221", "122121", "123111", "121131", "311112", "311211", "321111", "112131", "113121", "211131", "121221", "312111", "311121", "122211", "111141", "1111411"]); /*4175*/
		$1.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; /*4178*/
		$1.barlen = $1.barcode.length; /*4180*/
		$1.sft1 = -1; /*4183*/
		$1.sft2 = -2; /*4183*/
		$1.sft3 = -3; /*4183*/
		$1.sft4 = -4; /*4183*/
		var _F = new Map([
			["SFT$", $1.sft1],
			["SFT%", $1.sft2],
			["SFT/", $1.sft3],
			["SFT+", $1.sft4]
		]); /*4188*/
		$1.fncvals = _F; /*4189*/
		$1.msg = $a($1.barlen); /*4192*/
		$1.i = 0; /*4193*/
		$1.j = 0; /*4193*/
		for (;;) {
			/*4232*/
			if ($1.i == $1.barlen) { //no-else/*4194*/
				break; /*4194*/
			} /*4194*/
			$1.char = $get($1.barcode, $1.i); /*4195*/
			$1.i = $1.i + 1; /*4196*/
			if (($1.parsefnc && ($1.char == 94)) && ($1.i < $1.barlen)) { //no-else/*4229*/
				if ($get($1.barcode, $1.i) != 94) {
					/*4227*/
					if ($1.i >= ($1.barlen - 3)) { //no-else/*4201*/
						$k[$j++] = 'bwipp.truncatedFNC'; /*4200*/
						$k[$j++] = "Function character truncated"; /*4200*/
						$0.raiseerror(); /*4200*/
					} /*4200*/
					var _Z = $geti($1.barcode, $1.i, 4); /*4202*/
					$k[$j++] = _Z; /*4224*/
					if ($ne($geti(_Z, 0, 3), "ECI")) {
						/*4223*/
						var _b = $k[--$j]; /*4204*/
						var _d = $get($1.fncvals, _b) !== undefined; /*4204*/
						$k[$j++] = _b; /*4208*/
						if (!_d) { //no-else/*4208*/
							var _e = $k[--$j]; /*4205*/
							var _f = $s(_e.length + 28); /*4205*/
							$puti(_f, 28, _e); /*4205*/
							$puti(_f, 0, "Unknown function character: "); /*4206*/
							$k[$j++] = 'bwipp.unknownFNC'; /*4207*/
							$k[$j++] = _f; /*4207*/
							$0.raiseerror(); /*4207*/
						} /*4207*/
						var _i = $get($1.fncvals, $k[--$j]); /*4209*/
						$1.i = $1.i + 4; /*4210*/
						$k[$j++] = _i; /*4210*/
					} else {
						/*4223*/
						$j--; /*4212*/
						if ($1.i >= ($1.barlen - 8)) { //no-else/*4215*/
							$k[$j++] = 'bwipp.truncatedECI'; /*4214*/
							$k[$j++] = "ECI truncated"; /*4214*/
							$0.raiseerror(); /*4214*/
						} /*4214*/
						var _o = $geti($1.barcode, $1.i + 3, 6); /*4216*/
						$k[$j++] = _o; /*4221*/
						$forall(_o, function() {
							/*4221*/
							var _p = $k[--$j]; /*4218*/
							if ((_p < 48) || (_p > 57)) { //no-else/*4220*/
								$k[$j++] = 'bwipp.invalidECI'; /*4219*/
								$k[$j++] = "ECI must be 000000 to 999999"; /*4219*/
								$0.raiseerror(); /*4219*/
							} /*4219*/
						}); /*4219*/
						var _q = $k[--$j]; /*4222*/
						$k[$j++] = 0; /*4222*/
						$forall(_q, function() {
							/*4222*/
							var _r = $k[--$j]; /*4222*/
							var _s = $k[--$j]; /*4222*/
							$k[$j++] = (_s - (_r - 48)) * 10; /*4222*/
						}); /*4222*/
						var _t = $k[--$j]; /*4222*/
						$1.i = $1.i + 9; /*4223*/
						$k[$j++] = (~~(_t / 10)) - 1000000; /*4223*/
					} /*4223*/
					$1.char = $k[--$j]; /*4225*/
				} else {
					/*4227*/
					$1.i = $1.i + 1; /*4227*/
				} /*4227*/
			} /*4227*/
			$put($1.msg, $1.j, $1.char); /*4230*/
			$1.j = $1.j + 1; /*4231*/
		} /*4231*/
		$1.msg = $geti($1.msg, 0, $1.j); /*4233*/
		$1.msglen = $1.msg.length; /*4234*/
		if ($1.includecheck) {
			/*4239*/
			$1.sbs = $s(($1.msglen * 6) + 25); /*4237*/
		} else {
			/*4239*/
			$1.sbs = $s(($1.msglen * 6) + 13); /*4239*/
		} /*4239*/
		$1.txt = $a($1.msglen); /*4241*/
		$puti($1.sbs, 0, $get($1.encs, 47)); /*4244*/
		$1.checksum1 = 0; /*4246*/
		$1.checksum2 = 0; /*4246*/
		for (var _1H = 0, _1G = $1.msglen - 1; _1H <= _1G; _1H += 1) {
			/*4265*/
			$1.i = _1H; /*4248*/
			var _1K = $get($1.msg, $1.i); /*4250*/
			$k[$j++] = _1K; /*4259*/
			if (_1K < 0) {
				/*4258*/
				$1.indx = 42 - $k[--$j]; /*4251*/
				$1.char = " "; /*4252*/
			} else {
				/*4258*/
				var _1M = $s(1); /*4254*/
				$put(_1M, 0, $k[--$j]); /*4254*/
				$1.char = _1M; /*4254*/
				$search($1.barchars, $1.char); /*4255*/
				$j--; /*4256*/
				$1.indx = $k[--$j].length; /*4257*/
				$j -= 2; /*4258*/
			} /*4258*/
			$1.enc = $get($1.encs, $1.indx); /*4260*/
			$puti($1.sbs, ($1.i * 6) + 6, $1.enc); /*4261*/
			$put($1.txt, $1.i, $a([$1.char, ($1.i * 9) + 9, $1.textyoffset, $1.textfont, $1.textsize])); /*4262*/
			$1.checksum1 = $1.checksum1 + ((((($1.msglen - $1.i) - 1) % 20) + 1) * $1.indx); /*4263*/
			$1.checksum2 = $1.checksum2 + (((($1.msglen - $1.i) % 15) + 1) * $1.indx); /*4264*/
		} /*4264*/
		if ($1.includecheck) {
			/*4277*/
			$1.checksum1 = $1.checksum1 % 47; /*4269*/
			$1.checksum2 = ($1.checksum2 + $1.checksum1) % 47; /*4270*/
			$puti($1.sbs, ($1.msglen * 6) + 6, $get($1.encs, $1.checksum1)); /*4271*/
			$puti($1.sbs, ($1.msglen * 6) + 12, $get($1.encs, $1.checksum2)); /*4272*/
			$puti($1.sbs, ($1.msglen * 6) + 18, $get($1.encs, 48)); /*4274*/
		} else {
			/*4277*/
			$puti($1.sbs, ($1.msglen * 6) + 6, $get($1.encs, 48)); /*4277*/
		} /*4277*/
		$k[$j++] = Infinity; /*4289*/
		$k[$j++] = Infinity; /*4283*/
		var _29 = $1.sbs; /*4283*/
		for (var _2A = 0, _2B = _29.length; _2A < _2B; _2A++) {
			/*4283*/
			$k[$j++] = $get(_29, _2A) - 48; /*4283*/
		} /*4283*/
		var _2D = $a(); /*4283*/
		$k[$j++] = Infinity; /*4284*/
		for (var _2F = 0, _2G = ~~(($1.sbs.length + 1) / 2); _2F < _2G; _2F++) {
			/*4284*/
			$k[$j++] = $1.height; /*4284*/
		} /*4284*/
		var _2I = $a(); /*4284*/
		$k[$j++] = Infinity; /*4285*/
		for (var _2K = 0, _2L = ~~(($1.sbs.length + 1) / 2); _2K < _2L; _2K++) {
			/*4285*/
			$k[$j++] = 0; /*4285*/
		} /*4285*/
		var _2M = $a(); /*4285*/
		$k[$j++] = 'ren'; /*4288*/
		$k[$j++] = $0.renlinear; /*4288*/
		$k[$j++] = 'sbs'; /*4288*/
		$k[$j++] = _2D; /*4288*/
		$k[$j++] = 'bhs'; /*4288*/
		$k[$j++] = _2I; /*4288*/
		$k[$j++] = 'bbs'; /*4288*/
		$k[$j++] = _2M; /*4288*/
		if ($1.includetext) { //no-else/*4288*/
			$k[$j++] = 'txt'; /*4287*/
			$k[$j++] = $1.txt; /*4287*/
		} /*4287*/
		$k[$j++] = 'opt'; /*4289*/
		$k[$j++] = $1.options; /*4289*/
		var _2Q = $d(); /*4289*/
		$k[$j++] = _2Q; /*4292*/
		if (!$1.dontdraw) { //no-else/*4292*/
			$0.renlinear(); /*4292*/
		} /*4292*/
	};
	$0.code93ext = function() {
		var $1 = {}; /*4322*/
		$1.options = $k[--$j]; /*4324*/
		$1.barcode = $k[--$j]; /*4325*/
		$1.dontdraw = false; /*4327*/
		$1.includetext = false; /*4328*/
		$1.parse = false; /*4329*/
		$forall($1.options, function() {
			/*4340*/
			var _3 = $k[--$j]; /*4340*/
			$1[$k[--$j]] = _3; /*4340*/
		}); /*4340*/
		$1.barlen = $1.barcode.length; /*4363*/
		$1.extencs = $a(["^SFT%U", "^SFT$A", "^SFT$B", "^SFT$C", "^SFT$D", "^SFT$E", "^SFT$F", "^SFT$G", "^SFT$H", "^SFT$I", "^SFT$J", "^SFT$K", "^SFT$L", "^SFT$M", "^SFT$N", "^SFT$O", "^SFT$P", "^SFT$Q", "^SFT$R", "^SFT$S", "^SFT$T", "^SFT$U", "^SFT$V", "^SFT$W", "^SFT$X", "^SFT$Y", "^SFT$Z", "^SFT%A", "^SFT%B", "^SFT%C", "^SFT%D", "^SFT%E", " ", "^SFT/A", "^SFT/B", "^SFT/C", "^SFT/D", "^SFT/E", "^SFT/F", "^SFT/G", "^SFT/H", "^SFT/I", "^SFT/J", "^SFT/K", "^SFT/L", "-", ".", "^SFT/O", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "^SFT/Z", "^SFT%F", "^SFT%G", "^SFT%H", "^SFT%I", "^SFT%J", "^SFT%V", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "^SFT%K", "^SFT%L", "^SFT%M", "^SFT%N", "^SFT%O", "^SFT%W", "^SFT+A", "^SFT+B", "^SFT+C", "^SFT+D", "^SFT+E", "^SFT+F", "^SFT+G", "^SFT+H", "^SFT+I", "^SFT+J", "^SFT+K", "^SFT+L", "^SFT+M", "^SFT+N", "^SFT+O", "^SFT+P", "^SFT+Q", "^SFT+R", "^SFT+S", "^SFT+T", "^SFT+U", "^SFT+V", "^SFT+W", "^SFT+X", "^SFT+Y", "^SFT+Z", "^SFT%P", "^SFT%Q", "^SFT%R", "^SFT%S", "^SFT%T"]); /*4383*/
		$1.newcode = $s($1.barlen * 6); /*4385*/
		$1.newtext = $s($1.barlen * 6); /*4386*/
		$1.j = 0; /*4387*/
		$1.k = 0; /*4387*/
		for (var _D = 0, _C = $1.barlen - 1; _D <= _C; _D += 1) {
			/*4397*/
			$1.i = _D; /*4389*/
			$1.extchar = $get($1.extencs, $get($1.barcode, $1.i)); /*4390*/
			$1.extlen = $1.extchar.length; /*4391*/
			$puti($1.newcode, $1.j, $1.extchar); /*4392*/
			$put($1.newtext, $1.k, $get($1.barcode, $1.i)); /*4393*/
			if ($1.extlen != 1) { //no-else/*4394*/
				$puti($1.newtext, $1.k + 1, " "); /*4394*/
			} /*4394*/
			$1.j = $1.j + $1.extlen; /*4395*/
			var _Z = ($1.extlen == 1) ? 1 : 2; /*4396*/
			$1.k = $1.k + _Z; /*4396*/
		} /*4396*/
		$1.newcode = $geti($1.newcode, 0, $1.j); /*4398*/
		$1.newtext = $geti($1.newtext, 0, $1.k); /*4399*/
		$put($1.options, "dontdraw", true); /*4402*/
		$put($1.options, "parsefnc", true); /*4403*/
		$k[$j++] = 'args'; /*4404*/
		$k[$j++] = $1.newcode; /*4404*/
		$k[$j++] = $1.options; /*4404*/
		$0.code93(); /*4404*/
		var _k = $k[--$j]; /*4404*/
		$1[$k[--$j]] = _k; /*4404*/
		if ($1.includetext) { //no-else/*4416*/
			$1.txt = $get($1.args, "txt"); /*4408*/
			for (var _r = 0, _q = $1.newtext.length - 1; _r <= _q; _r += 1) {
				/*4414*/
				$1.i = _r; /*4410*/
				$1.txtentry = $get($1.txt, $1.i); /*4411*/
				$put($1.txtentry, 0, $geti($1.newtext, $1.i, 1)); /*4412*/
				$put($1.txt, $1.i, $1.txtentry); /*4413*/
			} /*4413*/
			$put($1.args, "txt", $1.txt); /*4415*/
		} /*4415*/
		$put($1.args, "opt", $1.options); /*4417*/
		$k[$j++] = $1.args; /*4420*/
		if (!$1.dontdraw) { //no-else/*4420*/
			$0.renlinear(); /*4420*/
		} /*4420*/
	};
	$0.interleaved2of5 = function() {
		var $1 = {}; /*4449*/
		$1.options = $k[--$j]; /*4451*/
		$1.barcode = $k[--$j]; /*4452*/
		$1.dontdraw = false; /*4454*/
		$1.includecheck = false; /*4455*/
		$1.includetext = false; /*4456*/
		$1.includecheckintext = false; /*4457*/
		$1.textfont = "OCR-B"; /*4458*/
		$1.textsize = 10; /*4459*/
		$1.textyoffset = -8.5; /*4460*/
		$1.height = 1; /*4461*/
		$forall($1.options, function() {
			/*4472*/
			var _3 = $k[--$j]; /*4472*/
			$1[$k[--$j]] = _3; /*4472*/
		}); /*4472*/
		$1.textfont = "" + $1.textfont; /*4474*/
		$1.textsize = +$1.textsize; /*4475*/
		$1.textyoffset = +$1.textyoffset; /*4476*/
		$1.height = +$1.height; /*4477*/
		$forall($1.barcode, function() {
			/*4484*/
			var _A = $k[--$j]; /*4481*/
			if ((_A < 48) || (_A > 57)) { //no-else/*4483*/
				$k[$j++] = 'bwipp.interleaved2of5badCharacter'; /*4482*/
				$k[$j++] = "Interleaved 2 of 5 must contain only digits"; /*4482*/
				$0.raiseerror(); /*4482*/
			} /*4482*/
		}); /*4482*/
		$1.barlen = $1.barcode.length; /*4486*/
		if (((($1.barlen % 2) == 0) && $1.includecheck) || ((($1.barlen % 2) != 0) && (!$1.includecheck))) { //no-else/*4497*/
			$1.pad = $s($1.barlen + 1); /*4492*/
			$put($1.pad, 0, 48); /*4493*/
			$puti($1.pad, 1, $1.barcode); /*4494*/
			$1.barcode = $1.pad; /*4495*/
			$1.barlen = $1.barlen + 1; /*4496*/
		} /*4496*/
		if ($1.includecheck) { //no-else/*4516*/
			$1.checksum = 0; /*4501*/
			for (var _Q = 0, _P = $1.barlen - 1; _Q <= _P; _Q += 1) {
				/*4509*/
				$1.i = _Q; /*4503*/
				if (($1.i % 2) == 0) {
					/*4507*/
					$1.checksum = $1.checksum + (($get($1.barcode, $1.i) - 48) * 3); /*4505*/
				} else {
					/*4507*/
					$1.checksum = $1.checksum + ($get($1.barcode, $1.i) - 48); /*4507*/
				} /*4507*/
			} /*4507*/
			$1.checksum = (10 - ($1.checksum % 10)) % 10; /*4510*/
			$1.pad = $s($1.barlen + 1); /*4511*/
			$puti($1.pad, 0, $1.barcode); /*4512*/
			$put($1.pad, $1.barlen, $1.checksum + 48); /*4513*/
			$1.barcode = $1.pad; /*4514*/
			$1.barlen = $1.barlen + 1; /*4515*/
		} /*4515*/
		$1.encs = $a(["11221", "21112", "12112", "22111", "11212", "21211", "12211", "11122", "21121", "12121", "1111", "2111"]); /*4523*/
		$1.barchars = "0123456789"; /*4526*/
		$1.sbs = $s(($1.barlen * 5) + 8); /*4527*/
		$1.txt = $a($1.barlen); /*4528*/
		$puti($1.sbs, 0, $get($1.encs, 10)); /*4531*/
		for (var _u = 0, _t = $1.barlen - 1; _u <= _t; _u += 2) {
			/*4565*/
			$1.i = _u; /*4534*/
			$search($1.barchars, $geti($1.barcode, $1.i, 1)); /*4536*/
			$j--; /*4537*/
			$1.indx = $k[--$j].length; /*4538*/
			$j -= 2; /*4539*/
			$1.enca = $get($1.encs, $1.indx); /*4540*/
			$search($1.barchars, $geti($1.barcode, $1.i + 1, 1)); /*4542*/
			$j--; /*4543*/
			$1.indx = $k[--$j].length; /*4544*/
			$j -= 2; /*4545*/
			$1.encb = $get($1.encs, $1.indx); /*4546*/
			$1.intl = $s($1.enca.length * 2); /*4549*/
			for (var _1F = 0, _1E = $1.enca.length - 1; _1F <= _1E; _1F += 1) {
				/*4556*/
				$1.j = _1F; /*4551*/
				$1.achar = $get($1.enca, $1.j); /*4552*/
				$1.bchar = $get($1.encb, $1.j); /*4553*/
				$put($1.intl, $1.j * 2, $1.achar); /*4554*/
				$put($1.intl, ($1.j * 2) + 1, $1.bchar); /*4555*/
			} /*4555*/
			$puti($1.sbs, ($1.i * 5) + 4, $1.intl); /*4558*/
			$put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), ($1.i * 9) + 4, $1.textyoffset, $1.textfont, $1.textsize])); /*4559*/
			if (($1.includecheck && (!$1.includecheckintext)) && (($1.barlen - 2) == $1.i)) {
				/*4563*/
				$put($1.txt, $1.i + 1, $a([" ", (($1.i + 1) * 9) + 4, $1.textyoffset, $1.textfont, $1.textsize])); /*4561*/
			} else {
				/*4563*/
				$put($1.txt, $1.i + 1, $a([$geti($1.barcode, $1.i + 1, 1), (($1.i + 1) * 9) + 4, $1.textyoffset, $1.textfont, $1.textsize])); /*4563*/
			} /*4563*/
		} /*4563*/
		$puti($1.sbs, ($1.barlen * 5) + 4, $get($1.encs, 11)); /*4568*/
		$k[$j++] = Infinity; /*4581*/
		$k[$j++] = Infinity; /*4573*/
		var _24 = $1.sbs; /*4573*/
		for (var _25 = 0, _26 = _24.length; _25 < _26; _25++) {
			/*4573*/
			$k[$j++] = $get(_24, _25) - 48; /*4573*/
		} /*4573*/
		var _28 = $a(); /*4573*/
		$k[$j++] = Infinity; /*4574*/
		for (var _2A = 0, _2B = ~~(($1.sbs.length + 1) / 2); _2A < _2B; _2A++) {
			/*4574*/
			$k[$j++] = $1.height; /*4574*/
		} /*4574*/
		var _2D = $a(); /*4574*/
		$k[$j++] = Infinity; /*4575*/
		for (var _2F = 0, _2G = ~~(($1.sbs.length + 1) / 2); _2F < _2G; _2F++) {
			/*4575*/
			$k[$j++] = 0; /*4575*/
		} /*4575*/
		var _2H = $a(); /*4575*/
		$k[$j++] = 'ren'; /*4578*/
		$k[$j++] = $0.renlinear; /*4578*/
		$k[$j++] = 'sbs'; /*4578*/
		$k[$j++] = _28; /*4578*/
		$k[$j++] = 'bhs'; /*4578*/
		$k[$j++] = _2D; /*4578*/
		$k[$j++] = 'bbs'; /*4578*/
		$k[$j++] = _2H; /*4578*/
		if ($1.includetext) { //no-else/*4578*/
			$k[$j++] = 'txt'; /*4577*/
			$k[$j++] = $1.txt; /*4577*/
		} /*4577*/
		$k[$j++] = 'barratio'; /*4581*/
		$k[$j++] = 2; /*4581*/
		$k[$j++] = 'spaceratio'; /*4581*/
		$k[$j++] = 2; /*4581*/
		$k[$j++] = 'opt'; /*4581*/
		$k[$j++] = $1.options; /*4581*/
		var _2L = $d(); /*4581*/
		$k[$j++] = _2L; /*4584*/
		if (!$1.dontdraw) { //no-else/*4584*/
			$0.renlinear(); /*4584*/
		} /*4584*/
	};
	$0.itf14 = function() {
		var $1 = {}; /*4614*/
		$1.options = $k[--$j]; /*4616*/
		$1.barcode = $k[--$j]; /*4617*/
		$1.dontdraw = false; /*4619*/
		$1.includetext = false; /*4620*/
		$1.includecheckintext = true; /*4621*/
		$1.textfont = "OCR-B"; /*4622*/
		$1.textsize = 10; /*4623*/
		$1.textxoffset = 0; /*4624*/
		$1.textyoffset = 3; /*4625*/
		$1.height = 0.5; /*4626*/
		$1.showborder = true; /*4627*/
		$1.borderwidth = 4; /*4628*/
		$1.borderleft = 15; /*4629*/
		$1.borderright = 15; /*4630*/
		$forall($1.options, function() {
			/*4641*/
			var _3 = $k[--$j]; /*4641*/
			$1[$k[--$j]] = _3; /*4641*/
		}); /*4641*/
		$1.textfont = "" + $1.textfont; /*4643*/
		$1.textsize = +$1.textsize; /*4644*/
		$1.textxoffset = +$1.textxoffset; /*4645*/
		$1.textyoffset = +$1.textyoffset; /*4646*/
		$1.height = +$1.height; /*4647*/
		$1.borderwidth = +$1.borderwidth; /*4648*/
		$1.borderleft = +$1.borderleft; /*4649*/
		$1.borderright = +$1.borderright; /*4650*/
		$1.text = $1.barcode; /*4653*/
		var _E = $1.barcode; /*4654*/
		$k[$j++] = $s(_E.length); /*4655*/
		$k[$j++] = 0; /*4655*/
		$forall(_E, function() {
			/*4655*/
			var _G = $k[--$j]; /*4655*/
			$k[$j++] = _G; /*4655*/
			if (_G != 32) {
				/*4655*/
				var _H = $k[--$j]; /*4655*/
				var _I = $k[--$j]; /*4655*/
				var _J = $k[--$j]; /*4655*/
				$put(_J, _I, _H); /*4655*/
				$k[$j++] = _J; /*4655*/
				$k[$j++] = _I + 1; /*4655*/
			} else {
				/*4655*/
				$j--; /*4655*/
			} /*4655*/
		}); /*4655*/
		var _K = $k[--$j]; /*4656*/
		$1.barcode = $geti($k[--$j], 0, _K); /*4656*/
		$1.hasspace = $1.text.length != $1.barcode.length; /*4657*/
		if (($1.barcode.length != 13) && ($1.barcode.length != 14)) { //no-else/*4662*/
			$k[$j++] = 'bwipp.itf14badLength'; /*4661*/
			$k[$j++] = "ITF-14 must be 13 or 14 digits"; /*4661*/
			$0.raiseerror(); /*4661*/
		} /*4661*/
		$forall($1.barcode, function() {
			/*4667*/
			var _S = $k[--$j]; /*4664*/
			if ((_S < 48) || (_S > 57)) { //no-else/*4666*/
				$k[$j++] = 'bwipp.itf14badCharacter'; /*4665*/
				$k[$j++] = "ITF-14 must contain only digits"; /*4665*/
				$0.raiseerror(); /*4665*/
			} /*4665*/
		}); /*4665*/
		$1.checksum = 0; /*4670*/
		for (var _T = 0; _T <= 12; _T += 1) {
			/*4674*/
			$1.i = _T; /*4672*/
			$k[$j++] = 'checksum'; /*4673*/
			$k[$j++] = $1.checksum; /*4673*/
			$k[$j++] = $get($1.barcode, $1.i) - 48; /*4673*/
			if (($1.i % 2) == 0) { //no-else/*4673*/
				var _Z = $k[--$j]; /*4673*/
				$k[$j++] = _Z * 3; /*4673*/
			} /*4673*/
			var _a = $k[--$j]; /*4673*/
			var _b = $k[--$j]; /*4673*/
			$1[$k[--$j]] = _b + _a; /*4673*/
		} /*4673*/
		$1.checksum = (10 - ($1.checksum % 10)) % 10; /*4675*/
		if ($1.barcode.length == 14) {
			/*4689*/
			if ($get($1.barcode, 13) != ($1.checksum + 48)) { //no-else/*4679*/
				$k[$j++] = 'bwipp.itf14badCheckDigit'; /*4678*/
				$k[$j++] = "Incorrect ITF-14 check digit provided"; /*4678*/
				$0.raiseerror(); /*4678*/
			} /*4678*/
		} else {
			/*4689*/
			var _i = $s(14); /*4681*/
			$puti(_i, 0, $1.barcode); /*4682*/
			$put(_i, 13, $1.checksum + 48); /*4683*/
			$1.barcode = _i; /*4684*/
			var _n = $1.hasspace ? 2 : 1; /*4685*/
			var _o = $s($1.text.length + _n); /*4685*/
			$puti(_o, _o.length - 2, " "); /*4686*/
			$put(_o, _o.length - 1, $1.checksum + 48); /*4687*/
			$puti(_o, 0, $1.text); /*4688*/
			$1.text = _o; /*4689*/
		} /*4689*/
		$put($1.options, "dontdraw", true); /*4693*/
		$put($1.options, "showborder", $1.showborder); /*4694*/
		$put($1.options, "borderwidth", $1.borderwidth); /*4695*/
		$put($1.options, "borderleft", $1.borderleft); /*4696*/
		$put($1.options, "borderright", $1.borderright); /*4697*/
		$put($1.options, "height", $1.height); /*4698*/
		$put($1.options, "textyoffset", $1.textyoffset); /*4699*/
		$k[$j++] = 'args'; /*4700*/
		$k[$j++] = $1.barcode; /*4700*/
		$k[$j++] = $1.options; /*4700*/
		$0.interleaved2of5(); /*4700*/
		var _16 = $k[--$j]; /*4700*/
		$1[$k[--$j]] = _16; /*4700*/
		$put($1.args, "txt", $a([$a([$1.text, $1.textxoffset, $1.textyoffset, $1.textfont, $1.textsize])])); /*4702*/
		$put($1.args, "textxalign", "center"); /*4703*/
		$put($1.args, "opt", $1.options); /*4704*/
		$k[$j++] = $1.args; /*4707*/
		if (!$1.dontdraw) { //no-else/*4707*/
			$0.renlinear(); /*4707*/
		} /*4707*/
	};
	$0.identcode = function() {
		var $1 = {}; /*4737*/
		$1.options = $k[--$j]; /*4739*/
		$1.barcode = $k[--$j]; /*4740*/
		$1.dontdraw = false; /*4742*/
		$1.includetext = false; /*4743*/
		$1.textfont = "OCR-B"; /*4744*/
		$1.textsize = 10; /*4745*/
		$1.textxoffset = 0; /*4746*/
		$1.textyoffset = -8.5; /*4747*/
		$1.height = 1; /*4748*/
		$forall($1.options, function() {
			/*4759*/
			var _3 = $k[--$j]; /*4759*/
			$1[$k[--$j]] = _3; /*4759*/
		}); /*4759*/
		$1.textfont = "" + $1.textfont; /*4761*/
		$1.textsize = +$1.textsize; /*4762*/
		$1.textxoffset = +$1.textxoffset; /*4763*/
		$1.textyoffset = +$1.textyoffset; /*4764*/
		$1.height = +$1.height; /*4765*/
		if (($1.barcode.length != 11) && ($1.barcode.length != 12)) { //no-else/*4770*/
			$k[$j++] = 'bwipp.identcodeBadLength'; /*4769*/
			$k[$j++] = "Deutsche Post Identcode must be 11 or 12 digits"; /*4769*/
			$0.raiseerror(); /*4769*/
		} /*4769*/
		$forall($1.barcode, function() {
			/*4775*/
			var _D = $k[--$j]; /*4772*/
			if ((_D < 48) || (_D > 57)) { //no-else/*4774*/
				$k[$j++] = 'bwipp.identcodeBadCharacter'; /*4773*/
				$k[$j++] = "Deutsche Post Identcode must contain only digits"; /*4773*/
				$0.raiseerror(); /*4773*/
			} /*4773*/
		}); /*4773*/
		$1.checksum = 0; /*4778*/
		for (var _E = 0; _E <= 10; _E += 1) {
			/*4782*/
			$1.i = _E; /*4780*/
			$k[$j++] = 'checksum'; /*4781*/
			$k[$j++] = $1.checksum; /*4781*/
			$k[$j++] = $get($1.barcode, $1.i) - 48; /*4781*/
			if (($1.i % 2) == 0) {
				/*4781*/
				var _K = $k[--$j]; /*4781*/
				$k[$j++] = _K * 4; /*4781*/
			} else {
				/*4781*/
				var _L = $k[--$j]; /*4781*/
				$k[$j++] = _L * 9; /*4781*/
			} /*4781*/
			var _M = $k[--$j]; /*4781*/
			var _N = $k[--$j]; /*4781*/
			$1[$k[--$j]] = _N + _M; /*4781*/
		} /*4781*/
		$1.checksum = (10 - ($1.checksum % 10)) % 10; /*4783*/
		if ($1.barcode.length == 12) { //no-else/*4788*/
			if ($get($1.barcode, 11) != ($1.checksum + 48)) { //no-else/*4787*/
				$k[$j++] = 'bwipp.identcodeBadCheckDigit'; /*4786*/
				$k[$j++] = "Incorrect Deutsche Post Identcode check digit provided"; /*4786*/
				$0.raiseerror(); /*4786*/
			} /*4786*/
		} /*4786*/
		var _U = $s(12); /*4789*/
		$puti(_U, 0, $1.barcode); /*4790*/
		$put(_U, 11, $1.checksum + 48); /*4791*/
		$1.barcode = _U; /*4792*/
		$1.text = $strcpy($s(16), "  .       .     "); /*4795*/
		$puti($1.text, 0, $geti($1.barcode, 0, 2)); /*4796*/
		$puti($1.text, 3, $geti($1.barcode, 2, 3)); /*4797*/
		$puti($1.text, 7, $geti($1.barcode, 5, 3)); /*4798*/
		$puti($1.text, 11, $geti($1.barcode, 8, 3)); /*4799*/
		$puti($1.text, 15, $geti($1.barcode, 11, 1)); /*4800*/
		$put($1.options, "dontdraw", true); /*4803*/
		$put($1.options, "includecheck", false); /*4804*/
		$k[$j++] = 'args'; /*4805*/
		$k[$j++] = $1.barcode; /*4805*/
		$k[$j++] = $1.options; /*4805*/
		$0.interleaved2of5(); /*4805*/
		var _s = $k[--$j]; /*4805*/
		$1[$k[--$j]] = _s; /*4805*/
		$put($1.args, "txt", $a([$a([$1.text, $1.textxoffset, $1.textyoffset, $1.textfont, $1.textsize])])); /*4807*/
		$put($1.args, "textxalign", "center"); /*4808*/
		$put($1.args, "opt", $1.options); /*4809*/
		$k[$j++] = $1.args; /*4812*/
		if (!$1.dontdraw) { //no-else/*4812*/
			$0.renlinear(); /*4812*/
		} /*4812*/
	};
	$0.leitcode = function() {
		var $1 = {}; /*4842*/
		$1.options = $k[--$j]; /*4844*/
		$1.barcode = $k[--$j]; /*4845*/
		$1.dontdraw = false; /*4847*/
		$1.includetext = false; /*4848*/
		$1.textfont = "OCR-B"; /*4849*/
		$1.textsize = 10; /*4850*/
		$1.textxoffset = 0; /*4851*/
		$1.textyoffset = -8.5; /*4852*/
		$1.height = 1; /*4853*/
		$forall($1.options, function() {
			/*4864*/
			var _3 = $k[--$j]; /*4864*/
			$1[$k[--$j]] = _3; /*4864*/
		}); /*4864*/
		$1.textfont = "" + $1.textfont; /*4866*/
		$1.textsize = +$1.textsize; /*4867*/
		$1.textxoffset = +$1.textxoffset; /*4868*/
		$1.textyoffset = +$1.textyoffset; /*4869*/
		$1.height = +$1.height; /*4870*/
		if (($1.barcode.length != 13) && ($1.barcode.length != 14)) { //no-else/*4875*/
			$k[$j++] = 'bwipp.leitcodeBadLength'; /*4874*/
			$k[$j++] = "Deutsche Post Leitcode must be 13 or 14 digits"; /*4874*/
			$0.raiseerror(); /*4874*/
		} /*4874*/
		$forall($1.barcode, function() {
			/*4880*/
			var _D = $k[--$j]; /*4877*/
			if ((_D < 48) || (_D > 57)) { //no-else/*4879*/
				$k[$j++] = 'bwipp.leitcodeBadCharacter'; /*4878*/
				$k[$j++] = "Deutsche Post Leitcode must contain only digits"; /*4878*/
				$0.raiseerror(); /*4878*/
			} /*4878*/
		}); /*4878*/
		$1.checksum = 0; /*4883*/
		for (var _E = 0; _E <= 12; _E += 1) {
			/*4887*/
			$1.i = _E; /*4885*/
			$k[$j++] = 'checksum'; /*4886*/
			$k[$j++] = $1.checksum; /*4886*/
			$k[$j++] = $get($1.barcode, $1.i) - 48; /*4886*/
			if (($1.i % 2) == 0) {
				/*4886*/
				var _K = $k[--$j]; /*4886*/
				$k[$j++] = _K * 4; /*4886*/
			} else {
				/*4886*/
				var _L = $k[--$j]; /*4886*/
				$k[$j++] = _L * 9; /*4886*/
			} /*4886*/
			var _M = $k[--$j]; /*4886*/
			var _N = $k[--$j]; /*4886*/
			$1[$k[--$j]] = _N + _M; /*4886*/
		} /*4886*/
		$1.checksum = (10 - ($1.checksum % 10)) % 10; /*4888*/
		if ($1.barcode.length == 14) { //no-else/*4893*/
			if ($get($1.barcode, 13) != ($1.checksum + 48)) { //no-else/*4892*/
				$k[$j++] = 'bwipp.leitcodeBadCheckDigit'; /*4891*/
				$k[$j++] = "Incorrect Deutsche Post Leitcode check digit provided"; /*4891*/
				$0.raiseerror(); /*4891*/
			} /*4891*/
		} /*4891*/
		var _U = $s(14); /*4894*/
		$puti(_U, 0, $1.barcode); /*4895*/
		$put(_U, 13, $1.checksum + 48); /*4896*/
		$1.barcode = _U; /*4897*/
		$1.text = $strcpy($s(18), "     .   .   .    "); /*4900*/
		$puti($1.text, 0, $geti($1.barcode, 0, 5)); /*4901*/
		$puti($1.text, 6, $geti($1.barcode, 5, 3)); /*4902*/
		$puti($1.text, 10, $geti($1.barcode, 8, 3)); /*4903*/
		$puti($1.text, 14, $geti($1.barcode, 11, 2)); /*4904*/
		$puti($1.text, 17, $geti($1.barcode, 13, 1)); /*4905*/
		$put($1.options, "dontdraw", true); /*4908*/
		$put($1.options, "includecheck", false); /*4909*/
		$k[$j++] = 'args'; /*4910*/
		$k[$j++] = $1.barcode; /*4910*/
		$k[$j++] = $1.options; /*4910*/
		$0.interleaved2of5(); /*4910*/
		var _s = $k[--$j]; /*4910*/
		$1[$k[--$j]] = _s; /*4910*/
		$put($1.args, "txt", $a([$a([$1.text, $1.textxoffset, $1.textyoffset, $1.textfont, $1.textsize])])); /*4912*/
		$put($1.args, "textxalign", "center"); /*4913*/
		$put($1.args, "opt", $1.options); /*4914*/
		$k[$j++] = $1.args; /*4917*/
		if (!$1.dontdraw) { //no-else/*4917*/
			$0.renlinear(); /*4917*/
		} /*4917*/
	};
	$0.databaromni = function() {
		var $1 = {}; /*4947*/
		$1.options = $k[--$j]; /*4949*/
		$1.barcode = $k[--$j]; /*4950*/
		$1.dontdraw = false; /*4952*/
		$1.height = 33 / 72; /*4953*/
		$1.linkage = false; /*4954*/
		$1.format = "omni"; /*4955*/
		$1.barxmult = 33; /*4956*/
		$forall($1.options, function() {
			/*4967*/
			var _3 = $k[--$j]; /*4967*/
			$1[$k[--$j]] = _3; /*4967*/
		}); /*4967*/
		if ($eq($1.format, "truncated")) { //no-else/*4969*/
			$1.height = 13 / 72; /*4969*/
		} /*4969*/
		$1.height = +$1.height; /*4970*/
		$1.barxmult = ~~$1.barxmult; /*4971*/
		if ($ne($geti($1.barcode, 0, 4), "(01)")) { //no-else/*4976*/
			$k[$j++] = 'bwipp.databaromniBadAI'; /*4975*/
			$k[$j++] = "GS1 DataBar Omnidirectional must begin with (01) application identifier"; /*4975*/
			$0.raiseerror(); /*4975*/
		} /*4975*/
		if (($1.barcode.length != 17) && ($1.barcode.length != 18)) { //no-else/*4979*/
			$k[$j++] = 'bwipp.databaromniBadLength'; /*4978*/
			$k[$j++] = "GS1 DataBar Omnidirectional must be 13 or 14 digits"; /*4978*/
			$0.raiseerror(); /*4978*/
		} /*4978*/
		$forall($geti($1.barcode, 4, $1.barcode.length - 4), function() {
			/*4984*/
			var _F = $k[--$j]; /*4981*/
			if ((_F < 48) || (_F > 57)) { //no-else/*4983*/
				$k[$j++] = 'bwipp.databaromniBadCharacter'; /*4982*/
				$k[$j++] = "GS1 DataBar Omnidirectional must contain only digits"; /*4982*/
				$0.raiseerror(); /*4982*/
			} /*4982*/
		}); /*4982*/
		$1.checksum = 0; /*4987*/
		for (var _G = 0; _G <= 12; _G += 1) {
			/*4991*/
			$1.i = _G; /*4989*/
			$k[$j++] = 'checksum'; /*4990*/
			$k[$j++] = $1.checksum; /*4990*/
			$k[$j++] = $get($1.barcode, $1.i + 4) - 48; /*4990*/
			if (($1.i % 2) == 0) { //no-else/*4990*/
				var _M = $k[--$j]; /*4990*/
				$k[$j++] = _M * 3; /*4990*/
			} /*4990*/
			var _N = $k[--$j]; /*4990*/
			var _O = $k[--$j]; /*4990*/
			$1[$k[--$j]] = _O + _N; /*4990*/
		} /*4990*/
		$1.checksum = (10 - ($1.checksum % 10)) % 10; /*4992*/
		if ($1.barcode.length == 18) { //no-else/*4997*/
			if ($get($1.barcode, 17) != ($1.checksum + 48)) { //no-else/*4996*/
				$k[$j++] = 'bwipp.databaromniBadCheckDigit'; /*4995*/
				$k[$j++] = "Incorrect GS1 DataBar Omnidirectional check digit provided"; /*4995*/
				$0.raiseerror(); /*4995*/
			} /*4995*/
		} /*4995*/
		var _V = $s(18); /*4998*/
		$puti(_V, 0, $1.barcode); /*4999*/
		$put(_V, 17, $1.checksum + 48); /*5000*/
		$1.barcode = _V; /*5001*/
		$1.txt = $a($1.barcode.length); /*5004*/
		for (var _c = 0, _b = $1.barcode.length - 1; _c <= _b; _c += 1) {
			/*5008*/
			$1.i = _c; /*5006*/
			$put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), 0, 0, "", 0])); /*5007*/
		} /*5007*/
		$1.ncr = function() {
			var _j = $k[--$j]; /*5011*/
			var _k = $k[--$j]; /*5011*/
			var _l = _k - _j; /*5011*/
			if (_j < (_k - _j)) { //no-else/*5011*/
				var _ = _l; /*5011*/
				_l = _j; /*5011*/
				_j = _; /*5011*/
			} /*5011*/
			$k[$j++] = _l; /*5018*/
			$k[$j++] = 1; /*5018*/
			$k[$j++] = 1; /*5018*/
			for (var _n = _k, _m = _j + 1; _n >= _m; _n -= 1) {
				/*5018*/
				var _o = $k[--$j]; /*5014*/
				var _p = $k[--$j]; /*5015*/
				var _q = $k[--$j]; /*5015*/
				$k[$j++] = _q; /*5017*/
				$k[$j++] = _p; /*5017*/
				$k[$j++] = _o * _n; /*5017*/
				if ($le(_p, _q)) { //no-else/*5017*/
					var _r = $k[--$j]; /*5016*/
					var _s = $k[--$j]; /*5016*/
					$k[$j++] = _s + 1; /*5016*/
					$k[$j++] = ~~(_r / _s); /*5016*/
				} /*5016*/
			} /*5016*/
			for (;;) {
				/*5022*/
				var _t = $k[--$j]; /*5020*/
				var _u = $k[--$j]; /*5020*/
				var _v = $k[--$j]; /*5020*/
				$k[$j++] = _v; /*5020*/
				$k[$j++] = _u; /*5020*/
				$k[$j++] = _t; /*5020*/
				if ($gt(_u, _v)) { //no-else/*5020*/
					break; /*5020*/
				} /*5020*/
				var _w = $k[--$j]; /*5021*/
				var _x = $k[--$j]; /*5021*/
				$k[$j++] = _x + 1; /*5021*/
				$k[$j++] = ~~(_w / _x); /*5021*/
			} /*5021*/
			var _y = $k[--$j]; /*5023*/
			var _z = $k[--$j]; /*5023*/
			var _10 = $k[--$j]; /*5023*/
			$k[$j++] = _y; /*5023*/
		}; /*5024*/
		$1.getRSSwidths = function() {
			$1.oe = $k[--$j]; /*5027*/
			$1.el = $k[--$j]; /*5028*/
			$1.mw = $k[--$j]; /*5029*/
			$1.nm = $k[--$j]; /*5030*/
			$1.val = $k[--$j]; /*5031*/
			$1.out = $a($1.el); /*5032*/
			$1.mask = 0; /*5033*/
			for (var _1A = 0, _19 = $1.el - 2; _1A <= _19; _1A += 1) {
				/*5060*/
				$1.bar = _1A; /*5035*/
				$1.ew = 1; /*5036*/
				var _1C = $1.bar; /*5037*/
				$1.mask = $1.mask | ((_1C < 0 ? 1 >>> -_1C : 1 << _1C)); /*5037*/
				for (;;) {
					/*5056*/
					$k[$j++] = 'sval'; /*5038*/
					$k[$j++] = ($1.nm - $1.ew) - 1; /*5038*/
					$k[$j++] = ($1.el - $1.bar) - 2; /*5038*/
					$1.ncr(); /*5038*/
					var _1H = $k[--$j]; /*5038*/
					$1[$k[--$j]] = _1H; /*5038*/
					if (($1.oe && ($1.mask == 0)) && (((($1.nm - $1.ew) - ($1.el * 2)) + ($1.bar * 2)) >= -2)) { //no-else/*5041*/
						$k[$j++] = 'sval'; /*5040*/
						$k[$j++] = $1.sval; /*5040*/
						$k[$j++] = (($1.nm - $1.ew) - $1.el) + $1.bar; /*5040*/
						$k[$j++] = ($1.el - $1.bar) - 2; /*5040*/
						$1.ncr(); /*5040*/
						var _1W = $k[--$j]; /*5040*/
						var _1X = $k[--$j]; /*5040*/
						$1[$k[--$j]] = _1X - _1W; /*5040*/
					} /*5040*/
					if (($1.el - $1.bar) > 2) {
						/*5050*/
						$1.lval = 0; /*5043*/
						for (var _1h = ((($1.nm - $1.ew) - $1.el) + $1.bar) + 2, _1g = $1.mw + 1; _1h >= _1g; _1h -= 1) {
							/*5047*/
							$k[$j++] = (($1.nm - _1h) - $1.ew) - 1; /*5045*/
							$k[$j++] = ($1.el - $1.bar) - 3; /*5045*/
							$1.ncr(); /*5045*/
							$1.lval = $k[--$j] + $1.lval; /*5046*/
						} /*5046*/
						$1.sval = $1.sval - ($1.lval * (($1.el - $1.bar) - 1)); /*5048*/
					} else {
						/*5050*/
						if (($1.nm - $1.ew) > $1.mw) { //no-else/*5050*/
							$1.sval = $1.sval - 1; /*5050*/
						} /*5050*/
					} /*5050*/
					$1.val = $1.val - $1.sval; /*5052*/
					if ($1.val < 0) { //no-else/*5053*/
						break; /*5053*/
					} /*5053*/
					$1.ew = $1.ew + 1; /*5054*/
					var _21 = $1.bar; /*5055*/
					$1.mask = $1.mask & (~((_21 < 0 ? 1 >>> -_21 : 1 << _21))); /*5055*/
				} /*5055*/
				$1.val = $1.val + $1.sval; /*5057*/
				$1.nm = $1.nm - $1.ew; /*5058*/
				$put($1.out, $1.bar, $1.ew); /*5059*/
			} /*5059*/
			$put($1.out, $1.el - 1, $1.nm); /*5061*/
			$k[$j++] = $1.out; /*5062*/
		}; /*5063*/
		$k[$j++] = Infinity; /*5067*/
		var _2E = $1.linkage ? 1 : 0; /*5066*/
		$k[$j++] = _2E; /*5067*/
		$forall($geti($1.barcode, 4, 13), function() {
			/*5067*/
			var _2H = $k[--$j]; /*5067*/
			$k[$j++] = _2H - 48; /*5067*/
		}); /*5067*/
		$1.binval = $a(); /*5067*/
		for (var _2J = 0; _2J <= 12; _2J += 1) {
			/*5074*/
			$1.i = _2J; /*5071*/
			var _2K = $1.binval; /*5072*/
			var _2L = $1.i; /*5072*/
			$put(_2K, _2L + 1, $get(_2K, _2L + 1) + (($get($1.binval, $1.i) % 4537077) * 10)); /*5072*/
			$put($1.binval, $1.i, ~~($get($1.binval, $1.i) / 4537077)); /*5073*/
		} /*5073*/
		$1.right = $get($1.binval, 13) % 4537077; /*5075*/
		var _2X = $1.binval; /*5076*/
		$put(_2X, 13, ~~($get(_2X, 13) / 4537077)); /*5076*/
		$1.left = 0; /*5078*/
		$1.i = true; /*5079*/
		for (var _2Z = 0; _2Z <= 13; _2Z += 1) {
			/*5089*/
			$1.j = _2Z; /*5081*/
			var _2c = $get($1.binval, $1.j); /*5082*/
			$k[$j++] = _2c; /*5088*/
			if ((_2c == 0) && $1.i) {
				/*5087*/
				$j--; /*5084*/
			} else {
				/*5087*/
				$1.i = false; /*5086*/
				$1.left = $1.left + ($k[--$j] * (~~Math.pow(10, 13 - $1.j))); /*5087*/
			} /*5087*/
		} /*5087*/
		$1.d1 = ~~($1.left / 1597); /*5091*/
		$1.d2 = $1.left % 1597; /*5092*/
		$1.d3 = ~~($1.right / 1597); /*5093*/
		$1.d4 = $1.right % 1597; /*5094*/
		$1.tab164 = $a([160, 0, 12, 4, 8, 1, 161, 1, 960, 161, 10, 6, 6, 3, 80, 10, 2014, 961, 8, 8, 4, 5, 31, 34, 2714, 2015, 6, 10, 3, 6, 10, 70, 2840, 2715, 4, 12, 1, 8, 1, 126]); /*5102*/
		$1.tab154 = $a([335, 0, 5, 10, 2, 7, 4, 84, 1035, 336, 7, 8, 4, 5, 20, 35, 1515, 1036, 9, 6, 6, 3, 48, 10, 1596, 1516, 11, 4, 8, 1, 81, 1]); /*5109*/
		$1.i = 0; /*5111*/
		for (;;) {
			/*5121*/
			if ($1.d1 <= $get($1.tab164, $1.i)) { //no-else/*5119*/
				$forall($geti($1.tab164, $1.i + 1, 7)); /*5113*/
				$1.d1te = $k[--$j]; /*5114*/
				$1.d1to = $k[--$j]; /*5114*/
				$1.d1mwe = $k[--$j]; /*5115*/
				$1.d1mwo = $k[--$j]; /*5115*/
				$1.d1ele = $k[--$j]; /*5116*/
				$1.d1elo = $k[--$j]; /*5116*/
				$1.d1gs = $k[--$j]; /*5117*/
				break; /*5118*/
			} /*5118*/
			$1.i = $1.i + 8; /*5120*/
		} /*5120*/
		$1.i = 0; /*5123*/
		for (;;) {
			/*5133*/
			if ($1.d2 <= $get($1.tab154, $1.i)) { //no-else/*5131*/
				$forall($geti($1.tab154, $1.i + 1, 7)); /*5125*/
				$1.d2te = $k[--$j]; /*5126*/
				$1.d2to = $k[--$j]; /*5126*/
				$1.d2mwe = $k[--$j]; /*5127*/
				$1.d2mwo = $k[--$j]; /*5127*/
				$1.d2ele = $k[--$j]; /*5128*/
				$1.d2elo = $k[--$j]; /*5128*/
				$1.d2gs = $k[--$j]; /*5129*/
				break; /*5130*/
			} /*5130*/
			$1.i = $1.i + 8; /*5132*/
		} /*5132*/
		$1.i = 0; /*5135*/
		for (;;) {
			/*5145*/
			if ($1.d3 <= $get($1.tab164, $1.i)) { //no-else/*5143*/
				$forall($geti($1.tab164, $1.i + 1, 7)); /*5137*/
				$1.d3te = $k[--$j]; /*5138*/
				$1.d3to = $k[--$j]; /*5138*/
				$1.d3mwe = $k[--$j]; /*5139*/
				$1.d3mwo = $k[--$j]; /*5139*/
				$1.d3ele = $k[--$j]; /*5140*/
				$1.d3elo = $k[--$j]; /*5140*/
				$1.d3gs = $k[--$j]; /*5141*/
				break; /*5142*/
			} /*5142*/
			$1.i = $1.i + 8; /*5144*/
		} /*5144*/
		$1.i = 0; /*5147*/
		for (;;) {
			/*5157*/
			if ($1.d4 <= $get($1.tab154, $1.i)) { //no-else/*5155*/
				$forall($geti($1.tab154, $1.i + 1, 7)); /*5149*/
				$1.d4te = $k[--$j]; /*5150*/
				$1.d4to = $k[--$j]; /*5150*/
				$1.d4mwe = $k[--$j]; /*5151*/
				$1.d4mwo = $k[--$j]; /*5151*/
				$1.d4ele = $k[--$j]; /*5152*/
				$1.d4elo = $k[--$j]; /*5152*/
				$1.d4gs = $k[--$j]; /*5153*/
				break; /*5154*/
			} /*5154*/
			$1.i = $1.i + 8; /*5156*/
		} /*5156*/
		$k[$j++] = 'd1wo'; /*5159*/
		$k[$j++] = ~~(($1.d1 - $1.d1gs) / $1.d1te); /*5159*/
		$k[$j++] = $1.d1elo; /*5159*/
		$k[$j++] = $1.d1mwo; /*5159*/
		$k[$j++] = 4; /*5159*/
		$k[$j++] = false; /*5159*/
		$1.getRSSwidths(); /*5159*/
		var _3q = $k[--$j]; /*5159*/
		$1[$k[--$j]] = _3q; /*5159*/
		$k[$j++] = 'd1we'; /*5160*/
		$k[$j++] = ($1.d1 - $1.d1gs) % $1.d1te; /*5160*/
		$k[$j++] = $1.d1ele; /*5160*/
		$k[$j++] = $1.d1mwe; /*5160*/
		$k[$j++] = 4; /*5160*/
		$k[$j++] = true; /*5160*/
		$1.getRSSwidths(); /*5160*/
		var _3x = $k[--$j]; /*5160*/
		$1[$k[--$j]] = _3x; /*5160*/
		$k[$j++] = 'd2wo'; /*5161*/
		$k[$j++] = ($1.d2 - $1.d2gs) % $1.d2to; /*5161*/
		$k[$j++] = $1.d2elo; /*5161*/
		$k[$j++] = $1.d2mwo; /*5161*/
		$k[$j++] = 4; /*5161*/
		$k[$j++] = true; /*5161*/
		$1.getRSSwidths(); /*5161*/
		var _44 = $k[--$j]; /*5161*/
		$1[$k[--$j]] = _44; /*5161*/
		$k[$j++] = 'd2we'; /*5162*/
		$k[$j++] = ~~(($1.d2 - $1.d2gs) / $1.d2to); /*5162*/
		$k[$j++] = $1.d2ele; /*5162*/
		$k[$j++] = $1.d2mwe; /*5162*/
		$k[$j++] = 4; /*5162*/
		$k[$j++] = false; /*5162*/
		$1.getRSSwidths(); /*5162*/
		var _4B = $k[--$j]; /*5162*/
		$1[$k[--$j]] = _4B; /*5162*/
		$k[$j++] = 'd3wo'; /*5163*/
		$k[$j++] = ~~(($1.d3 - $1.d3gs) / $1.d3te); /*5163*/
		$k[$j++] = $1.d3elo; /*5163*/
		$k[$j++] = $1.d3mwo; /*5163*/
		$k[$j++] = 4; /*5163*/
		$k[$j++] = false; /*5163*/
		$1.getRSSwidths(); /*5163*/
		var _4I = $k[--$j]; /*5163*/
		$1[$k[--$j]] = _4I; /*5163*/
		$k[$j++] = 'd3we'; /*5164*/
		$k[$j++] = ($1.d3 - $1.d3gs) % $1.d3te; /*5164*/
		$k[$j++] = $1.d3ele; /*5164*/
		$k[$j++] = $1.d3mwe; /*5164*/
		$k[$j++] = 4; /*5164*/
		$k[$j++] = true; /*5164*/
		$1.getRSSwidths(); /*5164*/
		var _4P = $k[--$j]; /*5164*/
		$1[$k[--$j]] = _4P; /*5164*/
		$k[$j++] = 'd4wo'; /*5165*/
		$k[$j++] = ($1.d4 - $1.d4gs) % $1.d4to; /*5165*/
		$k[$j++] = $1.d4elo; /*5165*/
		$k[$j++] = $1.d4mwo; /*5165*/
		$k[$j++] = 4; /*5165*/
		$k[$j++] = true; /*5165*/
		$1.getRSSwidths(); /*5165*/
		var _4W = $k[--$j]; /*5165*/
		$1[$k[--$j]] = _4W; /*5165*/
		$k[$j++] = 'd4we'; /*5166*/
		$k[$j++] = ~~(($1.d4 - $1.d4gs) / $1.d4to); /*5166*/
		$k[$j++] = $1.d4ele; /*5166*/
		$k[$j++] = $1.d4mwe; /*5166*/
		$k[$j++] = 4; /*5166*/
		$k[$j++] = false; /*5166*/
		$1.getRSSwidths(); /*5166*/
		var _4d = $k[--$j]; /*5166*/
		$1[$k[--$j]] = _4d; /*5166*/
		$1.d1w = $a(8); /*5168*/
		for (var _4g = 0; _4g <= 3; _4g += 1) {
			/*5173*/
			$1.i = _4g; /*5170*/
			$put($1.d1w, $1.i * 2, $get($1.d1wo, $1.i)); /*5171*/
			$put($1.d1w, ($1.i * 2) + 1, $get($1.d1we, $1.i)); /*5172*/
		} /*5172*/
		$1.d2w = $a(8); /*5175*/
		for (var _4s = 0; _4s <= 3; _4s += 1) {
			/*5180*/
			$1.i = _4s; /*5177*/
			$put($1.d2w, 7 - ($1.i * 2), $get($1.d2wo, $1.i)); /*5178*/
			$put($1.d2w, 6 - ($1.i * 2), $get($1.d2we, $1.i)); /*5179*/
		} /*5179*/
		$1.d3w = $a(8); /*5182*/
		for (var _54 = 0; _54 <= 3; _54 += 1) {
			/*5187*/
			$1.i = _54; /*5184*/
			$put($1.d3w, 7 - ($1.i * 2), $get($1.d3wo, $1.i)); /*5185*/
			$put($1.d3w, 6 - ($1.i * 2), $get($1.d3we, $1.i)); /*5186*/
		} /*5186*/
		$1.d4w = $a(8); /*5189*/
		for (var _5G = 0; _5G <= 3; _5G += 1) {
			/*5194*/
			$1.i = _5G; /*5191*/
			$put($1.d4w, $1.i * 2, $get($1.d4wo, $1.i)); /*5192*/
			$put($1.d4w, ($1.i * 2) + 1, $get($1.d4we, $1.i)); /*5193*/
		} /*5193*/
		$k[$j++] = Infinity; /*5200*/
		var _5R = $1.d1w; /*5197*/
		for (var _5S = 0, _5T = _5R.length; _5S < _5T; _5S++) {
			/*5197*/
			$k[$j++] = $get(_5R, _5S); /*5197*/
		} /*5197*/
		var _5V = $1.d2w; /*5198*/
		for (var _5W = 0, _5X = _5V.length; _5W < _5X; _5W++) {
			/*5198*/
			$k[$j++] = $get(_5V, _5W); /*5198*/
		} /*5198*/
		var _5Z = $1.d3w; /*5199*/
		for (var _5a = 0, _5b = _5Z.length; _5a < _5b; _5a++) {
			/*5199*/
			$k[$j++] = $get(_5Z, _5a); /*5199*/
		} /*5199*/
		var _5d = $1.d4w; /*5200*/
		for (var _5e = 0, _5f = _5d.length; _5e < _5f; _5e++) {
			/*5200*/
			$k[$j++] = $get(_5d, _5e); /*5200*/
		} /*5200*/
		$1.widths = $a(); /*5200*/
		$1.checkweights = $a([1, 3, 9, 27, 2, 6, 18, 54, 58, 72, 24, 8, 29, 36, 12, 4, 74, 51, 17, 32, 37, 65, 48, 16, 64, 34, 23, 69, 49, 68, 46, 59]); /*5208*/
		$1.checkwidths = $a([3, 8, 2, 1, 1, 3, 5, 5, 1, 1, 3, 3, 7, 1, 1, 3, 1, 9, 1, 1, 2, 7, 4, 1, 1, 2, 5, 6, 1, 1, 2, 3, 8, 1, 1, 1, 5, 7, 1, 1, 1, 3, 9, 1, 1]); /*5214*/
		$1.checksum = 0; /*5216*/
		for (var _5k = 0; _5k <= 31; _5k += 1) {
			/*5220*/
			$1.i = _5k; /*5218*/
			$1.checksum = $1.checksum + ($get($1.widths, $1.i) * $get($1.checkweights, $1.i)); /*5219*/
		} /*5219*/
		$1.checksum = $1.checksum % 79; /*5221*/
		if ($1.checksum >= 8) { //no-else/*5222*/
			$1.checksum = $1.checksum + 1; /*5222*/
		} /*5222*/
		if ($1.checksum >= 72) { //no-else/*5223*/
			$1.checksum = $1.checksum + 1; /*5223*/
		} /*5223*/
		$1.checklt = $geti($1.checkwidths, (~~($1.checksum / 9)) * 5, 5); /*5224*/
		$1.checkrtrev = $geti($1.checkwidths, ($1.checksum % 9) * 5, 5); /*5225*/
		$1.checkrt = $a(5); /*5226*/
		for (var _64 = 0; _64 <= 4; _64 += 1) {
			/*5230*/
			$1.i = _64; /*5228*/
			$put($1.checkrt, $1.i, $get($1.checkrtrev, 4 - $1.i)); /*5229*/
		} /*5229*/
		if ($eq($1.format, "omni") || $eq($1.format, "truncated")) {
			/*5352*/
			$k[$j++] = Infinity; /*5237*/
			var _6C = $1.d1w; /*5236*/
			$k[$j++] = 1; /*5236*/
			for (var _6D = 0, _6E = _6C.length; _6D < _6E; _6D++) {
				/*5236*/
				$k[$j++] = $get(_6C, _6D); /*5236*/
			} /*5236*/
			$forall($1.checklt); /*5236*/
			var _6H = $1.d2w; /*5236*/
			for (var _6I = 0, _6J = _6H.length; _6I < _6J; _6I++) {
				/*5236*/
				$k[$j++] = $get(_6H, _6I); /*5236*/
			} /*5236*/
			var _6L = $1.d4w; /*5237*/
			for (var _6M = 0, _6N = _6L.length; _6M < _6N; _6M++) {
				/*5237*/
				$k[$j++] = $get(_6L, _6M); /*5237*/
			} /*5237*/
			var _6P = $1.checkrt; /*5237*/
			for (var _6Q = 0, _6R = _6P.length; _6Q < _6R; _6Q++) {
				/*5237*/
				$k[$j++] = $get(_6P, _6Q); /*5237*/
			} /*5237*/
			var _6T = $1.d3w; /*5237*/
			for (var _6U = 0, _6V = _6T.length; _6U < _6V; _6U++) {
				/*5237*/
				$k[$j++] = $get(_6T, _6U); /*5237*/
			} /*5237*/
			$k[$j++] = 1; /*5237*/
			$k[$j++] = 1; /*5237*/
			$1.sbs = $a(); /*5237*/
			$k[$j++] = Infinity; /*5247*/
			var _6Y = $1.sbs; /*5242*/
			$k[$j++] = Infinity; /*5243*/
			for (var _6a = 0, _6b = ~~(($1.sbs.length + 1) / 2); _6a < _6b; _6a++) {
				/*5243*/
				$k[$j++] = $1.height; /*5243*/
			} /*5243*/
			var _6d = $a(); /*5243*/
			$k[$j++] = Infinity; /*5244*/
			for (var _6f = 0, _6g = ~~(($1.sbs.length + 1) / 2); _6f < _6g; _6f++) {
				/*5244*/
				$k[$j++] = 0; /*5244*/
			} /*5244*/
			var _6h = $a(); /*5244*/
			$k[$j++] = 'ren'; /*5247*/
			$k[$j++] = $0.renlinear; /*5247*/
			$k[$j++] = 'sbs'; /*5247*/
			$k[$j++] = _6Y; /*5247*/
			$k[$j++] = 'bhs'; /*5247*/
			$k[$j++] = _6d; /*5247*/
			$k[$j++] = 'bbs'; /*5247*/
			$k[$j++] = _6h; /*5247*/
			$k[$j++] = 'txt'; /*5247*/
			$k[$j++] = $1.txt; /*5247*/
			$k[$j++] = 'textxalign'; /*5247*/
			$k[$j++] = "center"; /*5247*/
			$k[$j++] = 'opt'; /*5247*/
			$k[$j++] = $1.options; /*5247*/
			var _6k = $d(); /*5247*/
			$k[$j++] = _6k; /*5250*/
			if (!$1.dontdraw) { //no-else/*5250*/
				$0.renlinear(); /*5250*/
			} /*5250*/
		} else {
			/*5352*/
			$k[$j++] = Infinity; /*5254*/
			var _6m = $1.d1w; /*5254*/
			$k[$j++] = 1; /*5254*/
			$k[$j++] = 1; /*5254*/
			for (var _6n = 0, _6o = _6m.length; _6n < _6o; _6n++) {
				/*5254*/
				$k[$j++] = $get(_6m, _6n); /*5254*/
			} /*5254*/
			$forall($1.checklt); /*5254*/
			var _6r = $1.d2w; /*5254*/
			for (var _6s = 0, _6t = _6r.length; _6s < _6t; _6s++) {
				/*5254*/
				$k[$j++] = $get(_6r, _6s); /*5254*/
			} /*5254*/
			$k[$j++] = 1; /*5254*/
			$k[$j++] = 1; /*5254*/
			$k[$j++] = 0; /*5254*/
			$1.top = $a(); /*5254*/
			$k[$j++] = Infinity; /*5255*/
			var _6w = $1.d4w; /*5255*/
			$k[$j++] = 1; /*5255*/
			$k[$j++] = 1; /*5255*/
			for (var _6x = 0, _6y = _6w.length; _6x < _6y; _6x++) {
				/*5255*/
				$k[$j++] = $get(_6w, _6x); /*5255*/
			} /*5255*/
			var _70 = $1.checkrt; /*5255*/
			for (var _71 = 0, _72 = _70.length; _71 < _72; _71++) {
				/*5255*/
				$k[$j++] = $get(_70, _71); /*5255*/
			} /*5255*/
			var _74 = $1.d3w; /*5255*/
			for (var _75 = 0, _76 = _74.length; _75 < _76; _75++) {
				/*5255*/
				$k[$j++] = $get(_74, _75); /*5255*/
			} /*5255*/
			$k[$j++] = 1; /*5255*/
			$k[$j++] = 1; /*5255*/
			$k[$j++] = 0; /*5255*/
			$1.bot = $a(); /*5255*/
			for (var _79 = 0; _79 <= 24; _79 += 2) {
				/*5260*/
				$1.i = _79; /*5257*/
				for (var _7D = 0, _7E = $get($1.top, $1.i); _7D < _7E; _7D++) {
					/*5258*/
					$k[$j++] = 0; /*5258*/
				} /*5258*/
				for (var _7I = 0, _7J = $get($1.top, $1.i + 1); _7I < _7J; _7I++) {
					/*5259*/
					$k[$j++] = 1; /*5259*/
				} /*5259*/
			} /*5259*/
			$astore($a(50)); /*5261*/
			$1.top = $k[--$j]; /*5261*/
			for (var _7M = 0; _7M <= 24; _7M += 2) {
				/*5266*/
				$1.i = _7M; /*5263*/
				for (var _7Q = 0, _7R = $get($1.bot, $1.i); _7Q < _7R; _7Q++) {
					/*5264*/
					$k[$j++] = 1; /*5264*/
				} /*5264*/
				for (var _7V = 0, _7W = $get($1.bot, $1.i + 1); _7V < _7W; _7V++) {
					/*5265*/
					$k[$j++] = 0; /*5265*/
				} /*5265*/
			} /*5265*/
			$astore($a(50)); /*5267*/
			$1.bot = $k[--$j]; /*5267*/
			if ($eq($1.format, "stacked")) { //no-else/*5289*/
				$1.sep = $a(50); /*5271*/
				$put($1.sep, 0, 0); /*5272*/
				for (var _7c = 1; _7c <= 49; _7c += 1) {
					/*5280*/
					$1.i = _7c; /*5274*/
					if ($eq($get($1.top, $1.i), $get($1.bot, $1.i))) {
						/*5278*/
						$put($1.sep, $1.i, 1 - $get($1.top, $1.i)); /*5276*/
					} else {
						/*5278*/
						$put($1.sep, $1.i, 1 - $get($1.sep, $1.i - 1)); /*5278*/
					} /*5278*/
				} /*5278*/
				$puti($1.sep, 0, $a([0, 0, 0, 0])); /*5281*/
				$puti($1.sep, 46, $a([0, 0, 0, 0])); /*5282*/
				$k[$j++] = Infinity; /*5286*/
				for (var _7x = 0, _7y = 5; _7x < _7y; _7x++) {
					/*5284*/
					$aload($1.top); /*5284*/
				} /*5284*/
				$aload($1.sep); /*5285*/
				for (var _81 = 0, _82 = 7; _81 < _82; _81++) {
					/*5286*/
					$aload($1.bot); /*5286*/
				} /*5286*/
				$1.pixs = $a(); /*5286*/
				$1.pixy = ~~($1.pixs.length / 50); /*5288*/
			} /*5288*/
			if ($eq($1.format, "stackedomni")) { //no-else/*5339*/
				$k[$j++] = Infinity; /*5293*/
				$forall($1.top, function() {
					/*5293*/
					var _88 = $k[--$j]; /*5293*/
					$k[$j++] = 1 - _88; /*5293*/
				}); /*5293*/
				$1.sep1 = $a(); /*5293*/
				$puti($1.sep1, 0, $a([0, 0, 0, 0])); /*5294*/
				$puti($1.sep1, 46, $a([0, 0, 0, 0])); /*5295*/
				for (var _8E = 18; _8E <= 30; _8E += 1) {
					/*5308*/
					$1.i = _8E; /*5297*/
					if ($get($1.top, $1.i) == 0) {
						/*5305*/
						if ($get($1.top, $1.i - 1) == 1) {
							/*5302*/
							$k[$j++] = 1; /*5300*/
						} else {
							/*5302*/
							var _8O = ($get($1.sep1, $1.i - 1) == 0) ? 1 : 0; /*5302*/
							$k[$j++] = _8O; /*5302*/
						} /*5302*/
					} else {
						/*5305*/
						$k[$j++] = 0; /*5305*/
					} /*5305*/
					$put($1.sep1, $1.i, $k[--$j]); /*5307*/
				} /*5307*/
				$k[$j++] = Infinity; /*5309*/
				$k[$j++] = 0; /*5309*/
				$k[$j++] = 0; /*5309*/
				$k[$j++] = 0; /*5309*/
				$k[$j++] = 0; /*5309*/
				for (var _8S = 0, _8T = 21; _8S < _8T; _8S++) {
					/*5309*/
					$k[$j++] = 0; /*5309*/
					$k[$j++] = 1; /*5309*/
				} /*5309*/
				$k[$j++] = 0; /*5309*/
				$k[$j++] = 0; /*5309*/
				$k[$j++] = 0; /*5309*/
				$k[$j++] = 0; /*5309*/
				$1.sep2 = $a(); /*5309*/
				$k[$j++] = Infinity; /*5310*/
				$forall($1.bot, function() {
					/*5310*/
					var _8W = $k[--$j]; /*5310*/
					$k[$j++] = 1 - _8W; /*5310*/
				}); /*5310*/
				$1.sep3 = $a(); /*5310*/
				$puti($1.sep3, 0, $a([0, 0, 0, 0])); /*5311*/
				$puti($1.sep3, 46, $a([0, 0, 0, 0])); /*5312*/
				for (var _8c = 19; _8c <= 31; _8c += 1) {
					/*5325*/
					$1.i = _8c; /*5314*/
					if ($get($1.bot, $1.i) == 0) {
						/*5322*/
						if ($get($1.bot, $1.i - 1) == 1) {
							/*5319*/
							$k[$j++] = 1; /*5317*/
						} else {
							/*5319*/
							var _8m = ($get($1.sep3, $1.i - 1) == 0) ? 1 : 0; /*5319*/
							$k[$j++] = _8m; /*5319*/
						} /*5319*/
					} else {
						/*5322*/
						$k[$j++] = 0; /*5322*/
					} /*5322*/
					$put($1.sep3, $1.i, $k[--$j]); /*5324*/
				} /*5324*/
				$1.f3 = $a([1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1]); /*5326*/
				$k[$j++] = true; /*5327*/
				for (var _8r = 0; _8r <= 12; _8r += 1) {
					/*5327*/
					var _8w = $k[--$j]; /*5327*/
					$k[$j++] = _8w && $eq($get($1.bot, _8r + 19), $get($1.f3, _8r)); /*5327*/
				} /*5327*/
				if ($k[--$j]) { //no-else/*5330*/
					$puti($1.sep3, 19, $a([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0])); /*5329*/
				} /*5329*/
				$k[$j++] = Infinity; /*5336*/
				for (var _91 = 0, _92 = $1.barxmult; _91 < _92; _91++) {
					/*5332*/
					$aload($1.top); /*5332*/
				} /*5332*/
				$aload($1.sep1); /*5333*/
				$aload($1.sep2); /*5334*/
				$aload($1.sep3); /*5335*/
				for (var _98 = 0, _99 = $1.barxmult; _98 < _99; _98++) {
					/*5336*/
					$aload($1.bot); /*5336*/
				} /*5336*/
				$1.pixs = $a(); /*5336*/
				$1.pixy = ~~($1.pixs.length / 50); /*5338*/
			} /*5338*/
			var _9H = new Map([
				["ren", $0.renmatrix],
				["pixs", $1.pixs],
				["pixx", 50],
				["pixy", $1.pixy],
				["height", $1.pixy / 72],
				["width", 50 / 72],
				["opt", $1.options]
			]); /*5349*/
			$k[$j++] = _9H; /*5352*/
			if (!$1.dontdraw) { //no-else/*5352*/
				$0.renmatrix(); /*5352*/
			} /*5352*/
		} /*5352*/
	};
	$0.databarstacked = function() {
		var $1 = {}; /*5384*/
		$1.options = $k[--$j]; /*5386*/
		$1.barcode = $k[--$j]; /*5387*/
		$1.dontdraw = false; /*5389*/
		$forall($1.options, function() {
			/*5400*/
			var _3 = $k[--$j]; /*5400*/
			$1[$k[--$j]] = _3; /*5400*/
		}); /*5400*/
		if ($ne($geti($1.barcode, 0, 4), "(01)")) { //no-else/*5405*/
			$k[$j++] = 'bwipp.databarstackedBadAI'; /*5404*/
			$k[$j++] = "GS1 DataBar Stacked must begin with (01) application identifier"; /*5404*/
			$0.raiseerror(); /*5404*/
		} /*5404*/
		if (($1.barcode.length != 17) && ($1.barcode.length != 18)) { //no-else/*5408*/
			$k[$j++] = 'bwipp.databarstackedBadLength'; /*5407*/
			$k[$j++] = "GS1 DataBar Stacked must be 13 or 14 digits"; /*5407*/
			$0.raiseerror(); /*5407*/
		} /*5407*/
		$forall($geti($1.barcode, 4, $1.barcode.length - 4), function() {
			/*5413*/
			var _C = $k[--$j]; /*5410*/
			if ((_C < 48) || (_C > 57)) { //no-else/*5412*/
				$k[$j++] = 'bwipp.databarstackedBadCharacter'; /*5411*/
				$k[$j++] = "GS1 DataBar Stacked must contain only digits"; /*5411*/
				$0.raiseerror(); /*5411*/
			} /*5411*/
		}); /*5411*/
		$1.checksum = 0; /*5416*/
		for (var _D = 0; _D <= 12; _D += 1) {
			/*5420*/
			$1.i = _D; /*5418*/
			$k[$j++] = 'checksum'; /*5419*/
			$k[$j++] = $1.checksum; /*5419*/
			$k[$j++] = $get($1.barcode, $1.i + 4) - 48; /*5419*/
			if (($1.i % 2) == 0) { //no-else/*5419*/
				var _J = $k[--$j]; /*5419*/
				$k[$j++] = _J * 3; /*5419*/
			} /*5419*/
			var _K = $k[--$j]; /*5419*/
			var _L = $k[--$j]; /*5419*/
			$1[$k[--$j]] = _L + _K; /*5419*/
		} /*5419*/
		$1.checksum = (10 - ($1.checksum % 10)) % 10; /*5421*/
		if ($1.barcode.length == 18) { //no-else/*5426*/
			if ($get($1.barcode, 17) != ($1.checksum + 48)) { //no-else/*5425*/
				$k[$j++] = 'bwipp.databarstackedBadCheckDigit'; /*5424*/
				$k[$j++] = "Incorrect GS1 DataBar Stacked check digit provided"; /*5424*/
				$0.raiseerror(); /*5424*/
			} /*5424*/
		} /*5424*/
		var _S = $s(18); /*5427*/
		$puti(_S, 0, $1.barcode); /*5428*/
		$put(_S, 17, $1.checksum + 48); /*5429*/
		$1.barcode = _S; /*5430*/
		$put($1.options, "dontdraw", true); /*5433*/
		$put($1.options, "format", "stacked"); /*5434*/
		$k[$j++] = 'args'; /*5436*/
		$k[$j++] = $1.barcode; /*5436*/
		$k[$j++] = $1.options; /*5436*/
		$0.databaromni(); /*5436*/
		var _Z = $k[--$j]; /*5436*/
		$1[$k[--$j]] = _Z; /*5436*/
		$put($1.args, "opt", $1.options); /*5438*/
		$k[$j++] = $1.args; /*5441*/
		if (!$1.dontdraw) { //no-else/*5441*/
			$0.renmatrix(); /*5441*/
		} /*5441*/
	};
	$0.databarstackedomni = function() {
		var $1 = {}; /*5471*/
		$1.options = $k[--$j]; /*5473*/
		$1.barcode = $k[--$j]; /*5474*/
		$1.dontdraw = false; /*5476*/
		$forall($1.options, function() {
			/*5487*/
			var _3 = $k[--$j]; /*5487*/
			$1[$k[--$j]] = _3; /*5487*/
		}); /*5487*/
		if ($ne($geti($1.barcode, 0, 4), "(01)")) { //no-else/*5492*/
			$k[$j++] = 'bwipp.databarstackedomniBadAI'; /*5491*/
			$k[$j++] = "GS1 DataBar Stacked Omnidirectional must begin with (01) application identifier"; /*5491*/
			$0.raiseerror(); /*5491*/
		} /*5491*/
		if (($1.barcode.length != 17) && ($1.barcode.length != 18)) { //no-else/*5495*/
			$k[$j++] = 'bwipp.databarstackedomniBadLength'; /*5494*/
			$k[$j++] = "GS1 DataBar Stacked Omnidirectional must be 13 or 14 digits"; /*5494*/
			$0.raiseerror(); /*5494*/
		} /*5494*/
		$forall($geti($1.barcode, 4, $1.barcode.length - 4), function() {
			/*5500*/
			var _C = $k[--$j]; /*5497*/
			if ((_C < 48) || (_C > 57)) { //no-else/*5499*/
				$k[$j++] = 'bwipp.databarstackedomniBadCharacter'; /*5498*/
				$k[$j++] = "GS1 DataBar Stacked Omnidirectional must contain only digits"; /*5498*/
				$0.raiseerror(); /*5498*/
			} /*5498*/
		}); /*5498*/
		$1.checksum = 0; /*5503*/
		for (var _D = 0; _D <= 12; _D += 1) {
			/*5507*/
			$1.i = _D; /*5505*/
			$k[$j++] = 'checksum'; /*5506*/
			$k[$j++] = $1.checksum; /*5506*/
			$k[$j++] = $get($1.barcode, $1.i + 4) - 48; /*5506*/
			if (($1.i % 2) == 0) { //no-else/*5506*/
				var _J = $k[--$j]; /*5506*/
				$k[$j++] = _J * 3; /*5506*/
			} /*5506*/
			var _K = $k[--$j]; /*5506*/
			var _L = $k[--$j]; /*5506*/
			$1[$k[--$j]] = _L + _K; /*5506*/
		} /*5506*/
		$1.checksum = (10 - ($1.checksum % 10)) % 10; /*5508*/
		if ($1.barcode.length == 18) { //no-else/*5513*/
			if ($get($1.barcode, 17) != ($1.checksum + 48)) { //no-else/*5512*/
				$k[$j++] = 'bwipp.databarstackedomniBadCheckDigit'; /*5511*/
				$k[$j++] = "Incorrect GS1 DataBar Stacked Omnidirectional check digit provided"; /*5511*/
				$0.raiseerror(); /*5511*/
			} /*5511*/
		} /*5511*/
		var _S = $s(18); /*5514*/
		$puti(_S, 0, $1.barcode); /*5515*/
		$put(_S, 17, $1.checksum + 48); /*5516*/
		$1.barcode = _S; /*5517*/
		$put($1.options, "dontdraw", true); /*5520*/
		$put($1.options, "format", "stackedomni"); /*5521*/
		$k[$j++] = 'args'; /*5523*/
		$k[$j++] = $1.barcode; /*5523*/
		$k[$j++] = $1.options; /*5523*/
		$0.databaromni(); /*5523*/
		var _Z = $k[--$j]; /*5523*/
		$1[$k[--$j]] = _Z; /*5523*/
		$put($1.args, "opt", $1.options); /*5525*/
		$k[$j++] = $1.args; /*5528*/
		if (!$1.dontdraw) { //no-else/*5528*/
			$0.renmatrix(); /*5528*/
		} /*5528*/
	};
	$0.databartruncated = function() {
		var $1 = {}; /*5558*/
		$1.options = $k[--$j]; /*5560*/
		$1.barcode = $k[--$j]; /*5561*/
		$1.dontdraw = false; /*5563*/
		$forall($1.options, function() {
			/*5574*/
			var _3 = $k[--$j]; /*5574*/
			$1[$k[--$j]] = _3; /*5574*/
		}); /*5574*/
		if ($ne($geti($1.barcode, 0, 4), "(01)")) { //no-else/*5579*/
			$k[$j++] = 'bwipp.databartruncatedBadAI'; /*5578*/
			$k[$j++] = "GS1 DataBar Truncated must begin with (01) application identifier"; /*5578*/
			$0.raiseerror(); /*5578*/
		} /*5578*/
		if (($1.barcode.length != 17) && ($1.barcode.length != 18)) { //no-else/*5582*/
			$k[$j++] = 'bwipp.databartruncatedBadLength'; /*5581*/
			$k[$j++] = "GS1 DataBar Truncated must be 13 or 14 digits"; /*5581*/
			$0.raiseerror(); /*5581*/
		} /*5581*/
		$forall($geti($1.barcode, 4, $1.barcode.length - 4), function() {
			/*5587*/
			var _C = $k[--$j]; /*5584*/
			if ((_C < 48) || (_C > 57)) { //no-else/*5586*/
				$k[$j++] = 'bwipp.databartruncatedBadCharacter'; /*5585*/
				$k[$j++] = "GS1 DataBar Truncated must contain only digits"; /*5585*/
				$0.raiseerror(); /*5585*/
			} /*5585*/
		}); /*5585*/
		$1.checksum = 0; /*5590*/
		for (var _D = 0; _D <= 12; _D += 1) {
			/*5594*/
			$1.i = _D; /*5592*/
			$k[$j++] = 'checksum'; /*5593*/
			$k[$j++] = $1.checksum; /*5593*/
			$k[$j++] = $get($1.barcode, $1.i + 4) - 48; /*5593*/
			if (($1.i % 2) == 0) { //no-else/*5593*/
				var _J = $k[--$j]; /*5593*/
				$k[$j++] = _J * 3; /*5593*/
			} /*5593*/
			var _K = $k[--$j]; /*5593*/
			var _L = $k[--$j]; /*5593*/
			$1[$k[--$j]] = _L + _K; /*5593*/
		} /*5593*/
		$1.checksum = (10 - ($1.checksum % 10)) % 10; /*5595*/
		if ($1.barcode.length == 18) { //no-else/*5600*/
			if ($get($1.barcode, 17) != ($1.checksum + 48)) { //no-else/*5599*/
				$k[$j++] = 'bwipp.databartruncatedBadCheckDigit'; /*5598*/
				$k[$j++] = "Incorrect GS1 DataBar Truncated check digit provided"; /*5598*/
				$0.raiseerror(); /*5598*/
			} /*5598*/
		} /*5598*/
		var _S = $s(18); /*5601*/
		$puti(_S, 0, $1.barcode); /*5602*/
		$put(_S, 17, $1.checksum + 48); /*5603*/
		$1.barcode = _S; /*5604*/
		$put($1.options, "dontdraw", true); /*5607*/
		$put($1.options, "format", "truncated"); /*5608*/
		$k[$j++] = 'args'; /*5610*/
		$k[$j++] = $1.barcode; /*5610*/
		$k[$j++] = $1.options; /*5610*/
		$0.databaromni(); /*5610*/
		var _Z = $k[--$j]; /*5610*/
		$1[$k[--$j]] = _Z; /*5610*/
		$put($1.args, "opt", $1.options); /*5612*/
		$k[$j++] = $1.args; /*5615*/
		if (!$1.dontdraw) { //no-else/*5615*/
			$0.renlinear(); /*5615*/
		} /*5615*/
	};
	$0.databarlimited = function() {
		var $1 = {}; /*5644*/
		$1.options = $k[--$j]; /*5646*/
		$1.barcode = $k[--$j]; /*5647*/
		$1.dontdraw = false; /*5649*/
		$1.height = 10 / 72; /*5650*/
		$1.linkage = false; /*5651*/
		$forall($1.options, function() {
			/*5662*/
			var _3 = $k[--$j]; /*5662*/
			$1[$k[--$j]] = _3; /*5662*/
		}); /*5662*/
		$1.height = +$1.height; /*5664*/
		if ($ne($geti($1.barcode, 0, 4), "(01)")) { //no-else/*5669*/
			$k[$j++] = 'bwipp.databarlimitedBadAI'; /*5668*/
			$k[$j++] = "GS1 DataBar Limited must begin with (01) application identifier"; /*5668*/
			$0.raiseerror(); /*5668*/
		} /*5668*/
		if (($1.barcode.length != 17) && ($1.barcode.length != 18)) { //no-else/*5672*/
			$k[$j++] = 'bwipp.databarlimitedBadLength'; /*5671*/
			$k[$j++] = "GS1 DataBar Limited must be 13 or 14 digits"; /*5671*/
			$0.raiseerror(); /*5671*/
		} /*5671*/
		var _B = $get($1.barcode, 4); /*5673*/
		if ((_B < 48) || (_B > 49)) { //no-else/*5675*/
			$k[$j++] = 'bwipp.databarlimitedBadStartDigit'; /*5674*/
			$k[$j++] = "GS1 DataBar Limited must begin with 0 or 1"; /*5674*/
			$0.raiseerror(); /*5674*/
		} /*5674*/
		$forall($geti($1.barcode, 5, $1.barcode.length - 5), function() {
			/*5680*/
			var _F = $k[--$j]; /*5677*/
			if ((_F < 48) || (_F > 57)) { //no-else/*5679*/
				$k[$j++] = 'bwipp.databarlimitedBadCharacter'; /*5678*/
				$k[$j++] = "GS1 DataBar Limited must contain only digits"; /*5678*/
				$0.raiseerror(); /*5678*/
			} /*5678*/
		}); /*5678*/
		$1.checksum = 0; /*5683*/
		for (var _G = 0; _G <= 12; _G += 1) {
			/*5687*/
			$1.i = _G; /*5685*/
			$k[$j++] = 'checksum'; /*5686*/
			$k[$j++] = $1.checksum; /*5686*/
			$k[$j++] = $get($1.barcode, $1.i + 4) - 48; /*5686*/
			if (($1.i % 2) == 0) { //no-else/*5686*/
				var _M = $k[--$j]; /*5686*/
				$k[$j++] = _M * 3; /*5686*/
			} /*5686*/
			var _N = $k[--$j]; /*5686*/
			var _O = $k[--$j]; /*5686*/
			$1[$k[--$j]] = _O + _N; /*5686*/
		} /*5686*/
		$1.checksum = (10 - ($1.checksum % 10)) % 10; /*5688*/
		if ($1.barcode.length == 18) { //no-else/*5693*/
			if ($get($1.barcode, 17) != ($1.checksum + 48)) { //no-else/*5692*/
				$k[$j++] = 'bwipp.databarlimitedBadCheckDigit'; /*5691*/
				$k[$j++] = "Incorrect GS1 DataBar Limited check digit provided"; /*5691*/
				$0.raiseerror(); /*5691*/
			} /*5691*/
		} /*5691*/
		var _V = $s(18); /*5694*/
		$puti(_V, 0, $1.barcode); /*5695*/
		$put(_V, 17, $1.checksum + 48); /*5696*/
		$1.barcode = _V; /*5697*/
		$k[$j++] = Infinity; /*5701*/
		$forall($geti($1.barcode, 4, 13), function() {
			/*5701*/
			var _a = $k[--$j]; /*5701*/
			$k[$j++] = _a - 48; /*5701*/
		}); /*5701*/
		$1.binval = $a(); /*5701*/
		if ($1.linkage) { //no-else/*5709*/
			$1.linkval = $a([2, 0, 1, 5, 1, 3, 3, 5, 3, 1, 0, 9, 6]); /*5704*/
			for (var _g = 0, _f = $1.binval.length - 1; _g <= _f; _g += 1) {
				/*5708*/
				$1.i = _g; /*5706*/
				$put($1.binval, $1.i, $get($1.binval, $1.i) + $get($1.linkval, $1.i)); /*5707*/
			} /*5707*/
		} /*5707*/
		$1.txt = $a($1.barcode.length); /*5712*/
		for (var _t = 0, _s = $1.barcode.length - 1; _t <= _s; _t += 1) {
			/*5716*/
			$1.i = _t; /*5714*/
			$put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), 0, 0, "", 0])); /*5715*/
		} /*5715*/
		$1.ncr = function() {
			var _10 = $k[--$j]; /*5719*/
			var _11 = $k[--$j]; /*5719*/
			var _12 = _11 - _10; /*5719*/
			if (_10 < (_11 - _10)) { //no-else/*5719*/
				var _ = _12; /*5719*/
				_12 = _10; /*5719*/
				_10 = _; /*5719*/
			} /*5719*/
			$k[$j++] = _12; /*5726*/
			$k[$j++] = 1; /*5726*/
			$k[$j++] = 1; /*5726*/
			for (var _14 = _11, _13 = _10 + 1; _14 >= _13; _14 -= 1) {
				/*5726*/
				var _15 = $k[--$j]; /*5722*/
				var _16 = $k[--$j]; /*5723*/
				var _17 = $k[--$j]; /*5723*/
				$k[$j++] = _17; /*5725*/
				$k[$j++] = _16; /*5725*/
				$k[$j++] = _15 * _14; /*5725*/
				if ($le(_16, _17)) { //no-else/*5725*/
					var _18 = $k[--$j]; /*5724*/
					var _19 = $k[--$j]; /*5724*/
					$k[$j++] = _19 + 1; /*5724*/
					$k[$j++] = ~~(_18 / _19); /*5724*/
				} /*5724*/
			} /*5724*/
			for (;;) {
				/*5730*/
				var _1A = $k[--$j]; /*5728*/
				var _1B = $k[--$j]; /*5728*/
				var _1C = $k[--$j]; /*5728*/
				$k[$j++] = _1C; /*5728*/
				$k[$j++] = _1B; /*5728*/
				$k[$j++] = _1A; /*5728*/
				if ($gt(_1B, _1C)) { //no-else/*5728*/
					break; /*5728*/
				} /*5728*/
				var _1D = $k[--$j]; /*5729*/
				var _1E = $k[--$j]; /*5729*/
				$k[$j++] = _1E + 1; /*5729*/
				$k[$j++] = ~~(_1D / _1E); /*5729*/
			} /*5729*/
			var _1F = $k[--$j]; /*5731*/
			var _1G = $k[--$j]; /*5731*/
			var _1H = $k[--$j]; /*5731*/
			$k[$j++] = _1F; /*5731*/
		}; /*5732*/
		$1.getRSSwidths = function() {
			$1.oe = $k[--$j]; /*5735*/
			$1.el = $k[--$j]; /*5736*/
			$1.mw = $k[--$j]; /*5737*/
			$1.nm = $k[--$j]; /*5738*/
			$1.val = $k[--$j]; /*5739*/
			$1.out = $a($1.el); /*5740*/
			$1.mask = 0; /*5741*/
			for (var _1R = 0, _1Q = $1.el - 2; _1R <= _1Q; _1R += 1) {
				/*5768*/
				$1.bar = _1R; /*5743*/
				$1.ew = 1; /*5744*/
				var _1T = $1.bar; /*5745*/
				$1.mask = $1.mask | ((_1T < 0 ? 1 >>> -_1T : 1 << _1T)); /*5745*/
				for (;;) {
					/*5764*/
					$k[$j++] = 'sval'; /*5746*/
					$k[$j++] = ($1.nm - $1.ew) - 1; /*5746*/
					$k[$j++] = ($1.el - $1.bar) - 2; /*5746*/
					$1.ncr(); /*5746*/
					var _1Y = $k[--$j]; /*5746*/
					$1[$k[--$j]] = _1Y; /*5746*/
					if (($1.oe && ($1.mask == 0)) && (((($1.nm - $1.ew) - ($1.el * 2)) + ($1.bar * 2)) >= -2)) { //no-else/*5749*/
						$k[$j++] = 'sval'; /*5748*/
						$k[$j++] = $1.sval; /*5748*/
						$k[$j++] = (($1.nm - $1.ew) - $1.el) + $1.bar; /*5748*/
						$k[$j++] = ($1.el - $1.bar) - 2; /*5748*/
						$1.ncr(); /*5748*/
						var _1n = $k[--$j]; /*5748*/
						var _1o = $k[--$j]; /*5748*/
						$1[$k[--$j]] = _1o - _1n; /*5748*/
					} /*5748*/
					if (($1.el - $1.bar) > 2) {
						/*5758*/
						$1.lval = 0; /*5751*/
						for (var _1y = ((($1.nm - $1.ew) - $1.el) + $1.bar) + 2, _1x = $1.mw + 1; _1y >= _1x; _1y -= 1) {
							/*5755*/
							$k[$j++] = (($1.nm - _1y) - $1.ew) - 1; /*5753*/
							$k[$j++] = ($1.el - $1.bar) - 3; /*5753*/
							$1.ncr(); /*5753*/
							$1.lval = $k[--$j] + $1.lval; /*5754*/
						} /*5754*/
						$1.sval = $1.sval - ($1.lval * (($1.el - $1.bar) - 1)); /*5756*/
					} else {
						/*5758*/
						if (($1.nm - $1.ew) > $1.mw) { //no-else/*5758*/
							$1.sval = $1.sval - 1; /*5758*/
						} /*5758*/
					} /*5758*/
					$1.val = $1.val - $1.sval; /*5760*/
					if ($1.val < 0) { //no-else/*5761*/
						break; /*5761*/
					} /*5761*/
					$1.ew = $1.ew + 1; /*5762*/
					var _2I = $1.bar; /*5763*/
					$1.mask = $1.mask & (~((_2I < 0 ? 1 >>> -_2I : 1 << _2I))); /*5763*/
				} /*5763*/
				$1.val = $1.val + $1.sval; /*5765*/
				$1.nm = $1.nm - $1.ew; /*5766*/
				$put($1.out, $1.bar, $1.ew); /*5767*/
			} /*5767*/
			$put($1.out, $1.el - 1, $1.nm); /*5769*/
			$k[$j++] = $1.out; /*5770*/
		}; /*5771*/
		for (var _2U = 0; _2U <= 11; _2U += 1) {
			/*5777*/
			$1.i = _2U; /*5774*/
			var _2V = $1.binval; /*5775*/
			var _2W = $1.i; /*5775*/
			$put(_2V, _2W + 1, $get(_2V, _2W + 1) + (($get($1.binval, $1.i) % 2013571) * 10)); /*5775*/
			$put($1.binval, $1.i, ~~($get($1.binval, $1.i) / 2013571)); /*5776*/
		} /*5776*/
		$1.d2 = $get($1.binval, 12) % 2013571; /*5778*/
		var _2i = $1.binval; /*5779*/
		$put(_2i, 12, ~~($get(_2i, 12) / 2013571)); /*5779*/
		$1.d1 = 0; /*5781*/
		$1.i = true; /*5782*/
		for (var _2k = 0; _2k <= 12; _2k += 1) {
			/*5792*/
			$1.j = _2k; /*5784*/
			var _2n = $get($1.binval, $1.j); /*5785*/
			$k[$j++] = _2n; /*5791*/
			if ((_2n == 0) && $1.i) {
				/*5790*/
				$j--; /*5787*/
			} else {
				/*5790*/
				$1.i = false; /*5789*/
				$1.d1 = $1.d1 + ($k[--$j] * (~~Math.pow(10, 12 - $1.j))); /*5790*/
			} /*5790*/
		} /*5790*/
		$1.tab267 = $a([183063, 0, 17, 9, 6, 3, 6538, 28, 820063, 183064, 13, 13, 5, 4, 875, 728, 1000775, 820064, 9, 17, 3, 6, 28, 6454, 1491020, 1000776, 15, 11, 5, 4, 2415, 203, 1979844, 1491021, 11, 15, 4, 5, 203, 2408, 1996938, 1979845, 19, 7, 8, 1, 17094, 1, 2013570, 1996939, 7, 19, 1, 8, 1, 16632]); /*5802*/
		$1.i = 0; /*5804*/
		for (;;) {
			/*5814*/
			if ($1.d1 <= $get($1.tab267, $1.i)) { //no-else/*5812*/
				$forall($geti($1.tab267, $1.i + 1, 7)); /*5806*/
				$1.d1te = $k[--$j]; /*5807*/
				$1.d1to = $k[--$j]; /*5807*/
				$1.d1mwe = $k[--$j]; /*5808*/
				$1.d1mwo = $k[--$j]; /*5808*/
				$1.d1ele = $k[--$j]; /*5809*/
				$1.d1elo = $k[--$j]; /*5809*/
				$1.d1gs = $k[--$j]; /*5810*/
				break; /*5811*/
			} /*5811*/
			$1.i = $1.i + 8; /*5813*/
		} /*5813*/
		$1.i = 0; /*5816*/
		for (;;) {
			/*5826*/
			if ($1.d2 <= $get($1.tab267, $1.i)) { //no-else/*5824*/
				$forall($geti($1.tab267, $1.i + 1, 7)); /*5818*/
				$1.d2te = $k[--$j]; /*5819*/
				$1.d2to = $k[--$j]; /*5819*/
				$1.d2mwe = $k[--$j]; /*5820*/
				$1.d2mwo = $k[--$j]; /*5820*/
				$1.d2ele = $k[--$j]; /*5821*/
				$1.d2elo = $k[--$j]; /*5821*/
				$1.d2gs = $k[--$j]; /*5822*/
				break; /*5823*/
			} /*5823*/
			$1.i = $1.i + 8; /*5825*/
		} /*5825*/
		$k[$j++] = 'd1wo'; /*5828*/
		$k[$j++] = ~~(($1.d1 - $1.d1gs) / $1.d1te); /*5828*/
		$k[$j++] = $1.d1elo; /*5828*/
		$k[$j++] = $1.d1mwo; /*5828*/
		$k[$j++] = 7; /*5828*/
		$k[$j++] = false; /*5828*/
		$1.getRSSwidths(); /*5828*/
		var _3S = $k[--$j]; /*5828*/
		$1[$k[--$j]] = _3S; /*5828*/
		$k[$j++] = 'd1we'; /*5829*/
		$k[$j++] = ($1.d1 - $1.d1gs) % $1.d1te; /*5829*/
		$k[$j++] = $1.d1ele; /*5829*/
		$k[$j++] = $1.d1mwe; /*5829*/
		$k[$j++] = 7; /*5829*/
		$k[$j++] = true; /*5829*/
		$1.getRSSwidths(); /*5829*/
		var _3Z = $k[--$j]; /*5829*/
		$1[$k[--$j]] = _3Z; /*5829*/
		$k[$j++] = 'd2wo'; /*5830*/
		$k[$j++] = ~~(($1.d2 - $1.d2gs) / $1.d2te); /*5830*/
		$k[$j++] = $1.d2elo; /*5830*/
		$k[$j++] = $1.d2mwo; /*5830*/
		$k[$j++] = 7; /*5830*/
		$k[$j++] = false; /*5830*/
		$1.getRSSwidths(); /*5830*/
		var _3g = $k[--$j]; /*5830*/
		$1[$k[--$j]] = _3g; /*5830*/
		$k[$j++] = 'd2we'; /*5831*/
		$k[$j++] = ($1.d2 - $1.d2gs) % $1.d2te; /*5831*/
		$k[$j++] = $1.d2ele; /*5831*/
		$k[$j++] = $1.d2mwe; /*5831*/
		$k[$j++] = 7; /*5831*/
		$k[$j++] = true; /*5831*/
		$1.getRSSwidths(); /*5831*/
		var _3n = $k[--$j]; /*5831*/
		$1[$k[--$j]] = _3n; /*5831*/
		$1.d1w = $a(14); /*5833*/
		for (var _3q = 0; _3q <= 6; _3q += 1) {
			/*5838*/
			$1.i = _3q; /*5835*/
			$put($1.d1w, $1.i * 2, $get($1.d1wo, $1.i)); /*5836*/
			$put($1.d1w, ($1.i * 2) + 1, $get($1.d1we, $1.i)); /*5837*/
		} /*5837*/
		$1.d2w = $a(14); /*5840*/
		for (var _42 = 0; _42 <= 6; _42 += 1) {
			/*5845*/
			$1.i = _42; /*5842*/
			$put($1.d2w, $1.i * 2, $get($1.d2wo, $1.i)); /*5843*/
			$put($1.d2w, ($1.i * 2) + 1, $get($1.d2we, $1.i)); /*5844*/
		} /*5844*/
		$k[$j++] = Infinity; /*5849*/
		var _4D = $1.d1w; /*5848*/
		for (var _4E = 0, _4F = _4D.length; _4E < _4F; _4E++) {
			/*5848*/
			$k[$j++] = $get(_4D, _4E); /*5848*/
		} /*5848*/
		var _4H = $1.d2w; /*5849*/
		for (var _4I = 0, _4J = _4H.length; _4I < _4J; _4I++) {
			/*5849*/
			$k[$j++] = $get(_4H, _4I); /*5849*/
		} /*5849*/
		$1.widths = $a(); /*5849*/
		$1.checkweights = $a([1, 3, 9, 27, 81, 65, 17, 51, 64, 14, 42, 37, 22, 66, 20, 60, 2, 6, 18, 54, 73, 41, 34, 13, 39, 28, 84, 74]); /*5855*/
		$k[$j++] = Infinity; /*5870*/
		for (var _4N = 0; _4N <= 43; _4N += 1) {
			/*5858*/
			$k[$j++] = _4N; /*5858*/
		} /*5858*/
		$k[$j++] = 45; /*5860*/
		$k[$j++] = 52; /*5860*/
		$k[$j++] = 57; /*5860*/
		for (var _4O = 63; _4O <= 66; _4O += 1) {
			/*5860*/
			$k[$j++] = _4O; /*5860*/
		} /*5860*/
		for (var _4P = 73; _4P <= 79; _4P += 1) {
			/*5861*/
			$k[$j++] = _4P; /*5861*/
		} /*5861*/
		$k[$j++] = 82; /*5863*/
		for (var _4Q = 126; _4Q <= 130; _4Q += 1) {
			/*5863*/
			$k[$j++] = _4Q; /*5863*/
		} /*5863*/
		$k[$j++] = 132; /*5865*/
		for (var _4R = 141; _4R <= 146; _4R += 1) {
			/*5865*/
			$k[$j++] = _4R; /*5865*/
		} /*5865*/
		for (var _4S = 210; _4S <= 217; _4S += 1) {
			/*5866*/
			$k[$j++] = _4S; /*5866*/
		} /*5866*/
		$k[$j++] = 220; /*5868*/
		for (var _4T = 316; _4T <= 320; _4T += 1) {
			/*5868*/
			$k[$j++] = _4T; /*5868*/
		} /*5868*/
		$k[$j++] = 322; /*5870*/
		$k[$j++] = 323; /*5870*/
		$k[$j++] = 326; /*5870*/
		$k[$j++] = 337; /*5870*/
		$1.checkseq = $a(); /*5870*/
		$1.checksum = 0; /*5873*/
		for (var _4V = 0; _4V <= 27; _4V += 1) {
			/*5877*/
			$1.i = _4V; /*5875*/
			$1.checksum = $1.checksum + ($get($1.widths, $1.i) * $get($1.checkweights, $1.i)); /*5876*/
		} /*5876*/
		$1.checksum = $1.checksum % 89; /*5878*/
		$1.seq = $get($1.checkseq, $1.checksum); /*5879*/
		$k[$j++] = 'swidths'; /*5880*/
		$k[$j++] = ~~($1.seq / 21); /*5880*/
		$k[$j++] = 8; /*5880*/
		$k[$j++] = 3; /*5880*/
		$k[$j++] = 6; /*5880*/
		$k[$j++] = false; /*5880*/
		$1.getRSSwidths(); /*5880*/
		var _4i = $k[--$j]; /*5880*/
		$1[$k[--$j]] = _4i; /*5880*/
		$k[$j++] = 'bwidths'; /*5881*/
		$k[$j++] = $1.seq % 21; /*5881*/
		$k[$j++] = 8; /*5881*/
		$k[$j++] = 3; /*5881*/
		$k[$j++] = 6; /*5881*/
		$k[$j++] = false; /*5881*/
		$1.getRSSwidths(); /*5881*/
		var _4l = $k[--$j]; /*5881*/
		$1[$k[--$j]] = _4l; /*5881*/
		$1.checkwidths = $a([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1]); /*5883*/
		for (var _4o = 0; _4o <= 5; _4o += 1) {
			/*5888*/
			$1.i = _4o; /*5885*/
			$put($1.checkwidths, $1.i * 2, $get($1.swidths, $1.i)); /*5886*/
			$put($1.checkwidths, ($1.i * 2) + 1, $get($1.bwidths, $1.i)); /*5887*/
		} /*5887*/
		$k[$j++] = Infinity; /*5891*/
		var _4z = $1.d1w; /*5891*/
		$k[$j++] = 1; /*5891*/
		for (var _50 = 0, _51 = _4z.length; _50 < _51; _50++) {
			/*5891*/
			$k[$j++] = $get(_4z, _50); /*5891*/
		} /*5891*/
		var _53 = $1.checkwidths; /*5891*/
		for (var _54 = 0, _55 = _53.length; _54 < _55; _54++) {
			/*5891*/
			$k[$j++] = $get(_53, _54); /*5891*/
		} /*5891*/
		var _57 = $1.d2w; /*5891*/
		for (var _58 = 0, _59 = _57.length; _58 < _59; _58++) {
			/*5891*/
			$k[$j++] = $get(_57, _58); /*5891*/
		} /*5891*/
		$k[$j++] = 1; /*5891*/
		$k[$j++] = 1; /*5891*/
		$k[$j++] = 5; /*5891*/
		$1.sbs = $a(); /*5891*/
		$k[$j++] = Infinity; /*5902*/
		var _5C = $1.sbs; /*5897*/
		$k[$j++] = Infinity; /*5898*/
		for (var _5E = 0, _5F = ~~(($1.sbs.length + 1) / 2); _5E < _5F; _5E++) {
			/*5898*/
			$k[$j++] = $1.height; /*5898*/
		} /*5898*/
		var _5H = $a(); /*5898*/
		$k[$j++] = Infinity; /*5899*/
		for (var _5J = 0, _5K = ~~(($1.sbs.length + 1) / 2); _5J < _5K; _5J++) {
			/*5899*/
			$k[$j++] = 0; /*5899*/
		} /*5899*/
		var _5L = $a(); /*5899*/
		$k[$j++] = 'ren'; /*5902*/
		$k[$j++] = $0.renlinear; /*5902*/
		$k[$j++] = 'sbs'; /*5902*/
		$k[$j++] = _5C; /*5902*/
		$k[$j++] = 'bhs'; /*5902*/
		$k[$j++] = _5H; /*5902*/
		$k[$j++] = 'bbs'; /*5902*/
		$k[$j++] = _5L; /*5902*/
		$k[$j++] = 'txt'; /*5902*/
		$k[$j++] = $1.txt; /*5902*/
		$k[$j++] = 'textxalign'; /*5902*/
		$k[$j++] = "center"; /*5902*/
		$k[$j++] = 'opt'; /*5902*/
		$k[$j++] = $1.options; /*5902*/
		var _5O = $d(); /*5902*/
		$k[$j++] = _5O; /*5905*/
		if (!$1.dontdraw) { //no-else/*5905*/
			$0.renlinear(); /*5905*/
		} /*5905*/
	};
	$0.databarexpanded = function() {
		var $1 = {}; /*5935*/
		$1.options = $k[--$j]; /*5937*/
		$1.barcode = $k[--$j]; /*5938*/
		$1.dontdraw = false; /*5940*/
		$1.height = 34 / 72; /*5941*/
		$1.format = "expanded"; /*5942*/
		$1.segments = -1; /*5943*/
		$1.linkage = false; /*5944*/
		$1.barxmult = 34; /*5945*/
		$forall($1.options, function() {
			/*5956*/
			var _3 = $k[--$j]; /*5956*/
			$1[$k[--$j]] = _3; /*5956*/
		}); /*5956*/
		$1.height = +$1.height; /*5958*/
		$1.segments = ~~$1.segments; /*5959*/
		$1.barxmult = ~~$1.barxmult; /*5960*/
		if ($1.segments == -1) { //no-else/*5964*/
			var _A = $eq($1.format, "expandedstacked") ? 4 : 22; /*5963*/
			$1.segments = _A; /*5963*/
		} /*5963*/
		$1.expand = function() {
			$1.in = $k[--$j]; /*5968*/
			$1.out = $s($1.in.length); /*5969*/
			$1.j = 0; /*5970*/
			$k[$j++] = $1.in; /*5984*/
			for (;;) {
				/*5984*/
				$search($k[--$j], "^"); /*5973*/
				if ($k[--$j]) {
					/*5982*/
					var _H = $k[--$j]; /*5974*/
					$puti($1.out, $1.j, _H); /*5974*/
					$1.j = (_H.length + $1.j) + 1; /*5975*/
					$j--; /*5976*/
					var _L = $k[--$j]; /*5977*/
					$put($1.out, $1.j - 1, ~~$z($geti(_L, 0, 3))); /*5977*/
					$k[$j++] = $geti(_L, 3, _L.length - 3); /*5978*/
				} else {
					/*5982*/
					var _Q = $k[--$j]; /*5980*/
					$puti($1.out, $1.j, _Q); /*5980*/
					$1.j = _Q.length + $1.j; /*5981*/
					$k[$j++] = $geti($1.out, 0, $1.j); /*5982*/
					break; /*5982*/
				} /*5982*/
			} /*5982*/
		}; /*5985*/
		$1.ais = $a([]); /*5988*/
		$1.vals = $a([]); /*5989*/
		var _Z = $1.barcode; /*5990*/
		$k[$j++] = $geti(_Z, 1, _Z.length - 1); /*6003*/
		for (;;) {
			/*6003*/
			var _b = $k[--$j]; /*5992*/
			$k[$j++] = _b; /*5992*/
			if ($eq(_b, "")) { //no-else/*5992*/
				break; /*5992*/
			} /*5992*/
			$search($k[--$j], ")"); /*5993*/
			$j--; /*5993*/
			var _d = $k[--$j]; /*5994*/
			var _e = $k[--$j]; /*5994*/
			var _f = $k[--$j]; /*5995*/
			$k[$j++] = _d; /*5995*/
			$search(_f, "("); /*5995*/
			if ($k[--$j]) {
				/*5998*/
				var _h = $k[--$j]; /*5996*/
				var _i = $k[--$j]; /*5996*/
				var _j = $k[--$j]; /*5996*/
				var _k = $k[--$j]; /*5996*/
				$k[$j++] = _j; /*5996*/
				$k[$j++] = _k; /*5996*/
				$k[$j++] = _h; /*5996*/
			} else {
				/*5998*/
				var _l = $k[--$j]; /*5998*/
				var _m = $k[--$j]; /*5998*/
				$k[$j++] = ""; /*5998*/
				$k[$j++] = _m; /*5998*/
				$k[$j++] = _l; /*5998*/
			} /*5998*/
			$k[$j++] = Infinity; /*6000*/
			$aload($1.ais); /*6000*/
			var _p = $k[$j - 1 - ($counttomark() + 2)]; /*6000*/
			$k[$j++] = _p; /*6000*/
			$1.ais = $a(); /*6000*/
			$k[$j++] = Infinity; /*6001*/
			$aload($1.vals); /*6001*/
			var _t = $k[$j - 1 - ($counttomark() + 1)]; /*6001*/
			$k[$j++] = _t; /*6001*/
			$1.expand(); /*6001*/
			$1.vals = $a(); /*6001*/
			$j -= 2; /*6002*/
		} /*6002*/
		$j--; /*6004*/
		for (;;) {
			/*6091*/
			if ($1.ais.length == 2) { //no-else/*6016*/
				if ($eq($get($1.ais, 0), "01") && $eq($get($1.ais, 1), "3103")) { //no-else/*6015*/
					if ($eq($geti($get($1.vals, 0), 0, 1), "9") && ((~~$z($get($1.vals, 1))) <= 32767)) { //no-else/*6014*/
						$k[$j++] = "0100"; /*6013*/
						$k[$j++] = false; /*6013*/
						break; /*6013*/
					} /*6013*/
				} /*6013*/
			} /*6013*/
			if ($1.ais.length == 2) { //no-else/*6025*/
				if ($eq($get($1.ais, 0), "01") && $eq($get($1.ais, 1), "3202")) { //no-else/*6024*/
					if ($eq($geti($get($1.vals, 0), 0, 1), "9") && ((~~$z($get($1.vals, 1))) <= 9999)) { //no-else/*6023*/
						$k[$j++] = "0101"; /*6022*/
						$k[$j++] = false; /*6022*/
						break; /*6022*/
					} /*6022*/
				} /*6022*/
			} /*6022*/
			if ($1.ais.length == 2) { //no-else/*6034*/
				if ($eq($get($1.ais, 0), "01") && $eq($get($1.ais, 1), "3203")) { //no-else/*6033*/
					if ($eq($geti($get($1.vals, 0), 0, 1), "9") && ((~~$z($get($1.vals, 1))) <= 22767)) { //no-else/*6032*/
						$k[$j++] = "0101"; /*6031*/
						$k[$j++] = false; /*6031*/
						break; /*6031*/
					} /*6031*/
				} /*6031*/
			} /*6031*/
			var _1Q = $1.ais.length; /*6037*/
			if ((_1Q == 2) || (_1Q == 3)) { //no-else/*6067*/
				$k[$j++] = 'ai310x'; /*6038*/
				$k[$j++] = false; /*6038*/
				for (var _1R = 3100; _1R <= 3109; _1R += 1) {
					/*6038*/
					var _1W = $k[--$j]; /*6038*/
					$k[$j++] = _1W || $eq($cvrs($s(4), _1R, 10), $get($1.ais, 1)); /*6038*/
				} /*6038*/
				var _1X = $k[--$j]; /*6038*/
				$1[$k[--$j]] = _1X; /*6038*/
				$k[$j++] = 'ai320x'; /*6039*/
				$k[$j++] = false; /*6039*/
				for (var _1Z = 3200; _1Z <= 3209; _1Z += 1) {
					/*6039*/
					var _1e = $k[--$j]; /*6039*/
					$k[$j++] = _1e || $eq($cvrs($s(4), _1Z, 10), $get($1.ais, 1)); /*6039*/
				} /*6039*/
				var _1f = $k[--$j]; /*6039*/
				$1[$k[--$j]] = _1f; /*6039*/
				if ($1.ais.length == 3) {
					/*6043*/
					var _1i = $a(["11", "13", "15", "17"]); /*6041*/
					$k[$j++] = 'aibad'; /*6041*/
					$k[$j++] = true; /*6041*/
					for (var _1j = 0, _1k = _1i.length; _1j < _1k; _1j++) {
						/*6041*/
						var _1o = $k[--$j]; /*6041*/
						$k[$j++] = _1o && $ne($get(_1i, _1j), $get($1.ais, 2)); /*6041*/
					} /*6041*/
					var _1p = $k[--$j]; /*6041*/
					$1[$k[--$j]] = _1p; /*6041*/
				} else {
					/*6043*/
					$1.aibad = false; /*6043*/
				} /*6043*/
				if (($eq($get($1.ais, 0), "01") && ($1.ai310x || $1.ai320x)) && (!$1.aibad)) { //no-else/*6066*/
					if ($1.ais.length == 3) {
						/*6063*/
						if (($eq($geti($get($1.vals, 0), 0, 1), "9") && ((~~$z($get($1.vals, 1))) <= 99999)) && ((~~$z($get($1.vals, 2))) <= 999999)) { //no-else/*6058*/
							if ($1.ai310x && $eq($get($1.ais, 2), "11")) { //no-else/*6050*/
								$k[$j++] = "0111000"; /*6050*/
								$k[$j++] = false; /*6050*/
								break; /*6050*/
							} /*6050*/
							if ($1.ai320x && $eq($get($1.ais, 2), "11")) { //no-else/*6051*/
								$k[$j++] = "0111001"; /*6051*/
								$k[$j++] = false; /*6051*/
								break; /*6051*/
							} /*6051*/
							if ($1.ai310x && $eq($get($1.ais, 2), "13")) { //no-else/*6052*/
								$k[$j++] = "0111010"; /*6052*/
								$k[$j++] = false; /*6052*/
								break; /*6052*/
							} /*6052*/
							if ($1.ai320x && $eq($get($1.ais, 2), "13")) { //no-else/*6053*/
								$k[$j++] = "0111011"; /*6053*/
								$k[$j++] = false; /*6053*/
								break; /*6053*/
							} /*6053*/
							if ($1.ai310x && $eq($get($1.ais, 2), "15")) { //no-else/*6054*/
								$k[$j++] = "0111100"; /*6054*/
								$k[$j++] = false; /*6054*/
								break; /*6054*/
							} /*6054*/
							if ($1.ai320x && $eq($get($1.ais, 2), "15")) { //no-else/*6055*/
								$k[$j++] = "0111101"; /*6055*/
								$k[$j++] = false; /*6055*/
								break; /*6055*/
							} /*6055*/
							if ($1.ai310x && $eq($get($1.ais, 2), "17")) { //no-else/*6056*/
								$k[$j++] = "0111110"; /*6056*/
								$k[$j++] = false; /*6056*/
								break; /*6056*/
							} /*6056*/
							if ($1.ai320x && $eq($get($1.ais, 2), "17")) { //no-else/*6057*/
								$k[$j++] = "0111111"; /*6057*/
								$k[$j++] = false; /*6057*/
								break; /*6057*/
							} /*6057*/
						} /*6057*/
					} else {
						/*6063*/
						if ($eq($geti($get($1.vals, 0), 0, 1), "9") && ((~~$z($get($1.vals, 1))) <= 99999)) { //no-else/*6064*/
							if ($1.ai310x) { //no-else/*6062*/
								$k[$j++] = "0111000"; /*6062*/
								$k[$j++] = false; /*6062*/
								break; /*6062*/
							} /*6062*/
							if ($1.ai320x) { //no-else/*6063*/
								$k[$j++] = "0111001"; /*6063*/
								$k[$j++] = false; /*6063*/
								break; /*6063*/
							} /*6063*/
						} /*6063*/
					} /*6063*/
				} /*6063*/
			} /*6063*/
			if ($1.ais.length >= 2) { //no-else/*6075*/
				$k[$j++] = 'ai392x'; /*6071*/
				$k[$j++] = false; /*6071*/
				for (var _2a = 3920; _2a <= 3923; _2a += 1) {
					/*6071*/
					var _2f = $k[--$j]; /*6071*/
					$k[$j++] = _2f || $eq($cvrs($s(4), _2a, 10), $get($1.ais, 1)); /*6071*/
				} /*6071*/
				var _2g = $k[--$j]; /*6071*/
				$1[$k[--$j]] = _2g; /*6071*/
				if ($eq($get($1.ais, 0), "01") && $1.ai392x) { //no-else/*6074*/
					if ($eq($geti($get($1.vals, 0), 0, 1), "9")) { //no-else/*6073*/
						$k[$j++] = "01100"; /*6073*/
						$k[$j++] = true; /*6073*/
						break; /*6073*/
					} /*6073*/
				} /*6073*/
			} /*6073*/
			if ($1.ais.length >= 2) { //no-else/*6083*/
				$k[$j++] = 'ai393x'; /*6079*/
				$k[$j++] = false; /*6079*/
				for (var _2p = 3930; _2p <= 3933; _2p += 1) {
					/*6079*/
					var _2u = $k[--$j]; /*6079*/
					$k[$j++] = _2u || $eq($cvrs($s(4), _2p, 10), $get($1.ais, 1)); /*6079*/
				} /*6079*/
				var _2v = $k[--$j]; /*6079*/
				$1[$k[--$j]] = _2v; /*6079*/
				if ($eq($get($1.ais, 0), "01") && $1.ai393x) { //no-else/*6082*/
					if ($eq($geti($get($1.vals, 0), 0, 1), "9")) { //no-else/*6081*/
						$k[$j++] = "01101"; /*6081*/
						$k[$j++] = true; /*6081*/
						break; /*6081*/
					} /*6081*/
				} /*6081*/
			} /*6081*/
			if ($eq($get($1.ais, 0), "01")) { //no-else/*6086*/
				$k[$j++] = "1"; /*6086*/
				$k[$j++] = true; /*6086*/
				break; /*6086*/
			} /*6086*/
			$k[$j++] = "00"; /*6089*/
			$k[$j++] = true; /*6089*/
			break; /*6089*/
		} /*6089*/
		$1.gpfallow = $k[--$j]; /*6092*/
		$1.method = $k[--$j]; /*6093*/
		$1.conv12to40 = function() {
			var _38 = $strcpy($s(40), "0000000000000000000000000000000000000000"); /*6096*/
			var _39 = $k[--$j]; /*6097*/
			var _3D = $cvrs($s(10), ~~$z($geti(_39, 0, 3)), 2); /*6097*/
			$puti($geti(_38, 0, 10), 10 - _3D.length, _3D); /*6097*/
			var _3H = $cvrs($s(10), ~~$z($geti(_39, 3, 3)), 2); /*6098*/
			$puti($geti(_38, 10, 10), 10 - _3H.length, _3H); /*6098*/
			var _3L = $cvrs($s(10), ~~$z($geti(_39, 6, 3)), 2); /*6099*/
			$puti($geti(_38, 20, 10), 10 - _3L.length, _3L); /*6099*/
			var _3P = $cvrs($s(10), ~~$z($geti(_39, 9, 3)), 2); /*6100*/
			$puti($geti(_38, 30, 10), 10 - _3P.length, _3P); /*6100*/
			$k[$j++] = _38; /*6101*/
		}; /*6102*/
		$1.conv13to44 = function() {
			var _3R = $strcpy($s(44), "00000000000000000000000000000000000000000000"); /*6105*/
			var _3S = $k[--$j]; /*6106*/
			var _3W = $cvrs($s(4), ~~$z($geti(_3S, 0, 1)), 2); /*6106*/
			$puti($geti(_3R, 0, 4), 4 - _3W.length, _3W); /*6106*/
			$k[$j++] = _3R; /*6107*/
			$k[$j++] = _3R; /*6107*/
			$k[$j++] = $geti(_3S, 1, 12); /*6107*/
			$1.conv12to40(); /*6107*/
			var _3Y = $k[--$j]; /*6107*/
			$puti($k[--$j], 4, _3Y); /*6107*/
		}; /*6108*/
		$1.tobin = function() {
			var _3b = $s($k[--$j]); /*6111*/
			$k[$j++] = _3b; /*6111*/
			for (var _3d = 0, _3c = _3b.length - 1; _3d <= _3c; _3d += 1) {
				/*6111*/
				var _3e = $k[--$j]; /*6111*/
				$put(_3e, _3d, 48); /*6111*/
				$k[$j++] = _3e; /*6111*/
			} /*6111*/
			var _3f = $k[--$j]; /*6112*/
			var _3i = $cvrs($s(_3f.length), $k[--$j], 2); /*6112*/
			$puti(_3f, _3f.length - _3i.length, _3i); /*6112*/
			$k[$j++] = _3f; /*6112*/
		}; /*6113*/
		if ($eq($1.method, "00")) { //no-else/*6118*/
			$1.cdf = $a([]); /*6116*/
			$1.gpf = $a([]); /*6117*/
		} /*6117*/
		if ($eq($1.method, "1")) { //no-else/*6126*/
			$k[$j++] = 'cdf'; /*6121*/
			$k[$j++] = $geti($get($1.vals, 0), 0, 13); /*6121*/
			$1.conv13to44(); /*6121*/
			var _3q = $k[--$j]; /*6121*/
			$1[$k[--$j]] = _3q; /*6121*/
			$k[$j++] = Infinity; /*6122*/
			var _3s = $1.cdf; /*6122*/
			for (var _3t = 0, _3u = _3s.length; _3t < _3u; _3t++) {
				/*6122*/
				$k[$j++] = $get(_3s, _3t) - 48; /*6122*/
			} /*6122*/
			$1.cdf = $a(); /*6122*/
			$1.gpf = $a([]); /*6123*/
			$1.ais = $geti($1.ais, 1, $1.ais.length - 1); /*6124*/
			$1.vals = $geti($1.vals, 1, $1.vals.length - 1); /*6125*/
		} /*6125*/
		if ($eq($1.method, "0100")) { //no-else/*6136*/
			$1.cdf = $s(55); /*6129*/
			$k[$j++] = $1.cdf; /*6130*/
			$k[$j++] = 0; /*6130*/
			$k[$j++] = $geti($get($1.vals, 0), 1, 12); /*6130*/
			$1.conv12to40(); /*6130*/
			var _4A = $k[--$j]; /*6130*/
			var _4B = $k[--$j]; /*6130*/
			$puti($k[--$j], _4B, _4A); /*6130*/
			$k[$j++] = $1.cdf; /*6131*/
			$k[$j++] = 40; /*6131*/
			$k[$j++] = ~~$z($get($1.vals, 1)); /*6131*/
			$k[$j++] = 15; /*6131*/
			$1.tobin(); /*6131*/
			var _4G = $k[--$j]; /*6131*/
			var _4H = $k[--$j]; /*6131*/
			$puti($k[--$j], _4H, _4G); /*6131*/
			$k[$j++] = Infinity; /*6132*/
			var _4J = $1.cdf; /*6132*/
			for (var _4K = 0, _4L = _4J.length; _4K < _4L; _4K++) {
				/*6132*/
				$k[$j++] = $get(_4J, _4K) - 48; /*6132*/
			} /*6132*/
			$1.cdf = $a(); /*6132*/
			$1.gpf = $a([]); /*6133*/
			$1.ais = $a([]); /*6134*/
			$1.vals = $a([]); /*6135*/
		} /*6135*/
		if ($eq($1.method, "0101")) { //no-else/*6151*/
			$1.cdf = $s(55); /*6139*/
			$k[$j++] = $1.cdf; /*6140*/
			$k[$j++] = 0; /*6140*/
			$k[$j++] = $geti($get($1.vals, 0), 1, 12); /*6140*/
			$1.conv12to40(); /*6140*/
			var _4X = $k[--$j]; /*6140*/
			var _4Y = $k[--$j]; /*6140*/
			$puti($k[--$j], _4Y, _4X); /*6140*/
			if ($eq($get($1.ais, 1), "3202")) {
				/*6144*/
				$k[$j++] = ~~$z($get($1.vals, 1)); /*6142*/
				$k[$j++] = 15; /*6142*/
				$1.tobin(); /*6142*/
			} else {
				/*6144*/
				$k[$j++] = (~~$z($get($1.vals, 1))) + 10000; /*6144*/
				$k[$j++] = 15; /*6144*/
				$1.tobin(); /*6144*/
			} /*6144*/
			$puti($1.cdf, 40, $k[--$j]); /*6146*/
			$k[$j++] = Infinity; /*6147*/
			var _4i = $1.cdf; /*6147*/
			for (var _4j = 0, _4k = _4i.length; _4j < _4k; _4j++) {
				/*6147*/
				$k[$j++] = $get(_4i, _4j) - 48; /*6147*/
			} /*6147*/
			$1.cdf = $a(); /*6147*/
			$1.gpf = $a([]); /*6148*/
			$1.ais = $a([]); /*6149*/
			$1.vals = $a([]); /*6150*/
		} /*6150*/
		if ($1.method.length == 7) { //no-else/*6172*/
			$1.cdf = $s(76); /*6154*/
			$k[$j++] = $1.cdf; /*6155*/
			$k[$j++] = 0; /*6155*/
			$k[$j++] = $geti($get($1.vals, 0), 1, 12); /*6155*/
			$1.conv12to40(); /*6155*/
			var _4w = $k[--$j]; /*6155*/
			var _4x = $k[--$j]; /*6155*/
			$puti($k[--$j], _4x, _4w); /*6155*/
			var _4z = $s(6); /*6156*/
			$puti(_4z, 0, $geti($get($1.ais, 1), 3, 1)); /*6156*/
			$puti(_4z, 1, $geti($get($1.vals, 1), 1, 5)); /*6157*/
			$k[$j++] = ~~$z(_4z); /*6157*/
			$k[$j++] = 20; /*6157*/
			$1.tobin(); /*6157*/
			$puti($1.cdf, 40, $k[--$j]); /*6158*/
			if ($1.ais.length == 3) {
				/*6165*/
				var _5A = $get($1.vals, 2); /*6160*/
				$k[$j++] = ((~~$z($geti(_5A, 0, 2))) * 384) + ((((~~$z($geti(_5A, 2, 2))) - 1) * 32) + (~~$z($geti(_5A, 4, 2)))); /*6163*/
			} else {
				/*6165*/
				$k[$j++] = 38400; /*6165*/
			} /*6165*/
			$k[$j++] = 16; /*6167*/
			$1.tobin(); /*6167*/
			$puti($1.cdf, 60, $k[--$j]); /*6167*/
			$k[$j++] = Infinity; /*6168*/
			var _5G = $1.cdf; /*6168*/
			for (var _5H = 0, _5I = _5G.length; _5H < _5I; _5H++) {
				/*6168*/
				$k[$j++] = $get(_5G, _5H) - 48; /*6168*/
			} /*6168*/
			$1.cdf = $a(); /*6168*/
			$1.gpf = $a([]); /*6169*/
			$1.ais = $a([]); /*6170*/
			$1.vals = $a([]); /*6171*/
		} /*6171*/
		if ($eq($1.method, "01100")) { //no-else/*6182*/
			$1.cdf = $s(42); /*6175*/
			$k[$j++] = $1.cdf; /*6176*/
			$k[$j++] = 0; /*6176*/
			$k[$j++] = $geti($get($1.vals, 0), 1, 12); /*6176*/
			$1.conv12to40(); /*6176*/
			var _5U = $k[--$j]; /*6176*/
			var _5V = $k[--$j]; /*6176*/
			$puti($k[--$j], _5V, _5U); /*6176*/
			$k[$j++] = $1.cdf; /*6177*/
			$k[$j++] = 40; /*6177*/
			$k[$j++] = ~~$z($geti($get($1.ais, 1), 3, 1)); /*6177*/
			$k[$j++] = 2; /*6177*/
			$1.tobin(); /*6177*/
			var _5b = $k[--$j]; /*6177*/
			var _5c = $k[--$j]; /*6177*/
			$puti($k[--$j], _5c, _5b); /*6177*/
			$k[$j++] = Infinity; /*6178*/
			var _5e = $1.cdf; /*6178*/
			for (var _5f = 0, _5g = _5e.length; _5f < _5g; _5f++) {
				/*6178*/
				$k[$j++] = $get(_5e, _5f) - 48; /*6178*/
			} /*6178*/
			$1.cdf = $a(); /*6178*/
			$k[$j++] = Infinity; /*6179*/
			$forall($get($1.vals, 1)); /*6179*/
			$1.gpf = $a(); /*6179*/
			$1.ais = $geti($1.ais, 2, $1.ais.length - 2); /*6180*/
			$1.vals = $geti($1.vals, 2, $1.vals.length - 2); /*6181*/
		} /*6181*/
		if ($eq($1.method, "01101")) { //no-else/*6193*/
			$1.cdf = $s(52); /*6185*/
			$k[$j++] = $1.cdf; /*6186*/
			$k[$j++] = 0; /*6186*/
			$k[$j++] = $geti($get($1.vals, 0), 1, 12); /*6186*/
			$1.conv12to40(); /*6186*/
			var _5y = $k[--$j]; /*6186*/
			var _5z = $k[--$j]; /*6186*/
			$puti($k[--$j], _5z, _5y); /*6186*/
			$k[$j++] = $1.cdf; /*6187*/
			$k[$j++] = 40; /*6187*/
			$k[$j++] = ~~$z($geti($get($1.ais, 1), 3, 1)); /*6187*/
			$k[$j++] = 2; /*6187*/
			$1.tobin(); /*6187*/
			var _65 = $k[--$j]; /*6187*/
			var _66 = $k[--$j]; /*6187*/
			$puti($k[--$j], _66, _65); /*6187*/
			$k[$j++] = $1.cdf; /*6188*/
			$k[$j++] = 42; /*6188*/
			$k[$j++] = ~~$z($geti($get($1.vals, 1), 0, 3)); /*6188*/
			$k[$j++] = 10; /*6188*/
			$1.tobin(); /*6188*/
			var _6C = $k[--$j]; /*6188*/
			var _6D = $k[--$j]; /*6188*/
			$puti($k[--$j], _6D, _6C); /*6188*/
			$k[$j++] = Infinity; /*6189*/
			var _6F = $1.cdf; /*6189*/
			for (var _6G = 0, _6H = _6F.length; _6G < _6H; _6G++) {
				/*6189*/
				$k[$j++] = $get(_6F, _6G) - 48; /*6189*/
			} /*6189*/
			$1.cdf = $a(); /*6189*/
			$k[$j++] = Infinity; /*6190*/
			var _6L = $get($1.vals, 1); /*6190*/
			$forall($geti(_6L, 3, _6L.length - 3)); /*6190*/
			$1.gpf = $a(); /*6190*/
			$1.ais = $geti($1.ais, 2, $1.ais.length - 2); /*6191*/
			$1.vals = $geti($1.vals, 2, $1.vals.length - 2); /*6192*/
		} /*6192*/
		if ($1.gpfallow) {
			/*6199*/
			$1.vlf = $a(2); /*6197*/
		} else {
			/*6199*/
			$1.vlf = $a([]); /*6199*/
		} /*6199*/
		$1.aifixed = new Map; /*6205*/
		$k[$j++] = Infinity; /*6207*/
		for (var _6X = 0; _6X <= 4; _6X += 1) {
			/*6207*/
			$k[$j++] = _6X; /*6207*/
		} /*6207*/
		var _6Y = $a(); /*6207*/
		for (var _6Z = 0, _6a = _6Y.length; _6Z < _6a; _6Z++) {
			/*6210*/
			var _6d = $strcpy($s(2), "00"); /*6209*/
			$put(_6d, 1, $get(_6Y, _6Z) + 48); /*6209*/
			$put($1.aifixed, _6d, _6d); /*6209*/
		} /*6209*/
		$k[$j++] = Infinity; /*6215*/
		for (var _6f = 11; _6f <= 20; _6f += 1) {
			/*6212*/
			$k[$j++] = _6f; /*6212*/
		} /*6212*/
		$k[$j++] = 23; /*6214*/
		for (var _6g = 31; _6g <= 36; _6g += 1) {
			/*6214*/
			$k[$j++] = _6g; /*6214*/
		} /*6214*/
		$k[$j++] = 41; /*6215*/
		var _6h = $a(); /*6215*/
		for (var _6i = 0, _6j = _6h.length; _6i < _6j; _6i++) {
			/*6218*/
			var _6m = $cvrs($s(2), $get(_6h, _6i), 10); /*6217*/
			$put($1.aifixed, _6m, _6m); /*6217*/
		} /*6217*/
		$1.fnc1 = -1; /*6220*/
		$1.lnumeric = -2; /*6220*/
		$1.lalphanumeric = -3; /*6220*/
		$1.liso646 = -4; /*6220*/
		$k[$j++] = Infinity; /*6232*/
		for (var _6o = 0; _6o <= 119; _6o += 1) {
			/*6231*/
			var _6q = $strcpy($s(2), "00"); /*6224*/
			var _6s = $cvrs($s(2), _6o, 11); /*6224*/
			$puti(_6q, 2 - _6s.length, _6s); /*6225*/
			$k[$j++] = _6o; /*6226*/
			$k[$j++] = _6q; /*6226*/
			if ($get(_6q, 0) == 65) { //no-else/*6226*/
				var _6u = $k[--$j]; /*6226*/
				$put(_6u, 0, 94); /*6226*/
				$k[$j++] = _6u; /*6226*/
			} /*6226*/
			var _6v = $k[--$j]; /*6227*/
			$k[$j++] = _6v; /*6227*/
			if ($get(_6v, 1) == 65) { //no-else/*6227*/
				var _6x = $k[--$j]; /*6227*/
				$put(_6x, 1, 94); /*6227*/
				$k[$j++] = _6x; /*6227*/
			} /*6227*/
			var _6y = $k[--$j]; /*6228*/
			var _71 = $strcpy($s(7), "0000000"); /*6229*/
			var _73 = $cvrs($s(7), $k[--$j] + 8, 2); /*6229*/
			$puti(_71, 7 - _73.length, _73); /*6230*/
			$k[$j++] = _6y; /*6230*/
			$k[$j++] = _71; /*6230*/
		} /*6230*/
		$k[$j++] = $1.lalphanumeric; /*6232*/
		$k[$j++] = "0000"; /*6232*/
		$1.numeric = $d(); /*6233*/
		$k[$j++] = Infinity; /*6242*/
		for (var _76 = 48; _76 <= 57; _76 += 1) {
			/*6236*/
			$k[$j++] = _76; /*6236*/
			$k[$j++] = _76 - 43; /*6236*/
			$k[$j++] = 5; /*6236*/
			$1.tobin(); /*6236*/
		} /*6236*/
		$k[$j++] = $1.fnc1; /*6238*/
		$k[$j++] = "01111"; /*6238*/
		for (var _78 = 65; _78 <= 90; _78 += 1) {
			/*6238*/
			$k[$j++] = _78; /*6238*/
			$k[$j++] = _78 - 33; /*6238*/
			$k[$j++] = 6; /*6238*/
			$1.tobin(); /*6238*/
		} /*6238*/
		$k[$j++] = 42; /*6240*/
		$k[$j++] = "111010"; /*6240*/
		for (var _79 = 44; _79 <= 47; _79 += 1) {
			/*6240*/
			$k[$j++] = _79; /*6240*/
			$k[$j++] = _79 + 15; /*6240*/
			$k[$j++] = 6; /*6240*/
			$1.tobin(); /*6240*/
		} /*6240*/
		$k[$j++] = $1.lnumeric; /*6242*/
		$k[$j++] = "000"; /*6242*/
		$k[$j++] = $1.liso646; /*6242*/
		$k[$j++] = "00100"; /*6242*/
		$1.alphanumeric = $d(); /*6243*/
		$k[$j++] = Infinity; /*6257*/
		for (var _7D = 48; _7D <= 57; _7D += 1) {
			/*6246*/
			$k[$j++] = _7D; /*6246*/
			$k[$j++] = _7D - 43; /*6246*/
			$k[$j++] = 5; /*6246*/
			$1.tobin(); /*6246*/
		} /*6246*/
		$k[$j++] = $1.fnc1; /*6248*/
		$k[$j++] = "01111"; /*6248*/
		for (var _7F = 65; _7F <= 90; _7F += 1) {
			/*6248*/
			$k[$j++] = _7F; /*6248*/
			$k[$j++] = _7F - 1; /*6248*/
			$k[$j++] = 7; /*6248*/
			$1.tobin(); /*6248*/
		} /*6248*/
		for (var _7G = 97; _7G <= 122; _7G += 1) {
			/*6249*/
			$k[$j++] = _7G; /*6249*/
			$k[$j++] = _7G - 7; /*6249*/
			$k[$j++] = 7; /*6249*/
			$1.tobin(); /*6249*/
		} /*6249*/
		$k[$j++] = 33; /*6252*/
		$k[$j++] = "11101000"; /*6252*/
		$k[$j++] = 34; /*6252*/
		$k[$j++] = "11101001"; /*6252*/
		for (var _7H = 37; _7H <= 47; _7H += 1) {
			/*6252*/
			$k[$j++] = _7H; /*6252*/
			$k[$j++] = _7H + 197; /*6252*/
			$k[$j++] = 8; /*6252*/
			$1.tobin(); /*6252*/
		} /*6252*/
		for (var _7I = 58; _7I <= 63; _7I += 1) {
			/*6253*/
			$k[$j++] = _7I; /*6253*/
			$k[$j++] = _7I + 187; /*6253*/
			$k[$j++] = 8; /*6253*/
			$1.tobin(); /*6253*/
		} /*6253*/
		$k[$j++] = 95; /*6257*/
		$k[$j++] = "11111011"; /*6257*/
		$k[$j++] = 32; /*6257*/
		$k[$j++] = "11111100"; /*6257*/
		$k[$j++] = $1.lnumeric; /*6257*/
		$k[$j++] = "000"; /*6257*/
		$k[$j++] = $1.lalphanumeric; /*6257*/
		$k[$j++] = "00100"; /*6257*/
		$1.iso646 = $d(); /*6258*/
		for (var _7O = 0, _7N = $1.ais.length - 1; _7O <= _7N; _7O += 1) {
			/*6276*/
			$1.i = _7O; /*6262*/
			$1.ai = $get($1.ais, $1.i); /*6263*/
			$1.val = $get($1.vals, $1.i); /*6264*/
			var _7Y = $a(($1.gpf.length + $1.ai.length) + $1.val.length); /*6265*/
			$puti(_7Y, 0, $1.gpf); /*6266*/
			$k[$j++] = _7Y; /*6267*/
			$k[$j++] = _7Y; /*6267*/
			$k[$j++] = $1.gpf.length; /*6267*/
			$k[$j++] = $1.ai; /*6267*/
			$k[$j++] = Infinity; /*6267*/
			var _7c = $k[--$j]; /*6267*/
			var _7d = $k[--$j]; /*6267*/
			$k[$j++] = _7c; /*6267*/
			$forall(_7d); /*6267*/
			var _7e = $a(); /*6267*/
			var _7f = $k[--$j]; /*6267*/
			$puti($k[--$j], _7f, _7e); /*6267*/
			var _7h = $k[--$j]; /*6268*/
			$k[$j++] = _7h; /*6268*/
			$k[$j++] = _7h; /*6268*/
			$k[$j++] = $1.gpf.length + $1.ai.length; /*6268*/
			$k[$j++] = $1.val; /*6268*/
			$k[$j++] = Infinity; /*6268*/
			var _7l = $k[--$j]; /*6268*/
			var _7m = $k[--$j]; /*6268*/
			$k[$j++] = _7l; /*6268*/
			$forall(_7m); /*6268*/
			var _7n = $a(); /*6268*/
			var _7o = $k[--$j]; /*6268*/
			$puti($k[--$j], _7o, _7n); /*6268*/
			$1.gpf = $k[--$j]; /*6269*/
			var _7w = $get($1.aifixed, $geti($1.ai, 0, 2)) !== undefined; /*6270*/
			if (($1.i != ($1.ais.length - 1)) && (!_7w)) { //no-else/*6275*/
				var _7y = $a($1.gpf.length + 1); /*6271*/
				$puti(_7y, 0, $1.gpf); /*6272*/
				$put(_7y, $1.gpf.length, $1.fnc1); /*6273*/
				$1.gpf = _7y; /*6274*/
			} /*6274*/
		} /*6274*/
		$1.rembits = function() {
			var _82 = $k[--$j]; /*6280*/
			var _83 = 48; /*6282*/
			var _84 = (~~Math.ceil(_82 / 12)) * 12; /*6282*/
			if (((~~Math.ceil(_82 / 12)) * 12) < 48) { //no-else/*6282*/
				var _ = _83; /*6282*/
				_83 = _84; /*6282*/
				_84 = _; /*6282*/
			} /*6282*/
			var _85 = ~~(_84 / 12); /*6283*/
			$k[$j++] = _82; /*6287*/
			$k[$j++] = _84; /*6287*/
			$k[$j++] = _85; /*6287*/
			if ((_85 % $1.segments) == 1) {
				/*6286*/
				var _87 = $k[--$j]; /*6284*/
				var _88 = $k[--$j]; /*6284*/
				$k[$j++] = (_87 + 1) * 12; /*6284*/
			} else {
				/*6286*/
				$j--; /*6286*/
			} /*6286*/
			var _89 = $k[--$j]; /*6288*/
			var _8A = $k[--$j]; /*6288*/
			$k[$j++] = _89 - _8A; /*6288*/
		}; /*6289*/
		$1.encode = function() {
			var _8B = $k[--$j]; /*6292*/
			$k[$j++] = _8B; /*6292*/
			if ($ne(_8B, 'raw')) {
				/*6292*/
				var _8C = $k[--$j]; /*6292*/
				var _8E = $get(_8C, $k[--$j]); /*6292*/
				$k[$j++] = _8E; /*6292*/
			} else {
				/*6292*/
				$j--; /*6292*/
			} /*6292*/
			$k[$j++] = Infinity; /*6293*/
			var _8F = $k[--$j]; /*6293*/
			var _8G = $k[--$j]; /*6293*/
			$k[$j++] = _8F; /*6293*/
			$forall(_8G, function() {
				/*6293*/
				var _8H = $k[--$j]; /*6293*/
				$k[$j++] = _8H - 48; /*6293*/
			}); /*6293*/
			var _8I = $a(); /*6293*/
			$puti($1.gpfenc, $1.j, _8I); /*6295*/
			$1.j = _8I.length + $1.j; /*6296*/
		}; /*6297*/
		$k[$j++] = Infinity; /*6300*/
		for (var _8N = 0, _8O = $1.gpf.length; _8N < _8O; _8N++) {
			/*6300*/
			$k[$j++] = 0; /*6300*/
		} /*6300*/
		$k[$j++] = 0; /*6300*/
		$k[$j++] = -1; /*6300*/
		$1.numericruns = $a(); /*6300*/
		$k[$j++] = Infinity; /*6301*/
		for (var _8R = 0, _8S = $1.gpf.length; _8R < _8S; _8R++) {
			/*6301*/
			$k[$j++] = 0; /*6301*/
		} /*6301*/
		$k[$j++] = 0; /*6301*/
		$1.alphanumericruns = $a(); /*6301*/
		$k[$j++] = Infinity; /*6302*/
		for (var _8V = 0, _8W = $1.gpf.length; _8V < _8W; _8V++) {
			/*6302*/
			$k[$j++] = 0; /*6302*/
		} /*6302*/
		$k[$j++] = 9999; /*6302*/
		$1.nextiso646only = $a(); /*6302*/
		for (var _8Z = $1.gpf.length - 1; _8Z >= 0; _8Z -= 1) {
			/*6324*/
			$1.i = _8Z; /*6304*/
			var _8e = $strcpy($s(2), "00"); /*6306*/
			var _8h = $get($1.gpf, $1.i); /*6307*/
			$k[$j++] = $get($1.gpf, $1.i); /*6307*/
			$k[$j++] = _8e; /*6307*/
			$k[$j++] = _8e; /*6307*/
			$k[$j++] = 0; /*6307*/
			$k[$j++] = _8h; /*6307*/
			if (_8h == $1.fnc1) { //no-else/*6307*/
				$j--; /*6307*/
				$k[$j++] = 94; /*6307*/
			} /*6307*/
			var _8j = $k[--$j]; /*6307*/
			var _8k = $k[--$j]; /*6307*/
			$put($k[--$j], _8k, _8j); /*6307*/
			if ($1.i < ($1.gpf.length - 1)) { //no-else/*6308*/
				var _8o = $k[--$j]; /*6308*/
				var _8r = $get($1.gpf, $1.i + 1); /*6308*/
				$k[$j++] = _8o; /*6308*/
				$k[$j++] = _8o; /*6308*/
				$k[$j++] = 1; /*6308*/
				$k[$j++] = _8r; /*6308*/
				if (_8r == $1.fnc1) { //no-else/*6308*/
					$j--; /*6308*/
					$k[$j++] = 94; /*6308*/
				} /*6308*/
				var _8t = $k[--$j]; /*6308*/
				var _8u = $k[--$j]; /*6308*/
				$put($k[--$j], _8u, _8t); /*6308*/
			} /*6308*/
			var _8y = $get($1.numeric, $k[--$j]) !== undefined; /*6309*/
			if (_8y) {
				/*6312*/
				$put($1.numericruns, $1.i, $get($1.numericruns, $1.i + 2) + 2); /*6310*/
			} else {
				/*6312*/
				$put($1.numericruns, $1.i, 0); /*6312*/
			} /*6312*/
			var _96 = $k[--$j]; /*6314*/
			var _98 = $get($1.alphanumeric, _96) !== undefined; /*6314*/
			$k[$j++] = _96; /*6318*/
			if (_98) {
				/*6317*/
				$put($1.alphanumericruns, $1.i, $get($1.alphanumericruns, $1.i + 1) + 1); /*6315*/
			} else {
				/*6317*/
				$put($1.alphanumericruns, $1.i, 0); /*6317*/
			} /*6317*/
			var _9G = $k[--$j]; /*6319*/
			var _9I = $get($1.iso646, _9G) !== undefined; /*6319*/
			var _9K = $get($1.alphanumeric, _9G) !== undefined; /*6319*/
			if (_9I && (!_9K)) {
				/*6322*/
				$put($1.nextiso646only, $1.i, 0); /*6320*/
			} else {
				/*6322*/
				$put($1.nextiso646only, $1.i, $get($1.nextiso646only, $1.i + 1) + 1); /*6322*/
			} /*6322*/
		} /*6322*/
		$1.gpfenc = $a(252); /*6327*/
		$1.i = 0; /*6328*/
		$1.j = 0; /*6328*/
		$1.mode = "numeric"; /*6328*/
		for (;;) {
			/*6418*/
			if ($1.i == $1.gpf.length) { //no-else/*6330*/
				break; /*6330*/
			} /*6330*/
			for (;;) {
				/*6417*/
				if ($eq($1.mode, "numeric")) { //no-else/*6366*/
					if ($1.i <= ($1.gpf.length - 2)) {
						/*6363*/
						var _9Y = $s(2); /*6335*/
						var _9b = $get($1.gpf, $1.i); /*6336*/
						$k[$j++] = _9Y; /*6336*/
						$k[$j++] = _9Y; /*6336*/
						$k[$j++] = 0; /*6336*/
						$k[$j++] = _9b; /*6336*/
						if (_9b == $1.fnc1) { //no-else/*6336*/
							$j--; /*6336*/
							$k[$j++] = 94; /*6336*/
						} /*6336*/
						var _9d = $k[--$j]; /*6336*/
						var _9e = $k[--$j]; /*6336*/
						$put($k[--$j], _9e, _9d); /*6336*/
						var _9g = $k[--$j]; /*6337*/
						var _9j = $get($1.gpf, $1.i + 1); /*6337*/
						$k[$j++] = _9g; /*6337*/
						$k[$j++] = _9g; /*6337*/
						$k[$j++] = 1; /*6337*/
						$k[$j++] = _9j; /*6337*/
						if (_9j == $1.fnc1) { //no-else/*6337*/
							$j--; /*6337*/
							$k[$j++] = 94; /*6337*/
						} /*6337*/
						var _9l = $k[--$j]; /*6337*/
						var _9m = $k[--$j]; /*6337*/
						$put($k[--$j], _9m, _9l); /*6337*/
						var _9o = $k[--$j]; /*6338*/
						var _9q = $get($1.numeric, _9o) !== undefined; /*6338*/
						$k[$j++] = _9o; /*6342*/
						if (_9q) { //no-else/*6342*/
							$k[$j++] = $1.numeric; /*6339*/
							$1.encode(); /*6339*/
							$1.i = $1.i + 2; /*6340*/
							break; /*6341*/
						} /*6341*/
						$j--; /*6343*/
						$k[$j++] = $1.lalphanumeric; /*6344*/
						$k[$j++] = $1.numeric; /*6344*/
						$1.encode(); /*6344*/
						$1.mode = "alphanumeric"; /*6345*/
						break; /*6346*/
					} else {
						/*6363*/
						var _9x = $get($1.gpf, $1.i); /*6348*/
						if ((_9x < 48) || (_9x > 57)) { //no-else/*6352*/
							$k[$j++] = $1.lalphanumeric; /*6349*/
							$k[$j++] = $1.numeric; /*6349*/
							$1.encode(); /*6349*/
							$1.mode = "alphanumeric"; /*6350*/
							break; /*6351*/
						} /*6351*/
						$k[$j++] = 'rem'; /*6353*/
						$k[$j++] = ((((12 + 1) + $1.method.length) + $1.vlf.length) + $1.cdf.length) + $1.j; /*6353*/
						$1.rembits(); /*6353*/
						var _A4 = $k[--$j]; /*6353*/
						$1[$k[--$j]] = _A4; /*6353*/
						if (($1.rem >= 4) && ($1.rem <= 6)) {
							/*6363*/
							var _AB = $geti($strcpy($s(6), "000000"), 0, $1.rem); /*6355*/
							var _AG = $cvrs($s(4), $get($1.gpf, $1.i) - 47, 2); /*6356*/
							$puti(_AB, 4 - _AG.length, _AG); /*6357*/
							$k[$j++] = _AB; /*6357*/
							$k[$j++] = 'raw'; /*6357*/
							$1.encode(); /*6357*/
							$1.i = $1.i + 1; /*6358*/
							break; /*6359*/
						} else {
							/*6363*/
							var _AI = $s(2); /*6361*/
							$put(_AI, 0, $get($1.gpf, $1.i)); /*6361*/
							$put(_AI, 1, 94); /*6361*/
							$k[$j++] = _AI; /*6361*/
							$k[$j++] = $1.numeric; /*6361*/
							$1.encode(); /*6361*/
							$1.i = $1.i + 1; /*6362*/
							break; /*6363*/
						} /*6363*/
					} /*6363*/
				} /*6363*/
				if ($eq($1.mode, "alphanumeric")) { //no-else/*6393*/
					if ($get($1.gpf, $1.i) == $1.fnc1) { //no-else/*6374*/
						$k[$j++] = $1.fnc1; /*6370*/
						$k[$j++] = $1.alphanumeric; /*6370*/
						$1.encode(); /*6370*/
						$1.mode = "numeric"; /*6371*/
						$1.i = $1.i + 1; /*6372*/
						break; /*6373*/
					} /*6373*/
					var _AY = $get($1.gpf, $1.i); /*6375*/
					var _Aa = $get($1.iso646, _AY) !== undefined; /*6375*/
					var _Ac = $get($1.alphanumeric, _AY) !== undefined; /*6375*/
					if (_Aa && (!_Ac)) { //no-else/*6379*/
						$k[$j++] = $1.liso646; /*6376*/
						$k[$j++] = $1.alphanumeric; /*6376*/
						$1.encode(); /*6376*/
						$1.mode = "iso646"; /*6377*/
						break; /*6378*/
					} /*6378*/
					if ($get($1.numericruns, $1.i) >= 6) { //no-else/*6384*/
						$k[$j++] = $1.lnumeric; /*6381*/
						$k[$j++] = $1.alphanumeric; /*6381*/
						$1.encode(); /*6381*/
						$1.mode = "numeric"; /*6382*/
						break; /*6383*/
					} /*6383*/
					var _Am = $get($1.numericruns, $1.i); /*6385*/
					if ((_Am >= 4) && ((_Am + $1.i) == $1.gpf.length)) { //no-else/*6389*/
						$k[$j++] = $1.lnumeric; /*6386*/
						$k[$j++] = $1.alphanumeric; /*6386*/
						$1.encode(); /*6386*/
						$1.mode = "numeric"; /*6387*/
						break; /*6388*/
					} /*6388*/
					$k[$j++] = $get($1.gpf, $1.i); /*6390*/
					$k[$j++] = $1.alphanumeric; /*6390*/
					$1.encode(); /*6390*/
					$1.i = $1.i + 1; /*6391*/
					break; /*6392*/
				} /*6392*/
				if ($eq($1.mode, "iso646")) { //no-else/*6415*/
					if ($get($1.gpf, $1.i) == $1.fnc1) { //no-else/*6401*/
						$k[$j++] = $1.fnc1; /*6397*/
						$k[$j++] = $1.iso646; /*6397*/
						$1.encode(); /*6397*/
						$1.mode = "numeric"; /*6398*/
						$1.i = $1.i + 1; /*6399*/
						break; /*6400*/
					} /*6400*/
					if (($get($1.numericruns, $1.i) >= 4) && ($get($1.nextiso646only, $1.i) >= 10)) { //no-else/*6406*/
						$k[$j++] = $1.lnumeric; /*6403*/
						$k[$j++] = $1.iso646; /*6403*/
						$1.encode(); /*6403*/
						$1.mode = "numeric"; /*6404*/
						break; /*6405*/
					} /*6405*/
					if (($get($1.alphanumericruns, $1.i) >= 5) && ($get($1.nextiso646only, $1.i) >= 10)) { //no-else/*6411*/
						$k[$j++] = $1.lalphanumeric; /*6408*/
						$k[$j++] = $1.iso646; /*6408*/
						$1.encode(); /*6408*/
						$1.mode = "alphanumeric"; /*6409*/
						break; /*6410*/
					} /*6410*/
					$k[$j++] = $get($1.gpf, $1.i); /*6412*/
					$k[$j++] = $1.iso646; /*6412*/
					$1.encode(); /*6412*/
					$1.i = $1.i + 1; /*6413*/
					break; /*6414*/
				} /*6414*/
			} /*6414*/
		} /*6414*/
		$1.gpf = $geti($1.gpfenc, 0, $1.j); /*6419*/
		var _BW = ((((1 + 12) + $1.method.length) + $1.vlf.length) + $1.cdf.length) + $1.gpf.length; /*6423*/
		$k[$j++] = _BW; /*6423*/
		$k[$j++] = _BW; /*6423*/
		$1.rembits(); /*6423*/
		var _BX = $k[--$j]; /*6423*/
		$1.pad = $a(_BX); /*6423*/
		$k[$j++] = _BX; /*6430*/
		if ($1.vlf.length != 0) {
			/*6429*/
			var _Ba = $k[--$j]; /*6425*/
			var _Bc = ~~(($k[--$j] + _Ba) / 12); /*6426*/
			$put($1.vlf, 0, _Bc % 2); /*6426*/
			var _Be = (_Bc <= 14) ? 0 : 1; /*6427*/
			$put($1.vlf, 1, _Be); /*6427*/
		} else {
			/*6429*/
			$j -= 2; /*6429*/
		} /*6429*/
		if ($1.pad.length > 0) { //no-else/*6439*/
			for (var _Bj = 0, _Bi = $1.pad.length - 1; _Bj <= _Bi; _Bj += 5) {
				/*6435*/
				$1.i = _Bj; /*6433*/
				var _Bk = $1.pad; /*6434*/
				var _Bl = $1.i; /*6434*/
				var _Bm = $a([0, 0, 1, 0, 0]); /*6434*/
				var _Bn = $1.pad; /*6434*/
				var _Bo = $1.i; /*6434*/
				var _Bp = 5; /*6434*/
				var _Bq = _Bn.length - _Bo; /*6434*/
				if ((_Bn.length - _Bo) > 5) { //no-else/*6434*/
					var _ = _Bp; /*6434*/
					_Bp = _Bq; /*6434*/
					_Bq = _; /*6434*/
				} /*6434*/
				$puti(_Bk, _Bl, $geti(_Bm, 0, _Bq)); /*6434*/
			} /*6434*/
			if ($eq($1.mode, "numeric")) { //no-else/*6438*/
				$k[$j++] = Infinity; /*6437*/
				$k[$j++] = 0; /*6437*/
				$k[$j++] = 0; /*6437*/
				$k[$j++] = 0; /*6437*/
				$k[$j++] = 0; /*6437*/
				$aload($1.pad); /*6437*/
				$1.pad = $geti($a(), 0, $1.pad.length); /*6437*/
			} /*6437*/
		} /*6437*/
		$k[$j++] = Infinity; /*6448*/
		var _By = $1.linkage ? 1 : 0; /*6443*/
		$k[$j++] = _By; /*6444*/
		$forall($1.method, function() {
			/*6444*/
			var _C0 = $k[--$j]; /*6444*/
			$k[$j++] = _C0 - 48; /*6444*/
		}); /*6444*/
		$aload($1.vlf); /*6445*/
		$aload($1.cdf); /*6446*/
		$aload($1.gpf); /*6447*/
		$aload($1.pad); /*6448*/
		$1.binval = $a(); /*6448*/
		$1.datalen = ~~($1.binval.length / 12); /*6450*/
		$1.ncr = function() {
			var _C7 = $k[--$j]; /*6453*/
			var _C8 = $k[--$j]; /*6453*/
			var _C9 = _C8 - _C7; /*6453*/
			if (_C7 < (_C8 - _C7)) { //no-else/*6453*/
				var _ = _C9; /*6453*/
				_C9 = _C7; /*6453*/
				_C7 = _; /*6453*/
			} /*6453*/
			$k[$j++] = _C9; /*6460*/
			$k[$j++] = 1; /*6460*/
			$k[$j++] = 1; /*6460*/
			for (var _CB = _C8, _CA = _C7 + 1; _CB >= _CA; _CB -= 1) {
				/*6460*/
				var _CC = $k[--$j]; /*6456*/
				var _CD = $k[--$j]; /*6457*/
				var _CE = $k[--$j]; /*6457*/
				$k[$j++] = _CE; /*6459*/
				$k[$j++] = _CD; /*6459*/
				$k[$j++] = _CC * _CB; /*6459*/
				if ($le(_CD, _CE)) { //no-else/*6459*/
					var _CF = $k[--$j]; /*6458*/
					var _CG = $k[--$j]; /*6458*/
					$k[$j++] = _CG + 1; /*6458*/
					$k[$j++] = ~~(_CF / _CG); /*6458*/
				} /*6458*/
			} /*6458*/
			for (;;) {
				/*6464*/
				var _CH = $k[--$j]; /*6462*/
				var _CI = $k[--$j]; /*6462*/
				var _CJ = $k[--$j]; /*6462*/
				$k[$j++] = _CJ; /*6462*/
				$k[$j++] = _CI; /*6462*/
				$k[$j++] = _CH; /*6462*/
				if ($gt(_CI, _CJ)) { //no-else/*6462*/
					break; /*6462*/
				} /*6462*/
				var _CK = $k[--$j]; /*6463*/
				var _CL = $k[--$j]; /*6463*/
				$k[$j++] = _CL + 1; /*6463*/
				$k[$j++] = ~~(_CK / _CL); /*6463*/
			} /*6463*/
			var _CM = $k[--$j]; /*6465*/
			var _CN = $k[--$j]; /*6465*/
			var _CO = $k[--$j]; /*6465*/
			$k[$j++] = _CM; /*6465*/
		}; /*6466*/
		$1.getRSSwidths = function() {
			$1.oe = $k[--$j]; /*6469*/
			$1.el = $k[--$j]; /*6470*/
			$1.mw = $k[--$j]; /*6471*/
			$1.nm = $k[--$j]; /*6472*/
			$1.val = $k[--$j]; /*6473*/
			$1.out = $a($1.el); /*6474*/
			$1.mask = 0; /*6475*/
			for (var _CY = 0, _CX = $1.el - 2; _CY <= _CX; _CY += 1) {
				/*6502*/
				$1.bar = _CY; /*6477*/
				$1.ew = 1; /*6478*/
				var _Ca = $1.bar; /*6479*/
				$1.mask = $1.mask | ((_Ca < 0 ? 1 >>> -_Ca : 1 << _Ca)); /*6479*/
				for (;;) {
					/*6498*/
					$k[$j++] = 'sval'; /*6480*/
					$k[$j++] = ($1.nm - $1.ew) - 1; /*6480*/
					$k[$j++] = ($1.el - $1.bar) - 2; /*6480*/
					$1.ncr(); /*6480*/
					var _Cf = $k[--$j]; /*6480*/
					$1[$k[--$j]] = _Cf; /*6480*/
					if (($1.oe && ($1.mask == 0)) && (((($1.nm - $1.ew) - ($1.el * 2)) + ($1.bar * 2)) >= -2)) { //no-else/*6483*/
						$k[$j++] = 'sval'; /*6482*/
						$k[$j++] = $1.sval; /*6482*/
						$k[$j++] = (($1.nm - $1.ew) - $1.el) + $1.bar; /*6482*/
						$k[$j++] = ($1.el - $1.bar) - 2; /*6482*/
						$1.ncr(); /*6482*/
						var _Cu = $k[--$j]; /*6482*/
						var _Cv = $k[--$j]; /*6482*/
						$1[$k[--$j]] = _Cv - _Cu; /*6482*/
					} /*6482*/
					if (($1.el - $1.bar) > 2) {
						/*6492*/
						$1.lval = 0; /*6485*/
						for (var _D5 = ((($1.nm - $1.ew) - $1.el) + $1.bar) + 2, _D4 = $1.mw + 1; _D5 >= _D4; _D5 -= 1) {
							/*6489*/
							$k[$j++] = (($1.nm - _D5) - $1.ew) - 1; /*6487*/
							$k[$j++] = ($1.el - $1.bar) - 3; /*6487*/
							$1.ncr(); /*6487*/
							$1.lval = $k[--$j] + $1.lval; /*6488*/
						} /*6488*/
						$1.sval = $1.sval - ($1.lval * (($1.el - $1.bar) - 1)); /*6490*/
					} else {
						/*6492*/
						if (($1.nm - $1.ew) > $1.mw) { //no-else/*6492*/
							$1.sval = $1.sval - 1; /*6492*/
						} /*6492*/
					} /*6492*/
					$1.val = $1.val - $1.sval; /*6494*/
					if ($1.val < 0) { //no-else/*6495*/
						break; /*6495*/
					} /*6495*/
					$1.ew = $1.ew + 1; /*6496*/
					var _DP = $1.bar; /*6497*/
					$1.mask = $1.mask & (~((_DP < 0 ? 1 >>> -_DP : 1 << _DP))); /*6497*/
				} /*6497*/
				$1.val = $1.val + $1.sval; /*6499*/
				$1.nm = $1.nm - $1.ew; /*6500*/
				$put($1.out, $1.bar, $1.ew); /*6501*/
			} /*6501*/
			$put($1.out, $1.el - 1, $1.nm); /*6503*/
			$k[$j++] = $1.out; /*6504*/
		}; /*6505*/
		$1.tab174 = $a([347, 0, 12, 5, 7, 2, 87, 4, 1387, 348, 10, 7, 5, 4, 52, 20, 2947, 1388, 8, 9, 4, 5, 30, 52, 3987, 2948, 6, 11, 3, 6, 10, 104, 4191, 3988, 4, 13, 1, 8, 1, 204]); /*6513*/
		$1.dxw = $a($1.datalen); /*6515*/
		for (var _Dg = 0, _Df = $1.datalen - 1; _Dg <= _Df; _Dg += 1) {
			/*6556*/
			$1.x = _Dg; /*6519*/
			$1.d = $geti($1.binval, $1.x * 12, 12); /*6521*/
			$k[$j++] = 'd'; /*6522*/
			$k[$j++] = 0; /*6522*/
			for (var _Dk = 0; _Dk <= 11; _Dk += 1) {
				/*6522*/
				$1.j = _Dk; /*6522*/
				var _Dp = $k[--$j]; /*6522*/
				$k[$j++] = _Dp + ((~~Math.pow(2, 11 - $1.j)) * $get($1.d, $1.j)); /*6522*/
			} /*6522*/
			var _Dq = $k[--$j]; /*6522*/
			$1[$k[--$j]] = _Dq; /*6522*/
			$1.j = 0; /*6524*/
			for (;;) {
				/*6534*/
				if ($le($1.d, $get($1.tab174, $1.j))) { //no-else/*6532*/
					$forall($geti($1.tab174, $1.j + 1, 7)); /*6526*/
					$1.dte = $k[--$j]; /*6527*/
					$1.dto = $k[--$j]; /*6527*/
					$1.dmwe = $k[--$j]; /*6528*/
					$1.dmwo = $k[--$j]; /*6528*/
					$1.dele = $k[--$j]; /*6529*/
					$1.delo = $k[--$j]; /*6529*/
					$1.dgs = $k[--$j]; /*6530*/
					break; /*6531*/
				} /*6531*/
				$1.j = $1.j + 8; /*6533*/
			} /*6533*/
			$k[$j++] = 'dwo'; /*6536*/
			$k[$j++] = ~~(($1.d - $1.dgs) / $1.dte); /*6536*/
			$k[$j++] = $1.delo; /*6536*/
			$k[$j++] = $1.dmwo; /*6536*/
			$k[$j++] = 4; /*6536*/
			$k[$j++] = true; /*6536*/
			$1.getRSSwidths(); /*6536*/
			var _EC = $k[--$j]; /*6536*/
			$1[$k[--$j]] = _EC; /*6536*/
			$k[$j++] = 'dwe'; /*6537*/
			$k[$j++] = ($1.d - $1.dgs) % $1.dte; /*6537*/
			$k[$j++] = $1.dele; /*6537*/
			$k[$j++] = $1.dmwe; /*6537*/
			$k[$j++] = 4; /*6537*/
			$k[$j++] = false; /*6537*/
			$1.getRSSwidths(); /*6537*/
			var _EJ = $k[--$j]; /*6537*/
			$1[$k[--$j]] = _EJ; /*6537*/
			$1.dw = $a(8); /*6539*/
			if (($1.x % 2) == 0) {
				/*6550*/
				for (var _EN = 0; _EN <= 3; _EN += 1) {
					/*6545*/
					$1.j = _EN; /*6542*/
					$put($1.dw, 7 - ($1.j * 2), $get($1.dwo, $1.j)); /*6543*/
					$put($1.dw, 6 - ($1.j * 2), $get($1.dwe, $1.j)); /*6544*/
				} /*6544*/
			} else {
				/*6550*/
				for (var _EY = 0; _EY <= 3; _EY += 1) {
					/*6551*/
					$1.j = _EY; /*6548*/
					$put($1.dw, $1.j * 2, $get($1.dwo, $1.j)); /*6549*/
					$put($1.dw, ($1.j * 2) + 1, $get($1.dwe, $1.j)); /*6550*/
				} /*6550*/
			} /*6550*/
			$put($1.dxw, $1.x, $1.dw); /*6554*/
		} /*6554*/
		$1.finderwidths = $a([1, 8, 4, 1, 1, 1, 1, 4, 8, 1, 3, 6, 4, 1, 1, 1, 1, 4, 6, 3, 3, 4, 6, 1, 1, 1, 1, 6, 4, 3, 3, 2, 8, 1, 1, 1, 1, 8, 2, 3, 2, 6, 5, 1, 1, 1, 1, 5, 6, 2, 2, 2, 9, 1, 1, 1, 1, 9, 2, 2]); /*6565*/
		$1.finderseq = $a([$a([0, 1]), $a([0, 3, 2]), $a([0, 5, 2, 7]), $a([0, 9, 2, 7, 4]), $a([0, 9, 2, 7, 6, 11]), $a([0, 9, 2, 7, 8, 11, 10]), $a([0, 1, 2, 3, 4, 5, 6, 7]), $a([0, 1, 2, 3, 4, 5, 6, 9, 8]), $a([0, 1, 2, 3, 4, 5, 6, 9, 10, 11]), $a([0, 1, 2, 3, 4, 7, 6, 9, 8, 11, 10])]); /*6578*/
		$1.seq = $get($1.finderseq, ~~(($1.datalen - 2) / 2)); /*6580*/
		$1.fxw = $a($1.seq.length); /*6581*/
		for (var _F5 = 0, _F4 = $1.seq.length - 1; _F5 <= _F4; _F5 += 1) {
			/*6585*/
			$1.x = _F5; /*6583*/
			$put($1.fxw, $1.x, $geti($1.finderwidths, $get($1.seq, $1.x) * 5, 5)); /*6584*/
		} /*6584*/
		$1.checkweights = $a([-1, -1, -1, -1, -1, -1, -1, -1, 77, 96, 32, 81, 27, 9, 3, 1, 20, 60, 180, 118, 143, 7, 21, 63, 205, 209, 140, 117, 39, 13, 145, 189, 193, 157, 49, 147, 19, 57, 171, 91, 132, 44, 85, 169, 197, 136, 186, 62, 185, 133, 188, 142, 4, 12, 36, 108, 50, 87, 29, 80, 97, 173, 128, 113, 150, 28, 84, 41, 123, 158, 52, 156, 166, 196, 206, 139, 187, 203, 138, 46, 76, 17, 51, 153, 37, 111, 122, 155, 146, 119, 110, 107, 106, 176, 129, 43, 16, 48, 144, 10, 30, 90, 59, 177, 164, 125, 112, 178, 200, 137, 116, 109, 70, 210, 208, 202, 184, 130, 179, 115, 190, 204, 68, 93, 31, 151, 191, 134, 148, 22, 66, 198, 172, 94, 71, 2, 40, 154, 192, 64, 162, 54, 18, 6, 120, 149, 25, 75, 14, 42, 126, 167, 175, 199, 207, 69, 23, 78, 26, 79, 103, 98, 83, 38, 114, 131, 182, 124, 159, 53, 88, 170, 127, 183, 61, 161, 55, 165, 73, 8, 24, 72, 5, 15, 89, 100, 174, 58, 160, 194, 135, 45]); /*6612*/
		$k[$j++] = Infinity; /*6615*/
		$forall($1.seq, function() {
			/*6615*/
			$aload($geti($1.checkweights, $k[--$j] * 16, 16)); /*6615*/
		}); /*6615*/
		var _FI = $a(); /*6615*/
		$1.checkweightseq = $geti(_FI, 8, _FI.length - 8); /*6616*/
		$k[$j++] = Infinity; /*6619*/
		var _FK = $1.dxw; /*6619*/
		for (var _FL = 0, _FM = _FK.length; _FL < _FM; _FL++) {
			/*6619*/
			$forall($get(_FK, _FL)); /*6619*/
		} /*6619*/
		$1.widths = $a(); /*6619*/
		$1.checksum = 0; /*6622*/
		for (var _FR = 0, _FQ = $1.widths.length - 1; _FR <= _FQ; _FR += 1) {
			/*6626*/
			$1.i = _FR; /*6624*/
			$1.checksum = $1.checksum + ($get($1.widths, $1.i) * $get($1.checkweightseq, $1.i)); /*6625*/
		} /*6625*/
		$1.checksum = ($1.checksum % 211) + (($1.datalen - 3) * 211); /*6627*/
		$1.i = 0; /*6629*/
		for (;;) {
			/*6639*/
			if ($1.checksum <= $get($1.tab174, $1.i)) { //no-else/*6637*/
				$forall($geti($1.tab174, $1.i + 1, 7)); /*6631*/
				$1.cte = $k[--$j]; /*6632*/
				$1.cto = $k[--$j]; /*6632*/
				$1.cmwe = $k[--$j]; /*6633*/
				$1.cmwo = $k[--$j]; /*6633*/
				$1.cele = $k[--$j]; /*6634*/
				$1.celo = $k[--$j]; /*6634*/
				$1.cgs = $k[--$j]; /*6635*/
				break; /*6636*/
			} /*6636*/
			$1.i = $1.i + 8; /*6638*/
		} /*6638*/
		$k[$j++] = 'cwo'; /*6641*/
		$k[$j++] = ~~(($1.checksum - $1.cgs) / $1.cte); /*6641*/
		$k[$j++] = $1.celo; /*6641*/
		$k[$j++] = $1.cmwo; /*6641*/
		$k[$j++] = 4; /*6641*/
		$k[$j++] = true; /*6641*/
		$1.getRSSwidths(); /*6641*/
		var _Fv = $k[--$j]; /*6641*/
		$1[$k[--$j]] = _Fv; /*6641*/
		$k[$j++] = 'cwe'; /*6642*/
		$k[$j++] = ($1.checksum - $1.cgs) % $1.cte; /*6642*/
		$k[$j++] = $1.cele; /*6642*/
		$k[$j++] = $1.cmwe; /*6642*/
		$k[$j++] = 4; /*6642*/
		$k[$j++] = false; /*6642*/
		$1.getRSSwidths(); /*6642*/
		var _G2 = $k[--$j]; /*6642*/
		$1[$k[--$j]] = _G2; /*6642*/
		$1.cw = $a(8); /*6644*/
		for (var _G5 = 0; _G5 <= 3; _G5 += 1) {
			/*6649*/
			$1.i = _G5; /*6646*/
			$put($1.cw, $1.i * 2, $get($1.cwo, $1.i)); /*6647*/
			$put($1.cw, ($1.i * 2) + 1, $get($1.cwe, $1.i)); /*6648*/
		} /*6648*/
		var _GG = $a(22); /*6651*/
		$put(_GG, 0, $1.cw); /*6652*/
		$puti(_GG, 1, $1.dxw); /*6652*/
		$1.dxw = $geti(_GG, 0, $1.datalen + 1); /*6653*/
		$1.datalen = $1.dxw.length; /*6654*/
		$1.rows = $a(~~Math.ceil($1.datalen / $1.segments)); /*6657*/
		$1.numrows = $1.rows.length; /*6658*/
		for (var _GS = 0, _GR = $1.numrows - 1; _GS <= _GR; _GS += 1) {
			/*6673*/
			$1.r = _GS; /*6660*/
			$k[$j++] = Infinity; /*6661*/
			if ((($1.segments % 4) != 0) && (($1.r % 2) == 1)) { //no-else/*6662*/
				$k[$j++] = 0; /*6662*/
			} /*6662*/
			$k[$j++] = 1; /*6670*/
			$k[$j++] = 1; /*6670*/
			for (var _GX = 0, _GW = $1.segments - 1; _GX <= _GW; _GX += 1) {
				/*6670*/
				$1.pos = _GX + ($1.r * $1.segments); /*6665*/
				if ($1.pos < $1.datalen) { //no-else/*6669*/
					$forall($get($1.dxw, $1.pos)); /*6667*/
					if (($1.pos % 2) == 0) { //no-else/*6668*/
						$forall($get($1.fxw, ~~($1.pos / 2))); /*6668*/
					} /*6668*/
				} /*6668*/
			} /*6668*/
			var _Gj = $counttomark() + 2; /*6672*/
			$k[$j++] = 1; /*6672*/
			$k[$j++] = 1; /*6672*/
			$astore($a(_Gj)); /*6672*/
			$put($1.rows, $1.r, $k[--$j]); /*6672*/
			$j--; /*6672*/
		} /*6672*/
		if ($ne($1.format, "expandedstacked")) {
			/*6797*/
			var _Gq = $get($1.rows, 0); /*6678*/
			$1.sbs = $geti(_Gq, 1, _Gq.length - 1); /*6678*/
			$k[$j++] = Infinity; /*6687*/
			$k[$j++] = 1; /*6686*/
			for (var _Gu = 0, _Gt = $1.datalen - 1; _Gu <= _Gt; _Gu += 1) {
				/*6686*/
				$1.i = _Gu; /*6683*/
				$forall($get($1.dxw, $1.i)); /*6684*/
				if (($1.i % 2) == 0) { //no-else/*6685*/
					$forall($get($1.fxw, ~~($1.i / 2))); /*6685*/
				} /*6685*/
			} /*6685*/
			$k[$j++] = 1; /*6687*/
			$k[$j++] = 1; /*6687*/
			$1.sbs = $a(); /*6687*/
			$k[$j++] = Infinity; /*6695*/
			var _H3 = $1.sbs; /*6692*/
			$k[$j++] = Infinity; /*6693*/
			for (var _H5 = 0, _H6 = ~~(($1.sbs.length + 1) / 2); _H5 < _H6; _H5++) {
				/*6693*/
				$k[$j++] = $1.height; /*6693*/
			} /*6693*/
			var _H8 = $a(); /*6693*/
			$k[$j++] = Infinity; /*6694*/
			for (var _HA = 0, _HB = ~~(($1.sbs.length + 1) / 2); _HA < _HB; _HA++) {
				/*6694*/
				$k[$j++] = 0; /*6694*/
			} /*6694*/
			var _HC = $a(); /*6694*/
			$k[$j++] = 'ren'; /*6695*/
			$k[$j++] = $0.renlinear; /*6695*/
			$k[$j++] = 'sbs'; /*6695*/
			$k[$j++] = _H3; /*6695*/
			$k[$j++] = 'bhs'; /*6695*/
			$k[$j++] = _H8; /*6695*/
			$k[$j++] = 'bbs'; /*6695*/
			$k[$j++] = _HC; /*6695*/
			$k[$j++] = 'opt'; /*6695*/
			$k[$j++] = $1.options; /*6695*/
			var _HE = $d(); /*6695*/
			$k[$j++] = _HE; /*6698*/
			if (!$1.dontdraw) { //no-else/*6698*/
				$0.renlinear(); /*6698*/
			} /*6698*/
		} else {
			/*6797*/
			$1.seps = $a($1.numrows); /*6702*/
			for (var _HK = 0, _HJ = $1.numrows - 1; _HK <= _HJ; _HK += 1) {
				/*6758*/
				$1.r = _HK; /*6705*/
				$1.row = $get($1.rows, $1.r); /*6706*/
				$k[$j++] = Infinity; /*6709*/
				for (var _HQ = 0, _HP = $1.row.length - 1; _HQ <= _HP; _HQ += 2) {
					/*6714*/
					$1.i = _HQ; /*6711*/
					for (var _HU = 0, _HV = $get($1.row, $1.i); _HU < _HV; _HU++) {
						/*6712*/
						$k[$j++] = 0; /*6712*/
					} /*6712*/
					if ($1.i < ($1.row.length - 1)) { //no-else/*6713*/
						for (var _Hb = 0, _Hc = $get($1.row, $1.i + 1); _Hb < _Hc; _Hb++) {
							/*6713*/
							$k[$j++] = 1; /*6713*/
						} /*6713*/
					} /*6713*/
				} /*6713*/
				$astore($a($counttomark())); /*6715*/
				$1.row = $k[--$j]; /*6715*/
				$j--; /*6715*/
				$k[$j++] = Infinity; /*6718*/
				$forall($1.row, function() {
					/*6718*/
					var _Hh = $k[--$j]; /*6718*/
					$k[$j++] = 1 - _Hh; /*6718*/
				}); /*6718*/
				$1.sep = $a(); /*6718*/
				$k[$j++] = Infinity; /*6721*/
				for (var _Hl = 19, _Hk = $1.row.length - 13; _Hl <= _Hk; _Hl += 98) {
					/*6720*/
					$k[$j++] = _Hl; /*6720*/
				} /*6720*/
				for (var _Ho = 68, _Hn = $1.row.length - 13; _Ho <= _Hn; _Ho += 98) {
					/*6721*/
					$k[$j++] = _Ho; /*6721*/
				} /*6721*/
				$1.finderpos = $a(); /*6721*/
				var _Hq = $1.finderpos; /*6723*/
				for (var _Hr = 0, _Hs = _Hq.length; _Hr < _Hs; _Hr++) {
					/*6737*/
					var _Ht = $get(_Hq, _Hr); /*6737*/
					for (var _Hv = _Ht, _Hu = _Ht + 14; _Hv <= _Hu; _Hv += 1) {
						/*6736*/
						$1.i = _Hv; /*6725*/
						if ($get($1.row, $1.i) == 0) {
							/*6733*/
							if ($get($1.row, $1.i - 1) == 1) {
								/*6730*/
								$k[$j++] = 1; /*6728*/
							} else {
								/*6730*/
								var _I5 = ($get($1.sep, $1.i - 1) == 0) ? 1 : 0; /*6730*/
								$k[$j++] = _I5; /*6730*/
							} /*6730*/
						} else {
							/*6733*/
							$k[$j++] = 0; /*6733*/
						} /*6733*/
						$put($1.sep, $1.i, $k[--$j]); /*6735*/
					} /*6735*/
				} /*6735*/
				$puti($1.sep, 0, $a([0, 0, 0, 0])); /*6738*/
				$puti($1.sep, $1.row.length - 4, $a([0, 0, 0, 0])); /*6739*/
				if ((($1.segments % 4) == 0) && (($1.r % 2) == 1)) { //no-else/*6753*/
					if (($get($1.rows, $1.r).length != $get($1.rows, 0).length) && (($1.finderpos.length % 2) == 1)) {
						/*6751*/
						$k[$j++] = Infinity; /*6745*/
						$k[$j++] = 0; /*6745*/
						$aload($1.row); /*6745*/
						$1.row = $a(); /*6745*/
						$k[$j++] = Infinity; /*6746*/
						$k[$j++] = 0; /*6746*/
						$aload($1.sep); /*6746*/
						$1.sep = $a(); /*6746*/
					} else {
						/*6751*/
						for (var _IR = $1.row.length - 1; _IR >= 0; _IR -= 1) {
							/*6748*/
							$k[$j++] = $get($1.row, _IR); /*6748*/
						} /*6748*/
						$astore($1.row); /*6749*/
						$j--; /*6749*/
						for (var _IW = $1.sep.length - 1; _IW >= 0; _IW -= 1) {
							/*6750*/
							$k[$j++] = $get($1.sep, _IW); /*6750*/
						} /*6750*/
						$astore($1.sep); /*6751*/
						$j--; /*6751*/
					} /*6751*/
				} /*6751*/
				$put($1.rows, $1.r, $1.row); /*6755*/
				$put($1.seps, $1.r, $1.sep); /*6756*/
			} /*6756*/
			$1.pixx = $get($1.rows, 0).length; /*6761*/
			$k[$j++] = Infinity; /*6762*/
			for (var _Ij = 0, _Ik = $1.pixx; _Ij < _Ik; _Ij++) {
				/*6762*/
				$k[$j++] = 0; /*6762*/
			} /*6762*/
			var _Il = $a(); /*6762*/
			$puti(_Il, 0, $get($1.rows, $1.numrows - 1)); /*6762*/
			$put($1.rows, $1.numrows - 1, _Il); /*6763*/
			$k[$j++] = Infinity; /*6764*/
			for (var _Is = 0, _It = $1.pixx; _Is < _It; _Is++) {
				/*6764*/
				$k[$j++] = 0; /*6764*/
			} /*6764*/
			var _Iu = $a(); /*6764*/
			$puti(_Iu, 0, $get($1.seps, $1.numrows - 1)); /*6764*/
			$put($1.seps, $1.numrows - 1, _Iu); /*6765*/
			$k[$j++] = Infinity; /*6768*/
			for (var _J1 = 0, _J2 = (~~($1.pixx / 2)) + 1; _J1 < _J2; _J1++) {
				/*6768*/
				$k[$j++] = 0; /*6768*/
				$k[$j++] = 1; /*6768*/
			} /*6768*/
			$1.sep = $geti($a(), 0, $1.pixx); /*6768*/
			$puti($1.sep, 0, $a([0, 0, 0, 0])); /*6769*/
			$puti($1.sep, $1.pixx - 4, $a([0, 0, 0, 0])); /*6770*/
			$k[$j++] = Infinity; /*6782*/
			for (var _JD = 0, _JC = $1.numrows - 1; _JD <= _JC; _JD += 1) {
				/*6784*/
				$1.r = _JD; /*6775*/
				if ($1.r != 0) { //no-else/*6778*/
					$aload($get($1.seps, $1.r)); /*6777*/
				} /*6777*/
				for (var _JJ = 0, _JK = $1.barxmult; _JJ < _JK; _JJ++) {
					/*6779*/
					$aload($get($1.rows, $1.r)); /*6779*/
				} /*6779*/
				if ($1.r != ($1.numrows - 1)) { //no-else/*6783*/
					$aload($get($1.seps, $1.r)); /*6781*/
					$aload($1.sep); /*6782*/
				} /*6782*/
			} /*6782*/
			$1.pixs = $a(); /*6782*/
			var _Jd = new Map([
				["ren", $0.renmatrix],
				["pixs", $1.pixs],
				["pixx", $1.pixx],
				["pixy", ~~($1.pixs.length / $1.pixx)],
				["height", (~~($1.pixs.length / $1.pixx)) / 72],
				["width", $1.pixx / 72],
				["opt", $1.options]
			]); /*6794*/
			$k[$j++] = _Jd; /*6797*/
			if (!$1.dontdraw) { //no-else/*6797*/
				$0.renmatrix(); /*6797*/
			} /*6797*/
		} /*6797*/
	};
	$0.databarexpandedstacked = function() {
		var $1 = {}; /*6829*/
		$1.options = $k[--$j]; /*6831*/
		$1.barcode = $k[--$j]; /*6832*/
		$1.dontdraw = false; /*6834*/
		$forall($1.options, function() {
			/*6845*/
			var _3 = $k[--$j]; /*6845*/
			$1[$k[--$j]] = _3; /*6845*/
		}); /*6845*/
		$put($1.options, "dontdraw", true); /*6848*/
		$put($1.options, "format", "expandedstacked"); /*6849*/
		$k[$j++] = 'args'; /*6851*/
		$k[$j++] = $1.barcode; /*6851*/
		$k[$j++] = $1.options; /*6851*/
		$0.databarexpanded(); /*6851*/
		var _9 = $k[--$j]; /*6851*/
		$1[$k[--$j]] = _9; /*6851*/
		$put($1.args, "opt", $1.options); /*6853*/
		$k[$j++] = $1.args; /*6856*/
		if (!$1.dontdraw) { //no-else/*6856*/
			$0.renmatrix(); /*6856*/
		} /*6856*/
	};
	$0.gs1northamericancoupon = function() {
		var $1 = {}; /*6886*/
		$1.options = $k[--$j]; /*6888*/
		$1.barcode = $k[--$j]; /*6889*/
		$1.dontdraw = false; /*6891*/
		$1.includetext = false; /*6893*/
		$1.coupontextfont = "OCR-B"; /*6894*/
		$1.coupontextsize = 9; /*6895*/
		$1.coupontextxoffset = "unset"; /*6896*/
		$1.coupontextyoffset = "unset"; /*6897*/
		$forall($1.options, function() {
			/*6908*/
			var _3 = $k[--$j]; /*6908*/
			$1[$k[--$j]] = _3; /*6908*/
		}); /*6908*/
		$1.coupontextfont = "" + $1.coupontextfont; /*6910*/
		$1.coupontextsize = +$1.coupontextsize; /*6911*/
		if ($ne($1.coupontextxoffset, "unset")) { //no-else/*6912*/
			$1.coupontextxoffset = +$1.coupontextxoffset; /*6912*/
		} /*6912*/
		if ($ne($1.coupontextyoffset, "unset")) { //no-else/*6913*/
			$1.coupontextyoffset = +$1.coupontextyoffset; /*6913*/
		} /*6913*/
		$1.expand = function() {
			$1.in = $k[--$j]; /*6917*/
			$1.out = $s($1.in.length); /*6918*/
			$1.j = 0; /*6919*/
			$k[$j++] = $1.in; /*6933*/
			for (;;) {
				/*6933*/
				$search($k[--$j], "^"); /*6922*/
				if ($k[--$j]) {
					/*6931*/
					var _H = $k[--$j]; /*6923*/
					$puti($1.out, $1.j, _H); /*6923*/
					$1.j = (_H.length + $1.j) + 1; /*6924*/
					$j--; /*6925*/
					var _L = $k[--$j]; /*6926*/
					$put($1.out, $1.j - 1, ~~$z($geti(_L, 0, 3))); /*6926*/
					$k[$j++] = $geti(_L, 3, _L.length - 3); /*6927*/
				} else {
					/*6931*/
					var _Q = $k[--$j]; /*6929*/
					$puti($1.out, $1.j, _Q); /*6929*/
					$1.j = _Q.length + $1.j; /*6930*/
					$k[$j++] = $geti($1.out, 0, $1.j); /*6931*/
					break; /*6931*/
				} /*6931*/
			} /*6931*/
		}; /*6934*/
		$1.ais = $a([]); /*6937*/
		$1.vals = $a([]); /*6938*/
		var _Z = $1.barcode; /*6939*/
		$k[$j++] = $geti(_Z, 1, _Z.length - 1); /*6952*/
		for (;;) {
			/*6952*/
			var _b = $k[--$j]; /*6941*/
			$k[$j++] = _b; /*6941*/
			if ($eq(_b, "")) { //no-else/*6941*/
				break; /*6941*/
			} /*6941*/
			$search($k[--$j], ")"); /*6942*/
			$j--; /*6942*/
			var _d = $k[--$j]; /*6943*/
			var _e = $k[--$j]; /*6943*/
			var _f = $k[--$j]; /*6944*/
			$k[$j++] = _d; /*6944*/
			$search(_f, "("); /*6944*/
			if ($k[--$j]) {
				/*6947*/
				var _h = $k[--$j]; /*6945*/
				var _i = $k[--$j]; /*6945*/
				var _j = $k[--$j]; /*6945*/
				var _k = $k[--$j]; /*6945*/
				$k[$j++] = _j; /*6945*/
				$k[$j++] = _k; /*6945*/
				$k[$j++] = _h; /*6945*/
			} else {
				/*6947*/
				var _l = $k[--$j]; /*6947*/
				var _m = $k[--$j]; /*6947*/
				$k[$j++] = ""; /*6947*/
				$k[$j++] = _m; /*6947*/
				$k[$j++] = _l; /*6947*/
			} /*6947*/
			$k[$j++] = Infinity; /*6949*/
			$aload($1.ais); /*6949*/
			var _p = $k[$j - 1 - ($counttomark() + 2)]; /*6949*/
			$k[$j++] = _p; /*6949*/
			$1.ais = $a(); /*6949*/
			$k[$j++] = Infinity; /*6950*/
			$aload($1.vals); /*6950*/
			var _t = $k[$j - 1 - ($counttomark() + 1)]; /*6950*/
			$k[$j++] = _t; /*6950*/
			$1.expand(); /*6950*/
			$1.vals = $a(); /*6950*/
			$j -= 2; /*6951*/
		} /*6951*/
		$j--; /*6953*/
		if ($1.ais.length != 1) { //no-else/*6958*/
			$k[$j++] = 'bwipp.gs1northamericancouponBadAIStructure'; /*6957*/
			$k[$j++] = "A GS1 North American Coupon should consist of a single AI (8110)"; /*6957*/
			$0.raiseerror(); /*6957*/
		} /*6957*/
		if ($ne($get($1.ais, 0), "8110")) { //no-else/*6961*/
			$k[$j++] = 'bwipp.gs1northamericancouponBadAIStructure'; /*6960*/
			$k[$j++] = "A GS1 North American Coupon should consist of a single AI (8110)"; /*6960*/
			$0.raiseerror(); /*6960*/
		} /*6960*/
		$1.val = $get($1.vals, 0); /*6964*/
		$1.vli = $get($1.val, 0) - 48; /*6965*/
		if (($1.vli < 0) || ($1.vli > 6)) { //no-else/*6968*/
			$k[$j++] = 'bwipp.gs1northamericancouponBadVLI'; /*6967*/
			$k[$j++] = "The AI (8110) data should start with a Company Prefix length indicator in the range 0 to 6"; /*6967*/
			$0.raiseerror(); /*6967*/
		} /*6967*/
		$1.gcp = $geti($1.val, 1, $1.vli + 6); /*6969*/
		$1.cod = $geti($1.val, $1.vli + 7, 6); /*6970*/
		$1.coupontext = $s($1.gcp.length + 7); /*6971*/
		$puti($1.coupontext, 0, $1.gcp); /*6972*/
		$puti($1.coupontext, $1.gcp.length, "-"); /*6973*/
		$puti($1.coupontext, $1.gcp.length + 1, $1.cod); /*6974*/
		$put($1.options, "dontdraw", true); /*6977*/
		$k[$j++] = 'args'; /*6979*/
		$k[$j++] = $1.barcode; /*6979*/
		$k[$j++] = $1.options; /*6979*/
		$0.databarexpandedstacked(); /*6979*/
		var _1M = $k[--$j]; /*6979*/
		$1[$k[--$j]] = _1M; /*6979*/
		if ($1.includetext) { //no-else/*6998*/
			if ($1.coupontextxoffset == "unset") { //no-else/*6985*/
				$1.coupontextxoffset = 0; /*6984*/
			} /*6984*/
			if ($1.coupontextyoffset == "unset") { //no-else/*6988*/
				$1.coupontextyoffset = ($get($1.args, "height") * 72) + 3; /*6987*/
			} /*6987*/
			var _1U = $get($1.args, "txt") !== undefined; /*6989*/
			if (_1U) {
				/*6996*/
				$1.txt = $get($1.args, "txt"); /*6990*/
				$1.newtxt = $a($1.txt.length + 1); /*6991*/
				$puti($1.newtxt, 0, $1.txt); /*6992*/
				$put($1.newtxt, $1.newtxt.length - 1, $a([$1.coupontext, $1.coupontextxoffset, $1.coupontextyoffset, $1.coupontextfont, $1.coupontextsize])); /*6993*/
				$put($1.args, "txt", $1.newtxt); /*6994*/
			} else {
				/*6996*/
				$put($1.args, "txt", $a([$a([$1.coupontext, $1.coupontextxoffset, $1.coupontextyoffset, $1.coupontextfont, $1.coupontextsize])])); /*6996*/
			} /*6996*/
		} /*6996*/
		$put($1.args, "opt", $1.options); /*7000*/
		$k[$j++] = $1.args; /*7003*/
		if (!$1.dontdraw) { //no-else/*7003*/
			$0.renmatrix(); /*7003*/
		} /*7003*/
	};
	$0.pharmacode = function() {
		var $1 = {}; /*7032*/
		$1.options = $k[--$j]; /*7034*/
		$1.barcode = $k[--$j]; /*7035*/
		$1.dontdraw = false; /*7037*/
		$1.height = (8 * 2.835) / 72; /*7038*/
		$1.nwidth = 0.5 * 2.835; /*7039*/
		$1.wwidth = 1.5 * 2.835; /*7040*/
		$1.swidth = 1 * 2.835; /*7041*/
		$forall($1.options, function() {
			/*7052*/
			var _3 = $k[--$j]; /*7052*/
			$1[$k[--$j]] = _3; /*7052*/
		}); /*7052*/
		$1.height = +$1.height; /*7054*/
		$1.nwidth = +$1.nwidth; /*7055*/
		$1.wwidth = +$1.wwidth; /*7056*/
		$1.swidth = +$1.swidth; /*7057*/
		if (($1.barcode.length < 1) || ($1.barcode.length > 6)) { //no-else/*7062*/
			$k[$j++] = 'bwipp.pharmacodeBadLength'; /*7061*/
			$k[$j++] = "Pharmacode must be 1 to 6 digits"; /*7061*/
			$0.raiseerror(); /*7061*/
		} /*7061*/
		$forall($1.barcode, function() {
			/*7067*/
			var _C = $k[--$j]; /*7064*/
			if ((_C < 48) || (_C > 57)) { //no-else/*7066*/
				$k[$j++] = 'bwipp.pharmacodeBadCharacter'; /*7065*/
				$k[$j++] = "Pharmacode must contain only digits"; /*7065*/
				$0.raiseerror(); /*7065*/
			} /*7065*/
		}); /*7065*/
		var _E = ~~$z($1.barcode); /*7068*/
		if ((_E < 3) || (_E > 131070)) { //no-else/*7070*/
			$k[$j++] = 'bwipp.pharmacodeBadValue'; /*7069*/
			$k[$j++] = "Pharmacode value must be between 3 and 131070"; /*7069*/
			$0.raiseerror(); /*7069*/
		} /*7069*/
		$1.txt = $a($1.barcode.length); /*7073*/
		for (var _J = 0, _I = $1.barcode.length - 1; _J <= _I; _J += 1) {
			/*7077*/
			$1.i = _J; /*7075*/
			$put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), 0, 0, "", 0])); /*7076*/
		} /*7076*/
		$1.barcode = $cvrs($s(17), (~~$z($1.barcode)) + 1, 2); /*7080*/
		$1.barcode = $geti($1.barcode, 1, $1.barcode.length - 1); /*7081*/
		$1.barlen = $1.barcode.length; /*7083*/
		$1.sbs = $a($1.barlen * 2); /*7084*/
		for (var _b = 0, _a = $1.barlen - 1; _b <= _a; _b += 1) {
			/*7095*/
			$1.i = _b; /*7087*/
			$1.enc = $geti($1.barcode, $1.i, 1); /*7088*/
			if ($eq($1.enc, "0")) {
				/*7092*/
				$put($1.sbs, $1.i * 2, $1.nwidth); /*7090*/
			} else {
				/*7092*/
				$put($1.sbs, $1.i * 2, $1.wwidth); /*7092*/
			} /*7092*/
			$put($1.sbs, ($1.i * 2) + 1, $1.swidth); /*7094*/
		} /*7094*/
		$k[$j++] = Infinity; /*7105*/
		var _p = $1.sbs; /*7100*/
		$k[$j++] = Infinity; /*7101*/
		for (var _r = 0, _s = ~~(($1.sbs.length + 1) / 2); _r < _s; _r++) {
			/*7101*/
			$k[$j++] = $1.height; /*7101*/
		} /*7101*/
		var _u = $a(); /*7101*/
		$k[$j++] = Infinity; /*7102*/
		for (var _w = 0, _x = ~~(($1.sbs.length + 1) / 2); _w < _x; _w++) {
			/*7102*/
			$k[$j++] = 0; /*7102*/
		} /*7102*/
		var _y = $a(); /*7102*/
		$k[$j++] = 'ren'; /*7105*/
		$k[$j++] = $0.renlinear; /*7105*/
		$k[$j++] = 'sbs'; /*7105*/
		$k[$j++] = _p; /*7105*/
		$k[$j++] = 'bhs'; /*7105*/
		$k[$j++] = _u; /*7105*/
		$k[$j++] = 'bbs'; /*7105*/
		$k[$j++] = _y; /*7105*/
		$k[$j++] = 'txt'; /*7105*/
		$k[$j++] = $1.txt; /*7105*/
		$k[$j++] = 'textxalign'; /*7105*/
		$k[$j++] = "center"; /*7105*/
		$k[$j++] = 'opt'; /*7105*/
		$k[$j++] = $1.options; /*7105*/
		var _11 = $d(); /*7105*/
		$k[$j++] = _11; /*7108*/
		if (!$1.dontdraw) { //no-else/*7108*/
			$0.renlinear(); /*7108*/
		} /*7108*/
	};
	$0.pharmacode2 = function() {
		var $1 = {}; /*7137*/
		$1.options = $k[--$j]; /*7139*/
		$1.barcode = $k[--$j]; /*7140*/
		$1.dontdraw = false; /*7142*/
		$1.includetext = false; /*7143*/
		$1.height = 4; /*7144*/
		$forall($1.options, function() {
			/*7155*/
			var _3 = $k[--$j]; /*7155*/
			$1[$k[--$j]] = _3; /*7155*/
		}); /*7155*/
		$1.height = +$1.height; /*7157*/
		if (($1.barcode.length < 1) || ($1.barcode.length > 8)) { //no-else/*7162*/
			$k[$j++] = 'bwipp.pharmacode2BadLength'; /*7161*/
			$k[$j++] = "Two-track Pharmacode must be 1 to 6 digits"; /*7161*/
			$0.raiseerror(); /*7161*/
		} /*7161*/
		$forall($1.barcode, function() {
			/*7167*/
			var _9 = $k[--$j]; /*7164*/
			if ((_9 < 48) || (_9 > 57)) { //no-else/*7166*/
				$k[$j++] = 'bwipp.pharmacode2badCharacter'; /*7165*/
				$k[$j++] = "Two-track Pharmacode must contain only digits"; /*7165*/
				$0.raiseerror(); /*7165*/
			} /*7165*/
		}); /*7165*/
		var _B = ~~$z($1.barcode); /*7168*/
		if ((_B < 4) || (_B > 64570080)) { //no-else/*7170*/
			$k[$j++] = 'bwipp.pharmacode2badValue'; /*7169*/
			$k[$j++] = "Two-track Pharmacode value must be between 4 and 64570080"; /*7169*/
			$0.raiseerror(); /*7169*/
		} /*7169*/
		$1.txt = $a($1.barcode.length); /*7173*/
		for (var _G = 0, _F = $1.barcode.length - 1; _G <= _F; _G += 1) {
			/*7177*/
			$1.i = _G; /*7175*/
			$put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), 0, 0, "", 0])); /*7176*/
		} /*7176*/
		$1.encstr = $s(16); /*7179*/
		$1.sbs = $a(32); /*7180*/
		$1.bar = (1 / 25.4) * $1.height; /*7181*/
		$1.spc = (1 / 25.4) * 72; /*7182*/
		$1.i = 15; /*7185*/
		$1.val = ~~$z($1.barcode); /*7186*/
		for (;;) {
			/*7193*/
			if ($1.val == 0) { //no-else/*7188*/
				break; /*7188*/
			} /*7188*/
			var _T = $1.val % 3; /*7189*/
			$1.val = ~~(($1.val - $get($a([3, 1, 2]), _T)) / 3); /*7190*/
			$put($1.encstr, $1.i, $get($a([2, 0, 1]), _T)); /*7191*/
			$1.i = $1.i - 1; /*7192*/
		} /*7192*/
		$1.encstr = $geti($1.encstr, $1.i + 1, 15 - $1.i); /*7194*/
		$1.bhs = $a($1.encstr.length); /*7197*/
		$1.bbs = $a($1.encstr.length); /*7198*/
		for (var _m = 0, _l = $1.encstr.length - 1; _m <= _l; _m += 1) {
			/*7204*/
			$1.i = _m; /*7200*/
			var _p = $get($1.encstr, $1.i); /*7201*/
			$put($1.bhs, $1.i, $1.bar * $get($a([1, 1, 2]), _p)); /*7202*/
			$put($1.bbs, $1.i, $get($a([0, $1.bar, 0]), _p)); /*7203*/
		} /*7203*/
		$k[$j++] = Infinity; /*7215*/
		var _10 = $1.bhs; /*7209*/
		var _11 = $1.bbs; /*7210*/
		$k[$j++] = Infinity; /*7211*/
		for (var _13 = 0, _14 = $1.encstr.length * 2; _13 < _14; _13++) {
			/*7211*/
			$k[$j++] = $1.spc; /*7211*/
		} /*7211*/
		var _16 = $a(); /*7211*/
		$k[$j++] = 'ren'; /*7215*/
		$k[$j++] = $0.renlinear; /*7215*/
		$k[$j++] = 'bhs'; /*7215*/
		$k[$j++] = _10; /*7215*/
		$k[$j++] = 'bbs'; /*7215*/
		$k[$j++] = _11; /*7215*/
		$k[$j++] = 'sbs'; /*7215*/
		$k[$j++] = _16; /*7215*/
		$k[$j++] = 'txt'; /*7215*/
		$k[$j++] = $1.txt; /*7215*/
		$k[$j++] = 'textxalign'; /*7215*/
		$k[$j++] = "center"; /*7215*/
		$k[$j++] = 'textyoffset'; /*7215*/
		$k[$j++] = 4; /*7215*/
		$k[$j++] = 'opt'; /*7215*/
		$k[$j++] = $1.options; /*7215*/
		var _19 = $d(); /*7215*/
		$k[$j++] = _19; /*7218*/
		if (!$1.dontdraw) { //no-else/*7218*/
			$0.renlinear(); /*7218*/
		} /*7218*/
	};
	$0.code2of5 = function() {
		var $1 = {}; /*7247*/
		$1.options = $k[--$j]; /*7249*/
		$1.barcode = $k[--$j]; /*7250*/
		$1.dontdraw = false; /*7252*/
		$1.includecheck = false; /*7253*/
		$1.validatecheck = false; /*7254*/
		$1.includetext = false; /*7255*/
		$1.includecheckintext = false; /*7256*/
		$1.textfont = "OCR-B"; /*7257*/
		$1.textsize = 10; /*7258*/
		$1.textyoffset = -8.5; /*7259*/
		$1.height = 1; /*7260*/
		$1.version = "industrial"; /*7261*/
		$forall($1.options, function() {
			/*7272*/
			var _3 = $k[--$j]; /*7272*/
			$1[$k[--$j]] = _3; /*7272*/
		}); /*7272*/
		$1.textfont = "" + $1.textfont; /*7274*/
		$1.textsize = +$1.textsize; /*7275*/
		$1.textyoffset = +$1.textyoffset; /*7276*/
		$1.height = +$1.height; /*7277*/
		$forall($1.barcode, function() {
			/*7284*/
			var _A = $k[--$j]; /*7281*/
			if ((_A < 48) || (_A > 57)) { //no-else/*7283*/
				$k[$j++] = 'bwipp.code2of5badCharacter'; /*7282*/
				$k[$j++] = "Code 25 must contain only digits"; /*7282*/
				$0.raiseerror(); /*7282*/
			} /*7282*/
		}); /*7282*/
		$k[$j++] = 'barlen'; /*7286*/
		$k[$j++] = $1.barcode.length; /*7286*/
		if ($1.validatecheck) { //no-else/*7286*/
			var _D = $k[--$j]; /*7286*/
			$k[$j++] = _D - 1; /*7286*/
		} /*7286*/
		var _E = $k[--$j]; /*7286*/
		$1[$k[--$j]] = _E; /*7286*/
		$1.checksum = 0; /*7288*/
		for (var _I = 0, _H = $1.barlen - 1; _I <= _H; _I += 1) {
			/*7292*/
			$1.i = _I; /*7290*/
			$k[$j++] = 'checksum'; /*7291*/
			$k[$j++] = $1.checksum; /*7291*/
			$k[$j++] = $get($1.barcode, $1.i) - 48; /*7291*/
			if ((($1.barlen - $1.i) % 2) != 0) { //no-else/*7291*/
				var _P = $k[--$j]; /*7291*/
				$k[$j++] = _P * 3; /*7291*/
			} /*7291*/
			var _Q = $k[--$j]; /*7291*/
			var _R = $k[--$j]; /*7291*/
			$1[$k[--$j]] = _R + _Q; /*7291*/
		} /*7291*/
		$1.checksum = (10 - ($1.checksum % 10)) % 10; /*7293*/
		if ($1.validatecheck) { //no-else/*7300*/
			if ($get($1.barcode, $1.barlen) != ($1.checksum + 48)) { //no-else/*7297*/
				$k[$j++] = 'bwipp.code2of5badCheckDigit'; /*7296*/
				$k[$j++] = "Incorrect Code 25 check digit provided"; /*7296*/
				$0.raiseerror(); /*7296*/
			} /*7296*/
			$1.barcode = $geti($1.barcode, 0, $1.barlen); /*7298*/
			$1.includecheck = true; /*7299*/
		} /*7299*/
		var _h = new Map([
			["industrial", $a(["1111313111", "3111111131", "1131111131", "3131111111", "1111311131", "3111311111", "1131311111", "1111113131", "3111113111", "1131113111", "313111", "31113"])],
			["iata", $a(["1111313111", "3111111131", "1131111131", "3131111111", "1111311131", "3111311111", "1131311111", "1111113131", "3111113111", "1131113111", "1111", "311"])],
			["matrix", $a(["113311", "311131", "131131", "331111", "113131", "313111", "133111", "111331", "311311", "131311", "311111", "31111"])],
			["coop", $a(["331111", "111331", "113131", "113311", "131131", "131311", "133111", "311131", "311311", "313111", "3131", "133"])],
			["datalogic", $a(["113311", "311131", "131131", "331111", "113131", "313111", "133111", "111331", "311311", "131311", "1111", "311"])]
		]); /*7324*/
		$1.versions = _h; /*7326*/
		var _k = $get($1.versions, $1.version) !== undefined; /*7327*/
		if (!_k) { //no-else/*7329*/
			$k[$j++] = 'bwipp.code2of5badVersion'; /*7328*/
			$k[$j++] = "Unrecognised Code 25 version"; /*7328*/
			$0.raiseerror(); /*7328*/
		} /*7328*/
		$1.encs = $get($1.versions, $1.version); /*7330*/
		$1.cs = $get($1.encs, 0).length; /*7332*/
		$k[$j++] = 'cw'; /*7333*/
		$k[$j++] = 0; /*7333*/
		$forall($get($1.encs, 0), function() {
			/*7333*/
			var _s = $k[--$j]; /*7333*/
			var _t = $k[--$j]; /*7333*/
			$k[$j++] = _t + (_s - 48); /*7333*/
		}); /*7333*/
		var _u = $k[--$j]; /*7333*/
		$1[$k[--$j]] = _u; /*7333*/
		$1.ss = $get($1.encs, 10).length; /*7334*/
		$k[$j++] = 'sw'; /*7335*/
		$k[$j++] = 0; /*7335*/
		$forall($get($1.encs, 10), function() {
			/*7335*/
			var _10 = $k[--$j]; /*7335*/
			var _11 = $k[--$j]; /*7335*/
			$k[$j++] = _11 + (_10 - 48); /*7335*/
		}); /*7335*/
		var _12 = $k[--$j]; /*7335*/
		$1[$k[--$j]] = _12; /*7335*/
		$1.es = $get($1.encs, 11).length; /*7336*/
		$1.barchars = "0123456789"; /*7339*/
		$k[$j++] = 'sbs'; /*7341*/
		$k[$j++] = $1.barlen; /*7341*/
		if ($1.includecheck) { //no-else/*7341*/
			var _18 = $k[--$j]; /*7341*/
			$k[$j++] = _18 + 1; /*7341*/
		} /*7341*/
		var _1D = $s((($k[--$j] * $1.cs) + $1.ss) + $1.es); /*7341*/
		$1[$k[--$j]] = _1D; /*7341*/
		$k[$j++] = 'txt'; /*7342*/
		$k[$j++] = $1.barlen; /*7342*/
		if ($1.includecheck) { //no-else/*7342*/
			var _1H = $k[--$j]; /*7342*/
			$k[$j++] = _1H + 1; /*7342*/
		} /*7342*/
		var _1J = $a($k[--$j]); /*7342*/
		$1[$k[--$j]] = _1J; /*7342*/
		$puti($1.sbs, 0, $get($1.encs, 10)); /*7345*/
		for (var _1Q = 0, _1P = $1.barlen - 1; _1Q <= _1P; _1Q += 1) {
			/*7356*/
			$1.i = _1Q; /*7347*/
			$search($1.barchars, $geti($1.barcode, $1.i, 1)); /*7349*/
			$j--; /*7350*/
			$1.indx = $k[--$j].length; /*7351*/
			$j -= 2; /*7352*/
			$1.enc = $get($1.encs, $1.indx); /*7353*/
			$puti($1.sbs, ($1.i * $1.cs) + $1.ss, $1.enc); /*7354*/
			$put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), ($1.i * $1.cw) + $1.sw, $1.textyoffset, $1.textfont, $1.textsize])); /*7355*/
		} /*7355*/
		if ($1.includecheck) {
			/*7368*/
			$puti($1.sbs, ($1.barlen * $1.cs) + $1.ss, $get($1.encs, $1.checksum)); /*7360*/
			$puti($1.sbs, (($1.barlen * $1.cs) + $1.cs) + $1.ss, $get($1.encs, 11)); /*7361*/
			if ($1.includecheckintext) {
				/*7365*/
				$put($1.txt, $1.barlen, $a([$geti($1.barchars, $1.checksum, 1), ($1.barlen * $1.cw) + $1.sw, $1.textyoffset, $1.textfont, $1.textsize])); /*7363*/
			} else {
				/*7365*/
				$put($1.txt, $1.barlen, $a([" ", ($1.barlen * $1.cw) + $1.sw, $1.textyoffset, $1.textfont, $1.textsize])); /*7365*/
			} /*7365*/
		} else {
			/*7368*/
			$puti($1.sbs, ($1.barlen * $1.cs) + $1.ss, $get($1.encs, 11)); /*7368*/
		} /*7368*/
		$k[$j++] = Infinity; /*7380*/
		$k[$j++] = Infinity; /*7374*/
		$forall($1.sbs, function() {
			/*7374*/
			var _2Y = $k[--$j]; /*7374*/
			$k[$j++] = _2Y - 48; /*7374*/
		}); /*7374*/
		var _2Z = $a(); /*7374*/
		$k[$j++] = Infinity; /*7375*/
		for (var _2b = 0, _2c = ~~(($1.sbs.length + 1) / 2); _2b < _2c; _2b++) {
			/*7375*/
			$k[$j++] = $1.height; /*7375*/
		} /*7375*/
		var _2e = $a(); /*7375*/
		$k[$j++] = Infinity; /*7376*/
		for (var _2g = 0, _2h = ~~(($1.sbs.length + 1) / 2); _2g < _2h; _2g++) {
			/*7376*/
			$k[$j++] = 0; /*7376*/
		} /*7376*/
		var _2i = $a(); /*7376*/
		$k[$j++] = 'ren'; /*7379*/
		$k[$j++] = $0.renlinear; /*7379*/
		$k[$j++] = 'sbs'; /*7379*/
		$k[$j++] = _2Z; /*7379*/
		$k[$j++] = 'bhs'; /*7379*/
		$k[$j++] = _2e; /*7379*/
		$k[$j++] = 'bbs'; /*7379*/
		$k[$j++] = _2i; /*7379*/
		if ($1.includetext) { //no-else/*7379*/
			$k[$j++] = 'txt'; /*7378*/
			$k[$j++] = $1.txt; /*7378*/
		} /*7378*/
		$k[$j++] = 'opt'; /*7380*/
		$k[$j++] = $1.options; /*7380*/
		var _2m = $d(); /*7380*/
		$k[$j++] = _2m; /*7383*/
		if (!$1.dontdraw) { //no-else/*7383*/
			$0.renlinear(); /*7383*/
		} /*7383*/
	};
	$0.industrial2of5 = function() {
		var $1 = {}; /*7413*/
		$1.options = $k[--$j]; /*7415*/
		$1.barcode = $k[--$j]; /*7416*/
		$1.dontdraw = false; /*7418*/
		$1.includetext = false; /*7419*/
		$1.textfont = "OCR-B"; /*7420*/
		$1.textsize = 10; /*7421*/
		$1.textxoffset = 0; /*7422*/
		$1.textyoffset = -8.5; /*7423*/
		$1.height = 1; /*7424*/
		$forall($1.options, function() {
			/*7435*/
			var _3 = $k[--$j]; /*7435*/
			$1[$k[--$j]] = _3; /*7435*/
		}); /*7435*/
		$1.textfont = "" + $1.textfont; /*7437*/
		$1.textsize = +$1.textsize; /*7438*/
		$1.textxoffset = +$1.textxoffset; /*7439*/
		$1.textyoffset = +$1.textyoffset; /*7440*/
		$1.height = +$1.height; /*7441*/
		$put($1.options, "dontdraw", true); /*7444*/
		$put($1.options, "version", "industrial"); /*7445*/
		$k[$j++] = 'args'; /*7447*/
		$k[$j++] = $1.barcode; /*7447*/
		$k[$j++] = $1.options; /*7447*/
		$0.code2of5(); /*7447*/
		var _E = $k[--$j]; /*7447*/
		$1[$k[--$j]] = _E; /*7447*/
		$put($1.args, "opt", $1.options); /*7449*/
		$k[$j++] = $1.args; /*7452*/
		if (!$1.dontdraw) { //no-else/*7452*/
			$0.renlinear(); /*7452*/
		} /*7452*/
	};
	$0.iata2of5 = function() {
		var $1 = {}; /*7482*/
		$1.options = $k[--$j]; /*7484*/
		$1.barcode = $k[--$j]; /*7485*/
		$1.dontdraw = false; /*7487*/
		$1.includetext = false; /*7488*/
		$1.textfont = "OCR-B"; /*7489*/
		$1.textsize = 10; /*7490*/
		$1.textxoffset = 0; /*7491*/
		$1.textyoffset = -8.5; /*7492*/
		$1.height = 1; /*7493*/
		$forall($1.options, function() {
			/*7504*/
			var _3 = $k[--$j]; /*7504*/
			$1[$k[--$j]] = _3; /*7504*/
		}); /*7504*/
		$1.textfont = "" + $1.textfont; /*7506*/
		$1.textsize = +$1.textsize; /*7507*/
		$1.textxoffset = +$1.textxoffset; /*7508*/
		$1.textyoffset = +$1.textyoffset; /*7509*/
		$1.height = +$1.height; /*7510*/
		$put($1.options, "dontdraw", true); /*7513*/
		$put($1.options, "version", "iata"); /*7514*/
		$k[$j++] = 'args'; /*7516*/
		$k[$j++] = $1.barcode; /*7516*/
		$k[$j++] = $1.options; /*7516*/
		$0.code2of5(); /*7516*/
		var _E = $k[--$j]; /*7516*/
		$1[$k[--$j]] = _E; /*7516*/
		$put($1.args, "opt", $1.options); /*7518*/
		$k[$j++] = $1.args; /*7521*/
		if (!$1.dontdraw) { //no-else/*7521*/
			$0.renlinear(); /*7521*/
		} /*7521*/
	};
	$0.matrix2of5 = function() {
		var $1 = {}; /*7551*/
		$1.options = $k[--$j]; /*7553*/
		$1.barcode = $k[--$j]; /*7554*/
		$1.dontdraw = false; /*7556*/
		$1.includetext = false; /*7557*/
		$1.textfont = "OCR-B"; /*7558*/
		$1.textsize = 10; /*7559*/
		$1.textxoffset = 0; /*7560*/
		$1.textyoffset = -8.5; /*7561*/
		$1.height = 1; /*7562*/
		$forall($1.options, function() {
			/*7573*/
			var _3 = $k[--$j]; /*7573*/
			$1[$k[--$j]] = _3; /*7573*/
		}); /*7573*/
		$1.textfont = "" + $1.textfont; /*7575*/
		$1.textsize = +$1.textsize; /*7576*/
		$1.textxoffset = +$1.textxoffset; /*7577*/
		$1.textyoffset = +$1.textyoffset; /*7578*/
		$1.height = +$1.height; /*7579*/
		$put($1.options, "dontdraw", true); /*7582*/
		$put($1.options, "version", "matrix"); /*7583*/
		$k[$j++] = 'args'; /*7585*/
		$k[$j++] = $1.barcode; /*7585*/
		$k[$j++] = $1.options; /*7585*/
		$0.code2of5(); /*7585*/
		var _E = $k[--$j]; /*7585*/
		$1[$k[--$j]] = _E; /*7585*/
		$put($1.args, "opt", $1.options); /*7587*/
		$k[$j++] = $1.args; /*7590*/
		if (!$1.dontdraw) { //no-else/*7590*/
			$0.renlinear(); /*7590*/
		} /*7590*/
	};
	$0.coop2of5 = function() {
		var $1 = {}; /*7620*/
		$1.options = $k[--$j]; /*7622*/
		$1.barcode = $k[--$j]; /*7623*/
		$1.dontdraw = false; /*7625*/
		$1.includetext = false; /*7626*/
		$1.textfont = "OCR-B"; /*7627*/
		$1.textsize = 10; /*7628*/
		$1.textxoffset = 0; /*7629*/
		$1.textyoffset = -8.5; /*7630*/
		$1.height = 1; /*7631*/
		$forall($1.options, function() {
			/*7642*/
			var _3 = $k[--$j]; /*7642*/
			$1[$k[--$j]] = _3; /*7642*/
		}); /*7642*/
		$1.textfont = "" + $1.textfont; /*7644*/
		$1.textsize = +$1.textsize; /*7645*/
		$1.textxoffset = +$1.textxoffset; /*7646*/
		$1.textyoffset = +$1.textyoffset; /*7647*/
		$1.height = +$1.height; /*7648*/
		$put($1.options, "dontdraw", true); /*7651*/
		$put($1.options, "version", "coop"); /*7652*/
		$k[$j++] = 'args'; /*7654*/
		$k[$j++] = $1.barcode; /*7654*/
		$k[$j++] = $1.options; /*7654*/
		$0.code2of5(); /*7654*/
		var _E = $k[--$j]; /*7654*/
		$1[$k[--$j]] = _E; /*7654*/
		$put($1.args, "opt", $1.options); /*7656*/
		$k[$j++] = $1.args; /*7659*/
		if (!$1.dontdraw) { //no-else/*7659*/
			$0.renlinear(); /*7659*/
		} /*7659*/
	};
	$0.datalogic2of5 = function() {
		var $1 = {}; /*7689*/
		$1.options = $k[--$j]; /*7691*/
		$1.barcode = $k[--$j]; /*7692*/
		$1.dontdraw = false; /*7694*/
		$1.includetext = false; /*7695*/
		$1.textfont = "OCR-B"; /*7696*/
		$1.textsize = 10; /*7697*/
		$1.textxoffset = 0; /*7698*/
		$1.textyoffset = -8.5; /*7699*/
		$1.height = 1; /*7700*/
		$forall($1.options, function() {
			/*7711*/
			var _3 = $k[--$j]; /*7711*/
			$1[$k[--$j]] = _3; /*7711*/
		}); /*7711*/
		$1.textfont = "" + $1.textfont; /*7713*/
		$1.textsize = +$1.textsize; /*7714*/
		$1.textxoffset = +$1.textxoffset; /*7715*/
		$1.textyoffset = +$1.textyoffset; /*7716*/
		$1.height = +$1.height; /*7717*/
		$put($1.options, "dontdraw", true); /*7720*/
		$put($1.options, "version", "datalogic"); /*7721*/
		$k[$j++] = 'args'; /*7723*/
		$k[$j++] = $1.barcode; /*7723*/
		$k[$j++] = $1.options; /*7723*/
		$0.code2of5(); /*7723*/
		var _E = $k[--$j]; /*7723*/
		$1[$k[--$j]] = _E; /*7723*/
		$put($1.args, "opt", $1.options); /*7725*/
		$k[$j++] = $1.args; /*7728*/
		if (!$1.dontdraw) { //no-else/*7728*/
			$0.renlinear(); /*7728*/
		} /*7728*/
	};
	$0.code11 = function() {
		var $1 = {}; /*7757*/
		$1.options = $k[--$j]; /*7759*/
		$1.barcode = $k[--$j]; /*7760*/
		$1.dontdraw = false; /*7762*/
		$1.includecheck = false; /*7763*/
		$1.validatecheck = false; /*7764*/
		$1.includetext = false; /*7765*/
		$1.includecheckintext = false; /*7766*/
		$1.textfont = "OCR-B"; /*7767*/
		$1.textsize = 10; /*7768*/
		$1.textyoffset = -8.5; /*7769*/
		$1.height = 1; /*7770*/
		$forall($1.options, function() {
			/*7781*/
			var _3 = $k[--$j]; /*7781*/
			$1[$k[--$j]] = _3; /*7781*/
		}); /*7781*/
		$1.textfont = "" + $1.textfont; /*7783*/
		$1.textsize = +$1.textsize; /*7784*/
		$1.textyoffset = +$1.textyoffset; /*7785*/
		$1.height = +$1.height; /*7786*/
		$1.encs = $a(["111131", "311131", "131131", "331111", "113131", "313111", "133111", "111331", "311311", "311111", "113111", "113311"]); /*7793*/
		$1.barchars = "0123456789-"; /*7796*/
		$1.charvals = new Map; /*7797*/
		for (var _A = 0; _A <= 10; _A += 1) {
			/*7798*/
			$put($1.charvals, $geti($1.barchars, _A, 1), _A); /*7798*/
		} /*7798*/
		for (var _G = 0, _F = $1.barcode.length - 1; _G <= _F; _G += 1) {
			/*7805*/
			var _K = $get($1.charvals, $geti($1.barcode, _G, 1)) !== undefined; /*7802*/
			if (!_K) { //no-else/*7804*/
				$k[$j++] = 'bwipp.code11badCharacter'; /*7803*/
				$k[$j++] = "Code 11 must contain only digits and dashes"; /*7803*/
				$0.raiseerror(); /*7803*/
			} /*7803*/
		} /*7803*/
		$1.barlen = $1.barcode.length; /*7807*/
		if ($1.validatecheck) { //no-else/*7813*/
			if ($1.barlen == 11) { //no-else/*7811*/
				$k[$j++] = 'bwipp.code11badLength'; /*7810*/
				$k[$j++] = "Code 11 cannot be 11 characters using check digits"; /*7810*/
				$0.raiseerror(); /*7810*/
			} /*7810*/
			var _Q = ($1.barlen <= 10) ? 1 : 2; /*7812*/
			$1.barlen = $1.barlen - _Q; /*7812*/
		} /*7812*/
		$k[$j++] = 'numchecks'; /*7815*/
		if ($1.includecheck || $1.validatecheck) {
			/*7815*/
			var _U = ($1.barlen >= 10) ? 2 : 1; /*7815*/
			$k[$j++] = _U; /*7815*/
		} else {
			/*7815*/
			$k[$j++] = 0; /*7815*/
		} /*7815*/
		var _V = $k[--$j]; /*7815*/
		$1[$k[--$j]] = _V; /*7815*/
		$1.checksum1 = 0; /*7816*/
		$1.checksum2 = 0; /*7816*/
		for (var _Z = 0, _Y = $1.barlen - 1; _Z <= _Y; _Z += 1) {
			/*7822*/
			$1.i = _Z; /*7818*/
			$1.indx = $get($1.charvals, $geti($1.barcode, $1.i, 1)); /*7819*/
			$1.checksum1 = $1.checksum1 + ((((($1.barlen - $1.i) - 1) % 10) + 1) * $1.indx); /*7820*/
			$1.checksum2 = $1.checksum2 + (((($1.barlen - $1.i) % 9) + 1) * $1.indx); /*7821*/
		} /*7821*/
		$1.checksum1 = $1.checksum1 % 11; /*7823*/
		$1.checksum2 = ($1.checksum2 + $1.checksum1) % 11; /*7824*/
		if ($1.validatecheck) { //no-else/*7838*/
			if ($1.numchecks == 1) {
				/*7833*/
				if ($get($1.barcode, $1.barlen) != $get($1.barchars, $1.checksum1)) { //no-else/*7829*/
					$k[$j++] = 'bwipp.code11badCheckDigit'; /*7828*/
					$k[$j++] = "Incorrect Code 11 check digit provided"; /*7828*/
					$0.raiseerror(); /*7828*/
				} /*7828*/
			} else {
				/*7833*/
				if (($get($1.barcode, $1.barlen) != $get($1.barchars, $1.checksum1)) || ($get($1.barcode, $1.barlen + 1) != $get($1.barchars, $1.checksum2))) { //no-else/*7834*/
					$k[$j++] = 'bwipp.code11badCheckDigits'; /*7833*/
					$k[$j++] = "Incorrect Code 11 check digits provided"; /*7833*/
					$0.raiseerror(); /*7833*/
				} /*7833*/
			} /*7833*/
			$1.barcode = $geti($1.barcode, 0, $1.barlen); /*7836*/
			$1.includecheck = true; /*7837*/
		} /*7837*/
		$1.sbs = $s((($1.barlen + $1.numchecks) * 6) + 12); /*7840*/
		$1.txt = $a($1.barlen + $1.numchecks); /*7841*/
		$puti($1.sbs, 0, $get($1.encs, 11)); /*7844*/
		$1.xpos = 8; /*7846*/
		for (var _1O = 0, _1N = $1.barlen - 1; _1O <= _1N; _1O += 1) {
			/*7856*/
			$1.i = _1O; /*7848*/
			$1.indx = $get($1.charvals, $geti($1.barcode, $1.i, 1)); /*7849*/
			$1.enc = $get($1.encs, $1.indx); /*7850*/
			$puti($1.sbs, ($1.i * 6) + 6, $1.enc); /*7851*/
			$put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), $1.xpos, $1.textyoffset, $1.textfont, $1.textsize])); /*7852*/
			for (var _1k = 0; _1k <= 5; _1k += 1) {
				/*7855*/
				$1.xpos = ($get($1.enc, _1k) - 48) + $1.xpos; /*7854*/
			} /*7854*/
		} /*7854*/
		if ($1.includecheck) {
			/*7885*/
			if ($1.barlen >= 10) {
				/*7882*/
				$puti($1.sbs, ($1.barlen * 6) + 6, $get($1.encs, $1.checksum1)); /*7861*/
				$puti($1.sbs, ($1.barlen * 6) + 12, $get($1.encs, $1.checksum2)); /*7862*/
				if ($1.includecheckintext) {
					/*7872*/
					$put($1.txt, $1.barlen, $a([$geti($1.barchars, $1.checksum1, 1), $1.xpos, $1.textyoffset, $1.textfont, $1.textsize])); /*7864*/
					$1.enc = $get($1.encs, $1.checksum1); /*7865*/
					for (var _2E = 0; _2E <= 5; _2E += 1) {
						/*7868*/
						$1.xpos = ($get($1.enc, _2E) - 48) + $1.xpos; /*7867*/
					} /*7867*/
					$put($1.txt, $1.barlen + 1, $a([$geti($1.barchars, $1.checksum2, 1), $1.xpos, $1.textyoffset, $1.textfont, $1.textsize])); /*7869*/
				} else {
					/*7872*/
					$put($1.txt, $1.barlen, $a(["", $1.xpos, $1.textyoffset, $1.textfont, $1.textsize])); /*7871*/
					$put($1.txt, $1.barlen + 1, $a(["", $1.xpos, $1.textyoffset, $1.textfont, $1.textsize])); /*7872*/
				} /*7872*/
				$puti($1.sbs, ($1.barlen * 6) + 18, $get($1.encs, 11)); /*7874*/
			} else {
				/*7882*/
				$puti($1.sbs, ($1.barlen * 6) + 6, $get($1.encs, $1.checksum1)); /*7876*/
				if ($1.includecheckintext) {
					/*7880*/
					$put($1.txt, $1.barlen, $a([$geti($1.barchars, $1.checksum1, 1), $1.xpos, $1.textyoffset, $1.textfont, $1.textsize])); /*7878*/
				} else {
					/*7880*/
					$put($1.txt, $1.barlen, $a(["", $1.xpos, $1.textyoffset, $1.textfont, $1.textsize])); /*7880*/
				} /*7880*/
				$puti($1.sbs, ($1.barlen * 6) + 12, $get($1.encs, 11)); /*7882*/
			} /*7882*/
		} else {
			/*7885*/
			$puti($1.sbs, ($1.barlen * 6) + 6, $get($1.encs, 11)); /*7885*/
		} /*7885*/
		$k[$j++] = Infinity; /*7897*/
		$k[$j++] = Infinity; /*7891*/
		var _3F = $1.sbs; /*7891*/
		for (var _3G = 0, _3H = _3F.length; _3G < _3H; _3G++) {
			/*7891*/
			$k[$j++] = $get(_3F, _3G) - 48; /*7891*/
		} /*7891*/
		var _3J = $a(); /*7891*/
		$k[$j++] = Infinity; /*7892*/
		for (var _3L = 0, _3M = ~~(($1.sbs.length + 1) / 2); _3L < _3M; _3L++) {
			/*7892*/
			$k[$j++] = $1.height; /*7892*/
		} /*7892*/
		var _3O = $a(); /*7892*/
		$k[$j++] = Infinity; /*7893*/
		for (var _3Q = 0, _3R = ~~(($1.sbs.length + 1) / 2); _3Q < _3R; _3Q++) {
			/*7893*/
			$k[$j++] = 0; /*7893*/
		} /*7893*/
		var _3S = $a(); /*7893*/
		$k[$j++] = 'ren'; /*7896*/
		$k[$j++] = $0.renlinear; /*7896*/
		$k[$j++] = 'sbs'; /*7896*/
		$k[$j++] = _3J; /*7896*/
		$k[$j++] = 'bhs'; /*7896*/
		$k[$j++] = _3O; /*7896*/
		$k[$j++] = 'bbs'; /*7896*/
		$k[$j++] = _3S; /*7896*/
		if ($1.includetext) { //no-else/*7896*/
			$k[$j++] = 'txt'; /*7895*/
			$k[$j++] = $1.txt; /*7895*/
		} /*7895*/
		$k[$j++] = 'opt'; /*7897*/
		$k[$j++] = $1.options; /*7897*/
		var _3W = $d(); /*7897*/
		$k[$j++] = _3W; /*7900*/
		if (!$1.dontdraw) { //no-else/*7900*/
			$0.renlinear(); /*7900*/
		} /*7900*/
	};
	$0.bc412 = function() {
		var $1 = {}; /*7929*/
		$1.options = $k[--$j]; /*7931*/
		$1.barcode = $k[--$j]; /*7932*/
		$1.dontdraw = false; /*7934*/
		$1.includecheck = false; /*7935*/
		$1.validatecheck = false; /*7936*/
		$1.includetext = false; /*7937*/
		$1.includecheckintext = false; /*7938*/
		$1.includestartstop = false; /*7939*/
		$1.semi = false; /*7940*/
		$1.textfont = "OCR-B"; /*7941*/
		$1.textsize = 10; /*7942*/
		$1.textyoffset = -8.5; /*7943*/
		$1.height = 1; /*7944*/
		$forall($1.options, function() {
			/*7955*/
			var _3 = $k[--$j]; /*7955*/
			$1[$k[--$j]] = _3; /*7955*/
		}); /*7955*/
		$1.textfont = "" + $1.textfont; /*7957*/
		$1.textsize = +$1.textsize; /*7958*/
		$1.textyoffset = +$1.textyoffset; /*7959*/
		$1.height = +$1.height; /*7960*/
		if ($1.semi) { //no-else/*7965*/
			$1.includecheck = true; /*7963*/
			$1.includestartstop = true; /*7964*/
		} /*7964*/
		$1.barchars = "0R9GLVHA8EZ4NTS1J2Q6C7DYKBUIX3FWP5M"; /*7968*/
		$1.charvals = new Map; /*7969*/
		for (var _A = 0; _A <= 34; _A += 1) {
			/*7970*/
			$put($1.charvals, $geti($1.barchars, _A, 1), _A); /*7970*/
		} /*7970*/
		for (var _G = 0, _F = $1.barcode.length - 1; _G <= _F; _G += 1) {
			/*7977*/
			var _K = $get($1.charvals, $geti($1.barcode, _G, 1)) !== undefined; /*7974*/
			if (!_K) { //no-else/*7976*/
				$k[$j++] = 'bwipp.bc412badCharacter'; /*7975*/
				$k[$j++] = "BC412 must contain only digits and capital letters except O"; /*7975*/
				$0.raiseerror(); /*7975*/
			} /*7975*/
		} /*7975*/
		$k[$j++] = 'barlen'; /*7979*/
		$k[$j++] = $1.barcode.length; /*7979*/
		if ($1.validatecheck) { //no-else/*7979*/
			var _N = $k[--$j]; /*7979*/
			$k[$j++] = _N - 1; /*7979*/
		} /*7979*/
		var _O = $k[--$j]; /*7979*/
		$1[$k[--$j]] = _O; /*7979*/
		$1.checksum = 0; /*7981*/
		for (var _S = 0, _R = $1.barlen - 1; _S <= _R; _S += 1) {
			/*7985*/
			$1.checksum = $get($1.charvals, $geti($1.barcode, _S, 1)) + $1.checksum; /*7984*/
		} /*7984*/
		$1.checksum = $1.checksum % 35; /*7986*/
		if ($1.validatecheck) { //no-else/*7993*/
			if ($get($1.barcode, $1.barlen) != $get($1.barchars, $1.checksum)) { //no-else/*7990*/
				$k[$j++] = 'bwipp.bc412badCheckDigit'; /*7989*/
				$k[$j++] = "Incorrect BC412 check digit provided"; /*7989*/
				$0.raiseerror(); /*7989*/
			} /*7989*/
			$1.barcode = $geti($1.barcode, 0, $1.barlen); /*7991*/
			$1.includecheck = true; /*7992*/
		} /*7992*/
		$1.encs = $a(["11111115", "13111212", "11131113", "12111213", "12121311", "13131111", "12111312", "11131212", "11121411", "11151111", "15111111", "11111511", "12131211", "13121112", "13111212", "11111214", "12121113", "11111313", "13111113", "11121213", "11141112", "11121312", "11141211", "14121111", "12121212", "11131311", "13121211", "12111411", "14111211", "11111412", "12111114", "14111112", "12141111", "11121114", "12131112", "12", "111"]); /*8005*/
		$1.sbs = $s((($1.barlen + 1) * 8) + 5); /*8007*/
		if ($1.includecheck) {
			/*8011*/
			$1.txt = $a($1.barlen + 1); /*8009*/
		} else {
			/*8011*/
			$1.txt = $a($1.barlen); /*8011*/
		} /*8011*/
		if ($1.includestartstop) {
			/*8021*/
			$puti($1.sbs, 0, $get($1.encs, 35)); /*8016*/
			$1.pos = 2; /*8017*/
			$1.txtpos = 3; /*8018*/
		} else {
			/*8021*/
			$1.pos = 0; /*8020*/
			$1.txtpos = 0; /*8021*/
		} /*8021*/
		for (var _x = 0, _w = $1.barlen - 1; _x <= _w; _x += 1) {
			/*8030*/
			$1.i = _x; /*8025*/
			$1.indx = $get($1.charvals, $geti($1.barcode, $1.i, 1)); /*8026*/
			$puti($1.sbs, $1.pos, $get($1.encs, $1.indx)); /*8027*/
			$put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), ($1.i * 12) + $1.txtpos, $1.textyoffset, $1.textfont, $1.textsize])); /*8028*/
			$1.pos = $1.pos + 8; /*8029*/
		} /*8029*/
		if ($1.includecheck) { //no-else/*8041*/
			$puti($1.sbs, $1.pos, $get($1.encs, $1.checksum)); /*8034*/
			if ($1.includecheckintext) {
				/*8038*/
				$put($1.txt, $1.barlen, $a([$geti($1.barchars, $1.checksum, 1), ($1.barlen * 12) + $1.txtpos, $1.textyoffset, $1.textfont, $1.textsize])); /*8036*/
			} else {
				/*8038*/
				$put($1.txt, $1.barlen, $a(["", ($1.barlen * 12) + $1.txtpos, $1.textyoffset, $1.textfont, $1.textsize])); /*8038*/
			} /*8038*/
			$1.pos = $1.pos + 8; /*8040*/
		} /*8040*/
		if ($1.includestartstop) { //no-else/*8047*/
			$puti($1.sbs, $1.pos, $get($1.encs, 36)); /*8045*/
			$1.pos = $1.pos + 2; /*8046*/
		} /*8046*/
		$1.sbs = $geti($1.sbs, 0, $1.pos); /*8050*/
		$k[$j++] = Infinity; /*8059*/
		$k[$j++] = Infinity; /*8053*/
		$forall($1.sbs, function() {
			/*8053*/
			var _1v = $k[--$j]; /*8053*/
			$k[$j++] = _1v - 48; /*8053*/
		}); /*8053*/
		var _1w = $a(); /*8053*/
		$k[$j++] = Infinity; /*8054*/
		for (var _1y = 0, _1z = ~~(($1.sbs.length + 1) / 2); _1y < _1z; _1y++) {
			/*8054*/
			$k[$j++] = $1.height; /*8054*/
		} /*8054*/
		var _21 = $a(); /*8054*/
		$k[$j++] = Infinity; /*8055*/
		for (var _23 = 0, _24 = ~~(($1.sbs.length + 1) / 2); _23 < _24; _23++) {
			/*8055*/
			$k[$j++] = 0; /*8055*/
		} /*8055*/
		var _25 = $a(); /*8055*/
		$k[$j++] = 'ren'; /*8058*/
		$k[$j++] = $0.renlinear; /*8058*/
		$k[$j++] = 'sbs'; /*8058*/
		$k[$j++] = _1w; /*8058*/
		$k[$j++] = 'bhs'; /*8058*/
		$k[$j++] = _21; /*8058*/
		$k[$j++] = 'bbs'; /*8058*/
		$k[$j++] = _25; /*8058*/
		if ($1.includetext) { //no-else/*8058*/
			$k[$j++] = 'txt'; /*8057*/
			$k[$j++] = $1.txt; /*8057*/
		} /*8057*/
		$k[$j++] = 'opt'; /*8059*/
		$k[$j++] = $1.options; /*8059*/
		var _29 = $d(); /*8059*/
		$k[$j++] = _29; /*8062*/
		if (!$1.dontdraw) { //no-else/*8062*/
			$0.renlinear(); /*8062*/
		} /*8062*/
	};
	$0.rationalizedCodabar = function() {
		var $1 = {}; /*8091*/
		$1.options = $k[--$j]; /*8093*/
		$1.barcode = $k[--$j]; /*8094*/
		$1.dontdraw = false; /*8096*/
		$1.altstartstop = false; /*8097*/
		$1.includecheck = false; /*8098*/
		$1.validatecheck = false; /*8099*/
		$1.includetext = false; /*8100*/
		$1.includecheckintext = false; /*8101*/
		$1.textfont = "OCR-B"; /*8102*/
		$1.textsize = 10; /*8103*/
		$1.textyoffset = -8.5; /*8104*/
		$1.height = 1; /*8105*/
		$forall($1.options, function() {
			/*8116*/
			var _3 = $k[--$j]; /*8116*/
			$1[$k[--$j]] = _3; /*8116*/
		}); /*8116*/
		$1.textfont = "" + $1.textfont; /*8118*/
		$1.textsize = +$1.textsize; /*8119*/
		$1.textyoffset = +$1.textyoffset; /*8120*/
		$1.height = +$1.height; /*8121*/
		$1.encs = $a(["11111331", "11113311", "11131131", "33111111", "11311311", "31111311", "13111131", "13113111", "13311111", "31131111", "11133111", "11331111", "31113131", "31311131", "31313111", "11313131", "11331311", "13131131", "11131331", "11133311"]); /*8129*/
		if ($1.altstartstop) {
			/*8135*/
			$1.barchars = "0123456789-$:/.+TN*E"; /*8133*/
		} else {
			/*8135*/
			$1.barchars = "0123456789-$:/.+ABCD"; /*8135*/
		} /*8135*/
		$1.charvals = new Map; /*8137*/
		for (var _B = 0; _B <= 19; _B += 1) {
			/*8138*/
			$put($1.charvals, $geti($1.barchars, _B, 1), _B); /*8138*/
		} /*8138*/
		$1.bodyvals = new Map; /*8139*/
		for (var _F = 0; _F <= 15; _F += 1) {
			/*8140*/
			$put($1.bodyvals, $geti($1.barchars, _F, 1), _F); /*8140*/
		} /*8140*/
		$1.ssvals = new Map; /*8141*/
		for (var _J = 16; _J <= 19; _J += 1) {
			/*8142*/
			$put($1.ssvals, $geti($1.barchars, _J, 1), _J); /*8142*/
		} /*8142*/
		var _Q = $get($1.ssvals, $geti($1.barcode, 0, 1)) !== undefined; /*8145*/
		var _V = $get($1.ssvals, $geti($1.barcode, $1.barcode.length - 1, 1)) !== undefined; /*8146*/
		if ((!_Q) || (!_V)) { //no-else/*8152*/
			if ($1.altstartstop) {
				/*8150*/
				$k[$j++] = 'bwipp.rationalizedCodabarBadAltStartStop'; /*8148*/
				$k[$j++] = "Codabar start and stop characters must be one of E N T or *"; /*8148*/
				$0.raiseerror(); /*8148*/
			} else {
				/*8150*/
				$k[$j++] = 'bwipp.rationalizedCodabarBadStartStop'; /*8150*/
				$k[$j++] = "Codabar start and stop characters must be one of A B C or D"; /*8150*/
				$0.raiseerror(); /*8150*/
			} /*8150*/
		} /*8150*/
		for (var _Z = 1, _Y = $1.barcode.length - 2; _Z <= _Y; _Z += 1) {
			/*8157*/
			var _d = $get($1.bodyvals, $geti($1.barcode, _Z, 1)) !== undefined; /*8154*/
			if (!_d) { //no-else/*8156*/
				$k[$j++] = 'bwipp.rationalizedCodabarBadCharacter'; /*8155*/
				$k[$j++] = "Codabar body must contain only digits and symbols - $ : / . +"; /*8155*/
				$0.raiseerror(); /*8155*/
			} /*8155*/
		} /*8155*/
		$k[$j++] = 'barlen'; /*8159*/
		$k[$j++] = $1.barcode.length; /*8159*/
		if ($1.validatecheck) { //no-else/*8159*/
			var _g = $k[--$j]; /*8159*/
			$k[$j++] = _g - 1; /*8159*/
		} /*8159*/
		var _h = $k[--$j]; /*8159*/
		$1[$k[--$j]] = _h; /*8159*/
		$1.checksum = 0; /*8161*/
		for (var _l = 0, _k = $1.barlen - 2; _l <= _k; _l += 1) {
			/*8165*/
			$1.checksum = $get($1.charvals, $geti($1.barcode, _l, 1)) + $1.checksum; /*8164*/
		} /*8164*/
		$1.checksum = $get($1.charvals, $geti($1.barcode, $1.barcode.length - 1, 1)) + $1.checksum; /*8167*/
		$1.checksum = (16 - ($1.checksum % 16)) % 16; /*8168*/
		if ($1.validatecheck) { //no-else/*8178*/
			if ($get($1.barcode, $1.barlen - 1) != $get($1.barchars, $1.checksum)) { //no-else/*8172*/
				$k[$j++] = 'bwipp.rationalizedCodabarBadCheckDigit'; /*8171*/
				$k[$j++] = "Incorrect Codabar check digit provided"; /*8171*/
				$0.raiseerror(); /*8171*/
			} /*8171*/
			var _16 = $s($1.barlen); /*8173*/
			$puti(_16, 0, $geti($1.barcode, 0, $1.barlen - 1)); /*8174*/
			$puti(_16, $1.barlen - 1, $geti($1.barcode, $1.barlen, 1)); /*8175*/
			$1.barcode = _16; /*8176*/
			$1.includecheck = true; /*8177*/
		} /*8177*/
		$k[$j++] = 'sbs'; /*8180*/
		$k[$j++] = $1.barlen; /*8180*/
		if ($1.includecheck) { //no-else/*8180*/
			var _1G = $k[--$j]; /*8180*/
			$k[$j++] = _1G + 1; /*8180*/
		} /*8180*/
		var _1I = $s($k[--$j] * 8); /*8180*/
		$1[$k[--$j]] = _1I; /*8180*/
		$k[$j++] = 'txt'; /*8181*/
		$k[$j++] = $1.barlen; /*8181*/
		if ($1.includecheck) { //no-else/*8181*/
			var _1M = $k[--$j]; /*8181*/
			$k[$j++] = _1M + 1; /*8181*/
		} /*8181*/
		var _1O = $a($k[--$j]); /*8181*/
		$1[$k[--$j]] = _1O; /*8181*/
		$1.xpos = 0; /*8183*/
		for (var _1S = 0, _1R = $1.barlen - 2; _1S <= _1R; _1S += 1) {
			/*8193*/
			$1.i = _1S; /*8185*/
			$1.indx = $get($1.charvals, $geti($1.barcode, $1.i, 1)); /*8186*/
			$1.enc = $get($1.encs, $1.indx); /*8187*/
			$puti($1.sbs, $1.i * 8, $1.enc); /*8188*/
			$put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), $1.xpos, $1.textyoffset, $1.textfont, $1.textsize])); /*8189*/
			for (var _1o = 0; _1o <= 7; _1o += 1) {
				/*8192*/
				$1.xpos = ($get($1.enc, _1o) - 48) + $1.xpos; /*8191*/
			} /*8191*/
		} /*8191*/
		if ($1.includecheck) {
			/*8217*/
			$puti($1.sbs, ($1.barlen * 8) - 8, $get($1.encs, $1.checksum)); /*8198*/
			if ($1.includecheckintext) {
				/*8202*/
				$put($1.txt, $1.barlen - 1, $a([$geti($1.barchars, $1.checksum, 1), $1.xpos, $1.textyoffset, $1.textfont, $1.textsize])); /*8200*/
			} else {
				/*8202*/
				$put($1.txt, $1.barlen - 1, $a([" ", $1.xpos, $1.textyoffset, $1.textfont, $1.textsize])); /*8202*/
			} /*8202*/
			for (var _2G = 0; _2G <= 7; _2G += 1) {
				/*8206*/
				$1.xpos = ($get($get($1.encs, $1.checksum), _2G) - 48) + $1.xpos; /*8205*/
			} /*8205*/
			$1.indx = $get($1.charvals, $geti($1.barcode, $1.barlen - 1, 1)); /*8208*/
			$1.enc = $get($1.encs, $1.indx); /*8209*/
			$puti($1.sbs, $1.barlen * 8, $1.enc); /*8210*/
			$put($1.txt, $1.barlen, $a([$geti($1.barcode, $1.barlen - 1, 1), $1.xpos, $1.textyoffset, $1.textfont, $1.textsize])); /*8211*/
		} else {
			/*8217*/
			$1.indx = $get($1.charvals, $geti($1.barcode, $1.barlen - 1, 1)); /*8214*/
			$1.enc = $get($1.encs, $1.indx); /*8215*/
			$puti($1.sbs, ($1.barlen * 8) - 8, $1.enc); /*8216*/
			$put($1.txt, $1.barlen - 1, $a([$geti($1.barcode, $1.barlen - 1, 1), $1.xpos, $1.textyoffset, $1.textfont, $1.textsize])); /*8217*/
		} /*8217*/
		$k[$j++] = Infinity; /*8229*/
		$k[$j++] = Infinity; /*8223*/
		$forall($1.sbs, function() {
			/*8223*/
			var _33 = $k[--$j]; /*8223*/
			$k[$j++] = _33 - 48; /*8223*/
		}); /*8223*/
		var _34 = $a(); /*8223*/
		$k[$j++] = Infinity; /*8224*/
		for (var _36 = 0, _37 = ~~(($1.sbs.length + 1) / 2); _36 < _37; _36++) {
			/*8224*/
			$k[$j++] = $1.height; /*8224*/
		} /*8224*/
		var _39 = $a(); /*8224*/
		$k[$j++] = Infinity; /*8225*/
		for (var _3B = 0, _3C = ~~(($1.sbs.length + 1) / 2); _3B < _3C; _3B++) {
			/*8225*/
			$k[$j++] = 0; /*8225*/
		} /*8225*/
		var _3D = $a(); /*8225*/
		$k[$j++] = 'ren'; /*8228*/
		$k[$j++] = $0.renlinear; /*8228*/
		$k[$j++] = 'sbs'; /*8228*/
		$k[$j++] = _34; /*8228*/
		$k[$j++] = 'bhs'; /*8228*/
		$k[$j++] = _39; /*8228*/
		$k[$j++] = 'bbs'; /*8228*/
		$k[$j++] = _3D; /*8228*/
		if ($1.includetext) { //no-else/*8228*/
			$k[$j++] = 'txt'; /*8227*/
			$k[$j++] = $1.txt; /*8227*/
		} /*8227*/
		$k[$j++] = 'opt'; /*8229*/
		$k[$j++] = $1.options; /*8229*/
		var _3H = $d(); /*8229*/
		$k[$j++] = _3H; /*8232*/
		if (!$1.dontdraw) { //no-else/*8232*/
			$0.renlinear(); /*8232*/
		} /*8232*/
	};
	$0.onecode = function() {
		var $1 = {}; /*8261*/
		$1.options = $k[--$j]; /*8263*/
		$1.barcode = $k[--$j]; /*8264*/
		$1.dontdraw = false; /*8266*/
		$1.height = 0.15; /*8267*/
		$forall($1.options, function() {
			/*8278*/
			var _3 = $k[--$j]; /*8278*/
			$1[$k[--$j]] = _3; /*8278*/
		}); /*8278*/
		$1.height = +$1.height; /*8280*/
		$1.barlen = $1.barcode.length; /*8282*/
		$k[$j++] = Infinity; /*8291*/
		var _9 = $eq($geti($1.barcode, 5, 1), "9") ? 14 : 11; /*8288*/
		$k[$j++] = 2; /*8291*/
		$k[$j++] = 2; /*8291*/
		$k[$j++] = 5; /*8291*/
		$k[$j++] = 5; /*8291*/
		$k[$j++] = _9; /*8291*/
		$k[$j++] = _9; /*8291*/
		$k[$j++] = 20; /*8291*/
		$k[$j++] = 20; /*8291*/
		$k[$j++] = 25; /*8291*/
		$k[$j++] = 25; /*8291*/
		$k[$j++] = 29; /*8291*/
		$k[$j++] = 29; /*8291*/
		$1.txtdict = $d(); /*8292*/
		$1.txt = $a($1.barlen + 6); /*8293*/
		$1.spacecnt = 0; /*8294*/
		for (var _F = 0, _E = $1.barlen - 1; _F <= _E; _F += 1) {
			/*8302*/
			$1.i = _F; /*8296*/
			var _I = $get($1.txtdict, $1.i) !== undefined; /*8297*/
			if (_I) { //no-else/*8300*/
				$put($1.txt, $1.i + $1.spacecnt, $a([" ", 0, 0, "", 0])); /*8298*/
				$1.spacecnt = $1.spacecnt + 1; /*8299*/
			} /*8299*/
			$put($1.txt, $1.i + $1.spacecnt, $a([$geti($1.barcode, $1.i, 1), 0, 0, "", 0])); /*8301*/
		} /*8301*/
		$1.txt = $geti($1.txt, 0, $1.barcode.length + $1.spacecnt); /*8303*/
		$1.normalize = function() {
			$1.base = $k[--$j]; /*8306*/
			$1.num = $k[--$j]; /*8307*/
			for (var _c = $1.num.length - 1; _c >= 1; _c -= 1) {
				/*8312*/
				$1.i = _c; /*8309*/
				var _d = $1.num; /*8310*/
				var _e = $1.i; /*8310*/
				$put(_d, _e - 1, $get(_d, _e - 1) + (~~($get($1.num, $1.i) / $1.base))); /*8310*/
				$put($1.num, $1.i, $get($1.num, $1.i) % $1.base); /*8311*/
			} /*8311*/
			for (;;) {
				/*8318*/
				if ($lt($get($1.num, 0), $1.base)) { //no-else/*8314*/
					break; /*8314*/
				} /*8314*/
				$k[$j++] = Infinity; /*8315*/
				$k[$j++] = 0; /*8315*/
				$forall($1.num); /*8315*/
				$1.num = $a(); /*8315*/
				$put($1.num, 0, $get($1.num, 0) + (~~($get($1.num, 1) / $1.base))); /*8316*/
				$put($1.num, 1, $get($1.num, 1) % $1.base); /*8317*/
			} /*8317*/
			$k[$j++] = Infinity; /*8320*/
			$1.i = true; /*8320*/
			var _15 = $1.num; /*8320*/
			for (var _16 = 0, _17 = _15.length; _16 < _17; _16++) {
				/*8320*/
				var _18 = $get(_15, _16); /*8320*/
				$k[$j++] = _18; /*8320*/
				if ((_18 == 0) && $1.i) {
					/*8320*/
					$j--; /*8320*/
				} else {
					/*8320*/
					$1.i = false; /*8320*/
				} /*8320*/
			} /*8320*/
			$1.num = $a(); /*8320*/
			if ($1.num.length == 0) { //no-else/*8321*/
				$1.num = $a([0]); /*8321*/
			} /*8321*/
			$k[$j++] = $1.num; /*8322*/
		}; /*8323*/
		$1.bigadd = function() {
			var _1E = $k[--$j]; /*8326*/
			var _1F = $k[--$j]; /*8326*/
			$1.offset = Math.abs(_1E.length - _1F.length); /*8327*/
			if (_1E.length < _1F.length) { //no-else/*8328*/
				var _ = _1E; /*8328*/
				_1E = _1F; /*8328*/
				_1F = _; /*8328*/
			} /*8328*/
			$1.a = _1E; /*8329*/
			$1.b = _1F; /*8329*/
			for (var _1I = 0, _1H = $1.b.length - 1; _1I <= _1H; _1I += 1) {
				/*8332*/
				var _1J = $1.a; /*8331*/
				var _1K = $1.offset; /*8331*/
				$put(_1J, _1I + _1K, $get(_1J, _1I + _1K) + $get($1.b, _1I)); /*8331*/
			} /*8331*/
			$k[$j++] = $1.a; /*8333*/
		}; /*8334*/
		if ($1.barlen == 20) { //no-else/*8337*/
			$k[$j++] = $a([0]); /*8337*/
		} /*8337*/
		if ($1.barlen == 25) { //no-else/*8338*/
			$k[$j++] = $a([1]); /*8338*/
		} /*8338*/
		if ($1.barlen == 29) { //no-else/*8339*/
			$k[$j++] = $a([1, 0, 0, 0, 0, 1]); /*8339*/
		} /*8339*/
		if ($1.barlen == 31) { //no-else/*8340*/
			$k[$j++] = $a([1, 0, 0, 0, 1, 0, 0, 0, 0, 1]); /*8340*/
		} /*8340*/
		var _1X = $k[--$j]; /*8341*/
		$k[$j++] = 'binval'; /*8341*/
		$k[$j++] = _1X; /*8341*/
		$k[$j++] = Infinity; /*8341*/
		$forall($geti($1.barcode, 20, $1.barlen - 20), function() {
			/*8341*/
			var _1b = $k[--$j]; /*8341*/
			$k[$j++] = _1b - 48; /*8341*/
		}); /*8341*/
		var _1c = $a(); /*8341*/
		$k[$j++] = _1c; /*8341*/
		$1.bigadd(); /*8341*/
		var _1d = $k[--$j]; /*8341*/
		$1[$k[--$j]] = _1d; /*8341*/
		$k[$j++] = Infinity; /*8342*/
		var _1f = $1.binval; /*8342*/
		for (var _1g = 0, _1h = _1f.length; _1g < _1h; _1g++) {
			/*8342*/
			$k[$j++] = $get(_1f, _1g); /*8342*/
		} /*8342*/
		$k[$j++] = $get($1.barcode, 0) - 48; /*8342*/
		$1.binval = $a(); /*8342*/
		$k[$j++] = Infinity; /*8343*/
		var _1m = $1.binval; /*8343*/
		for (var _1n = 0, _1o = _1m.length; _1n < _1o; _1n++) {
			/*8343*/
			$k[$j++] = $get(_1m, _1n) * 5; /*8343*/
		} /*8343*/
		var _1q = $a(); /*8343*/
		$k[$j++] = 'binval'; /*8343*/
		$k[$j++] = _1q; /*8343*/
		$k[$j++] = $a([$get($1.barcode, 1) - 48]); /*8343*/
		$1.bigadd(); /*8343*/
		$k[$j++] = 10; /*8343*/
		$1.normalize(); /*8343*/
		var _1u = $k[--$j]; /*8343*/
		$1[$k[--$j]] = _1u; /*8343*/
		$k[$j++] = Infinity; /*8344*/
		var _1w = $1.binval; /*8344*/
		for (var _1x = 0, _1y = _1w.length; _1x < _1y; _1x++) {
			/*8344*/
			$k[$j++] = $get(_1w, _1x); /*8344*/
		} /*8344*/
		$forall($geti($1.barcode, 2, 18), function() {
			/*8344*/
			var _22 = $k[--$j]; /*8344*/
			$k[$j++] = _22 - 48; /*8344*/
		}); /*8344*/
		$1.binval = $a(); /*8344*/
		$1.bytes = $a(13); /*8347*/
		$k[$j++] = Infinity; /*8348*/
		var _25 = $1.binval; /*8348*/
		for (var _26 = 0, _27 = _25.length; _26 < _27; _26++) {
			/*8348*/
			$k[$j++] = $get(_25, _26); /*8348*/
		} /*8348*/
		$1.bintmp = $a(); /*8348*/
		for (var _2A = 12; _2A >= 0; _2A -= 1) {
			/*8358*/
			$1.i = _2A; /*8350*/
			for (var _2D = 0, _2C = $1.bintmp.length - 2; _2D <= _2C; _2D += 1) {
				/*8355*/
				$1.j = _2D; /*8352*/
				var _2E = $1.bintmp; /*8353*/
				var _2F = $1.j; /*8353*/
				$put(_2E, _2F + 1, $get(_2E, _2F + 1) + (($get($1.bintmp, $1.j) % 256) * 10)); /*8353*/
				$put($1.bintmp, $1.j, ~~($get($1.bintmp, $1.j) / 256)); /*8354*/
			} /*8354*/
			$put($1.bytes, $1.i, $get($1.bintmp, $1.bintmp.length - 1) % 256); /*8356*/
			var _2U = $1.bintmp; /*8357*/
			var _2V = $1.bintmp; /*8357*/
			$put(_2U, _2V.length - 1, ~~($get(_2U, _2V.length - 1) / 256)); /*8357*/
		} /*8357*/
		$1.fcs = 2047; /*8361*/
		$1.dat = $get($1.bytes, 0) << 5; /*8362*/
		for (var _2Z = 0, _2a = 6; _2Z < _2a; _2Z++) {
			/*8371*/
			if ((($1.fcs ^ $1.dat) & 1024) != 0) {
				/*8367*/
				$1.fcs = ($1.fcs << 1) ^ 3893; /*8365*/
			} else {
				/*8367*/
				$1.fcs = $1.fcs << 1; /*8367*/
			} /*8367*/
			$1.fcs = $1.fcs & 2047; /*8369*/
			$1.dat = $1.dat << 1; /*8370*/
		} /*8370*/
		for (var _2h = 1; _2h <= 12; _2h += 1) {
			/*8383*/
			$1.dat = $get($1.bytes, _2h) << 3; /*8373*/
			for (var _2k = 0, _2l = 8; _2k < _2l; _2k++) {
				/*8382*/
				if ((($1.fcs ^ $1.dat) & 1024) != 0) {
					/*8378*/
					$1.fcs = ($1.fcs << 1) ^ 3893; /*8376*/
				} else {
					/*8378*/
					$1.fcs = $1.fcs << 1; /*8378*/
				} /*8378*/
				$1.fcs = $1.fcs & 2047; /*8380*/
				$1.dat = $1.dat << 1; /*8381*/
			} /*8381*/
		} /*8381*/
		$1.codewords = $a(10); /*8386*/
		for (var _2t = 9; _2t >= 0; _2t -= 1) {
			/*8401*/
			$1.i = _2t; /*8388*/
			if ($1.i == 9) {
				/*8392*/
				$1.b = 636; /*8390*/
			} else {
				/*8392*/
				$1.b = 1365; /*8392*/
			} /*8392*/
			for (var _2x = 0, _2w = $1.binval.length - 2; _2x <= _2w; _2x += 1) {
				/*8398*/
				$1.j = _2x; /*8395*/
				var _2y = $1.binval; /*8396*/
				var _2z = $1.j; /*8396*/
				$put(_2y, _2z + 1, $get(_2y, _2z + 1) + (($get($1.binval, $1.j) % $1.b) * 10)); /*8396*/
				$put($1.binval, $1.j, ~~($get($1.binval, $1.j) / $1.b)); /*8397*/
			} /*8397*/
			$put($1.codewords, $1.i, $get($1.binval, $1.binval.length - 1) % $1.b); /*8399*/
			var _3H = $1.binval; /*8400*/
			var _3I = $1.binval; /*8400*/
			$put(_3H, _3I.length - 1, ~~($get(_3H, _3I.length - 1) / $1.b)); /*8400*/
		} /*8400*/
		$put($1.codewords, 9, $get($1.codewords, 9) * 2); /*8404*/
		if (($1.fcs & 1024) != 0) { //no-else/*8407*/
			$put($1.codewords, 0, $get($1.codewords, 0) + 659); /*8406*/
		} /*8406*/
		$1.tab513 = $a([31, 7936, 47, 7808, 55, 7552, 59, 7040, 61, 6016, 62, 3968, 79, 7744, 87, 7488, 91, 6976, 93, 5952, 94, 3904, 103, 7360, 107, 6848, 109, 5824, 110, 3776, 115, 6592, 117, 5568, 118, 3520, 121, 5056, 122, 3008, 124, 1984, 143, 7712, 151, 7456, 155, 6944, 157, 5920, 158, 3872, 167, 7328, 171, 6816, 173, 5792, 174, 3744, 179, 6560, 181, 5536, 182, 3488, 185, 5024, 186, 2976, 188, 1952, 199, 7264, 203, 6752, 205, 5728, 206, 3680, 211, 6496, 213, 5472, 214, 3424, 217, 4960, 218, 2912, 220, 1888, 227, 6368, 229, 5344, 230, 3296, 233, 4832, 234, 2784, 236, 1760, 241, 4576, 242, 2528, 244, 1504, 248, 992, 271, 7696, 279, 7440, 283, 6928, 285, 5904, 286, 3856, 295, 7312, 299, 6800, 301, 5776, 302, 3728, 307, 6544, 309, 5520, 310, 3472, 313, 5008, 314, 2960, 316, 1936, 327, 7248, 331, 6736, 333, 5712, 334, 3664, 339, 6480, 341, 5456, 342, 3408, 345, 4944, 346, 2896, 348, 1872, 355, 6352, 357, 5328, 358, 3280, 361, 4816, 362, 2768, 364, 1744, 369, 4560, 370, 2512, 372, 1488, 376, 976, 391, 7216, 395, 6704, 397, 5680, 398, 3632, 403, 6448, 405, 5424, 406, 3376, 409, 4912, 410, 2864, 412, 1840, 419, 6320, 421, 5296, 422, 3248, 425, 4784, 426, 2736, 428, 1712, 433, 4528, 434, 2480, 436, 1456, 440, 944, 451, 6256, 453, 5232, 454, 3184, 457, 4720, 458, 2672, 460, 1648, 465, 4464, 466, 2416, 468, 1392, 472, 880, 481, 4336, 482, 2288, 484, 1264, 488, 752, 527, 7688, 535, 7432, 539, 6920, 541, 5896, 542, 3848, 551, 7304, 555, 6792, 557, 5768, 558, 3720, 563, 6536, 565, 5512, 566, 3464, 569, 5000, 570, 2952, 572, 1928, 583, 7240, 587, 6728, 589, 5704, 590, 3656, 595, 6472, 597, 5448, 598, 3400, 601, 4936, 602, 2888, 604, 1864, 611, 6344, 613, 5320, 614, 3272, 617, 4808, 618, 2760, 620, 1736, 625, 4552, 626, 2504, 628, 1480, 632, 968, 647, 7208, 651, 6696, 653, 5672, 654, 3624, 659, 6440, 661, 5416, 662, 3368, 665, 4904, 666, 2856, 668, 1832, 675, 6312, 677, 5288, 678, 3240, 681, 4776, 682, 2728, 684, 1704, 689, 4520, 690, 2472, 692, 1448, 696, 936, 707, 6248, 709, 5224, 710, 3176, 713, 4712, 714, 2664, 716, 1640, 721, 4456, 722, 2408, 724, 1384, 728, 872, 737, 4328, 738, 2280, 740, 1256, 775, 7192, 779, 6680, 781, 5656, 782, 3608, 787, 6424, 789, 5400, 790, 3352, 793, 4888, 794, 2840, 796, 1816, 803, 6296, 805, 5272, 806, 3224, 809, 4760, 810, 2712, 812, 1688, 817, 4504, 818, 2456, 820, 1432, 824, 920, 835, 6232, 837, 5208, 838, 3160, 841, 4696, 842, 2648, 844, 1624, 849, 4440, 850, 2392, 852, 1368, 865, 4312, 866, 2264, 868, 1240, 899, 6200, 901, 5176, 902, 3128, 905, 4664, 906, 2616, 908, 1592, 913, 4408, 914, 2360, 916, 1336, 929, 4280, 930, 2232, 932, 1208, 961, 4216, 962, 2168, 964, 1144, 1039, 7684, 1047, 7428, 1051, 6916, 1053, 5892, 1054, 3844, 1063, 7300, 1067, 6788, 1069, 5764, 1070, 3716, 1075, 6532, 1077, 5508, 1078, 3460, 1081, 4996, 1082, 2948, 1084, 1924, 1095, 7236, 1099, 6724, 1101, 5700, 1102, 3652, 1107, 6468, 1109, 5444, 1110, 3396, 1113, 4932, 1114, 2884, 1116, 1860, 1123, 6340, 1125, 5316, 1126, 3268, 1129, 4804, 1130, 2756, 1132, 1732, 1137, 4548, 1138, 2500, 1140, 1476, 1159, 7204, 1163, 6692, 1165, 5668, 1166, 3620, 1171, 6436, 1173, 5412, 1174, 3364, 1177, 4900, 1178, 2852, 1180, 1828, 1187, 6308, 1189, 5284, 1190, 3236, 1193, 4772, 1194, 2724, 1196, 1700, 1201, 4516, 1202, 2468, 1204, 1444, 1219, 6244, 1221, 5220, 1222, 3172, 1225, 4708, 1226, 2660, 1228, 1636, 1233, 4452, 1234, 2404, 1236, 1380, 1249, 4324, 1250, 2276, 1287, 7188, 1291, 6676, 1293, 5652, 1294, 3604, 1299, 6420, 1301, 5396, 1302, 3348, 1305, 4884, 1306, 2836, 1308, 1812, 1315, 6292, 1317, 5268, 1318, 3220, 1321, 4756, 1322, 2708, 1324, 1684, 1329, 4500, 1330, 2452, 1332, 1428, 1347, 6228, 1349, 5204, 1350, 3156, 1353, 4692, 1354, 2644, 1356, 1620, 1361, 4436, 1362, 2388, 1377, 4308, 1378, 2260, 1411, 6196, 1413, 5172, 1414, 3124, 1417, 4660, 1418, 2612, 1420, 1588, 1425, 4404, 1426, 2356, 1441, 4276, 1442, 2228, 1473, 4212, 1474, 2164, 1543, 7180, 1547, 6668, 1549, 5644, 1550, 3596, 1555, 6412, 1557, 5388, 1558, 3340, 1561, 4876, 1562, 2828, 1564, 1804, 1571, 6284, 1573, 5260, 1574, 3212, 1577, 4748, 1578, 2700, 1580, 1676, 1585, 4492, 1586, 2444, 1603, 6220, 1605, 5196, 1606, 3148, 1609, 4684, 1610, 2636, 1617, 4428, 1618, 2380, 1633, 4300, 1634, 2252, 1667, 6188, 1669, 5164, 1670, 3116, 1673, 4652, 1674, 2604, 1681, 4396, 1682, 2348, 1697, 4268, 1698, 2220, 1729, 4204, 1730, 2156, 1795, 6172, 1797, 5148, 1798, 3100, 1801, 4636, 1802, 2588, 1809, 4380, 1810, 2332, 1825, 4252, 1826, 2204, 1857, 4188, 1858, 2140, 1921, 4156, 1922, 2108, 2063, 7682, 2071, 7426, 2075, 6914, 2077, 5890, 2078, 3842, 2087, 7298, 2091, 6786, 2093, 5762, 2094, 3714, 2099, 6530, 2101, 5506, 2102, 3458, 2105, 4994, 2106, 2946, 2119, 7234, 2123, 6722, 2125, 5698, 2126, 3650, 2131, 6466, 2133, 5442, 2134, 3394, 2137, 4930, 2138, 2882, 2147, 6338, 2149, 5314, 2150, 3266, 2153, 4802, 2154, 2754, 2161, 4546, 2162, 2498, 2183, 7202, 2187, 6690, 2189, 5666, 2190, 3618, 2195, 6434, 2197, 5410, 2198, 3362, 2201, 4898, 2202, 2850, 2211, 6306, 2213, 5282, 2214, 3234, 2217, 4770, 2218, 2722, 2225, 4514, 2226, 2466, 2243, 6242, 2245, 5218, 2246, 3170, 2249, 4706, 2250, 2658, 2257, 4450, 2258, 2402, 2273, 4322, 2311, 7186, 2315, 6674, 2317, 5650, 2318, 3602, 2323, 6418, 2325, 5394, 2326, 3346, 2329, 4882, 2330, 2834, 2339, 6290, 2341, 5266, 2342, 3218, 2345, 4754, 2346, 2706, 2353, 4498, 2354, 2450, 2371, 6226, 2373, 5202, 2374, 3154, 2377, 4690, 2378, 2642, 2385, 4434, 2401, 4306, 2435, 6194, 2437, 5170, 2438, 3122, 2441, 4658, 2442, 2610, 2449, 4402, 2465, 4274, 2497, 4210, 2567, 7178, 2571, 6666, 2573, 5642, 2574, 3594, 2579, 6410, 2581, 5386, 2582, 3338, 2585, 4874, 2586, 2826, 2595, 6282, 2597, 5258, 2598, 3210, 2601, 4746, 2602, 2698, 2609, 4490, 2627, 6218, 2629, 5194, 2630, 3146, 2633, 4682, 2641, 4426, 2657, 4298, 2691, 6186, 2693, 5162, 2694, 3114, 2697, 4650, 2705, 4394, 2721, 4266, 2753, 4202, 2819, 6170, 2821, 5146, 2822, 3098, 2825, 4634, 2833, 4378, 2849, 4250, 2881, 4186, 2945, 4154, 3079, 7174, 3083, 6662, 3085, 5638, 3086, 3590, 3091, 6406, 3093, 5382, 3094, 3334, 3097, 4870, 3107, 6278, 3109, 5254, 3110, 3206, 3113, 4742, 3121, 4486, 3139, 6214, 3141, 5190, 3145, 4678, 3153, 4422, 3169, 4294, 3203, 6182, 3205, 5158, 3209, 4646, 3217, 4390, 3233, 4262, 3265, 4198, 3331, 6166, 3333, 5142, 3337, 4630, 3345, 4374, 3361, 4246, 3393, 4182, 3457, 4150, 3587, 6158, 3589, 5134, 3593, 4622, 3601, 4366, 3617, 4238, 3649, 4174, 3713, 4142, 3841, 4126, 4111, 7681, 4119, 7425, 4123, 6913, 4125, 5889, 4135, 7297, 4139, 6785, 4141, 5761, 4147, 6529, 4149, 5505, 4153, 4993, 4167, 7233, 4171, 6721, 4173, 5697, 4179, 6465, 4181, 5441, 4185, 4929, 4195, 6337, 4197, 5313, 4201, 4801, 4209, 4545, 4231, 7201, 4235, 6689, 4237, 5665, 4243, 6433, 4245, 5409, 4249, 4897, 4259, 6305, 4261, 5281, 4265, 4769, 4273, 4513, 4291, 6241, 4293, 5217, 4297, 4705, 4305, 4449, 4359, 7185, 4363, 6673, 4365, 5649, 4371, 6417, 4373, 5393, 4377, 4881, 4387, 6289, 4389, 5265, 4393, 4753, 4401, 4497, 4419, 6225, 4421, 5201, 4425, 4689, 4483, 6193, 4485, 5169, 4489, 4657, 4615, 7177, 4619, 6665, 4621, 5641, 4627, 6409, 4629, 5385, 4633, 4873, 4643, 6281, 4645, 5257, 4649, 4745, 4675, 6217, 4677, 5193, 4739, 6185, 4741, 5161, 4867, 6169, 4869, 5145, 5127, 7173, 5131, 6661, 5133, 5637, 5139, 6405, 5141, 5381, 5155, 6277, 5157, 5253, 5187, 6213, 5251, 6181, 5379, 6165, 5635, 6157, 6151, 7171, 6155, 6659, 6163, 6403, 6179, 6275, 6211, 5189, 4681, 4433, 4321, 3142, 2634, 2386, 2274, 1612, 1364, 1252, 856, 744, 496]); /*8497*/
		$1.tab213 = $a([3, 6144, 5, 5120, 6, 3072, 9, 4608, 10, 2560, 12, 1536, 17, 4352, 18, 2304, 20, 1280, 24, 768, 33, 4224, 34, 2176, 36, 1152, 40, 640, 48, 384, 65, 4160, 66, 2112, 68, 1088, 72, 576, 80, 320, 96, 192, 129, 4128, 130, 2080, 132, 1056, 136, 544, 144, 288, 257, 4112, 258, 2064, 260, 1040, 264, 528, 513, 4104, 514, 2056, 516, 1032, 1025, 4100, 1026, 2052, 2049, 4098, 4097, 2050, 1028, 520, 272, 160]); /*8506*/
		$1.chars = $a(10); /*8508*/
		for (var _3V = 0; _3V <= 9; _3V += 1) {
			/*8517*/
			$1.i = _3V; /*8510*/
			var _3Y = $get($1.codewords, $1.i); /*8511*/
			$k[$j++] = _3Y; /*8515*/
			if (_3Y <= 1286) {
				/*8514*/
				var _3b = $get($1.tab513, $k[--$j]); /*8512*/
				$k[$j++] = _3b; /*8512*/
			} else {
				/*8514*/
				var _3e = $get($1.tab213, $k[--$j] - 1287); /*8514*/
				$k[$j++] = _3e; /*8514*/
			} /*8514*/
			$put($1.chars, $1.i, $k[--$j]); /*8516*/
		} /*8516*/
		for (var _3i = 9; _3i >= 0; _3i -= 1) {
			/*8524*/
			$1.i = _3i; /*8520*/
			if (((~~Math.pow(2, $1.i)) & $1.fcs) != 0) { //no-else/*8523*/
				$put($1.chars, $1.i, $get($1.chars, $1.i) ^ 8191); /*8522*/
			} /*8522*/
		} /*8522*/
		$1.barmap = $a([7, 2, 4, 3, 1, 10, 0, 0, 9, 12, 2, 8, 5, 5, 6, 11, 8, 9, 3, 1, 0, 1, 5, 12, 2, 5, 1, 8, 4, 4, 9, 11, 6, 3, 8, 10, 3, 9, 7, 6, 5, 11, 1, 4, 8, 5, 2, 12, 9, 10, 0, 2, 7, 1, 6, 7, 3, 6, 4, 9, 0, 3, 8, 6, 6, 4, 2, 7, 1, 1, 9, 9, 7, 10, 5, 2, 4, 0, 3, 8, 6, 2, 0, 4, 8, 11, 1, 0, 9, 8, 3, 12, 2, 6, 7, 7, 5, 1, 4, 10, 1, 12, 6, 9, 7, 3, 8, 0, 5, 8, 9, 7, 4, 6, 2, 10, 3, 4, 0, 5, 8, 4, 5, 7, 7, 11, 1, 9, 6, 0, 9, 6, 0, 6, 4, 8, 2, 1, 3, 2, 5, 9, 8, 12, 4, 11, 6, 1, 9, 5, 7, 4, 3, 3, 1, 2, 0, 7, 2, 0, 1, 3, 4, 1, 6, 10, 3, 5, 8, 7, 9, 4, 2, 11, 5, 6, 0, 8, 7, 12, 4, 2, 8, 1, 5, 10, 3, 0, 9, 3, 0, 9, 6, 5, 2, 4, 7, 8, 1, 7, 5, 0, 4, 5, 2, 3, 0, 10, 6, 12, 9, 2, 3, 11, 1, 6, 8, 8, 7, 9, 5, 4, 0, 11, 1, 5, 2, 2, 9, 1, 4, 12, 8, 3, 6, 6, 7, 0, 3, 7, 4, 7, 7, 5, 0, 12, 1, 11, 2, 9, 9, 0, 6, 8, 5, 3, 3, 10, 8, 2]); /*8541*/
		$1.bbs = $a(65); /*8543*/
		$1.bhs = $a(65); /*8544*/
		for (var _3t = 0; _3t <= 64; _3t += 1) {
			/*8565*/
			$1.i = _3t; /*8546*/
			$1.dec = ($get($1.chars, $get($1.barmap, $1.i * 4)) & (~~Math.pow(2, $get($1.barmap, ($1.i * 4) + 1)))) != 0; /*8547*/
			$1.asc = ($get($1.chars, $get($1.barmap, ($1.i * 4) + 2)) & (~~Math.pow(2, $get($1.barmap, ($1.i * 4) + 3)))) != 0; /*8548*/
			if ((!$1.dec) && (!$1.asc)) { //no-else/*8552*/
				$put($1.bbs, $1.i, (3 * $1.height) / 8); /*8550*/
				$put($1.bhs, $1.i, (2 * $1.height) / 8); /*8551*/
			} /*8551*/
			if ((!$1.dec) && $1.asc) { //no-else/*8556*/
				$put($1.bbs, $1.i, (3 * $1.height) / 8); /*8554*/
				$put($1.bhs, $1.i, (5 * $1.height) / 8); /*8555*/
			} /*8555*/
			if ($1.dec && (!$1.asc)) { //no-else/*8560*/
				$put($1.bbs, $1.i, (0 * $1.height) / 8); /*8558*/
				$put($1.bhs, $1.i, (5 * $1.height) / 8); /*8559*/
			} /*8559*/
			if ($1.dec && $1.asc) { //no-else/*8564*/
				$put($1.bbs, $1.i, (0 * $1.height) / 8); /*8562*/
				$put($1.bhs, $1.i, (8 * $1.height) / 8); /*8563*/
			} /*8563*/
		} /*8563*/
		$k[$j++] = Infinity; /*8578*/
		var _4g = $1.bbs; /*8570*/
		var _4h = $1.bhs; /*8571*/
		$k[$j++] = Infinity; /*8572*/
		for (var _4j = 0, _4k = $1.bhs.length - 1; _4j < _4k; _4j++) {
			/*8572*/
			$k[$j++] = 1.44; /*8572*/
			$k[$j++] = 1.872; /*8572*/
		} /*8572*/
		$k[$j++] = 1.44; /*8572*/
		var _4l = $a(); /*8572*/
		$k[$j++] = 'ren'; /*8578*/
		$k[$j++] = $0.renlinear; /*8578*/
		$k[$j++] = 'bbs'; /*8578*/
		$k[$j++] = _4g; /*8578*/
		$k[$j++] = 'bhs'; /*8578*/
		$k[$j++] = _4h; /*8578*/
		$k[$j++] = 'sbs'; /*8578*/
		$k[$j++] = _4l; /*8578*/
		$k[$j++] = 'txt'; /*8578*/
		$k[$j++] = $1.txt; /*8578*/
		$k[$j++] = 'textxalign'; /*8578*/
		$k[$j++] = "left"; /*8578*/
		$k[$j++] = 'textfont'; /*8578*/
		$k[$j++] = "OCR-B"; /*8578*/
		$k[$j++] = 'textyoffset'; /*8578*/
		$k[$j++] = 1; /*8578*/
		$k[$j++] = 'textxoffset'; /*8578*/
		$k[$j++] = -0.3; /*8578*/
		$k[$j++] = 'opt'; /*8578*/
		$k[$j++] = $1.options; /*8578*/
		var _4o = $d(); /*8578*/
		$k[$j++] = _4o; /*8581*/
		if (!$1.dontdraw) { //no-else/*8581*/
			$0.renlinear(); /*8581*/
		} /*8581*/
	};
	$0.postnet = function() {
		var $1 = {}; /*8610*/
		$1.options = $k[--$j]; /*8612*/
		$1.barcode = $k[--$j]; /*8613*/
		$1.dontdraw = false; /*8615*/
		$1.includetext = false; /*8616*/
		$1.validatecheck = false; /*8617*/
		$1.includecheckintext = false; /*8618*/
		$1.textfont = "OCR-B"; /*8619*/
		$1.textsize = 10; /*8620*/
		$1.textyoffset = -8.5; /*8621*/
		$1.height = 0.125; /*8622*/
		$forall($1.options, function() {
			/*8633*/
			var _3 = $k[--$j]; /*8633*/
			$1[$k[--$j]] = _3; /*8633*/
		}); /*8633*/
		$1.textfont = "" + $1.textfont; /*8635*/
		$1.textsize = +$1.textsize; /*8636*/
		$1.textyoffset = +$1.textyoffset; /*8637*/
		$1.height = +$1.height; /*8638*/
		$k[$j++] = 'barlen'; /*8640*/
		$k[$j++] = $1.barcode.length; /*8640*/
		if ($1.validatecheck) { //no-else/*8640*/
			var _B = $k[--$j]; /*8640*/
			$k[$j++] = _B - 1; /*8640*/
		} /*8640*/
		var _C = $k[--$j]; /*8640*/
		$1[$k[--$j]] = _C; /*8640*/
		if ((($1.barlen != 5) && ($1.barlen != 9)) && ($1.barlen != 11)) { //no-else/*8645*/
			$k[$j++] = 'bwipp.postnetBadLength'; /*8644*/
			$k[$j++] = "USPS POSTNET must be 5, 9 or 11 digits excluding check digit"; /*8644*/
			$0.raiseerror(); /*8644*/
		} /*8644*/
		$forall($1.barcode, function() {
			/*8650*/
			var _I = $k[--$j]; /*8647*/
			if ((_I < 48) || (_I > 57)) { //no-else/*8649*/
				$k[$j++] = 'bwipp.postnetBadCharacter'; /*8648*/
				$k[$j++] = "USPS POSTNET must contain only digits"; /*8648*/
				$0.raiseerror(); /*8648*/
			} /*8648*/
		}); /*8648*/
		$1.barchars = "0123456789"; /*8653*/
		$1.checksum = 0; /*8655*/
		for (var _L = 0, _K = $1.barlen - 1; _L <= _K; _L += 1) {
			/*8659*/
			$1.i = _L; /*8657*/
			$1.checksum = $1.checksum + ($get($1.barcode, $1.i) - 48); /*8658*/
		} /*8658*/
		$1.checksum = (10 - ($1.checksum % 10)) % 10; /*8660*/
		if ($1.validatecheck) { //no-else/*8666*/
			if ($get($1.barcode, $1.barlen) != $get($1.barchars, $1.checksum)) { //no-else/*8664*/
				$k[$j++] = 'bwipp.postnetBadCheckDigit'; /*8663*/
				$k[$j++] = "Incorrect USPS POSTNET check digit provided"; /*8663*/
				$0.raiseerror(); /*8663*/
			} /*8663*/
			$1.barcode = $geti($1.barcode, 0, $1.barlen); /*8665*/
		} /*8665*/
		$1.encs = $a(["55222", "22255", "22525", "22552", "25225", "25252", "25522", "52225", "52252", "52522", "5", "5"]); /*8673*/
		$1.bhs = $a(($1.barlen * 5) + 7); /*8675*/
		$1.txt = $a($1.barlen + 1); /*8676*/
		$1.enc = $get($1.encs, 10); /*8679*/
		$1.heights = $a($1.enc.length); /*8680*/
		for (var _m = 0, _l = $1.enc.length - 1; _m <= _l; _m += 1) {
			/*8684*/
			$1.j = _m; /*8682*/
			$put($1.heights, $1.j, ((~~$z($geti($1.enc, $1.j, 1))) * $1.height) / 5); /*8683*/
		} /*8683*/
		$puti($1.bhs, 0, $1.heights); /*8685*/
		for (var _x = 0, _w = $1.barlen - 1; _x <= _w; _x += 1) {
			/*8697*/
			$1.i = _x; /*8688*/
			$1.enc = $get($1.encs, $get($1.barcode, $1.i) - 48); /*8689*/
			$1.heights = $a($1.enc.length); /*8690*/
			for (var _17 = 0, _16 = $1.enc.length - 1; _17 <= _16; _17 += 1) {
				/*8694*/
				$1.j = _17; /*8692*/
				$put($1.heights, $1.j, ((~~$z($geti($1.enc, $1.j, 1))) * $1.height) / 5); /*8693*/
			} /*8693*/
			$puti($1.bhs, ($1.i * 5) + 1, $1.heights); /*8695*/
			$put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), (($1.i * 5) + 1) * 3.312, $1.textyoffset, $1.textfont, $1.textsize])); /*8696*/
		} /*8696*/
		$1.enc = $get($1.encs, $1.checksum); /*8700*/
		$1.heights = $a($1.enc.length); /*8701*/
		for (var _1Y = 0, _1X = $1.enc.length - 1; _1Y <= _1X; _1Y += 1) {
			/*8705*/
			$1.j = _1Y; /*8703*/
			$put($1.heights, $1.j, ((~~$z($geti($1.enc, $1.j, 1))) * $1.height) / 5); /*8704*/
		} /*8704*/
		$puti($1.bhs, ($1.barlen * 5) + 1, $1.heights); /*8706*/
		if ($1.includecheckintext) {
			/*8711*/
			$put($1.txt, $1.barlen, $a([$geti($1.barchars, $1.checksum, 1), (($1.barlen * 5) + 1) * 3.312, $1.textyoffset, $1.textfont, $1.textsize])); /*8709*/
		} else {
			/*8711*/
			$put($1.txt, $1.barlen, $a([" ", ((($1.barlen * 5) + 1) * 72) / 25, $1.textyoffset, $1.textfont, $1.textsize])); /*8711*/
		} /*8711*/
		$1.enc = $get($1.encs, 11); /*8715*/
		$1.heights = $a($1.enc.length); /*8716*/
		for (var _26 = 0, _25 = $1.enc.length - 1; _26 <= _25; _26 += 1) {
			/*8720*/
			$1.j = _26; /*8718*/
			$put($1.heights, $1.j, ((~~$z($geti($1.enc, $1.j, 1))) * $1.height) / 5); /*8719*/
		} /*8719*/
		$puti($1.bhs, ($1.barlen * 5) + 6, $1.heights); /*8721*/
		$k[$j++] = Infinity; /*8732*/
		var _2G = $1.bhs; /*8726*/
		$k[$j++] = Infinity; /*8727*/
		for (var _2I = 0, _2J = $1.bhs.length; _2I < _2J; _2I++) {
			/*8727*/
			$k[$j++] = 0; /*8727*/
		} /*8727*/
		var _2K = $a(); /*8727*/
		$k[$j++] = Infinity; /*8728*/
		for (var _2M = 0, _2N = $1.bhs.length - 1; _2M < _2N; _2M++) {
			/*8728*/
			$k[$j++] = 1.44; /*8728*/
			$k[$j++] = 1.872; /*8728*/
		} /*8728*/
		$k[$j++] = 1.44; /*8728*/
		var _2O = $a(); /*8728*/
		$k[$j++] = 'ren'; /*8731*/
		$k[$j++] = $0.renlinear; /*8731*/
		$k[$j++] = 'bhs'; /*8731*/
		$k[$j++] = _2G; /*8731*/
		$k[$j++] = 'bbs'; /*8731*/
		$k[$j++] = _2K; /*8731*/
		$k[$j++] = 'sbs'; /*8731*/
		$k[$j++] = _2O; /*8731*/
		if ($1.includetext) { //no-else/*8731*/
			$k[$j++] = 'txt'; /*8730*/
			$k[$j++] = $1.txt; /*8730*/
		} /*8730*/
		$k[$j++] = 'opt'; /*8732*/
		$k[$j++] = $1.options; /*8732*/
		var _2S = $d(); /*8732*/
		$k[$j++] = _2S; /*8735*/
		if (!$1.dontdraw) { //no-else/*8735*/
			$0.renlinear(); /*8735*/
		} /*8735*/
	};
	$0.planet = function() {
		var $1 = {}; /*8764*/
		$1.options = $k[--$j]; /*8766*/
		$1.barcode = $k[--$j]; /*8767*/
		$1.dontdraw = false; /*8769*/
		$1.includetext = false; /*8770*/
		$1.validatecheck = false; /*8771*/
		$1.includecheckintext = false; /*8772*/
		$1.textfont = "OCR-B"; /*8773*/
		$1.textsize = 10; /*8774*/
		$1.textyoffset = -8.5; /*8775*/
		$1.height = 0.125; /*8776*/
		$forall($1.options, function() {
			/*8787*/
			var _3 = $k[--$j]; /*8787*/
			$1[$k[--$j]] = _3; /*8787*/
		}); /*8787*/
		$1.textfont = "" + $1.textfont; /*8789*/
		$1.textsize = +$1.textsize; /*8790*/
		$1.textyoffset = +$1.textyoffset; /*8791*/
		$1.height = +$1.height; /*8792*/
		$k[$j++] = 'barlen'; /*8794*/
		$k[$j++] = $1.barcode.length; /*8794*/
		if ($1.validatecheck) { //no-else/*8794*/
			var _B = $k[--$j]; /*8794*/
			$k[$j++] = _B - 1; /*8794*/
		} /*8794*/
		var _C = $k[--$j]; /*8794*/
		$1[$k[--$j]] = _C; /*8794*/
		if (($1.barlen != 11) && ($1.barlen != 13)) { //no-else/*8799*/
			$k[$j++] = 'bwipp.planetBadLength'; /*8798*/
			$k[$j++] = "USPS PLANET must be 11 or 13 digits excluding check digit"; /*8798*/
			$0.raiseerror(); /*8798*/
		} /*8798*/
		$forall($1.barcode, function() {
			/*8804*/
			var _H = $k[--$j]; /*8801*/
			if ((_H < 48) || (_H > 57)) { //no-else/*8803*/
				$k[$j++] = 'bwipp.planetBadCharacter'; /*8802*/
				$k[$j++] = "USPS PLANET must contain only digits"; /*8802*/
				$0.raiseerror(); /*8802*/
			} /*8802*/
		}); /*8802*/
		$1.barchars = "0123456789"; /*8807*/
		$1.checksum = 0; /*8810*/
		for (var _K = 0, _J = $1.barlen - 1; _K <= _J; _K += 1) {
			/*8814*/
			$1.i = _K; /*8812*/
			$1.checksum = $1.checksum + ($get($1.barcode, $1.i) - 48); /*8813*/
		} /*8813*/
		$1.checksum = (10 - ($1.checksum % 10)) % 10; /*8815*/
		if ($1.validatecheck) { //no-else/*8821*/
			if ($get($1.barcode, $1.barlen) != $get($1.barchars, $1.checksum)) { //no-else/*8819*/
				$k[$j++] = 'bwipp.planetBadCheckDigit'; /*8818*/
				$k[$j++] = "Incorrect USPS PLANET check digit provided"; /*8818*/
				$0.raiseerror(); /*8818*/
			} /*8818*/
			$1.barcode = $geti($1.barcode, 0, $1.barlen); /*8820*/
		} /*8820*/
		$1.encs = $a(["22555", "55522", "55252", "55225", "52552", "52525", "52255", "25552", "25525", "25255", "5", "5"]); /*8828*/
		$1.bhs = $a(($1.barlen * 5) + 7); /*8830*/
		$1.txt = $a($1.barlen + 1); /*8831*/
		$1.enc = $get($1.encs, 10); /*8834*/
		$1.heights = $a($1.enc.length); /*8835*/
		for (var _l = 0, _k = $1.enc.length - 1; _l <= _k; _l += 1) {
			/*8839*/
			$1.j = _l; /*8837*/
			$put($1.heights, $1.j, ((~~$z($geti($1.enc, $1.j, 1))) * $1.height) / 5); /*8838*/
		} /*8838*/
		$puti($1.bhs, 0, $1.heights); /*8840*/
		for (var _w = 0, _v = $1.barlen - 1; _w <= _v; _w += 1) {
			/*8852*/
			$1.i = _w; /*8843*/
			$1.enc = $get($1.encs, $get($1.barcode, $1.i) - 48); /*8844*/
			$1.heights = $a($1.enc.length); /*8845*/
			for (var _16 = 0, _15 = $1.enc.length - 1; _16 <= _15; _16 += 1) {
				/*8849*/
				$1.j = _16; /*8847*/
				$put($1.heights, $1.j, ((~~$z($geti($1.enc, $1.j, 1))) * $1.height) / 5); /*8848*/
			} /*8848*/
			$puti($1.bhs, ($1.i * 5) + 1, $1.heights); /*8850*/
			$put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), (($1.i * 5) + 1) * 3.312, $1.textyoffset, $1.textfont, $1.textsize])); /*8851*/
		} /*8851*/
		$1.enc = $get($1.encs, $1.checksum); /*8855*/
		$1.heights = $a($1.enc.length); /*8856*/
		for (var _1X = 0, _1W = $1.enc.length - 1; _1X <= _1W; _1X += 1) {
			/*8860*/
			$1.j = _1X; /*8858*/
			$put($1.heights, $1.j, ((~~$z($geti($1.enc, $1.j, 1))) * $1.height) / 5); /*8859*/
		} /*8859*/
		$puti($1.bhs, ($1.barlen * 5) + 1, $1.heights); /*8861*/
		if ($1.includecheckintext) {
			/*8866*/
			$put($1.txt, $1.barlen, $a([$geti($1.barchars, $1.checksum, 1), (($1.barlen * 5) + 1) * 3.312, $1.textyoffset, $1.textfont, $1.textsize])); /*8864*/
		} else {
			/*8866*/
			$put($1.txt, $1.barlen, $a([" ", ((($1.barlen * 5) + 1) * 72) / 25, $1.textyoffset, $1.textfont, $1.textsize])); /*8866*/
		} /*8866*/
		$1.enc = $get($1.encs, 11); /*8870*/
		$1.heights = $a($1.enc.length); /*8871*/
		for (var _25 = 0, _24 = $1.enc.length - 1; _25 <= _24; _25 += 1) {
			/*8875*/
			$1.j = _25; /*8873*/
			$put($1.heights, $1.j, ((~~$z($geti($1.enc, $1.j, 1))) * $1.height) / 5); /*8874*/
		} /*8874*/
		$puti($1.bhs, ($1.barlen * 5) + 6, $1.heights); /*8876*/
		$k[$j++] = Infinity; /*8887*/
		var _2F = $1.bhs; /*8881*/
		$k[$j++] = Infinity; /*8882*/
		for (var _2H = 0, _2I = $1.bhs.length; _2H < _2I; _2H++) {
			/*8882*/
			$k[$j++] = 0; /*8882*/
		} /*8882*/
		var _2J = $a(); /*8882*/
		$k[$j++] = Infinity; /*8883*/
		for (var _2L = 0, _2M = $1.bhs.length - 1; _2L < _2M; _2L++) {
			/*8883*/
			$k[$j++] = 1.44; /*8883*/
			$k[$j++] = 1.872; /*8883*/
		} /*8883*/
		$k[$j++] = 1.44; /*8883*/
		var _2N = $a(); /*8883*/
		$k[$j++] = 'ren'; /*8886*/
		$k[$j++] = $0.renlinear; /*8886*/
		$k[$j++] = 'bhs'; /*8886*/
		$k[$j++] = _2F; /*8886*/
		$k[$j++] = 'bbs'; /*8886*/
		$k[$j++] = _2J; /*8886*/
		$k[$j++] = 'sbs'; /*8886*/
		$k[$j++] = _2N; /*8886*/
		if ($1.includetext) { //no-else/*8886*/
			$k[$j++] = 'txt'; /*8885*/
			$k[$j++] = $1.txt; /*8885*/
		} /*8885*/
		$k[$j++] = 'opt'; /*8887*/
		$k[$j++] = $1.options; /*8887*/
		var _2R = $d(); /*8887*/
		$k[$j++] = _2R; /*8890*/
		if (!$1.dontdraw) { //no-else/*8890*/
			$0.renlinear(); /*8890*/
		} /*8890*/
	};
	$0.royalmail = function() {
		var $1 = {}; /*8919*/
		$1.options = $k[--$j]; /*8921*/
		$1.barcode = $k[--$j]; /*8922*/
		$1.dontdraw = false; /*8924*/
		$1.includetext = false; /*8925*/
		$1.validatecheck = false; /*8926*/
		$1.includecheckintext = false; /*8927*/
		$1.textfont = "OCR-B"; /*8928*/
		$1.textsize = 10; /*8929*/
		$1.textyoffset = -8.5; /*8930*/
		$1.height = 0.175; /*8931*/
		$forall($1.options, function() {
			/*8942*/
			var _3 = $k[--$j]; /*8942*/
			$1[$k[--$j]] = _3; /*8942*/
		}); /*8942*/
		$1.textfont = "" + $1.textfont; /*8944*/
		$1.textsize = +$1.textsize; /*8945*/
		$1.textyoffset = +$1.textyoffset; /*8946*/
		$1.height = +$1.height; /*8947*/
		$1.barchars = "ZUVWXY501234B6789AHCDEFGNIJKLMTOPQRS"; /*8950*/
		$1.charvals = new Map; /*8951*/
		for (var _9 = 0; _9 <= 35; _9 += 1) {
			/*8952*/
			$put($1.charvals, $geti($1.barchars, _9, 1), _9); /*8952*/
		} /*8952*/
		for (var _F = 0, _E = $1.barcode.length - 1; _F <= _E; _F += 1) {
			/*8959*/
			var _J = $get($1.charvals, $geti($1.barcode, _F, 1)) !== undefined; /*8956*/
			if (!_J) { //no-else/*8958*/
				$k[$j++] = 'bwipp.royalmailBadCharacter'; /*8957*/
				$k[$j++] = "RM4SCC must contain only capital letters and digits"; /*8957*/
				$0.raiseerror(); /*8957*/
			} /*8957*/
		} /*8957*/
		$k[$j++] = 'barlen'; /*8961*/
		$k[$j++] = $1.barcode.length; /*8961*/
		if ($1.validatecheck) { //no-else/*8961*/
			var _M = $k[--$j]; /*8961*/
			$k[$j++] = _M - 1; /*8961*/
		} /*8961*/
		var _N = $k[--$j]; /*8961*/
		$1[$k[--$j]] = _N; /*8961*/
		$1.checksumrow = 0; /*8963*/
		$1.checksumcol = 0; /*8964*/
		for (var _R = 0, _Q = $1.barlen - 1; _R <= _Q; _R += 1) {
			/*8970*/
			$1.i = _R; /*8966*/
			$1.indx = $get($1.charvals, $geti($1.barcode, $1.i, 1)); /*8967*/
			$1.checksumrow = $1.checksumrow + (~~($1.indx / 6)); /*8968*/
			$1.checksumcol = $1.checksumcol + ($1.indx % 6); /*8969*/
		} /*8969*/
		$1.checksum = (($1.checksumrow % 6) * 6) + ($1.checksumcol % 6); /*8971*/
		if ($1.validatecheck) { //no-else/*8977*/
			if ($get($1.barcode, $1.barlen) != $get($1.barchars, $1.checksum)) { //no-else/*8975*/
				$k[$j++] = 'bwipp.royalmailBadCheckDigit'; /*8974*/
				$k[$j++] = "Incorrect RM4SCC check digit provided"; /*8974*/
				$0.raiseerror(); /*8974*/
			} /*8974*/
			$1.barcode = $geti($1.barcode, 0, $1.barlen); /*8976*/
		} /*8976*/
		$1.encs = $a(["3300", "2211", "2301", "2310", "3201", "3210", "1122", "0033", "0123", "0132", "1023", "1032", "1302", "0213", "0303", "0312", "1203", "1212", "1320", "0231", "0321", "0330", "1221", "1230", "3102", "2013", "2103", "2112", "3003", "3012", "3120", "2031", "2121", "2130", "3021", "3030", "2", "3"]); /*8988*/
		$1.encstr = $s(($1.barlen * 4) + 6); /*8990*/
		$1.txt = $a($1.barlen + 1); /*8991*/
		$puti($1.encstr, 0, $get($1.encs, 36)); /*8994*/
		for (var _x = 0, _w = $1.barlen - 1; _x <= _w; _x += 1) {
			/*9001*/
			$1.i = _x; /*8997*/
			$1.indx = $get($1.charvals, $geti($1.barcode, $1.i, 1)); /*8998*/
			$puti($1.encstr, ($1.i * 4) + 1, $get($1.encs, $1.indx)); /*8999*/
			$put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), (($1.i * 4) + 1) * 3.312, $1.textyoffset, $1.textfont, $1.textsize])); /*9000*/
		} /*9000*/
		$puti($1.encstr, ($1.barlen * 4) + 1, $get($1.encs, $1.checksum)); /*9004*/
		if ($1.includecheckintext) {
			/*9008*/
			$put($1.txt, $1.barlen, $a([$geti($1.barchars, $1.checksum, 1), (($1.barlen * 4) + 1) * 3.312, $1.textyoffset, $1.textfont, $1.textsize])); /*9006*/
		} else {
			/*9008*/
			$put($1.txt, $1.barlen, $a([" ", (($1.barlen * 4) + 1) * 3.312, $1.textyoffset, $1.textfont, $1.textsize])); /*9008*/
		} /*9008*/
		$puti($1.encstr, ($1.barlen * 4) + 5, $get($1.encs, 37)); /*9012*/
		$1.bbs = $a($1.encstr.length); /*9014*/
		$1.bhs = $a($1.encstr.length); /*9015*/
		for (var _1p = 0, _1o = $1.encstr.length - 1; _1p <= _1o; _1p += 1) {
			/*9035*/
			$1.i = _1p; /*9017*/
			$1.enc = $geti($1.encstr, $1.i, 1); /*9018*/
			if ($eq($1.enc, "0")) { //no-else/*9022*/
				$put($1.bbs, $1.i, (3 * $1.height) / 8); /*9020*/
				$put($1.bhs, $1.i, (2 * $1.height) / 8); /*9021*/
			} /*9021*/
			if ($eq($1.enc, "1")) { //no-else/*9026*/
				$put($1.bbs, $1.i, (0 * $1.height) / 8); /*9024*/
				$put($1.bhs, $1.i, (5 * $1.height) / 8); /*9025*/
			} /*9025*/
			if ($eq($1.enc, "2")) { //no-else/*9030*/
				$put($1.bbs, $1.i, (3 * $1.height) / 8); /*9028*/
				$put($1.bhs, $1.i, (5 * $1.height) / 8); /*9029*/
			} /*9029*/
			if ($eq($1.enc, "3")) { //no-else/*9034*/
				$put($1.bbs, $1.i, (0 * $1.height) / 8); /*9032*/
				$put($1.bhs, $1.i, (8 * $1.height) / 8); /*9033*/
			} /*9033*/
		} /*9033*/
		$k[$j++] = Infinity; /*9046*/
		var _2L = $1.bbs; /*9040*/
		var _2M = $1.bhs; /*9041*/
		$k[$j++] = Infinity; /*9042*/
		for (var _2O = 0, _2P = $1.bhs.length - 1; _2O < _2P; _2O++) {
			/*9042*/
			$k[$j++] = 1.44; /*9042*/
			$k[$j++] = 1.872; /*9042*/
		} /*9042*/
		$k[$j++] = 1.44; /*9042*/
		var _2Q = $a(); /*9042*/
		$k[$j++] = 'ren'; /*9045*/
		$k[$j++] = $0.renlinear; /*9045*/
		$k[$j++] = 'bbs'; /*9045*/
		$k[$j++] = _2L; /*9045*/
		$k[$j++] = 'bhs'; /*9045*/
		$k[$j++] = _2M; /*9045*/
		$k[$j++] = 'sbs'; /*9045*/
		$k[$j++] = _2Q; /*9045*/
		if ($1.includetext) { //no-else/*9045*/
			$k[$j++] = 'txt'; /*9044*/
			$k[$j++] = $1.txt; /*9044*/
		} /*9044*/
		$k[$j++] = 'opt'; /*9046*/
		$k[$j++] = $1.options; /*9046*/
		var _2U = $d(); /*9046*/
		$k[$j++] = _2U; /*9049*/
		if (!$1.dontdraw) { //no-else/*9049*/
			$0.renlinear(); /*9049*/
		} /*9049*/
	};
	$0.auspost = function() {
		var $1 = {}; /*9078*/
		$1.options = $k[--$j]; /*9080*/
		$1.barcode = $k[--$j]; /*9081*/
		$1.dontdraw = false; /*9083*/
		$1.includetext = false; /*9084*/
		$1.textfont = "OCR-B"; /*9085*/
		$1.textsize = 10; /*9086*/
		$1.textyoffset = -8.5; /*9087*/
		$1.height = 0.175; /*9088*/
		$1.custinfoenc = "character"; /*9089*/
		$forall($1.options, function() {
			/*9100*/
			var _3 = $k[--$j]; /*9100*/
			$1[$k[--$j]] = _3; /*9100*/
		}); /*9100*/
		$1.textfont = "" + $1.textfont; /*9102*/
		$1.textsize = +$1.textsize; /*9103*/
		$1.textyoffset = +$1.textyoffset; /*9104*/
		$1.height = +$1.height; /*9105*/
		$1.encs = $a(["000", "001", "002", "010", "011", "012", "020", "021", "022", "100", "101", "102", "110", "111", "112", "120", "121", "122", "200", "201", "202", "210", "211", "212", "220", "221", "222", "300", "301", "302", "310", "311", "312", "320", "321", "322", "023", "030", "031", "032", "033", "103", "113", "123", "130", "131", "132", "133", "203", "213", "223", "230", "231", "232", "233", "303", "313", "323", "330", "331", "332", "333", "003", "013", "00", "01", "02", "10", "11", "12", "20", "21", "22", "30", "13", "3"]); /*9119*/
		$1.barchars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz #"; /*9122*/
		$1.barlen = $1.barcode.length; /*9124*/
		if ($eq($geti($1.barcode, 0, 2), "11")) { //no-else/*9125*/
			$k[$j++] = 37; /*9125*/
		} /*9125*/
		if ($eq($geti($1.barcode, 0, 2), "45")) { //no-else/*9126*/
			$k[$j++] = 37; /*9126*/
		} /*9126*/
		if ($eq($geti($1.barcode, 0, 2), "59")) { //no-else/*9127*/
			$k[$j++] = 52; /*9127*/
		} /*9127*/
		if ($eq($geti($1.barcode, 0, 2), "62")) { //no-else/*9128*/
			$k[$j++] = 67; /*9128*/
		} /*9128*/
		$1.encstr = $s($k[--$j]); /*9129*/
		$1.txt = $a($1.barlen - 2); /*9130*/
		$puti($1.encstr, 0, $get($1.encs, 74)); /*9133*/
		for (var _Q = 0; _Q <= 1; _Q += 1) {
			/*9140*/
			$1.i = _Q; /*9137*/
			$puti($1.encstr, ($1.i * 2) + 2, $get($1.encs, (~~$z($geti($1.barcode, $1.i, 1))) + 64)); /*9139*/
		} /*9139*/
		for (var _Y = 2; _Y <= 9; _Y += 1) {
			/*9148*/
			$1.i = _Y; /*9144*/
			$puti($1.encstr, ($1.i * 2) + 2, $get($1.encs, (~~$z($geti($1.barcode, $1.i, 1))) + 64)); /*9146*/
			$put($1.txt, $1.i - 2, $a([$geti($1.barcode, $1.i, 1), ((($1.i - 2) * 2) + 6) * 3.312, $1.textyoffset, $1.textfont, $1.textsize])); /*9147*/
		} /*9147*/
		if ($eq($1.custinfoenc, "numeric")) {
			/*9170*/
			for (var _t = 0, _s = $1.barlen - 11; _t <= _s; _t += 1) {
				/*9157*/
				$1.i = _t; /*9153*/
				$puti($1.encstr, ($1.i * 2) + 22, $get($1.encs, (~~$z($geti($1.barcode, $1.i + 10, 1))) + 64)); /*9155*/
				$put($1.txt, $1.i + 8, $a([$geti($1.barcode, $1.i + 10, 1), (($1.i * 2) + 22) * 3.312, $1.textyoffset, $1.textfont, $1.textsize])); /*9156*/
			} /*9156*/
			$1.ciflen = ($1.barlen - 10) * 2; /*9158*/
		} else {
			/*9170*/
			for (var _1E = 0, _1D = $1.barlen - 11; _1E <= _1D; _1E += 1) {
				/*9169*/
				$1.i = _1E; /*9161*/
				$search($1.barchars, $geti($1.barcode, $1.i + 10, 1)); /*9162*/
				$j--; /*9163*/
				$1.indx = $k[--$j].length; /*9164*/
				$j -= 2; /*9165*/
				$1.enc = $get($1.encs, $1.indx); /*9166*/
				$puti($1.encstr, ($1.i * 3) + 22, $1.enc); /*9167*/
				$put($1.txt, $1.i + 8, $a([$geti($1.barcode, $1.i + 10, 1), (($1.i * 3) + 22) * 3.312, $1.textyoffset, $1.textfont, $1.textsize])); /*9168*/
			} /*9168*/
			$1.ciflen = ($1.barlen - 10) * 3; /*9170*/
		} /*9170*/
		for (var _1e = 22 + $1.ciflen, _1d = $1.encstr.length - 14; _1e <= _1d; _1e += 1) {
			/*9176*/
			$puti($1.encstr, _1e, $get($1.encs, 75)); /*9175*/
		} /*9175*/
		$1.rstable = $a(64 * 64); /*9179*/
		$k[$j++] = $1.rstable; /*9180*/
		$k[$j++] = 0; /*9180*/
		$k[$j++] = Infinity; /*9180*/
		for (var _1k = 0, _1l = 64; _1k < _1l; _1k++) {
			/*9180*/
			$k[$j++] = 0; /*9180*/
		} /*9180*/
		var _1m = $a(); /*9180*/
		var _1n = $k[--$j]; /*9180*/
		$puti($k[--$j], _1n, _1m); /*9180*/
		$k[$j++] = $1.rstable; /*9181*/
		$k[$j++] = 64; /*9181*/
		$k[$j++] = Infinity; /*9181*/
		for (var _1q = 0; _1q <= 63; _1q += 1) {
			/*9181*/
			$k[$j++] = _1q; /*9181*/
		} /*9181*/
		var _1r = $a(); /*9181*/
		var _1s = $k[--$j]; /*9181*/
		$puti($k[--$j], _1s, _1r); /*9181*/
		$1.prev = 1; /*9182*/
		for (var _1u = 0, _1v = 64; _1u < _1v; _1u++) {
			/*9197*/
			$1.next = $1.prev << 1; /*9184*/
			if (($1.next & 64) != 0) { //no-else/*9187*/
				$1.next = $1.next ^ 67; /*9186*/
			} /*9186*/
			for (var _1z = 0; _1z <= 63; _1z += 1) {
				/*9195*/
				$1.j = _1z; /*9189*/
				$1.nextcell = function() {
					$k[$j++] = $1.rstable; /*9190*/
					$k[$j++] = (64 * $1.next) + $1.j; /*9190*/
				}; /*9190*/
				$1.nextcell(); /*9191*/
				var _27 = $k[--$j]; /*9191*/
				$put($k[--$j], _27, $get($1.rstable, (64 * $1.prev) + $1.j) << 1); /*9191*/
				$1.nextcell(); /*9192*/
				var _29 = $k[--$j]; /*9192*/
				if (($get($k[--$j], _29) & 64) != 0) { //no-else/*9194*/
					$1.nextcell(); /*9193*/
					$1.nextcell(); /*9193*/
					var _2C = $k[--$j]; /*9193*/
					var _2E = $get($k[--$j], _2C); /*9193*/
					var _2F = $k[--$j]; /*9193*/
					$put($k[--$j], _2F, _2E ^ 67); /*9193*/
				} /*9193*/
			} /*9193*/
			$1.prev = $1.next; /*9196*/
		} /*9196*/
		$1.rscodes = $a((~~(($1.encstr.length - 16) / 3)) + 4); /*9200*/
		$k[$j++] = $1.rscodes; /*9201*/
		$k[$j++] = 0; /*9201*/
		$k[$j++] = Infinity; /*9201*/
		for (var _2L = 0, _2M = 4; _2L < _2M; _2L++) {
			/*9201*/
			$k[$j++] = 0; /*9201*/
		} /*9201*/
		var _2N = $a(); /*9201*/
		var _2O = $k[--$j]; /*9201*/
		$puti($k[--$j], _2O, _2N); /*9201*/
		for (var _2S = 2, _2R = $1.encstr.length - 16; _2S <= _2R; _2S += 3) {
			/*9209*/
			$1.i = _2S; /*9203*/
			$put($1.rscodes, ($1.rscodes.length - (~~(($1.i - 2) / 3))) - 1, (((~~$z($geti($1.encstr, $1.i, 1))) * 16) + ((~~$z($geti($1.encstr, $1.i + 1, 1))) * 4)) + (~~$z($geti($1.encstr, $1.i + 2, 1)))); /*9208*/
		} /*9208*/
		for (var _2g = $1.rscodes.length - 5; _2g >= 0; _2g -= 1) {
			/*9218*/
			$1.i = _2g; /*9211*/
			for (var _2h = 0; _2h <= 4; _2h += 1) {
				/*9217*/
				$1.j = _2h; /*9213*/
				$put($1.rscodes, $1.i + $1.j, $xo($get($1.rscodes, $1.i + $1.j), $get($1.rstable, (64 * $get($a([48, 17, 29, 30, 1]), $1.j)) + $get($1.rscodes, $1.i + 4)))); /*9216*/
			} /*9216*/
		} /*9216*/
		$1.checkcode = $strcpy($s(12), "000000000000"); /*9219*/
		for (var _2z = 0; _2z <= 3; _2z += 1) {
			/*9224*/
			$1.i = _2z; /*9221*/
			$1.enc = $cvrs($s(3), $get($1.rscodes, 3 - $1.i), 4); /*9222*/
			$puti($1.checkcode, ($1.i * 3) + (3 - $1.enc.length), $1.enc); /*9223*/
		} /*9223*/
		$puti($1.encstr, $1.encstr.length - 14, $1.checkcode); /*9227*/
		$puti($1.encstr, $1.encstr.length - 2, $get($1.encs, 74)); /*9228*/
		$1.bbs = $a($1.encstr.length); /*9230*/
		$1.bhs = $a($1.encstr.length); /*9231*/
		for (var _3M = 0, _3L = $1.encstr.length - 1; _3M <= _3L; _3M += 1) {
			/*9251*/
			$1.i = _3M; /*9233*/
			$1.enc = $geti($1.encstr, $1.i, 1); /*9234*/
			if ($eq($1.enc, "0")) { //no-else/*9238*/
				$put($1.bbs, $1.i, (0 * $1.height) / 8); /*9236*/
				$put($1.bhs, $1.i, (8 * $1.height) / 8); /*9237*/
			} /*9237*/
			if ($eq($1.enc, "1")) { //no-else/*9242*/
				$put($1.bbs, $1.i, (3 * $1.height) / 8); /*9240*/
				$put($1.bhs, $1.i, (5 * $1.height) / 8); /*9241*/
			} /*9241*/
			if ($eq($1.enc, "2")) { //no-else/*9246*/
				$put($1.bbs, $1.i, (0 * $1.height) / 8); /*9244*/
				$put($1.bhs, $1.i, (5 * $1.height) / 8); /*9245*/
			} /*9245*/
			if ($eq($1.enc, "3")) { //no-else/*9250*/
				$put($1.bbs, $1.i, (3 * $1.height) / 8); /*9248*/
				$put($1.bhs, $1.i, (2 * $1.height) / 8); /*9249*/
			} /*9249*/
		} /*9249*/
		$k[$j++] = Infinity; /*9262*/
		var _3s = $1.bbs; /*9256*/
		var _3t = $1.bhs; /*9257*/
		$k[$j++] = Infinity; /*9258*/
		for (var _3v = 0, _3w = $1.bhs.length - 1; _3v < _3w; _3v++) {
			/*9258*/
			$k[$j++] = 1.44; /*9258*/
			$k[$j++] = 1.872; /*9258*/
		} /*9258*/
		$k[$j++] = 1.44; /*9258*/
		var _3x = $a(); /*9258*/
		$k[$j++] = 'ren'; /*9261*/
		$k[$j++] = $0.renlinear; /*9261*/
		$k[$j++] = 'bbs'; /*9261*/
		$k[$j++] = _3s; /*9261*/
		$k[$j++] = 'bhs'; /*9261*/
		$k[$j++] = _3t; /*9261*/
		$k[$j++] = 'sbs'; /*9261*/
		$k[$j++] = _3x; /*9261*/
		if ($1.includetext) { //no-else/*9261*/
			$k[$j++] = 'txt'; /*9260*/
			$k[$j++] = $1.txt; /*9260*/
		} /*9260*/
		$k[$j++] = 'opt'; /*9262*/
		$k[$j++] = $1.options; /*9262*/
		var _41 = $d(); /*9262*/
		$k[$j++] = _41; /*9265*/
		if (!$1.dontdraw) { //no-else/*9265*/
			$0.renlinear(); /*9265*/
		} /*9265*/
	};
	$0.kix = function() {
		var $1 = {}; /*9294*/
		$1.options = $k[--$j]; /*9296*/
		$1.barcode = $k[--$j]; /*9297*/
		$1.dontdraw = false; /*9299*/
		$1.includetext = false; /*9300*/
		$1.textfont = "OCR-B"; /*9301*/
		$1.textsize = 10; /*9302*/
		$1.textyoffset = -8.5; /*9303*/
		$1.height = 0.175; /*9304*/
		$forall($1.options, function() {
			/*9315*/
			var _3 = $k[--$j]; /*9315*/
			$1[$k[--$j]] = _3; /*9315*/
		}); /*9315*/
		$1.textfont = "" + $1.textfont; /*9317*/
		$1.textsize = +$1.textsize; /*9318*/
		$1.textyoffset = +$1.textyoffset; /*9319*/
		$1.height = +$1.height; /*9320*/
		$1.encs = $a(["0033", "0123", "0132", "1023", "1032", "1122", "0213", "0303", "0312", "1203", "1212", "1302", "0231", "0321", "0330", "1221", "1230", "1320", "2013", "2103", "2112", "3003", "3012", "3102", "2031", "2121", "2130", "3021", "3030", "3120", "2211", "2301", "2310", "3201", "3210", "3300"]); /*9330*/
		$1.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"; /*9333*/
		$1.charvals = new Map; /*9334*/
		for (var _A = 0; _A <= 35; _A += 1) {
			/*9335*/
			$put($1.charvals, $geti($1.barchars, _A, 1), _A); /*9335*/
		} /*9335*/
		for (var _G = 0, _F = $1.barcode.length - 1; _G <= _F; _G += 1) {
			/*9342*/
			var _K = $get($1.charvals, $geti($1.barcode, _G, 1)) !== undefined; /*9339*/
			if (!_K) { //no-else/*9341*/
				$k[$j++] = 'bwipp.kixBadCharacter'; /*9340*/
				$k[$j++] = "KIX must contain only capital letters and digits"; /*9340*/
				$0.raiseerror(); /*9340*/
			} /*9340*/
		} /*9340*/
		$1.barlen = $1.barcode.length; /*9344*/
		$1.encstr = $s($1.barlen * 4); /*9345*/
		$1.txt = $a($1.barlen); /*9346*/
		for (var _S = 0, _R = $1.barlen - 1; _S <= _R; _S += 1) {
			/*9353*/
			$1.i = _S; /*9349*/
			$1.indx = $get($1.charvals, $geti($1.barcode, $1.i, 1)); /*9350*/
			$puti($1.encstr, $1.i * 4, $get($1.encs, $1.indx)); /*9351*/
			$put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), ($1.i * 4) * 3.312, $1.textyoffset, $1.textfont, $1.textsize])); /*9352*/
		} /*9352*/
		$1.bbs = $a($1.encstr.length); /*9355*/
		$1.bhs = $a($1.encstr.length); /*9356*/
		for (var _t = 0, _s = $1.encstr.length - 1; _t <= _s; _t += 1) {
			/*9376*/
			$1.i = _t; /*9358*/
			$1.enc = $geti($1.encstr, $1.i, 1); /*9359*/
			if ($eq($1.enc, "0")) { //no-else/*9363*/
				$put($1.bbs, $1.i, (3 * $1.height) / 8); /*9361*/
				$put($1.bhs, $1.i, (2 * $1.height) / 8); /*9362*/
			} /*9362*/
			if ($eq($1.enc, "1")) { //no-else/*9367*/
				$put($1.bbs, $1.i, (0 * $1.height) / 8); /*9365*/
				$put($1.bhs, $1.i, (5 * $1.height) / 8); /*9366*/
			} /*9366*/
			if ($eq($1.enc, "2")) { //no-else/*9371*/
				$put($1.bbs, $1.i, (3 * $1.height) / 8); /*9369*/
				$put($1.bhs, $1.i, (5 * $1.height) / 8); /*9370*/
			} /*9370*/
			if ($eq($1.enc, "3")) { //no-else/*9375*/
				$put($1.bbs, $1.i, (0 * $1.height) / 8); /*9373*/
				$put($1.bhs, $1.i, (8 * $1.height) / 8); /*9374*/
			} /*9374*/
		} /*9374*/
		$k[$j++] = Infinity; /*9387*/
		var _1P = $1.bbs; /*9381*/
		var _1Q = $1.bhs; /*9382*/
		$k[$j++] = Infinity; /*9383*/
		for (var _1S = 0, _1T = $1.bhs.length - 1; _1S < _1T; _1S++) {
			/*9383*/
			$k[$j++] = 1.44; /*9383*/
			$k[$j++] = 1.872; /*9383*/
		} /*9383*/
		$k[$j++] = 1.44; /*9383*/
		var _1U = $a(); /*9383*/
		$k[$j++] = 'ren'; /*9386*/
		$k[$j++] = $0.renlinear; /*9386*/
		$k[$j++] = 'bbs'; /*9386*/
		$k[$j++] = _1P; /*9386*/
		$k[$j++] = 'bhs'; /*9386*/
		$k[$j++] = _1Q; /*9386*/
		$k[$j++] = 'sbs'; /*9386*/
		$k[$j++] = _1U; /*9386*/
		if ($1.includetext) { //no-else/*9386*/
			$k[$j++] = 'txt'; /*9385*/
			$k[$j++] = $1.txt; /*9385*/
		} /*9385*/
		$k[$j++] = 'opt'; /*9387*/
		$k[$j++] = $1.options; /*9387*/
		var _1Y = $d(); /*9387*/
		$k[$j++] = _1Y; /*9390*/
		if (!$1.dontdraw) { //no-else/*9390*/
			$0.renlinear(); /*9390*/
		} /*9390*/
	};
	$0.japanpost = function() {
		var $1 = {}; /*9419*/
		$1.options = $k[--$j]; /*9421*/
		$1.barcode = $k[--$j]; /*9422*/
		$1.dontdraw = false; /*9424*/
		$1.includetext = false; /*9425*/
		$1.includecheckintext = false; /*9426*/
		$1.textfont = "OCR-B"; /*9427*/
		$1.textsize = 10; /*9428*/
		$1.textyoffset = -8.5; /*9429*/
		$1.height = 0.175; /*9430*/
		$forall($1.options, function() {
			/*9441*/
			var _3 = $k[--$j]; /*9441*/
			$1[$k[--$j]] = _3; /*9441*/
		}); /*9441*/
		$1.textfont = "" + $1.textfont; /*9443*/
		$1.textsize = +$1.textsize; /*9444*/
		$1.textyoffset = +$1.textyoffset; /*9445*/
		$1.height = +$1.height; /*9446*/
		$1.encs = $a(["300", "330", "312", "132", "321", "303", "123", "231", "213", "033", "030", "120", "102", "210", "012", "201", "021", "003", "333", "31", "13"]); /*9454*/
		$1.barchars = "0123456789-ABCDEFGHIJKLMNOPQRSTUVWXYZ"; /*9457*/
		$1.barlen = $1.barcode.length; /*9458*/
		$1.encstr = $s(((20 + 1) * 3) + 4); /*9460*/
		$1.digits = $a(20); /*9461*/
		$1.txt = $a($1.barlen + 1); /*9462*/
		$puti($1.encstr, 0, $get($1.encs, 19)); /*9465*/
		$1.checksum = 0; /*9467*/
		$1.j = 0; /*9468*/
		$1.i = 0; /*9468*/
		for (var _K = 0, _J = $1.barlen - 1; _K <= _J; _K += 1) {
			/*9502*/
			$1.i = _K; /*9470*/
			$search($1.barchars, $geti($1.barcode, $1.i, 1)); /*9471*/
			$j--; /*9472*/
			$1.indx = $k[--$j].length; /*9473*/
			$j -= 2; /*9474*/
			if (($1.indx >= 11) && ($1.indx < 37)) { //no-else/*9485*/
				if ($1.j > 18) { //no-else/*9476*/
					break; /*9476*/
				} /*9476*/
				$1.digit = (~~(($1.indx - 1) / 10)) + 10; /*9480*/
				$puti($1.encstr, ($1.j * 3) + 2, $get($1.encs, $1.digit)); /*9481*/
				$1.checksum = $1.checksum + $1.digit; /*9482*/
				$put($1.digits, $1.j, $1.digit); /*9483*/
				$1.j = $1.j + 1; /*9484*/
			} /*9484*/
			if ($1.j > 19) { //no-else/*9486*/
				break; /*9486*/
			} /*9486*/
			$1.digit = 0; /*9487*/
			if ($1.indx == 37) { //no-else/*9490*/
				$1.digit = 14; /*9489*/
			} /*9489*/
			if (($1.indx >= 11) && ($1.indx < 37)) { //no-else/*9493*/
				$1.digit = ($1.indx - 1) % 10; /*9492*/
			} /*9492*/
			if ($1.indx < 11) { //no-else/*9496*/
				$1.digit = $1.indx; /*9495*/
			} /*9495*/
			$puti($1.encstr, ($1.j * 3) + 2, $get($1.encs, $1.digit)); /*9497*/
			$1.checksum = $1.checksum + $1.digit; /*9498*/
			$put($1.digits, $1.j, $1.digit); /*9499*/
			$put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), (($1.j * 3) + 2) * 3.312, $1.textyoffset, $1.textfont, $1.textsize])); /*9500*/
			$1.j = $1.j + 1; /*9501*/
		} /*9501*/
		for (var _19 = $1.j, _18 = 20 - 1; _19 <= _18; _19 += 1) {
			/*9510*/
			$1.k = _19; /*9506*/
			$puti($1.encstr, ($1.k * 3) + 2, $get($1.encs, 14)); /*9507*/
			$1.checksum = $1.checksum + 14; /*9508*/
			$put($1.digits, $1.k, 14); /*9509*/
		} /*9509*/
		$1.checksum = 19 - ($1.checksum % 19); /*9513*/
		$puti($1.encstr, 2 + (20 * 3), $get($1.encs, $1.checksum)); /*9514*/
		$puti($1.encstr, 2 + (21 * 3), $get($1.encs, 20)); /*9517*/
		$1.checkdigit = " "; /*9518*/
		if ($1.includecheckintext) { //no-else/*9521*/
			$1.checkdigit = $geti($1.barchars, $1.checksum, 1); /*9520*/
		} /*9520*/
		$put($1.txt, $1.i + 1, $a([$1.checkdigit, ((20 * 3) + 2) * 3.312, $1.textyoffset, $1.textfont, $1.textsize])); /*9522*/
		$puti($1.encstr, ((20 + 1) * 3) + 2, $get($1.encs, 20)); /*9525*/
		$1.bbs = $a((21 * 3) + 4); /*9527*/
		$1.bhs = $a($1.bbs.length); /*9528*/
		for (var _1i = 0, _1h = $1.bbs.length - 1; _1i <= _1h; _1i += 1) {
			/*9552*/
			$1.i = _1i; /*9530*/
			$1.enc = $geti($1.encstr, $1.i, 1); /*9531*/
			$1.bunit = 0; /*9532*/
			$1.hunit = 0; /*9533*/
			if ($eq($1.enc, "0")) { //no-else/*9537*/
				$1.bunit = 3; /*9535*/
				$1.hunit = 2; /*9536*/
			} /*9536*/
			if ($eq($1.enc, "1")) { //no-else/*9541*/
				$1.bunit = 0; /*9539*/
				$1.hunit = 5; /*9540*/
			} /*9540*/
			if ($eq($1.enc, "2")) { //no-else/*9545*/
				$1.bunit = 3; /*9543*/
				$1.hunit = 5; /*9544*/
			} /*9544*/
			if ($eq($1.enc, "3")) { //no-else/*9549*/
				$1.bunit = 0; /*9547*/
				$1.hunit = 8; /*9548*/
			} /*9548*/
			$put($1.bbs, $1.i, ($1.bunit * $1.height) / 8); /*9550*/
			$put($1.bhs, $1.i, ($1.hunit * $1.height) / 8); /*9551*/
		} /*9551*/
		$k[$j++] = Infinity; /*9563*/
		var _1y = $1.bbs; /*9557*/
		var _1z = $1.bhs; /*9558*/
		$k[$j++] = Infinity; /*9559*/
		for (var _21 = 0, _22 = $1.bhs.length - 1; _21 < _22; _21++) {
			/*9559*/
			$k[$j++] = 1.44; /*9559*/
			$k[$j++] = 1.872; /*9559*/
		} /*9559*/
		$k[$j++] = 1.44; /*9559*/
		var _23 = $a(); /*9559*/
		$k[$j++] = 'ren'; /*9562*/
		$k[$j++] = $0.renlinear; /*9562*/
		$k[$j++] = 'bbs'; /*9562*/
		$k[$j++] = _1y; /*9562*/
		$k[$j++] = 'bhs'; /*9562*/
		$k[$j++] = _1z; /*9562*/
		$k[$j++] = 'sbs'; /*9562*/
		$k[$j++] = _23; /*9562*/
		if ($1.includetext) { //no-else/*9562*/
			$k[$j++] = 'txt'; /*9561*/
			$k[$j++] = $1.txt; /*9561*/
		} /*9561*/
		$k[$j++] = 'opt'; /*9563*/
		$k[$j++] = $1.options; /*9563*/
		var _27 = $d(); /*9563*/
		$k[$j++] = _27; /*9566*/
		if (!$1.dontdraw) { //no-else/*9566*/
			$0.renlinear(); /*9566*/
		} /*9566*/
	};
	$0.msi = function() {
		var $1 = {}; /*9595*/
		$1.options = $k[--$j]; /*9597*/
		$1.barcode = $k[--$j]; /*9598*/
		$1.dontdraw = false; /*9600*/
		$1.includecheck = false; /*9601*/
		$1.includetext = false; /*9602*/
		$1.includecheckintext = false; /*9603*/
		$1.checktype = "mod10"; /*9604*/
		$1.badmod11 = false; /*9605*/
		$1.textfont = "OCR-B"; /*9606*/
		$1.textsize = 10; /*9607*/
		$1.textyoffset = -8.5; /*9608*/
		$1.height = 1; /*9609*/
		$forall($1.options, function() {
			/*9620*/
			var _3 = $k[--$j]; /*9620*/
			$1[$k[--$j]] = _3; /*9620*/
		}); /*9620*/
		$1.textfont = "" + $1.textfont; /*9622*/
		$1.textsize = +$1.textsize; /*9623*/
		$1.textyoffset = +$1.textyoffset; /*9624*/
		$1.height = +$1.height; /*9625*/
		$1.encs = $a(["12121212", "12121221", "12122112", "12122121", "12211212", "12211221", "12212112", "12212121", "21121212", "21121221", "21", "121"]); /*9632*/
		$1.barchars = "0123456789"; /*9635*/
		$1.barlen = $1.barcode.length; /*9637*/
		$1.txtlen = $1.barlen; /*9638*/
		$1.mod10 = function() {
			$1.code = $k[--$j]; /*9641*/
			$k[$j++] = 0; /*9642*/
			$k[$j++] = 0; /*9642*/
			$forall($1.code, function() {
				/*9642*/
				var _E = $k[--$j]; /*9642*/
				var _F = $k[--$j]; /*9642*/
				var _G = $k[--$j]; /*9642*/
				$k[$j++] = (_E - 48) + (_F * 10); /*9642*/
				$k[$j++] = _G; /*9642*/
			}); /*9642*/
			$j--; /*9642*/
			var _H = $k[--$j]; /*9642*/
			$k[$j++] = _H * 2; /*9643*/
			$k[$j++] = 0; /*9643*/
			for (;;) {
				/*9643*/
				var _I = $k[--$j]; /*9643*/
				var _J = $k[--$j]; /*9643*/
				var _K = ~~(_J / 10); /*9643*/
				$k[$j++] = _I + (_J % 10); /*9643*/
				$k[$j++] = _K; /*9643*/
				if (_K == 0) { //no-else/*9643*/
					$j--; /*9643*/
					break; /*9643*/
				} /*9643*/
				var _L = $k[--$j]; /*9643*/
				var _M = $k[--$j]; /*9643*/
				$k[$j++] = _L; /*9643*/
				$k[$j++] = _M; /*9643*/
			} /*9643*/
			$k[$j++] = 0; /*9644*/
			$k[$j++] = 0; /*9644*/
			$forall($1.code, function() {
				/*9644*/
				var _O = $k[--$j]; /*9644*/
				var _P = $k[--$j]; /*9644*/
				var _Q = $k[--$j]; /*9644*/
				$k[$j++] = _P + (_O - 48); /*9644*/
				$k[$j++] = _Q; /*9644*/
			}); /*9644*/
			var _R = $k[--$j]; /*9644*/
			var _S = $k[--$j]; /*9644*/
			var _V = $s($1.code.length + 1); /*9646*/
			$puti(_V, 0, $1.code); /*9646*/
			$put(_V, $1.code.length, ((10 - (($k[--$j] + _R) % 10)) % 10) + 48); /*9646*/
			$k[$j++] = _V; /*9646*/
		}; /*9647*/
		$1.mod11 = function() {
			$1.code = $k[--$j]; /*9650*/
			$k[$j++] = $1.code.length - 1; /*9651*/
			$forall($1.code, function() {
				/*9651*/
				var _b = $k[--$j]; /*9651*/
				var _c = $k[--$j]; /*9651*/
				$k[$j++] = _b - 48; /*9651*/
				$k[$j++] = (_c % 6) + 2; /*9651*/
				$k[$j++] = _c - 1; /*9651*/
			}); /*9651*/
			$j--; /*9651*/
			$k[$j++] = 0; /*9652*/
			for (var _e = 0, _f = $1.code.length; _e < _f; _e++) {
				/*9652*/
				var _g = $k[--$j]; /*9652*/
				var _h = $k[--$j]; /*9652*/
				var _i = $k[--$j]; /*9652*/
				$k[$j++] = _g + (_i * _h); /*9652*/
			} /*9652*/
			var _k = (11 - ($k[--$j] % 11)) % 11; /*9654*/
			$k[$j++] = _k; /*9658*/
			if ((_k == 10) && $1.badmod11) {
				/*9657*/
				$j--; /*9655*/
				var _n = $s($1.code.length + 2); /*9655*/
				$puti(_n, 0, $1.code); /*9655*/
				$puti(_n, $1.code.length, "10"); /*9655*/
				$k[$j++] = _n; /*9655*/
			} else {
				/*9657*/
				var _r = $s($1.code.length + 1); /*9657*/
				$puti(_r, 0, $1.code); /*9657*/
				$put(_r, $1.code.length, $k[--$j] + 48); /*9657*/
				$k[$j++] = _r; /*9657*/
			} /*9657*/
		}; /*9659*/
		$1.ncrmod11 = function() {
			$1.code = $k[--$j]; /*9662*/
			$k[$j++] = $1.code.length - 1; /*9663*/
			$forall($1.code, function() {
				/*9663*/
				var _y = $k[--$j]; /*9663*/
				var _z = $k[--$j]; /*9663*/
				$k[$j++] = _y - 48; /*9663*/
				$k[$j++] = (_z % 8) + 2; /*9663*/
				$k[$j++] = _z - 1; /*9663*/
			}); /*9663*/
			$j--; /*9663*/
			$k[$j++] = 0; /*9664*/
			for (var _11 = 0, _12 = $1.code.length; _11 < _12; _11++) {
				/*9664*/
				var _13 = $k[--$j]; /*9664*/
				var _14 = $k[--$j]; /*9664*/
				var _15 = $k[--$j]; /*9664*/
				$k[$j++] = _13 + (_15 * _14); /*9664*/
			} /*9664*/
			var _17 = (11 - ($k[--$j] % 11)) % 11; /*9666*/
			$k[$j++] = _17; /*9670*/
			if ((_17 == 10) && $1.badmod11) {
				/*9669*/
				$j--; /*9667*/
				var _1A = $s($1.code.length + 2); /*9667*/
				$puti(_1A, 0, $1.code); /*9667*/
				$puti(_1A, $1.code.length, "10"); /*9667*/
				$k[$j++] = _1A; /*9667*/
			} else {
				/*9669*/
				var _1E = $s($1.code.length + 1); /*9669*/
				$puti(_1E, 0, $1.code); /*9669*/
				$put(_1E, $1.code.length, $k[--$j] + 48); /*9669*/
				$k[$j++] = _1E; /*9669*/
			} /*9669*/
		}; /*9671*/
		if ($1.includecheck) { //no-else/*9684*/
			if ($eq($1.checktype, "mod10")) { //no-else/*9675*/
				$k[$j++] = $1.barcode; /*9675*/
				$1.mod10(); /*9675*/
			} /*9675*/
			if ($eq($1.checktype, "mod1010")) { //no-else/*9676*/
				$k[$j++] = $1.barcode; /*9676*/
				$1.mod10(); /*9676*/
				$1.mod10(); /*9676*/
			} /*9676*/
			if ($eq($1.checktype, "mod11")) { //no-else/*9677*/
				$k[$j++] = $1.barcode; /*9677*/
				$1.mod11(); /*9677*/
			} /*9677*/
			if ($eq($1.checktype, "ncrmod11")) { //no-else/*9678*/
				$k[$j++] = $1.barcode; /*9678*/
				$1.ncrmod11(); /*9678*/
			} /*9678*/
			if ($eq($1.checktype, "mod1110")) { //no-else/*9679*/
				$k[$j++] = $1.barcode; /*9679*/
				$1.mod11(); /*9679*/
				$1.mod10(); /*9679*/
			} /*9679*/
			if ($eq($1.checktype, "ncrmod1110")) { //no-else/*9680*/
				$k[$j++] = $1.barcode; /*9680*/
				$1.ncrmod11(); /*9680*/
				$1.mod10(); /*9680*/
			} /*9680*/
			$1.barcode = $k[--$j]; /*9681*/
			$1.barlen = $1.barcode.length; /*9682*/
			if ($1.includecheckintext) { //no-else/*9683*/
				$1.txtlen = $1.barlen; /*9683*/
			} /*9683*/
		} /*9683*/
		$1.sbs = $s(($1.barlen * 8) + 5); /*9686*/
		$1.txt = $a($1.barlen); /*9687*/
		$puti($1.sbs, 0, $get($1.encs, 10)); /*9690*/
		for (var _1i = 0, _1h = $1.barlen - 1; _1i <= _1h; _1i += 1) {
			/*9702*/
			$1.i = _1i; /*9693*/
			$search($1.barchars, $geti($1.barcode, $1.i, 1)); /*9695*/
			$j--; /*9696*/
			$1.indx = $k[--$j].length; /*9697*/
			$j -= 2; /*9698*/
			$1.enc = $get($1.encs, $1.indx); /*9699*/
			$puti($1.sbs, ($1.i * 8) + 2, $1.enc); /*9700*/
			$put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), ($1.i * 12) + 3, $1.textyoffset, $1.textfont, $1.textsize])); /*9701*/
		} /*9701*/
		$puti($1.sbs, ($1.barlen * 8) + 2, $get($1.encs, 11)); /*9705*/
		$k[$j++] = Infinity; /*9716*/
		$k[$j++] = Infinity; /*9710*/
		var _28 = $1.sbs; /*9710*/
		for (var _29 = 0, _2A = _28.length; _29 < _2A; _29++) {
			/*9710*/
			$k[$j++] = $get(_28, _29) - 48; /*9710*/
		} /*9710*/
		var _2C = $a(); /*9710*/
		$k[$j++] = Infinity; /*9711*/
		for (var _2E = 0, _2F = ~~(($1.sbs.length + 1) / 2); _2E < _2F; _2E++) {
			/*9711*/
			$k[$j++] = $1.height; /*9711*/
		} /*9711*/
		var _2H = $a(); /*9711*/
		$k[$j++] = Infinity; /*9712*/
		for (var _2J = 0, _2K = ~~(($1.sbs.length + 1) / 2); _2J < _2K; _2J++) {
			/*9712*/
			$k[$j++] = 0; /*9712*/
		} /*9712*/
		var _2L = $a(); /*9712*/
		$k[$j++] = 'ren'; /*9715*/
		$k[$j++] = $0.renlinear; /*9715*/
		$k[$j++] = 'sbs'; /*9715*/
		$k[$j++] = _2C; /*9715*/
		$k[$j++] = 'bhs'; /*9715*/
		$k[$j++] = _2H; /*9715*/
		$k[$j++] = 'bbs'; /*9715*/
		$k[$j++] = _2L; /*9715*/
		if ($1.includetext) { //no-else/*9715*/
			$k[$j++] = 'txt'; /*9714*/
			$k[$j++] = $geti($1.txt, 0, $1.txtlen); /*9714*/
		} /*9714*/
		$k[$j++] = 'opt'; /*9716*/
		$k[$j++] = $1.options; /*9716*/
		var _2R = $d(); /*9716*/
		$k[$j++] = _2R; /*9719*/
		if (!$1.dontdraw) { //no-else/*9719*/
			$0.renlinear(); /*9719*/
		} /*9719*/
	};
	$0.plessey = function() {
		var $1 = {}; /*9748*/
		$1.options = $k[--$j]; /*9750*/
		$1.barcode = $k[--$j]; /*9751*/
		$1.dontdraw = false; /*9753*/
		$1.includetext = false; /*9754*/
		$1.validatecheck = false; /*9755*/
		$1.includecheckintext = false; /*9756*/
		$1.unidirectional = false; /*9757*/
		$1.textfont = "OCR-B"; /*9758*/
		$1.textsize = 10; /*9759*/
		$1.textyoffset = -8.5; /*9760*/
		$1.height = 1; /*9761*/
		$forall($1.options, function() {
			/*9772*/
			var _3 = $k[--$j]; /*9772*/
			$1[$k[--$j]] = _3; /*9772*/
		}); /*9772*/
		$1.textfont = "" + $1.textfont; /*9774*/
		$1.textsize = +$1.textsize; /*9775*/
		$1.textyoffset = +$1.textyoffset; /*9776*/
		$1.height = +$1.height; /*9777*/
		$1.barchars = "0123456789ABCDEF"; /*9780*/
		$1.charvals = new Map; /*9781*/
		for (var _9 = 0; _9 <= 15; _9 += 1) {
			/*9782*/
			$put($1.charvals, $geti($1.barchars, _9, 1), _9); /*9782*/
		} /*9782*/
		for (var _F = 0, _E = $1.barcode.length - 1; _F <= _E; _F += 1) {
			/*9789*/
			var _J = $get($1.charvals, $geti($1.barcode, _F, 1)) !== undefined; /*9786*/
			if (!_J) { //no-else/*9788*/
				$k[$j++] = 'bwipp.plesseyBadCharacter'; /*9787*/
				$k[$j++] = "Plessey must contain only digits and letters A B C D E F"; /*9787*/
				$0.raiseerror(); /*9787*/
			} /*9787*/
		} /*9787*/
		$k[$j++] = 'barlen'; /*9791*/
		$k[$j++] = $1.barcode.length; /*9791*/
		if ($1.validatecheck) { //no-else/*9791*/
			var _M = $k[--$j]; /*9791*/
			$k[$j++] = _M - 2; /*9791*/
		} /*9791*/
		var _N = $k[--$j]; /*9791*/
		$1[$k[--$j]] = _N; /*9791*/
		$1.checkbits = $a(($1.barlen * 4) + 8); /*9794*/
		$puti($1.checkbits, $1.barlen * 4, $a([0, 0, 0, 0, 0, 0, 0, 0])); /*9795*/
		for (var _W = 0, _V = $1.barlen - 1; _W <= _V; _W += 1) {
			/*9805*/
			$1.i = _W; /*9797*/
			$1.indx = $get($1.charvals, $geti($1.barcode, $1.i, 1)); /*9798*/
			$puti($1.checkbits, $1.i * 4, $a([$1.indx & 1, ($1.indx >>> 1) & 1, ($1.indx >>> 2) & 1, $1.indx >>> 3])); /*9804*/
		} /*9804*/
		$1.checksalt = $a([1, 1, 1, 1, 0, 1, 0, 0, 1]); /*9806*/
		for (var _m = 0, _l = ($1.barlen * 4) - 1; _m <= _l; _m += 1) {
			/*9815*/
			$1.i = _m; /*9808*/
			if ($get($1.checkbits, $1.i) == 1) { //no-else/*9814*/
				for (var _q = 0; _q <= 8; _q += 1) {
					/*9813*/
					$1.j = _q; /*9811*/
					$put($1.checkbits, $1.i + $1.j, $xo($get($1.checkbits, $1.i + $1.j), $get($1.checksalt, $1.j))); /*9812*/
				} /*9812*/
			} /*9812*/
		} /*9812*/
		$1.checkval = 0; /*9816*/
		for (var _11 = 0; _11 <= 7; _11 += 1) {
			/*9820*/
			$1.i = _11; /*9818*/
			$1.checkval = $1.checkval + ((~~Math.pow(2, $1.i)) * $get($1.checkbits, ($1.barlen * 4) + $1.i)); /*9819*/
		} /*9819*/
		$1.checksum1 = $1.checkval & 15; /*9821*/
		$1.checksum2 = $1.checkval >>> 4; /*9822*/
		if ($1.validatecheck) { //no-else/*9829*/
			if (($get($1.barcode, $1.barlen) != $get($1.barchars, $1.checksum1)) || ($get($1.barcode, $1.barlen + 1) != $get($1.barchars, $1.checksum2))) { //no-else/*9827*/
				$k[$j++] = 'bwipp.plesseyBadCheckDigits'; /*9826*/
				$k[$j++] = "Incorrect Plessey check digits provided"; /*9826*/
				$0.raiseerror(); /*9826*/
			} /*9826*/
			$1.barcode = $geti($1.barcode, 0, $1.barlen); /*9828*/
		} /*9828*/
		$1.encs = $a(["14141414", "32141414", "14321414", "32321414", "14143214", "32143214", "14323214", "32323214", "14141432", "32141432", "14321432", "32321432", "14143232", "32143232", "14323232", "32323232", "32321432", "541412323", "323"]); /*9838*/
		var _1T = $1.unidirectional ? 27 : 33; /*9840*/
		$1.sbs = $s(($1.barlen * 8) + _1T); /*9840*/
		$1.txt = $a($1.barlen + 2); /*9841*/
		$puti($1.sbs, 0, $get($1.encs, 16)); /*9844*/
		for (var _1c = 0, _1b = $1.barlen - 1; _1c <= _1b; _1c += 1) {
			/*9851*/
			$1.i = _1c; /*9847*/
			$1.indx = $get($1.charvals, $geti($1.barcode, $1.i, 1)); /*9848*/
			$puti($1.sbs, ($1.i * 8) + 8, $get($1.encs, $1.indx)); /*9849*/
			$put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), ($1.i * 20) + 20, $1.textyoffset, $1.textfont, $1.textsize])); /*9850*/
		} /*9850*/
		$puti($1.sbs, ($1.barlen * 8) + 8, $get($1.encs, $1.checksum1)); /*9854*/
		$puti($1.sbs, ($1.barlen * 8) + 16, $get($1.encs, $1.checksum2)); /*9855*/
		if ($1.includecheckintext) {
			/*9861*/
			$put($1.txt, $1.barlen, $a([$geti($1.barchars, $1.checksum1, 1), ($1.barlen * 20) + 20, $1.textyoffset, $1.textfont, $1.textsize])); /*9857*/
			$put($1.txt, $1.barlen + 1, $a([$geti($1.barchars, $1.checksum2, 1), (($1.barlen + 1) * 20) + 20, $1.textyoffset, $1.textfont, $1.textsize])); /*9858*/
		} else {
			/*9861*/
			$put($1.txt, $1.barlen, $a([" ", ($1.barlen * 20) + 20, $1.textyoffset, $1.textfont, $1.textsize])); /*9860*/
			$put($1.txt, $1.barlen + 1, $a([" ", (($1.barlen + 1) * 20) + 20, $1.textyoffset, $1.textfont, $1.textsize])); /*9861*/
		} /*9861*/
		var _2k = $1.unidirectional ? 18 : 17; /*9865*/
		$puti($1.sbs, ($1.barlen * 8) + 24, $get($1.encs, _2k)); /*9865*/
		$k[$j++] = Infinity; /*9876*/
		$k[$j++] = Infinity; /*9870*/
		var _2m = $1.sbs; /*9870*/
		for (var _2n = 0, _2o = _2m.length; _2n < _2o; _2n++) {
			/*9870*/
			$k[$j++] = $get(_2m, _2n) - 48; /*9870*/
		} /*9870*/
		var _2q = $a(); /*9870*/
		$k[$j++] = Infinity; /*9871*/
		for (var _2s = 0, _2t = ~~(($1.sbs.length + 1) / 2); _2s < _2t; _2s++) {
			/*9871*/
			$k[$j++] = $1.height; /*9871*/
		} /*9871*/
		var _2v = $a(); /*9871*/
		$k[$j++] = Infinity; /*9872*/
		for (var _2x = 0, _2y = ~~(($1.sbs.length + 1) / 2); _2x < _2y; _2x++) {
			/*9872*/
			$k[$j++] = 0; /*9872*/
		} /*9872*/
		var _2z = $a(); /*9872*/
		$k[$j++] = 'ren'; /*9875*/
		$k[$j++] = $0.renlinear; /*9875*/
		$k[$j++] = 'sbs'; /*9875*/
		$k[$j++] = _2q; /*9875*/
		$k[$j++] = 'bhs'; /*9875*/
		$k[$j++] = _2v; /*9875*/
		$k[$j++] = 'bbs'; /*9875*/
		$k[$j++] = _2z; /*9875*/
		if ($1.includetext) { //no-else/*9875*/
			$k[$j++] = 'txt'; /*9874*/
			$k[$j++] = $1.txt; /*9874*/
		} /*9874*/
		$k[$j++] = 'opt'; /*9876*/
		$k[$j++] = $1.options; /*9876*/
		var _33 = $d(); /*9876*/
		$k[$j++] = _33; /*9879*/
		if (!$1.dontdraw) { //no-else/*9879*/
			$0.renlinear(); /*9879*/
		} /*9879*/
	};
	$0.telepen = function() {
		var $1 = {}; /*9908*/
		$1.options = $k[--$j]; /*9910*/
		$1.barcode = $k[--$j]; /*9911*/
		$1.numeric = false; /*9913*/
		$1.dontdraw = false; /*9914*/
		$1.includetext = false; /*9915*/
		$1.textfont = "OCR-B"; /*9916*/
		$1.textsize = 10; /*9917*/
		$1.textyoffset = -8.5; /*9918*/
		$1.height = 1; /*9919*/
		$1.parse = false; /*9920*/
		$forall($1.options, function() {
			/*9931*/
			var _3 = $k[--$j]; /*9931*/
			$1[$k[--$j]] = _3; /*9931*/
		}); /*9931*/
		$1.textfont = "" + $1.textfont; /*9933*/
		$1.textsize = +$1.textsize; /*9934*/
		$1.textyoffset = +$1.textyoffset; /*9935*/
		$1.height = +$1.height; /*9936*/
		$1.encs = $a(["31313131", "1131313111", "33313111", "1111313131", "3111313111", "11333131", "13133131", "111111313111", "31333111", "1131113131", "33113131", "1111333111", "3111113131", "1113133111", "1311133111", "111111113131", "3131113111", "11313331", "333331", "111131113111", "31113331", "1133113111", "1313113111", "1111113331", "31131331", "113111113111", "3311113111", "1111131331", "311111113111", "1113111331", "1311111331", "11111111113111", "31313311", "1131311131", "33311131", "1111313311", "3111311131", "11333311", "13133311", "111111311131", "31331131", "1131113311", "33113311", "1111331131", "3111113311", "1113131131", "1311131131", "111111113311", "3131111131", "1131131311", "33131311", "111131111131", "3111131311", "1133111131", "1313111131", "111111131311", "3113111311", "113111111131", "3311111131", "111113111311", "311111111131", "111311111311", "131111111311", "11111111111131", "3131311111", "11313133", "333133", "111131311111", "31113133", "1133311111", "1313311111", "1111113133", "313333", "113111311111", "3311311111", "11113333", "311111311111", "11131333", "13111333", "11111111311111", "31311133", "1131331111", "33331111", "1111311133", "3111331111", "11331133", "13131133", "111111331111", "3113131111", "1131111133", "33111133", "111113131111", "3111111133", "111311131111", "131111131111", "111111111133", "31311313", "113131111111", "3331111111", "1111311313", "311131111111", "11331313", "13131313", "11111131111111", "3133111111", "1131111313", "33111313", "111133111111", "3111111313", "111313111111", "131113111111", "111111111313", "313111111111", "1131131113", "33131113", "11113111111111", "3111131113", "113311111111", "131311111111", "111111131113", "3113111113", "11311111111111", "331111111111", "111113111113", "31111111111111", "111311111113", "131111111113", "1111111111111111"]); /*9993*/
		$1.barlen = $1.barcode.length; /*9995*/
		$1.sbs = $s(($1.barlen * 16) + 48); /*9996*/
		$1.txt = $a($1.barlen); /*9997*/
		$1.enc = $get($1.encs, 95); /*10000*/
		$puti($1.sbs, 0, $1.enc); /*10001*/
		$1.l = $1.enc.length; /*10002*/
		$1.checksum = 0; /*10004*/
		$1.i = 0; /*10005*/
		$1.j = 0; /*10005*/
		for (;;) {
			/*10037*/
			if ($1.i == $1.barlen) { //no-else/*10007*/
				break; /*10007*/
			} /*10007*/
			if ($1.numeric) {
				/*10030*/
				if ($get($1.barcode, $1.i) > 16) {
					/*10021*/
					$1.np = $geti($1.barcode, $1.i, 2); /*10010*/
					if ($eq($geti($1.np, 1, 1), "X")) {
						/*10014*/
						$1.indx = (~~$z($geti($1.np, 0, 1))) + 17; /*10012*/
					} else {
						/*10014*/
						$1.indx = (~~$z($1.np)) + 27; /*10014*/
					} /*10014*/
					$put($1.txt, $1.j, $a([$1.np, ($1.j * 16) + 16, $1.textyoffset, $1.textfont, $1.textsize])); /*10016*/
					$1.i = $1.i + 2; /*10017*/
				} else {
					/*10021*/
					$1.indx = $get($1.barcode, $1.i); /*10019*/
					$put($1.txt, $1.j, $a([" ", ($1.j * 16) + 16, $1.textyoffset, $1.textfont, $1.textsize])); /*10020*/
					$1.i = $1.i + 1; /*10021*/
				} /*10021*/
			} else {
				/*10030*/
				$1.indx = $get($1.barcode, $1.i); /*10024*/
				if (($1.indx >= 32) && ($1.indx <= 126)) {
					/*10028*/
					$put($1.txt, $1.j, $a([$geti($1.barcode, $1.i, 1), ($1.j * 16) + 16, $1.textyoffset, $1.textfont, $1.textsize])); /*10026*/
				} else {
					/*10028*/
					$put($1.txt, $1.j, $a([" ", ($1.j * 16) + 16, $1.textyoffset, $1.textfont, $1.textsize])); /*10028*/
				} /*10028*/
				$1.i = $1.i + 1; /*10030*/
			} /*10030*/
			$1.checksum = $1.checksum + $1.indx; /*10032*/
			$1.enc = $get($1.encs, $1.indx); /*10033*/
			$puti($1.sbs, $1.l, $1.enc); /*10034*/
			$1.l = $1.l + $1.enc.length; /*10035*/
			$1.j = $1.j + 1; /*10036*/
		} /*10036*/
		$1.checksum = (127 - ($1.checksum % 127)) % 127; /*10040*/
		$1.enc = $get($1.encs, $1.checksum); /*10041*/
		$puti($1.sbs, $1.l, $1.enc); /*10042*/
		$1.l = $1.l + $1.enc.length; /*10043*/
		$1.enc = $get($1.encs, 122); /*10046*/
		$puti($1.sbs, $1.l, $1.enc); /*10047*/
		$1.l = $1.l + $1.enc.length; /*10048*/
		$1.sbs = $geti($1.sbs, 0, $1.l); /*10051*/
		$1.txt = $geti($1.txt, 0, $1.j); /*10052*/
		$k[$j++] = Infinity; /*10063*/
		$k[$j++] = Infinity; /*10057*/
		$forall($1.sbs, function() {
			/*10057*/
			var _1n = $k[--$j]; /*10057*/
			$k[$j++] = _1n - 48; /*10057*/
		}); /*10057*/
		var _1o = $a(); /*10057*/
		$k[$j++] = Infinity; /*10058*/
		for (var _1q = 0, _1r = ~~(($1.sbs.length + 1) / 2); _1q < _1r; _1q++) {
			/*10058*/
			$k[$j++] = $1.height; /*10058*/
		} /*10058*/
		var _1t = $a(); /*10058*/
		$k[$j++] = Infinity; /*10059*/
		for (var _1v = 0, _1w = ~~(($1.sbs.length + 1) / 2); _1v < _1w; _1v++) {
			/*10059*/
			$k[$j++] = 0; /*10059*/
		} /*10059*/
		var _1x = $a(); /*10059*/
		$k[$j++] = 'ren'; /*10062*/
		$k[$j++] = $0.renlinear; /*10062*/
		$k[$j++] = 'sbs'; /*10062*/
		$k[$j++] = _1o; /*10062*/
		$k[$j++] = 'bhs'; /*10062*/
		$k[$j++] = _1t; /*10062*/
		$k[$j++] = 'bbs'; /*10062*/
		$k[$j++] = _1x; /*10062*/
		if ($1.includetext) { //no-else/*10062*/
			$k[$j++] = 'txt'; /*10061*/
			$k[$j++] = $1.txt; /*10061*/
		} /*10061*/
		$k[$j++] = 'opt'; /*10063*/
		$k[$j++] = $1.options; /*10063*/
		var _21 = $d(); /*10063*/
		$k[$j++] = _21; /*10066*/
		if (!$1.dontdraw) { //no-else/*10066*/
			$0.renlinear(); /*10066*/
		} /*10066*/
	};
	$0.telepennumeric = function() {
		var $1 = {}; /*10096*/
		$1.options = $k[--$j]; /*10098*/
		$1.barcode = $k[--$j]; /*10099*/
		$1.dontdraw = false; /*10101*/
		$1.includetext = false; /*10102*/
		$1.textfont = "OCR-B"; /*10103*/
		$1.textsize = 10; /*10104*/
		$1.textxoffset = 0; /*10105*/
		$1.textyoffset = -8.5; /*10106*/
		$1.height = 1; /*10107*/
		$forall($1.options, function() {
			/*10118*/
			var _3 = $k[--$j]; /*10118*/
			$1[$k[--$j]] = _3; /*10118*/
		}); /*10118*/
		$1.textfont = "" + $1.textfont; /*10120*/
		$1.textsize = +$1.textsize; /*10121*/
		$1.textxoffset = +$1.textxoffset; /*10122*/
		$1.textyoffset = +$1.textyoffset; /*10123*/
		$1.height = +$1.height; /*10124*/
		$put($1.options, "dontdraw", true); /*10127*/
		$put($1.options, "numeric", true); /*10128*/
		$k[$j++] = 'args'; /*10130*/
		$k[$j++] = $1.barcode; /*10130*/
		$k[$j++] = $1.options; /*10130*/
		$0.telepen(); /*10130*/
		var _E = $k[--$j]; /*10130*/
		$1[$k[--$j]] = _E; /*10130*/
		$put($1.args, "opt", $1.options); /*10132*/
		$k[$j++] = $1.args; /*10135*/
		if (!$1.dontdraw) { //no-else/*10135*/
			$0.renlinear(); /*10135*/
		} /*10135*/
	};
	$0.posicode = function() {
		var $1 = {}; /*10164*/
		$1.options = $k[--$j]; /*10166*/
		$1.barcode = $k[--$j]; /*10167*/
		$1.dontdraw = false; /*10169*/
		$1.includetext = false; /*10170*/
		$1.textfont = "OCR-B"; /*10171*/
		$1.textsize = 10; /*10172*/
		$1.textxoffset = 0; /*10173*/
		$1.textyoffset = -8.5; /*10174*/
		$1.height = 1; /*10175*/
		$1.encoding = "auto"; /*10176*/
		$1.version = "a"; /*10177*/
		$1.checkoffset = 0; /*10178*/
		$1.raw = false; /*10179*/
		$1.parse = false; /*10180*/
		$1.parsefnc = false; /*10181*/
		$forall($1.options, function() {
			/*10192*/
			var _3 = $k[--$j]; /*10192*/
			$1[$k[--$j]] = _3; /*10192*/
		}); /*10192*/
		$1.textfont = "" + $1.textfont; /*10194*/
		$1.textsize = +$1.textsize; /*10195*/
		$1.textxoffset = +$1.textxoffset; /*10196*/
		$1.textyoffset = +$1.textyoffset; /*10197*/
		$1.encoding = "" + $1.encoding; /*10198*/
		$1.version = "" + $1.version; /*10199*/
		$1.checkoffset = ~~$1.checkoffset; /*10200*/
		$1.height = +$1.height; /*10201*/
		$1.barlen = $1.barcode.length; /*10224*/
		$1.la0 = -1; /*10227*/
		$1.la1 = -2; /*10227*/
		$1.la2 = -3; /*10227*/
		$1.sf0 = -4; /*10228*/
		$1.sf1 = -5; /*10228*/
		$1.sf2 = -6; /*10228*/
		$1.fn1 = -7; /*10229*/
		$1.fn2 = -8; /*10229*/
		$1.fn3 = -9; /*10229*/
		$1.fn4 = -10; /*10229*/
		var _1m = new Map([
			["normal", $a([$a(["0", "^", "'"]), $a(["1", ";", 27]), $a(["2", "<", 28]), $a(["3", "=", 29]), $a(["4", ">", 30]), $a(["5", "?", 31]), $a(["6", "@", "!"]), $a(["7", "[", "\""]), $a(["8", 92, "#"]), $a(["9", "]", "&"]), $a(["A", "a", 1]), $a(["B", "b", 2]), $a(["C", "c", 3]), $a(["D", "d", 4]), $a(["E", "e", 5]), $a(["F", "f", 6]), $a(["G", "g", 7]), $a(["H", "h", 8]), $a(["I", "i", 9]), $a(["J", "j", 10]), $a(["K", "k", 11]), $a(["L", "l", 12]), $a(["M", "m", 13]), $a(["N", "n", 14]), $a(["O", "o", 15]), $a(["P", "p", 16]), $a(["Q", "q", 17]), $a(["R", "r", 18]), $a(["S", "s", 19]), $a(["T", "t", 20]), $a(["U", "u", 21]), $a(["V", "v", 22]), $a(["W", "w", 23]), $a(["X", "x", 24]), $a(["Y", "y", 25]), $a(["Z", "z", 26]), $a(["-", "_", 40]), $a([".", "`", 41]), $a([" ", 127, 0]), $a(["$", "{", "*"]), $a(["/", "|", ","]), $a(["+", "}", ":"]), $a(["%", "~", $1.fn1]), $a([$1.la1, $1.la0, $1.fn2]), $a([$1.sf1, $1.sf0, $1.fn3]), $a([$1.sf2, $1.sf2, $1.fn4])])],
			["limited", $a([$a(["0", -98, -98]), $a(["1", -98, -98]), $a(["2", -98, -98]), $a(["3", -98, -98]), $a(["4", -98, -98]), $a(["5", -98, -98]), $a(["6", -98, -98]), $a(["7", -98, -98]), $a(["8", -98, -98]), $a(["9", -98, -98]), $a(["A", -98, -98]), $a(["B", -98, -98]), $a(["C", -98, -98]), $a(["D", -98, -98]), $a(["E", -98, -98]), $a(["F", -98, -98]), $a(["G", -98, -98]), $a(["H", -98, -98]), $a(["I", -98, -98]), $a(["J", -98, -98]), $a(["K", -98, -98]), $a(["L", -98, -98]), $a(["M", -98, -98]), $a(["N", -98, -98]), $a(["O", -98, -98]), $a(["P", -98, -98]), $a(["Q", -98, -98]), $a(["R", -98, -98]), $a(["S", -98, -98]), $a(["T", -98, -98]), $a(["U", -98, -98]), $a(["V", -98, -98]), $a(["W", -98, -98]), $a(["X", -98, -98]), $a(["Y", -98, -98]), $a(["Z", -98, -98]), $a(["-", -98, -98]), $a([".", -98, -98])])]
		]); /*10267*/
		$k[$j++] = _1m; /*10270*/
		if ($eq($1.version, "a") || $eq($1.version, "b")) {
			/*10270*/
			$k[$j++] = 'normal'; /*10270*/
		} else {
			/*10270*/
			$k[$j++] = 'limited'; /*10270*/
		} /*10270*/
		var _1p = $k[--$j]; /*10270*/
		$1.charmaps = $get($k[--$j], _1p); /*10271*/
		var _1s = $1.charmaps; /*10275*/
		var _1t = $1.charmaps; /*10275*/
		var _1u = $1.charmaps; /*10275*/
		$1.charvals = $a([new Map, new Map, new Map]); /*10276*/
		for (var _1y = 0, _1x = $1.charmaps.length - 1; _1y <= _1x; _1y += 1) {
			/*10285*/
			$1.i = _1y; /*10278*/
			$1.encs = $get($1.charmaps, $1.i); /*10279*/
			for (var _22 = 0; _22 <= 2; _22 += 1) {
				/*10284*/
				$1.j = _22; /*10281*/
				var _25 = $get($1.encs, $1.j); /*10282*/
				$k[$j++] = _25; /*10282*/
				if ($eq($type(_25), 'stringtype')) { //no-else/*10282*/
					var _28 = $get($k[--$j], 0); /*10282*/
					$k[$j++] = _28; /*10282*/
				} /*10282*/
				$put($get($1.charvals, $1.j), $k[--$j], $1.i); /*10283*/
			} /*10283*/
		} /*10283*/
		$1.set0 = $get($1.charvals, 0); /*10286*/
		$1.set1 = $get($1.charvals, 1); /*10287*/
		$1.set2 = $get($1.charvals, 2); /*10288*/
		if ($1.raw) { //no-else/*10290*/
			$1.encoding = "raw"; /*10290*/
		} /*10290*/
		if ($eq($1.encoding, "raw")) { //no-else/*10304*/
			$1.cws = $a($1.barlen); /*10293*/
			$1.i = 0; /*10294*/
			$1.j = 0; /*10294*/
			for (;;) {
				/*10301*/
				if ($1.i == $1.barlen) { //no-else/*10296*/
					break; /*10296*/
				} /*10296*/
				$1.cw = ~~$z($geti($1.barcode, $1.i + 1, 3)); /*10297*/
				$put($1.cws, $1.j, $1.cw); /*10298*/
				$1.i = $1.i + 4; /*10299*/
				$1.j = $1.j + 1; /*10300*/
			} /*10300*/
			$1.cws = $geti($1.cws, 0, $1.j); /*10302*/
			$1.text = ""; /*10303*/
		} /*10303*/
		if ($eq($1.encoding, "auto")) { //no-else/*10457*/
			var _2f = new Map([
				["FNC1", $1.fn1],
				["FNC2", $1.fn2],
				["FNC3", $1.fn3]
			]); /*10311*/
			$1.fncvals = _2f; /*10313*/
			$1.msg = $a($1.barlen); /*10316*/
			$1.text = $s($1.barlen); /*10317*/
			$1.i = 0; /*10318*/
			$1.j = 0; /*10318*/
			for (;;) {
				/*10359*/
				if ($1.i == $1.barlen) { //no-else/*10319*/
					break; /*10319*/
				} /*10319*/
				$1.char = $get($1.barcode, $1.i); /*10320*/
				$put($1.text, $1.j, $1.char); /*10321*/
				$1.i = $1.i + 1; /*10322*/
				if (($1.parsefnc && ($1.char == 94)) && ($1.i < $1.barlen)) { //no-else/*10356*/
					if ($get($1.barcode, $1.i) != 94) {
						/*10354*/
						$puti($1.text, $1.j, " "); /*10325*/
						if ($1.i >= ($1.barlen - 3)) { //no-else/*10328*/
							$k[$j++] = 'bwipp.truncatedFNC'; /*10327*/
							$k[$j++] = "Function character truncated"; /*10327*/
							$0.raiseerror(); /*10327*/
						} /*10327*/
						var _36 = $geti($1.barcode, $1.i, 4); /*10329*/
						$k[$j++] = _36; /*10351*/
						if ($ne($geti(_36, 0, 3), "ECI")) {
							/*10350*/
							var _38 = $k[--$j]; /*10331*/
							var _3A = $get($1.fncvals, _38) !== undefined; /*10331*/
							$k[$j++] = _38; /*10335*/
							if (!_3A) { //no-else/*10335*/
								var _3B = $k[--$j]; /*10332*/
								var _3C = $s(_3B.length + 28); /*10332*/
								$puti(_3C, 28, _3B); /*10332*/
								$puti(_3C, 0, "Unknown function character: "); /*10333*/
								$k[$j++] = 'bwipp.unknownFNC'; /*10334*/
								$k[$j++] = _3C; /*10334*/
								$0.raiseerror(); /*10334*/
							} /*10334*/
							var _3F = $get($1.fncvals, $k[--$j]); /*10336*/
							$1.i = $1.i + 4; /*10337*/
							$k[$j++] = _3F; /*10337*/
						} else {
							/*10350*/
							$j--; /*10339*/
							if ($1.i >= ($1.barlen - 8)) { //no-else/*10342*/
								$k[$j++] = 'bwipp.truncatedECI'; /*10341*/
								$k[$j++] = "ECI truncated"; /*10341*/
								$0.raiseerror(); /*10341*/
							} /*10341*/
							var _3L = $geti($1.barcode, $1.i + 3, 6); /*10343*/
							$k[$j++] = _3L; /*10348*/
							$forall(_3L, function() {
								/*10348*/
								var _3M = $k[--$j]; /*10345*/
								if ((_3M < 48) || (_3M > 57)) { //no-else/*10347*/
									$k[$j++] = 'bwipp.invalidECI'; /*10346*/
									$k[$j++] = "ECI must be 000000 to 999999"; /*10346*/
									$0.raiseerror(); /*10346*/
								} /*10346*/
							}); /*10346*/
							var _3N = $k[--$j]; /*10349*/
							$k[$j++] = 0; /*10349*/
							$forall(_3N, function() {
								/*10349*/
								var _3O = $k[--$j]; /*10349*/
								var _3P = $k[--$j]; /*10349*/
								$k[$j++] = (_3P - (_3O - 48)) * 10; /*10349*/
							}); /*10349*/
							var _3Q = $k[--$j]; /*10349*/
							$1.i = $1.i + 9; /*10350*/
							$k[$j++] = (~~(_3Q / 10)) - 1000000; /*10350*/
						} /*10350*/
						$1.char = $k[--$j]; /*10352*/
					} else {
						/*10354*/
						$1.i = $1.i + 1; /*10354*/
					} /*10354*/
				} /*10354*/
				$put($1.msg, $1.j, $1.char); /*10357*/
				$1.j = $1.j + 1; /*10358*/
			} /*10358*/
			$1.msg = $geti($1.msg, 0, $1.j); /*10360*/
			$1.msglen = $1.msg.length; /*10361*/
			$1.text = $geti($1.text, 0, $1.j); /*10362*/
			$k[$j++] = Infinity; /*10365*/
			for (var _3g = 0, _3h = $1.msglen; _3g < _3h; _3g++) {
				/*10365*/
				$k[$j++] = 0; /*10365*/
			} /*10365*/
			$k[$j++] = 0; /*10365*/
			$1.numSA = $a(); /*10365*/
			$k[$j++] = Infinity; /*10366*/
			for (var _3k = 0, _3l = $1.msglen; _3k < _3l; _3k++) {
				/*10366*/
				$k[$j++] = 0; /*10366*/
			} /*10366*/
			$k[$j++] = 0; /*10366*/
			$1.numEA = $a(); /*10366*/
			for (var _3o = $1.msglen - 1; _3o >= 0; _3o -= 1) {
				/*10376*/
				$1.i = _3o; /*10368*/
				if ($get($1.msg, $1.i) >= 0) { //no-else/*10375*/
					if ($get($1.msg, $1.i) >= 128) {
						/*10373*/
						$put($1.numEA, $1.i, $get($1.numEA, $1.i + 1) + 1); /*10371*/
					} else {
						/*10373*/
						$put($1.numSA, $1.i, $get($1.numSA, $1.i + 1) + 1); /*10373*/
					} /*10373*/
				} /*10373*/
			} /*10373*/
			$1.ea = false; /*10379*/
			$1.msgtmp = $a([]); /*10379*/
			for (var _48 = 0, _47 = $1.msglen - 1; _48 <= _47; _48 += 1) {
				/*10394*/
				$1.i = _48; /*10381*/
				$1.c = $get($1.msg, $1.i); /*10382*/
				if ((!$xo($1.ea, $1.c < 128)) && ($1.c >= 0)) { //no-else/*10392*/
					if ($1.ea) {
						/*10384*/
						$k[$j++] = $1.numSA; /*10384*/
					} else {
						/*10384*/
						$k[$j++] = $1.numEA; /*10384*/
					} /*10384*/
					var _4K = $get($k[--$j], $1.i); /*10384*/
					var _4N = ((_4K + $1.i) == $1.msglen) ? 3 : 5; /*10385*/
					if (_4K < _4N) {
						/*10390*/
						$k[$j++] = Infinity; /*10387*/
						$aload($1.msgtmp); /*10387*/
						$k[$j++] = $1.fn4; /*10387*/
						$1.msgtmp = $a(); /*10387*/
					} else {
						/*10390*/
						$k[$j++] = Infinity; /*10389*/
						$aload($1.msgtmp); /*10389*/
						$k[$j++] = $1.fn4; /*10389*/
						$k[$j++] = $1.fn4; /*10389*/
						$1.msgtmp = $a(); /*10389*/
						$1.ea = !$1.ea; /*10390*/
					} /*10390*/
				} /*10390*/
				$k[$j++] = Infinity; /*10393*/
				$aload($1.msgtmp); /*10393*/
				if ($1.c >= 0) {
					/*10393*/
					$k[$j++] = $1.c & 127; /*10393*/
				} else {
					/*10393*/
					$k[$j++] = $1.c; /*10393*/
				} /*10393*/
				$1.msgtmp = $a(); /*10393*/
			} /*10393*/
			$1.msg = $1.msgtmp; /*10395*/
			$1.msglen = $1.msg.length; /*10396*/
			$1.enc = function() {
				var _4d = $k[--$j]; /*10400*/
				$put($1.cws, $1.j, $get(_4d, $k[--$j])); /*10400*/
				$1.j = $1.j + 1; /*10401*/
			}; /*10402*/
			$1.cws = $a($1.msglen * 2); /*10404*/
			$1.i = 0; /*10405*/
			$1.j = 0; /*10405*/
			$1.cset = "set0"; /*10405*/
			for (;;) {
				/*10455*/
				if ($1.i == $1.msglen) { //no-else/*10407*/
					break; /*10407*/
				} /*10407*/
				for (;;) {
					/*10453*/
					$1.char1 = $get($1.msg, $1.i); /*10412*/
					$k[$j++] = 'char2'; /*10413*/
					if (($1.i + 1) < $1.msglen) {
						/*10413*/
						$k[$j++] = $get($1.msg, $1.i + 1); /*10413*/
					} else {
						/*10413*/
						$k[$j++] = -99; /*10413*/
					} /*10413*/
					var _4v = $k[--$j]; /*10413*/
					$1[$k[--$j]] = _4v; /*10413*/
					var _50 = $get($1[$1.cset], $1.char1) !== undefined; /*10416*/
					if (_50) { //no-else/*10420*/
						$k[$j++] = $1.char1; /*10417*/
						$k[$j++] = $1[$1.cset]; /*10417*/
						$1.enc(); /*10417*/
						$1.i = $1.i + 1; /*10418*/
						break; /*10419*/
					} /*10419*/
					var _57 = $get($1.set2, $1.char1) !== undefined; /*10423*/
					if (_57) { //no-else/*10428*/
						$k[$j++] = $1.sf2; /*10424*/
						$k[$j++] = $1[$1.cset]; /*10424*/
						$1.enc(); /*10424*/
						$k[$j++] = $1.char1; /*10425*/
						$k[$j++] = $1.set2; /*10425*/
						$1.enc(); /*10425*/
						$1.i = $1.i + 1; /*10426*/
						break; /*10427*/
					} /*10427*/
					var _5H = $get($1[$1.cset], $1.char2) !== undefined; /*10431*/
					if (!_5H) {
						/*10449*/
						if ($eq($1.cset, "set0")) {
							/*10437*/
							$k[$j++] = $1.la1; /*10433*/
							$k[$j++] = $1[$1.cset]; /*10433*/
							$1.enc(); /*10433*/
							$1.cset = "set1"; /*10434*/
						} else {
							/*10437*/
							$k[$j++] = $1.la0; /*10436*/
							$k[$j++] = $1[$1.cset]; /*10436*/
							$1.enc(); /*10436*/
							$1.cset = "set0"; /*10437*/
						} /*10437*/
						break; /*10439*/
					} else {
						/*10449*/
						if ($eq($1.cset, "set0")) {
							/*10446*/
							$k[$j++] = $1.sf1; /*10442*/
							$k[$j++] = $1[$1.cset]; /*10442*/
							$1.enc(); /*10442*/
							$k[$j++] = $1.char1; /*10443*/
							$k[$j++] = $1.set1; /*10443*/
							$1.enc(); /*10443*/
						} else {
							/*10446*/
							$k[$j++] = $1.sf0; /*10445*/
							$k[$j++] = $1[$1.cset]; /*10445*/
							$1.enc(); /*10445*/
							$k[$j++] = $1.char1; /*10446*/
							$k[$j++] = $1.set0; /*10446*/
							$1.enc(); /*10446*/
						} /*10446*/
						$1.i = $1.i + 1; /*10448*/
						break; /*10449*/
					} /*10449*/
					break; /*10452*/
				} /*10452*/
			} /*10452*/
			$1.cws = $geti($1.cws, 0, $1.j); /*10456*/
		} /*10456*/
		var _5i = new Map([
			["a", $a(["141112", "131212", "121312", "111412", "131113", "121213", "111313", "121114", "111214", "111115", "181111", "171211", "161311", "151411", "141511", "131611", "121711", "111811", "171112", "161212", "151312", "141412", "131512", "121612", "111712", "161113", "151213", "141313", "131413", "121513", "111613", "151114", "141214", "131314", "121414", "111514", "141115", "131215", "121315", "111415", "131116", "121216", "111316", "121117", "111217", "111118", "1<111112", "111111111;1"])],
			["b", $a(["151213", "141313", "131413", "121513", "141214", "131314", "121414", "131215", "121315", "121216", "191212", "181312", "171412", "161512", "151612", "141712", "131812", "121912", "181213", "171313", "161413", "151513", "141613", "131713", "121813", "171214", "161314", "151414", "141514", "131614", "121714", "161215", "151315", "141415", "131515", "121615", "151216", "141316", "131416", "121516", "141217", "131317", "121417", "131218", "121318", "121219", "1<121312", "121212121<1"])],
			["limiteda", $a(["111411", "111312", "111213", "111114", "121311", "121212", "121113", "141111", "131211", "131112", "171111", "161211", "151311", "141411", "131511", "121611", "111711", "161112", "151212", "141312", "131412", "121512", "111612", "151113", "141213", "131313", "121413", "111513", "141114", "131214", "121314", "111414", "131115", "121215", "111315", "121116", "111216", "111117", "151111", "1"])],
			["limitedb", $a(["121512", "121413", "121314", "121215", "131412", "131313", "131214", "151212", "141312", "141213", "181212", "171312", "161412", "151512", "141612", "131712", "121812", "171213", "161313", "151413", "141513", "131613", "121713", "161214", "151314", "141414", "131514", "121614", "151215", "141315", "131415", "121515", "141216", "131316", "121416", "131217", "121317", "121218", "141212", "1"])]
		]); /*10503*/
		$1.encs = $get(_5i, $1.version); /*10506*/
		$1.c2w = $a([$a([495, 330, 210, 126, 70, 35, 15, 5]), $a([165, 120, 84, 56, 35, 20, 10, 4]), $a([45, 36, 28, 21, 15, 10, 6, 3]), $a([9, 8, 7, 6, 5, 4, 3, 2]), $a([1, 1, 1, 1, 1, 1, 1, 1])]); /*10514*/
		$1.v = 0; /*10515*/
		$forall($1.cws, function() {
			/*10525*/
			$1.cw = $k[--$j]; /*10517*/
			for (var _5t = 0, _5u = 6; _5t < _5u; _5t++) {
				/*10524*/
				if ((($1.cw ^ $1.v) & 1) != 0) { //no-else/*10521*/
					$1.v = $1.v ^ 7682; /*10520*/
				} /*10520*/
				$1.v = $1.v >>> 1; /*10522*/
				$1.cw = $1.cw >>> 1; /*10523*/
			} /*10523*/
		}); /*10523*/
		$1.v = $1.v + $1.checkoffset; /*10526*/
		if ($eq($1.version, "limiteda") || $eq($1.version, "limitedb")) {
			/*10534*/
			$1.v = $1.v & 1023; /*10529*/
			if (($1.v > 824) && ($1.v < 853)) { //no-else/*10532*/
				$1.v = $1.v + 292; /*10531*/
			} /*10531*/
		} else {
			/*10534*/
			$1.v = ($1.v & 1023) + 45; /*10534*/
		} /*10534*/
		$1.d = $a([2, 2, 2, 2, 2, 2]); /*10537*/
		$1.r = 0; /*10538*/
		$1.c = 0; /*10538*/
		$1.w = 0; /*10538*/
		$1.sum = 0; /*10538*/
		for (;;) {
			/*10557*/
			if ($1.sum == $1.v) { //no-else/*10540*/
				break; /*10540*/
			} /*10540*/
			$1.t = $1.sum + $get($get($1.c2w, $1.r), $1.c); /*10541*/
			if ($1.t == $1.v) { //no-else/*10546*/
				$1.w = $1.w + 1; /*10543*/
				$put($1.d, $1.r, $1.w + 2); /*10544*/
				$1.sum = $1.t; /*10545*/
			} /*10545*/
			if ($1.t > $1.v) { //no-else/*10551*/
				$put($1.d, $1.r, $1.w + 2); /*10548*/
				$1.r = $1.r + 1; /*10549*/
				$1.w = 0; /*10550*/
			} /*10550*/
			if ($1.t < $1.v) { //no-else/*10556*/
				$1.c = $1.c + 1; /*10553*/
				$1.w = $1.w + 1; /*10554*/
				$1.sum = $1.t; /*10555*/
			} /*10555*/
		} /*10555*/
		$k[$j++] = 20; /*10558*/
		for (var _6a = 0; _6a <= 4; _6a += 1) {
			/*10558*/
			var _6d = $k[--$j]; /*10558*/
			$k[$j++] = _6d - $get($1.d, _6a); /*10558*/
		} /*10558*/
		$put($1.d, 5, $k[--$j]); /*10559*/
		if ($eq($1.version, "b") || $eq($1.version, "limitedb")) { //no-else/*10562*/
			$k[$j++] = Infinity; /*10561*/
			var _6i = $1.d; /*10561*/
			for (var _6j = 0, _6k = _6i.length; _6j < _6k; _6j++) {
				/*10561*/
				$k[$j++] = $get(_6i, _6j) + 1; /*10561*/
			} /*10561*/
			$1.d = $a(); /*10561*/
		} /*10561*/
		$1.cbs = $strcpy($s(12), "111111111111"); /*10563*/
		for (var _6p = 5; _6p >= 0; _6p -= 1) {
			/*10567*/
			$1.i = _6p; /*10565*/
			$put($1.cbs, ((5 - $1.i) * 2) + 1, $get($1.d, $1.i) + 47); /*10566*/
		} /*10566*/
		$1.sbs = $s(($1.cws.length * 6) + 31); /*10570*/
		var _6z = $get($1.encs, $1.encs.length - 2); /*10571*/
		$puti($1.sbs, 0, _6z); /*10572*/
		$1.j = _6z.length; /*10573*/
		for (var _73 = 0, _72 = $1.cws.length - 1; _73 <= _72; _73 += 1) {
			/*10578*/
			$1.i = _73; /*10575*/
			$puti($1.sbs, $1.j, $get($1.encs, $get($1.cws, $1.i))); /*10576*/
			$1.j = $1.j + 6; /*10577*/
		} /*10577*/
		$puti($1.sbs, $1.j, $1.cbs); /*10579*/
		$1.j = $1.j + 12; /*10580*/
		var _7I = $get($1.encs, $1.encs.length - 1); /*10581*/
		$puti($1.sbs, $1.j, _7I); /*10582*/
		$1.j = _7I.length + $1.j; /*10583*/
		$1.sbs = $geti($1.sbs, 0, $1.j); /*10584*/
		$k[$j++] = Infinity; /*10594*/
		$k[$j++] = Infinity; /*10589*/
		$forall($1.sbs, function() {
			/*10589*/
			var _7Q = $k[--$j]; /*10589*/
			$k[$j++] = _7Q - 48; /*10589*/
		}); /*10589*/
		var _7R = $a(); /*10589*/
		$k[$j++] = Infinity; /*10590*/
		for (var _7T = 0, _7U = ~~(($1.sbs.length + 1) / 2); _7T < _7U; _7T++) {
			/*10590*/
			$k[$j++] = $1.height; /*10590*/
		} /*10590*/
		var _7W = $a(); /*10590*/
		$k[$j++] = Infinity; /*10591*/
		for (var _7Y = 0, _7Z = ~~(($1.sbs.length + 1) / 2); _7Y < _7Z; _7Y++) {
			/*10591*/
			$k[$j++] = 0; /*10591*/
		} /*10591*/
		var _7a = $a(); /*10591*/
		$k[$j++] = 'ren'; /*10594*/
		$k[$j++] = $0.renlinear; /*10594*/
		$k[$j++] = 'sbs'; /*10594*/
		$k[$j++] = _7R; /*10594*/
		$k[$j++] = 'bhs'; /*10594*/
		$k[$j++] = _7W; /*10594*/
		$k[$j++] = 'bbs'; /*10594*/
		$k[$j++] = _7a; /*10594*/
		$k[$j++] = 'txt'; /*10594*/
		$k[$j++] = $a([$a([$1.text, $1.textxoffset, $1.textyoffset, $1.textfont, $1.textsize])]); /*10594*/
		$k[$j++] = 'textxalign'; /*10594*/
		$k[$j++] = "center"; /*10594*/
		$k[$j++] = 'opt'; /*10594*/
		$k[$j++] = $1.options; /*10594*/
		var _7j = $d(); /*10594*/
		$k[$j++] = _7j; /*10597*/
		if (!$1.dontdraw) { //no-else/*10597*/
			$0.renlinear(); /*10597*/
		} /*10597*/
	};
	$0.codablockf = function() {
		var $1 = {}; /*10626*/
		$1.options = $k[--$j]; /*10628*/
		$1.barcode = $k[--$j]; /*10629*/
		$1.dontdraw = false; /*10631*/
		$1.rows = -1; /*10632*/
		$1.columns = 8; /*10633*/
		$1.rowheight = 10; /*10634*/
		$1.sepheight = 1; /*10635*/
		$1.parse = false; /*10636*/
		$1.parsefnc = false; /*10637*/
		$forall($1.options, function() {
			/*10648*/
			var _3 = $k[--$j]; /*10648*/
			$1[$k[--$j]] = _3; /*10648*/
		}); /*10648*/
		$1.rows = ~~$1.rows; /*10650*/
		$1.columns = ~~$1.columns; /*10651*/
		$1.rowheight = ~~$1.rowheight; /*10652*/
		$1.sepheight = ~~$1.sepheight; /*10653*/
		$k[$j++] = 'c'; /*10655*/
		if (($1.columns >= 4) && ($1.columns <= 62)) {
			/*10655*/
			$k[$j++] = $1.columns; /*10655*/
		} else {
			/*10655*/
			$k[$j++] = 8; /*10655*/
		} /*10655*/
		var _C = $k[--$j]; /*10655*/
		$1[$k[--$j]] = _C; /*10655*/
		$k[$j++] = 'rows'; /*10656*/
		if (($1.rows >= 2) && ($1.rows <= 44)) {
			/*10656*/
			$k[$j++] = $1.rows; /*10656*/
		} else {
			/*10656*/
			$k[$j++] = -1; /*10656*/
		} /*10656*/
		var _H = $k[--$j]; /*10656*/
		$1[$k[--$j]] = _H; /*10656*/
		$1.barlen = $1.barcode.length; /*10679*/
		$1.swa = -1; /*10682*/
		$1.swb = -2; /*10682*/
		$1.swc = -3; /*10682*/
		$1.sft = -4; /*10682*/
		$1.fn1 = -5; /*10683*/
		$1.fn2 = -6; /*10683*/
		$1.fn3 = -7; /*10683*/
		$1.fn4 = -8; /*10683*/
		$1.sta = -9; /*10684*/
		$1.stp = -10; /*10684*/
		$1.charmaps = $a([$a([32, 32, "00"]), $a(["!", "!", "01"]), $a(["\"", "\"", "02"]), $a(["#", "#", "03"]), $a(["$", "$", "04"]), $a(["%", "%", "05"]), $a(["&", "&", "06"]), $a(["'", "'", "07"]), $a([40, 40, "08"]), $a([41, 41, "09"]), $a(["*", "*", "10"]), $a(["+", "+", "11"]), $a([",", ",", "12"]), $a(["-", "-", "13"]), $a([".", ".", "14"]), $a(["/", "/", "15"]), $a(["0", "0", "16"]), $a(["1", "1", "17"]), $a(["2", "2", "18"]), $a(["3", "3", "19"]), $a(["4", "4", "20"]), $a(["5", "5", "21"]), $a(["6", "6", "22"]), $a(["7", "7", "23"]), $a(["8", "8", "24"]), $a(["9", "9", "25"]), $a([":", ":", "26"]), $a([";", ";", "27"]), $a(["<", "<", "28"]), $a(["=", "=", "29"]), $a([">", ">", "30"]), $a(["?", "?", "31"]), $a(["@", "@", "32"]), $a(["A", "A", "33"]), $a(["B", "B", "34"]), $a(["C", "C", "35"]), $a(["D", "D", "36"]), $a(["E", "E", "37"]), $a(["F", "F", "38"]), $a(["G", "G", "39"]), $a(["H", "H", "40"]), $a(["I", "I", "41"]), $a(["J", "J", "42"]), $a(["K", "K", "43"]), $a(["L", "L", "44"]), $a(["M", "M", "45"]), $a(["N", "N", "46"]), $a(["O", "O", "47"]), $a(["P", "P", "48"]), $a(["Q", "Q", "49"]), $a(["R", "R", "50"]), $a(["S", "S", "51"]), $a(["T", "T", "52"]), $a(["U", "U", "53"]), $a(["V", "V", "54"]), $a(["W", "W", "55"]), $a(["X", "X", "56"]), $a(["Y", "Y", "57"]), $a(["Z", "Z", "58"]), $a(["[", "[", "59"]), $a([92, 92, "60"]), $a(["]", "]", "61"]), $a(["^", "^", "62"]), $a(["_", "_", "63"]), $a([0, "`", "64"]), $a([1, "a", "65"]), $a([2, "b", "66"]), $a([3, "c", "67"]), $a([4, "d", "68"]), $a([5, "e", "69"]), $a([6, "f", "70"]), $a([7, "g", "71"]), $a([8, "h", "72"]), $a([9, "i", "73"]), $a([10, "j", "74"]), $a([11, "k", "75"]), $a([12, "l", "76"]), $a([13, "m", "77"]), $a([14, "n", "78"]), $a([15, "o", "79"]), $a([16, "p", "80"]), $a([17, "q", "81"]), $a([18, "r", "82"]), $a([19, "s", "83"]), $a([20, "t", "84"]), $a([21, "u", "85"]), $a([22, "v", "86"]), $a([23, "w", "87"]), $a([24, "x", "88"]), $a([25, "y", "89"]), $a([26, "z", "90"]), $a([27, "{", "91"]), $a([28, "|", "92"]), $a([29, "}", "93"]), $a([30, "~", "94"]), $a([31, 127, "95"]), $a([$1.fn3, $1.fn3, "96"]), $a([$1.fn2, $1.fn2, "97"]), $a([$1.sft, $1.sft, "98"]), $a([$1.swc, $1.swc, "99"]), $a([$1.swb, $1.fn4, $1.swb]), $a([$1.fn4, $1.swa, $1.swa]), $a([$1.fn1, $1.fn1, $1.fn1]), $a([$1.sta, $1.sta, $1.sta]), $a([$1.stp, $1.stp, $1.stp])]); /*10724*/
		$1.charvals = $a([new Map, new Map, new Map]); /*10727*/
		for (var _2S = 0, _2R = $1.charmaps.length - 1; _2S <= _2R; _2S += 1) {
			/*10736*/
			$1.i = _2S; /*10729*/
			$1.encs = $get($1.charmaps, $1.i); /*10730*/
			for (var _2W = 0; _2W <= 2; _2W += 1) {
				/*10735*/
				$1.j = _2W; /*10732*/
				var _2Z = $get($1.encs, $1.j); /*10733*/
				$k[$j++] = _2Z; /*10733*/
				if ($eq($type(_2Z), 'stringtype')) { //no-else/*10733*/
					var _2c = $get($k[--$j], 0); /*10733*/
					$k[$j++] = _2c; /*10733*/
				} /*10733*/
				$put($get($1.charvals, $1.j), $k[--$j], $1.i); /*10734*/
			} /*10734*/
		} /*10734*/
		$1.seta = $get($1.charvals, 0); /*10737*/
		$1.setb = $get($1.charvals, 1); /*10738*/
		$1.setc = $get($1.charvals, 2); /*10739*/
		var _2q = new Map([
			["FNC1", $1.fn1],
			["FNC3", $1.fn3]
		]); /*10744*/
		$1.fncvals = _2q; /*10746*/
		$1.msg = $a($1.barlen); /*10747*/
		$1.i = 0; /*10748*/
		$1.j = 0; /*10748*/
		for (;;) {
			/*10787*/
			if ($1.i == $1.barlen) { //no-else/*10749*/
				break; /*10749*/
			} /*10749*/
			$1.char = $get($1.barcode, $1.i); /*10750*/
			$1.i = $1.i + 1; /*10751*/
			if (($1.parsefnc && ($1.char == 94)) && ($1.i < $1.barlen)) { //no-else/*10784*/
				if ($get($1.barcode, $1.i) != 94) {
					/*10782*/
					if ($1.i >= ($1.barlen - 3)) { //no-else/*10756*/
						$k[$j++] = 'bwipp.truncatedFNC'; /*10755*/
						$k[$j++] = "Function character truncated"; /*10755*/
						$0.raiseerror(); /*10755*/
					} /*10755*/
					var _3A = $geti($1.barcode, $1.i, 4); /*10757*/
					$k[$j++] = _3A; /*10779*/
					if ($ne($geti(_3A, 0, 3), "ECI")) {
						/*10778*/
						var _3C = $k[--$j]; /*10759*/
						var _3E = $get($1.fncvals, _3C) !== undefined; /*10759*/
						$k[$j++] = _3C; /*10763*/
						if (!_3E) { //no-else/*10763*/
							var _3F = $k[--$j]; /*10760*/
							var _3G = $s(_3F.length + 28); /*10760*/
							$puti(_3G, 28, _3F); /*10760*/
							$puti(_3G, 0, "Unknown function character: "); /*10761*/
							$k[$j++] = 'bwipp.unknownFNC'; /*10762*/
							$k[$j++] = _3G; /*10762*/
							$0.raiseerror(); /*10762*/
						} /*10762*/
						var _3J = $get($1.fncvals, $k[--$j]); /*10764*/
						$1.i = $1.i + 4; /*10765*/
						$k[$j++] = _3J; /*10765*/
					} else {
						/*10778*/
						$j--; /*10767*/
						if ($1.i >= ($1.barlen - 8)) { //no-else/*10770*/
							$k[$j++] = 'bwipp.truncatedECI'; /*10769*/
							$k[$j++] = "ECI truncated"; /*10769*/
							$0.raiseerror(); /*10769*/
						} /*10769*/
						var _3P = $geti($1.barcode, $1.i + 3, 6); /*10771*/
						$k[$j++] = _3P; /*10776*/
						$forall(_3P, function() {
							/*10776*/
							var _3Q = $k[--$j]; /*10773*/
							if ((_3Q < 48) || (_3Q > 57)) { //no-else/*10775*/
								$k[$j++] = 'bwipp.invalidECI'; /*10774*/
								$k[$j++] = "ECI must be 000000 to 999999"; /*10774*/
								$0.raiseerror(); /*10774*/
							} /*10774*/
						}); /*10774*/
						var _3R = $k[--$j]; /*10777*/
						$k[$j++] = 0; /*10777*/
						$forall(_3R, function() {
							/*10777*/
							var _3S = $k[--$j]; /*10777*/
							var _3T = $k[--$j]; /*10777*/
							$k[$j++] = (_3T - (_3S - 48)) * 10; /*10777*/
						}); /*10777*/
						var _3U = $k[--$j]; /*10777*/
						$1.i = $1.i + 9; /*10778*/
						$k[$j++] = (~~(_3U / 10)) - 1000000; /*10778*/
					} /*10778*/
					$1.char = $k[--$j]; /*10780*/
				} else {
					/*10782*/
					$1.i = $1.i + 1; /*10782*/
				} /*10782*/
			} /*10782*/
			$put($1.msg, $1.j, $1.char); /*10785*/
			$1.j = $1.j + 1; /*10786*/
		} /*10786*/
		$1.msg = $geti($1.msg, 0, $1.j); /*10788*/
		$1.msglen = $1.msg.length; /*10789*/
		$1.msgtmp = $a([]); /*10792*/
		$forall($1.msg, function() {
			/*10796*/
			$1.char = $k[--$j]; /*10794*/
			$k[$j++] = Infinity; /*10795*/
			$aload($1.msgtmp); /*10795*/
			if ($1.char < 128) {
				/*10795*/
				$k[$j++] = $1.char; /*10795*/
			} else {
				/*10795*/
				$k[$j++] = $1.fn4; /*10795*/
				$k[$j++] = $1.char & 127; /*10795*/
			} /*10795*/
			$1.msgtmp = $a(); /*10795*/
		}); /*10795*/
		$1.msg = $1.msgtmp; /*10797*/
		$1.msglen = $1.msg.length; /*10798*/
		$1.numsscr = function() {
			$1.n = 0; /*10802*/
			$1.s = 0; /*10802*/
			$1.p = $k[--$j]; /*10803*/
			for (;;) {
				/*10814*/
				if ($1.p >= $1.msglen) { //no-else/*10804*/
					break; /*10804*/
				} /*10804*/
				var _3w = $get($1.msg, $1.p); /*10805*/
				var _3y = $get($1.setc, _3w) !== undefined; /*10806*/
				$k[$j++] = _3w; /*10806*/
				if (!_3y) { //no-else/*10806*/
					$j--; /*10806*/
					break; /*10806*/
				} /*10806*/
				if ($k[--$j] == $1.fn1) { //no-else/*10810*/
					if (($1.s % 2) == 0) {
						/*10809*/
						$1.s = $1.s + 1; /*10809*/
					} else {
						/*10809*/
						break; /*10809*/
					} /*10809*/
				} /*10809*/
				$1.n = $1.n + 1; /*10811*/
				$1.s = $1.s + 1; /*10812*/
				$1.p = $1.p + 1; /*10813*/
			} /*10813*/
			$k[$j++] = $1.n; /*10815*/
			$k[$j++] = $1.s; /*10815*/
		}; /*10816*/
		$1.enca = function() {
			$put($1.cws, $1.j, $get($1.seta, $k[--$j])); /*10820*/
			$1.j = $1.j + 1; /*10821*/
		}; /*10822*/
		$1.encb = function() {
			$put($1.cws, $1.j, $get($1.setb, $k[--$j])); /*10824*/
			$1.j = $1.j + 1; /*10825*/
		}; /*10826*/
		$1.encc = function() {
			var _4K = $k[--$j]; /*10828*/
			$k[$j++] = _4K; /*10832*/
			if ($ne($type(_4K), 'arraytype')) {
				/*10831*/
				var _4O = $get($1.setc, $k[--$j]); /*10829*/
				$k[$j++] = _4O; /*10829*/
			} else {
				/*10831*/
				$aload($k[--$j]); /*10831*/
				var _4Q = $k[--$j]; /*10831*/
				var _4R = $k[--$j]; /*10831*/
				$k[$j++] = (_4Q - 48) + ((_4R - 48) * 10); /*10831*/
			} /*10831*/
			$put($1.cws, $1.j, $k[--$j]); /*10833*/
			$1.j = $1.j + 1; /*10834*/
		}; /*10835*/
		$1.anotb = function() {
			var _4W = $k[--$j]; /*10838*/
			var _4Y = $get($1.seta, _4W) !== undefined; /*10838*/
			var _4a = $get($1.setb, _4W) !== undefined; /*10838*/
			$k[$j++] = _4Y && (!_4a); /*10838*/
		}; /*10838*/
		$1.bnota = function() {
			var _4b = $k[--$j]; /*10839*/
			var _4d = $get($1.setb, _4b) !== undefined; /*10839*/
			var _4f = $get($1.seta, _4b) !== undefined; /*10839*/
			$k[$j++] = _4d && (!_4f); /*10839*/
		}; /*10839*/
		$k[$j++] = Infinity; /*10842*/
		for (var _4h = 0, _4i = $1.msg.length; _4h < _4i; _4h++) {
			/*10842*/
			$k[$j++] = 0; /*10842*/
		} /*10842*/
		$k[$j++] = 9999; /*10842*/
		$1.nextanotb = $a(); /*10842*/
		$k[$j++] = Infinity; /*10843*/
		for (var _4l = 0, _4m = $1.msg.length; _4l < _4m; _4l++) {
			/*10843*/
			$k[$j++] = 0; /*10843*/
		} /*10843*/
		$k[$j++] = 9999; /*10843*/
		$1.nextbnota = $a(); /*10843*/
		for (var _4p = $1.msg.length - 1; _4p >= 0; _4p -= 1) {
			/*10856*/
			$1.i = _4p; /*10845*/
			$k[$j++] = $get($1.msg, $1.i); /*10846*/
			$1.anotb(); /*10846*/
			if ($k[--$j]) {
				/*10849*/
				$put($1.nextanotb, $1.i, 0); /*10847*/
			} else {
				/*10849*/
				$put($1.nextanotb, $1.i, $get($1.nextanotb, $1.i + 1) + 1); /*10849*/
			} /*10849*/
			$k[$j++] = $get($1.msg, $1.i); /*10851*/
			$1.bnota(); /*10851*/
			if ($k[--$j]) {
				/*10854*/
				$put($1.nextbnota, $1.i, 0); /*10852*/
			} else {
				/*10854*/
				$put($1.nextbnota, $1.i, $get($1.nextbnota, $1.i + 1) + 1); /*10854*/
			} /*10854*/
		} /*10854*/
		$1.abeforeb = function() {
			var _5C = $k[--$j]; /*10859*/
			$k[$j++] = $lt($get($1.nextanotb, _5C), $get($1.nextbnota, _5C)); /*10859*/
		}; /*10859*/
		$1.bbeforea = function() {
			var _5H = $k[--$j]; /*10860*/
			$k[$j++] = $lt($get($1.nextbnota, _5H), $get($1.nextanotb, _5H)); /*10860*/
		}; /*10860*/
		$1.padrow = function() {
			for (var _5N = 0, _5O = $k[--$j]; _5N < _5O; _5N++) {
				/*10870*/
				for (;;) {
					/*10869*/
					if ($eq($1.cset, "seta")) { //no-else/*10866*/
						$k[$j++] = $1.swc; /*10866*/
						$1.enca(); /*10866*/
						$1.cset = "setc"; /*10866*/
						break; /*10866*/
					} /*10866*/
					if ($eq($1.cset, "setb")) { //no-else/*10867*/
						$k[$j++] = $1.swc; /*10867*/
						$1.encb(); /*10867*/
						$1.cset = "setc"; /*10867*/
						break; /*10867*/
					} /*10867*/
					if ($eq($1.cset, "setc")) { //no-else/*10868*/
						$k[$j++] = $1.swb; /*10868*/
						$1.encc(); /*10868*/
						$1.cset = "setb"; /*10868*/
						break; /*10868*/
					} /*10868*/
				} /*10868*/
			} /*10868*/
		}; /*10871*/
		$1.cws = $a(($1.c + 5) * 44); /*10874*/
		$1.i = 0; /*10876*/
		$1.j = 0; /*10876*/
		$1.r = 1; /*10876*/
		$1.lastrow = false; /*10877*/
		for (;;) {
			/*11046*/
			if ($1.lastrow) { //no-else/*10879*/
				break; /*10879*/
			} /*10879*/
			$k[$j++] = $1.sta; /*10882*/
			$1.enca(); /*10882*/
			if ($1.i < $1.msglen) {
				/*10883*/
				$k[$j++] = $1.i; /*10883*/
				$1.numsscr(); /*10883*/
			} else {
				/*10883*/
				$k[$j++] = -1; /*10883*/
				$k[$j++] = -1; /*10883*/
			} /*10883*/
			$1.nums = $k[--$j]; /*10883*/
			$1.nchars = $k[--$j]; /*10883*/
			for (;;) {
				/*10903*/
				if ($1.msglen == 0) { //no-else/*10889*/
					$k[$j++] = $1.swb; /*10886*/
					$1.enca(); /*10886*/
					$1.cset = "setb"; /*10887*/
					break; /*10888*/
				} /*10888*/
				if ($1.nums >= 2) { //no-else/*10894*/
					$k[$j++] = $1.swc; /*10891*/
					$1.enca(); /*10891*/
					$1.cset = "setc"; /*10892*/
					break; /*10893*/
				} /*10893*/
				$k[$j++] = $1.i; /*10895*/
				$1.abeforeb(); /*10895*/
				if ($k[--$j]) { //no-else/*10899*/
					$k[$j++] = $1.sft; /*10896*/
					$1.enca(); /*10896*/
					$1.cset = "seta"; /*10897*/
					break; /*10898*/
				} /*10898*/
				$k[$j++] = $1.swb; /*10900*/
				$1.enca(); /*10900*/
				$1.cset = "setb"; /*10901*/
				break; /*10902*/
			} /*10902*/
			$1.j = $1.j + 1; /*10904*/
			$1.endofrow = false; /*10907*/
			for (;;) {
				/*11031*/
				$1.rem = ($1.c + 3) - ($1.j % ($1.c + 5)); /*10908*/
				if (($1.i == $1.msglen) || $1.endofrow) { //no-else/*10910*/
					break; /*10910*/
				} /*10910*/
				$k[$j++] = $1.i; /*10912*/
				$1.numsscr(); /*10912*/
				$1.nums = $k[--$j]; /*10912*/
				$1.nchars = $k[--$j]; /*10912*/
				$k[$j++] = 'remnums'; /*10913*/
				if ($1.nums > ($1.rem * 2)) {
					/*10913*/
					$k[$j++] = $1.rem * 2; /*10913*/
				} else {
					/*10913*/
					$k[$j++] = $1.nums; /*10913*/
				} /*10913*/
				var _60 = $k[--$j]; /*10913*/
				$1[$k[--$j]] = _60; /*10913*/
				for (;;) {
					/*11029*/
					if ((($eq($1.cset, "seta") || $eq($1.cset, "setb")) && ($1.remnums >= 4)) && ($get($1.msg, $1.i) != $1.fn1)) { //no-else/*10951*/
						if ((($1.remnums % 2) == 0) && ($1.rem >= 3)) { //no-else/*10933*/
							$k[$j++] = $1.swc; /*10921*/
							if ($eq($1.cset, "seta")) {
								/*10921*/
								$1.enca(); /*10921*/
							} else {
								/*10921*/
								$1.encb(); /*10921*/
							} /*10921*/
							$1.cset = "setc"; /*10922*/
							for (var _6D = 0, _6E = 2; _6D < _6E; _6D++) {
								/*10931*/
								if ($get($1.msg, $1.i) == $1.fn1) {
									/*10929*/
									$k[$j++] = $1.fn1; /*10925*/
									$1.encc(); /*10925*/
									$1.i = $1.i + 1; /*10926*/
								} else {
									/*10929*/
									$k[$j++] = $geti($1.msg, $1.i, 2); /*10928*/
									$1.encc(); /*10928*/
									$1.i = $1.i + 2; /*10929*/
								} /*10929*/
							} /*10929*/
							break; /*10932*/
						} /*10932*/
						if ((($1.remnums % 2) != 0) && ($1.rem >= 4)) { //no-else/*10950*/
							$k[$j++] = $get($1.msg, $1.i); /*10936*/
							if ($eq($1.cset, "seta")) {
								/*10936*/
								$1.enca(); /*10936*/
							} else {
								/*10936*/
								$1.encb(); /*10936*/
							} /*10936*/
							$1.i = $1.i + 1; /*10937*/
							$k[$j++] = $1.swc; /*10938*/
							if ($eq($1.cset, "seta")) {
								/*10938*/
								$1.enca(); /*10938*/
							} else {
								/*10938*/
								$1.encb(); /*10938*/
							} /*10938*/
							$1.cset = "setc"; /*10939*/
							for (var _6Y = 0, _6Z = 2; _6Y < _6Z; _6Y++) {
								/*10948*/
								if ($get($1.msg, $1.i) == $1.fn1) {
									/*10946*/
									$k[$j++] = $1.fn1; /*10942*/
									$1.encc(); /*10942*/
									$1.i = $1.i + 1; /*10943*/
								} else {
									/*10946*/
									$k[$j++] = $geti($1.msg, $1.i, 2); /*10945*/
									$1.encc(); /*10945*/
									$1.i = $1.i + 2; /*10946*/
								} /*10946*/
							} /*10946*/
							break; /*10949*/
						} /*10949*/
					} /*10949*/
					$k[$j++] = $eq($1.cset, "setb"); /*10952*/
					$k[$j++] = $get($1.msg, $1.i); /*10952*/
					$1.anotb(); /*10952*/
					var _6o = $k[--$j]; /*10952*/
					if (($k[--$j] && _6o) && ($1.rem >= 2)) { //no-else/*10967*/
						if ($1.i < ($1.msglen - 1)) { //no-else/*10961*/
							$k[$j++] = $1.i + 1; /*10955*/
							$1.bbeforea(); /*10955*/
							if ($k[--$j]) { //no-else/*10960*/
								$k[$j++] = $1.sft; /*10956*/
								$1.encb(); /*10956*/
								$k[$j++] = $get($1.msg, $1.i); /*10957*/
								$1.enca(); /*10957*/
								$1.i = $1.i + 1; /*10958*/
								break; /*10959*/
							} /*10959*/
						} /*10959*/
						$k[$j++] = $1.swa; /*10962*/
						$1.encb(); /*10962*/
						$1.cset = "seta"; /*10963*/
						$k[$j++] = $get($1.msg, $1.i); /*10964*/
						$1.enca(); /*10964*/
						$1.i = $1.i + 1; /*10965*/
						break; /*10966*/
					} /*10966*/
					$k[$j++] = $eq($1.cset, "seta"); /*10968*/
					$k[$j++] = $get($1.msg, $1.i); /*10968*/
					$1.bnota(); /*10968*/
					var _79 = $k[--$j]; /*10968*/
					if (($k[--$j] && _79) && ($1.rem >= 2)) { //no-else/*10983*/
						if ($1.i < ($1.msglen - 1)) { //no-else/*10977*/
							$k[$j++] = $1.i + 1; /*10971*/
							$1.abeforeb(); /*10971*/
							if ($k[--$j]) { //no-else/*10976*/
								$k[$j++] = $1.sft; /*10972*/
								$1.enca(); /*10972*/
								$k[$j++] = $get($1.msg, $1.i); /*10973*/
								$1.encb(); /*10973*/
								$1.i = $1.i + 1; /*10974*/
								break; /*10975*/
							} /*10975*/
						} /*10975*/
						$k[$j++] = $1.swb; /*10978*/
						$1.enca(); /*10978*/
						$1.cset = "setb"; /*10979*/
						$k[$j++] = $get($1.msg, $1.i); /*10980*/
						$1.encb(); /*10980*/
						$1.i = $1.i + 1; /*10981*/
						break; /*10982*/
					} /*10982*/
					if (($eq($1.cset, "setc") && ($1.remnums < 2)) && ($1.rem >= 2)) { //no-else/*10998*/
						$k[$j++] = $1.i; /*10986*/
						$1.abeforeb(); /*10986*/
						if ($k[--$j]) { //no-else/*10992*/
							$k[$j++] = $1.swa; /*10987*/
							$1.encc(); /*10987*/
							$1.cset = "seta"; /*10988*/
							$k[$j++] = $get($1.msg, $1.i); /*10989*/
							$1.enca(); /*10989*/
							$1.i = $1.i + 1; /*10990*/
							break; /*10991*/
						} /*10991*/
						$k[$j++] = $1.swb; /*10993*/
						$1.encc(); /*10993*/
						$1.cset = "setb"; /*10994*/
						$k[$j++] = $get($1.msg, $1.i); /*10995*/
						$1.encb(); /*10995*/
						$1.i = $1.i + 1; /*10996*/
						break; /*10997*/
					} /*10997*/
					var _7k = $get($1.seta, $get($1.msg, $1.i)) !== undefined; /*11001*/
					if (($eq($1.cset, "seta") && _7k) && ($1.rem >= 1)) { //no-else/*11006*/
						$k[$j++] = $get($1.msg, $1.i); /*11003*/
						$1.enca(); /*11003*/
						$1.i = $1.i + 1; /*11004*/
						break; /*11005*/
					} /*11005*/
					var _7v = $get($1.setb, $get($1.msg, $1.i)) !== undefined; /*11007*/
					if (($eq($1.cset, "setb") && _7v) && ($1.rem >= 1)) { //no-else/*11012*/
						$k[$j++] = $get($1.msg, $1.i); /*11009*/
						$1.encb(); /*11009*/
						$1.i = $1.i + 1; /*11010*/
						break; /*11011*/
					} /*11011*/
					if (($eq($1.cset, "setc") && ($1.remnums >= 2)) && ($1.rem >= 1)) { //no-else/*11023*/
						if ($get($1.msg, $1.i) == $1.fn1) {
							/*11020*/
							$k[$j++] = $1.fn1; /*11016*/
							$1.encc(); /*11016*/
							$1.i = $1.i + 1; /*11017*/
						} else {
							/*11020*/
							$k[$j++] = $geti($1.msg, $1.i, 2); /*11019*/
							$1.encc(); /*11019*/
							$1.i = $1.i + 2; /*11020*/
						} /*11020*/
						break; /*11022*/
					} /*11022*/
					$1.endofrow = true; /*11026*/
					break; /*11027*/
				} /*11027*/
			} /*11027*/
			if ((((($1.r >= $1.rows) || ($1.rows == -1)) && ($1.r > 1)) && ($1.i == $1.msglen)) && ($1.rem >= 2)) {
				/*11043*/
				$k[$j++] = $1.rem - 2; /*11035*/
				$1.padrow(); /*11035*/
				$1.j = $1.j + 3; /*11036*/
				$k[$j++] = $1.stp; /*11037*/
				$1.enca(); /*11037*/
				$1.lastrow = true; /*11038*/
			} else {
				/*11043*/
				$k[$j++] = $1.rem; /*11040*/
				$1.padrow(); /*11040*/
				$1.j = $1.j + 1; /*11041*/
				$k[$j++] = $1.stp; /*11042*/
				$1.enca(); /*11042*/
				$1.r = $1.r + 1; /*11043*/
			} /*11043*/
		} /*11043*/
		$1.cws = $geti($1.cws, 0, $1.j); /*11047*/
		$k[$j++] = Infinity; /*11053*/
		for (var _8V = 64; _8V <= 95; _8V += 1) {
			/*11051*/
			$k[$j++] = _8V; /*11051*/
		} /*11051*/
		for (var _8W = 0; _8W <= 15; _8W += 1) {
			/*11052*/
			$k[$j++] = _8W; /*11052*/
		} /*11052*/
		for (var _8X = 26; _8X <= 63; _8X += 1) {
			/*11053*/
			$k[$j++] = _8X; /*11053*/
		} /*11053*/
		$1.abmap = $a(); /*11053*/
		$k[$j++] = Infinity; /*11055*/
		for (var _8Z = 0; _8Z <= 85; _8Z += 1) {
			/*11055*/
			$k[$j++] = _8Z; /*11055*/
		} /*11055*/
		$1.cmap = $a(); /*11055*/
		$1.chkmsg = $a($1.msglen); /*11058*/
		$1.j = 0; /*11059*/
		for (var _8f = 0, _8e = $1.msglen - 1; _8f <= _8e; _8f += 1) {
			/*11065*/
			$1.i = _8f; /*11061*/
			$1.char = $get($1.msg, $1.i); /*11062*/
			if ($1.char >= 0) { //no-else/*11063*/
				$put($1.chkmsg, $1.j, $1.char); /*11063*/
				$1.j = $1.j + 1; /*11063*/
			} /*11063*/
			if (($1.char == $1.fn1) && ($1.i != 0)) { //no-else/*11064*/
				$put($1.chkmsg, $1.j, 29); /*11064*/
				$1.j = $1.j + 1; /*11064*/
			} /*11064*/
		} /*11064*/
		$1.t1 = 0; /*11066*/
		$1.t2 = 0; /*11066*/
		$1.k1 = 0; /*11066*/
		$1.k2 = 0; /*11066*/
		for (var _8w = 0, _8v = $1.j - 1; _8w <= _8v; _8w += 1) {
			/*11073*/
			$1.i = _8w; /*11068*/
			$1.t1 = ($get($1.chkmsg, $1.i) * $1.i) % 86; /*11069*/
			$1.t2 = ($1.t1 + $get($1.chkmsg, $1.i)) % 86; /*11070*/
			$1.k1 = ($1.k1 + $1.t2) % 86; /*11071*/
			$1.k2 = ($1.k2 + $1.t1) % 86; /*11072*/
		} /*11072*/
		$k[$j++] = $1.cws; /*11074*/
		$k[$j++] = $1.cws.length - 4; /*11074*/
		if ($ne($1.cset, "setc")) {
			/*11074*/
			$k[$j++] = $1.abmap; /*11074*/
		} else {
			/*11074*/
			$k[$j++] = $1.cmap; /*11074*/
		} /*11074*/
		var _9G = $get($k[--$j], $1.k1); /*11074*/
		var _9H = $k[--$j]; /*11074*/
		$put($k[--$j], _9H, _9G); /*11074*/
		$k[$j++] = $1.cws; /*11075*/
		$k[$j++] = $1.cws.length - 3; /*11075*/
		if ($ne($1.cset, "setc")) {
			/*11075*/
			$k[$j++] = $1.abmap; /*11075*/
		} else {
			/*11075*/
			$k[$j++] = $1.cmap; /*11075*/
		} /*11075*/
		var _9Q = $get($k[--$j], $1.k2); /*11075*/
		var _9R = $k[--$j]; /*11075*/
		$put($k[--$j], _9R, _9Q); /*11075*/
		var _9T = $1.cws; /*11078*/
		$k[$j++] = _9T; /*11078*/
		$k[$j++] = 2; /*11078*/
		if ($get(_9T, 2 - 1) != 99) {
			/*11078*/
			$k[$j++] = $1.abmap; /*11078*/
		} else {
			/*11078*/
			$k[$j++] = $1.cmap; /*11078*/
		} /*11078*/
		var _9Z = $get($k[--$j], $1.r - 2); /*11078*/
		var _9a = $k[--$j]; /*11078*/
		$put($k[--$j], _9a, _9Z); /*11078*/
		for (var _9e = 1, _9d = $1.r - 1; _9e <= _9d; _9e += 1) {
			/*11082*/
			$1.i = _9e; /*11080*/
			var _9f = $1.cws; /*11081*/
			var _9g = $1.i; /*11081*/
			var _9h = $1.c; /*11081*/
			$k[$j++] = _9f; /*11081*/
			$k[$j++] = (_9g * (_9h + 5)) + 2; /*11081*/
			if ($get(_9f, ((_9g * (_9h + 5)) + 2) - 1) != 99) {
				/*11081*/
				$k[$j++] = $1.abmap; /*11081*/
			} else {
				/*11081*/
				$k[$j++] = $1.cmap; /*11081*/
			} /*11081*/
			var _9n = $get($k[--$j], $1.i + 42); /*11081*/
			var _9o = $k[--$j]; /*11081*/
			$put($k[--$j], _9o, _9n); /*11081*/
		} /*11081*/
		for (var _9s = 0, _9r = $1.r - 1; _9s <= _9r; _9s += 1) {
			/*11093*/
			$1.rcws = $geti($1.cws, _9s * ($1.c + 5), $1.c + 4); /*11086*/
			$1.csum = $get($1.rcws, 0); /*11087*/
			for (var _A1 = 1, _A0 = $1.rcws.length - 2; _A1 <= _A0; _A1 += 1) {
				/*11091*/
				$1.i = _A1; /*11089*/
				$1.csum = $1.csum + ($get($1.rcws, $1.i) * $1.i); /*11090*/
			} /*11090*/
			$put($1.rcws, $1.rcws.length - 1, $1.csum % 103); /*11092*/
		} /*11092*/
		$1.encs = $a(["212222", "222122", "222221", "121223", "121322", "131222", "122213", "122312", "132212", "221213", "221312", "231212", "112232", "122132", "122231", "113222", "123122", "123221", "223211", "221132", "221231", "213212", "223112", "312131", "311222", "321122", "321221", "312212", "322112", "322211", "212123", "212321", "232121", "111323", "131123", "131321", "112313", "132113", "132311", "211313", "231113", "231311", "112133", "112331", "132131", "113123", "113321", "133121", "313121", "211331", "231131", "213113", "213311", "213131", "311123", "311321", "331121", "312113", "312311", "332111", "314111", "221411", "431111", "111224", "111422", "121124", "121421", "141122", "141221", "112214", "112412", "122114", "122411", "142112", "142211", "241211", "221114", "413111", "241112", "134111", "111242", "121142", "121241", "114212", "124112", "124211", "411212", "421112", "421211", "212141", "214121", "412121", "111143", "111341", "131141", "114113", "114311", "411113", "411311", "113141", "114131", "311141", "411131", "211412", "2331112"]); /*11112*/
		$1.rowbits = $a($1.r); /*11115*/
		for (var _AF = 0, _AE = $1.r - 1; _AF <= _AE; _AF += 1) {
			/*11127*/
			$1.i = _AF; /*11117*/
			$k[$j++] = Infinity; /*11120*/
			$forall($geti($1.cws, $1.i * ($1.c + 5), $1.c + 5), function() {
				/*11121*/
				$forall($get($1.encs, $k[--$j]), function() {
					/*11120*/
					var _AO = $k[--$j]; /*11120*/
					$k[$j++] = _AO - 48; /*11120*/
				}); /*11120*/
			}); /*11120*/
			$1.sbs = $a(); /*11120*/
			$k[$j++] = Infinity; /*11123*/
			var _AQ = $1.sbs; /*11124*/
			$k[$j++] = 0; /*11124*/
			for (var _AR = 0, _AS = _AQ.length; _AR < _AS; _AR++) {
				/*11124*/
				var _AU = $k[--$j]; /*11124*/
				var _AV = (_AU == 1) ? 0 : 1; /*11124*/
				$k[$j++] = _AU; /*11124*/
				for (var _AW = 0, _AX = $get(_AQ, _AR); _AW < _AX; _AW++) {
					/*11124*/
					$k[$j++] = _AV /*11124*/
				} /*11124*/
			} /*11124*/
			$astore($a($counttomark() - 1)); /*11125*/
			var _Aa = $k[--$j]; /*11125*/
			var _Ab = $k[--$j]; /*11125*/
			var _Ac = $k[--$j]; /*11125*/
			$put($1.rowbits, $1.i, _Aa); /*11126*/
		} /*11126*/
		$1.symwid = ($1.c * 11) + 57; /*11130*/
		$k[$j++] = Infinity; /*11143*/
		for (var _Ai = 0, _Aj = $1.symwid * $1.sepheight; _Ai < _Aj; _Ai++) {
			/*11132*/
			$k[$j++] = 1; /*11132*/
		} /*11132*/
		for (var _Am = 0, _Al = $1.r - 2; _Am <= _Al; _Am += 1) {
			/*11141*/
			$1.i = _Am; /*11134*/
			for (var _Ao = 0, _Ap = $1.rowheight; _Ao < _Ap; _Ao++) {
				/*11135*/
				$aload($get($1.rowbits, $1.i)); /*11135*/
			} /*11135*/
			for (var _Au = 0, _Av = $1.sepheight; _Au < _Av; _Au++) {
				/*11140*/
				$k[$j++] = 1; /*11138*/
				$k[$j++] = 1; /*11138*/
				$k[$j++] = 0; /*11138*/
				$k[$j++] = 1; /*11138*/
				$k[$j++] = 0; /*11138*/
				$k[$j++] = 0; /*11138*/
				$k[$j++] = 0; /*11138*/
				$k[$j++] = 0; /*11138*/
				$k[$j++] = 1; /*11138*/
				$k[$j++] = 0; /*11138*/
				$k[$j++] = 0; /*11138*/
				for (var _Ax = 0, _Ay = $1.symwid - 24; _Ax < _Ay; _Ax++) {
					/*11138*/
					$k[$j++] = 1; /*11138*/
				} /*11138*/
				$k[$j++] = 1; /*11139*/
				$k[$j++] = 1; /*11139*/
				$k[$j++] = 0; /*11139*/
				$k[$j++] = 0; /*11139*/
				$k[$j++] = 0; /*11139*/
				$k[$j++] = 1; /*11139*/
				$k[$j++] = 1; /*11139*/
				$k[$j++] = 1; /*11139*/
				$k[$j++] = 0; /*11139*/
				$k[$j++] = 1; /*11139*/
				$k[$j++] = 0; /*11139*/
				$k[$j++] = 1; /*11139*/
				$k[$j++] = 1; /*11139*/
			} /*11139*/
		} /*11139*/
		for (var _B0 = 0, _B1 = $1.rowheight; _B0 < _B1; _B0++) {
			/*11142*/
			$aload($get($1.rowbits, $1.r - 1)); /*11142*/
		} /*11142*/
		for (var _B7 = 0, _B8 = $1.symwid * $1.sepheight; _B7 < _B8; _B7++) {
			/*11143*/
			$k[$j++] = 1; /*11143*/
		} /*11143*/
		$1.pixs = $a(); /*11143*/
		var _BI = new Map([
			["ren", $0.renmatrix],
			["pixs", $1.pixs],
			["pixx", $1.symwid],
			["pixy", ~~($1.pixs.length / $1.symwid)],
			["height", (~~($1.pixs.length / $1.symwid)) / 72],
			["width", $1.symwid / 72],
			["opt", $1.options]
		]); /*11154*/
		$k[$j++] = _BI; /*11157*/
		if (!$1.dontdraw) { //no-else/*11157*/
			$0.renmatrix(); /*11157*/
		} /*11157*/
	};
	$0.code16k = function() {
		var $1 = {}; /*11186*/
		$1.options = $k[--$j]; /*11188*/
		$1.barcode = $k[--$j]; /*11189*/
		$1.dontdraw = false; /*11191*/
		$1.mode = -1; /*11192*/
		$1.pos = -1; /*11193*/
		$1.rows = 0; /*11194*/
		$1.rowheight = 8; /*11195*/
		$1.sepheight = 1; /*11196*/
		$1.encoding = "auto"; /*11197*/
		$1.raw = false; /*11198*/
		$1.parse = false; /*11199*/
		$1.parsefnc = false; /*11200*/
		$forall($1.options, function() {
			/*11211*/
			var _3 = $k[--$j]; /*11211*/
			$1[$k[--$j]] = _3; /*11211*/
		}); /*11211*/
		$1.mode = ~~$1.mode; /*11213*/
		$1.pos = ~~$1.pos; /*11214*/
		$1.rows = ~~$1.rows; /*11215*/
		$1.rowheight = ~~$1.rowheight; /*11216*/
		$1.sepheight = ~~$1.sepheight; /*11217*/
		if ($1.pos != -1) { //no-else/*11219*/
			$1.rows = 16; /*11219*/
		} /*11219*/
		$1.barlen = $1.barcode.length; /*11242*/
		$1.swa = -1; /*11245*/
		$1.swb = -2; /*11245*/
		$1.swc = -3; /*11245*/
		$1.sa1 = -4; /*11246*/
		$1.sb1 = -5; /*11246*/
		$1.sc1 = -6; /*11246*/
		$1.sa2 = -7; /*11247*/
		$1.sb2 = -8; /*11247*/
		$1.sc2 = -9; /*11247*/
		$1.pad = -10; /*11248*/
		$1.sb3 = -11; /*11248*/
		$1.sc3 = -12; /*11248*/
		$1.fn1 = -13; /*11249*/
		$1.fn2 = -14; /*11249*/
		$1.fn3 = -15; /*11249*/
		$1.fn4 = -16; /*11249*/
		$1.charmaps = $a([$a([32, 32, "00"]), $a(["!", "!", "01"]), $a(["\"", "\"", "02"]), $a(["#", "#", "03"]), $a(["$", "$", "04"]), $a(["%", "%", "05"]), $a(["&", "&", "06"]), $a(["'", "'", "07"]), $a([40, 40, "08"]), $a([41, 41, "09"]), $a(["*", "*", "10"]), $a(["+", "+", "11"]), $a([",", ",", "12"]), $a(["-", "-", "13"]), $a([".", ".", "14"]), $a(["/", "/", "15"]), $a(["0", "0", "16"]), $a(["1", "1", "17"]), $a(["2", "2", "18"]), $a(["3", "3", "19"]), $a(["4", "4", "20"]), $a(["5", "5", "21"]), $a(["6", "6", "22"]), $a(["7", "7", "23"]), $a(["8", "8", "24"]), $a(["9", "9", "25"]), $a([":", ":", "26"]), $a([";", ";", "27"]), $a(["<", "<", "28"]), $a(["=", "=", "29"]), $a([">", ">", "30"]), $a(["?", "?", "31"]), $a(["@", "@", "32"]), $a(["A", "A", "33"]), $a(["B", "B", "34"]), $a(["C", "C", "35"]), $a(["D", "D", "36"]), $a(["E", "E", "37"]), $a(["F", "F", "38"]), $a(["G", "G", "39"]), $a(["H", "H", "40"]), $a(["I", "I", "41"]), $a(["J", "J", "42"]), $a(["K", "K", "43"]), $a(["L", "L", "44"]), $a(["M", "M", "45"]), $a(["N", "N", "46"]), $a(["O", "O", "47"]), $a(["P", "P", "48"]), $a(["Q", "Q", "49"]), $a(["R", "R", "50"]), $a(["S", "S", "51"]), $a(["T", "T", "52"]), $a(["U", "U", "53"]), $a(["V", "V", "54"]), $a(["W", "W", "55"]), $a(["X", "X", "56"]), $a(["Y", "Y", "57"]), $a(["Z", "Z", "58"]), $a(["[", "[", "59"]), $a([92, 92, "60"]), $a(["]", "]", "61"]), $a(["^", "^", "62"]), $a(["_", "_", "63"]), $a([0, "`", "64"]), $a([1, "a", "65"]), $a([2, "b", "66"]), $a([3, "c", "67"]), $a([4, "d", "68"]), $a([5, "e", "69"]), $a([6, "f", "70"]), $a([7, "g", "71"]), $a([8, "h", "72"]), $a([9, "i", "73"]), $a([10, "j", "74"]), $a([11, "k", "75"]), $a([12, "l", "76"]), $a([13, "m", "77"]), $a([14, "n", "78"]), $a([15, "o", "79"]), $a([16, "p", "80"]), $a([17, "q", "81"]), $a([18, "r", "82"]), $a([19, "s", "83"]), $a([20, "t", "84"]), $a([21, "u", "85"]), $a([22, "v", "86"]), $a([23, "w", "87"]), $a([24, "x", "88"]), $a([25, "y", "89"]), $a([26, "z", "90"]), $a([27, "{", "91"]), $a([28, "|", "92"]), $a([29, "}", "93"]), $a([30, "~", "94"]), $a([31, 127, "95"]), $a([$1.fn3, $1.fn3, "96"]), $a([$1.fn2, $1.fn2, "97"]), $a([$1.sb1, $1.sa1, "98"]), $a([$1.swc, $1.swc, "99"]), $a([$1.swb, $1.fn4, $1.swb]), $a([$1.fn4, $1.swa, $1.swa]), $a([$1.fn1, $1.fn1, $1.fn1]), $a([$1.pad, $1.pad, $1.pad]), $a([$1.sb2, $1.sa2, $1.sb1]), $a([$1.sc2, $1.sc2, $1.sb2]), $a([$1.sc3, $1.sc3, $1.sb3])]); /*11290*/
		$1.charvals = $a([new Map, new Map, new Map]); /*11293*/
		for (var _2S = 0, _2R = $1.charmaps.length - 1; _2S <= _2R; _2S += 1) {
			/*11302*/
			$1.i = _2S; /*11295*/
			$1.encs = $get($1.charmaps, $1.i); /*11296*/
			for (var _2W = 0; _2W <= 2; _2W += 1) {
				/*11301*/
				$1.j = _2W; /*11298*/
				var _2Z = $get($1.encs, $1.j); /*11299*/
				$k[$j++] = _2Z; /*11299*/
				if ($eq($type(_2Z), 'stringtype')) { //no-else/*11299*/
					var _2c = $get($k[--$j], 0); /*11299*/
					$k[$j++] = _2c; /*11299*/
				} /*11299*/
				$put($get($1.charvals, $1.j), $k[--$j], $1.i); /*11300*/
			} /*11300*/
		} /*11300*/
		$1.seta = $get($1.charvals, 0); /*11303*/
		$1.setb = $get($1.charvals, 1); /*11304*/
		$1.setc = $get($1.charvals, 2); /*11305*/
		if ($1.raw) { //no-else/*11307*/
			$1.encoding = "raw"; /*11307*/
		} /*11307*/
		if ($eq($1.encoding, "raw")) { //no-else/*11321*/
			$1.cws = $a($1.barlen); /*11310*/
			$1.i = 0; /*11311*/
			$1.j = 0; /*11311*/
			for (;;) {
				/*11318*/
				if ($1.i == $1.barlen) { //no-else/*11313*/
					break; /*11313*/
				} /*11313*/
				$1.cw = ~~$z($geti($1.barcode, $1.i + 1, 3)); /*11314*/
				$put($1.cws, $1.j, $1.cw); /*11315*/
				$1.i = $1.i + 4; /*11316*/
				$1.j = $1.j + 1; /*11317*/
			} /*11317*/
			$1.cws = $geti($1.cws, 0, $1.j); /*11319*/
			$1.text = ""; /*11320*/
		} /*11320*/
		if ($eq($1.encoding, "auto")) { //no-else/*11809*/
			var _39 = new Map([
				["FNC1", $1.fn1],
				["FNC2", $1.fn2],
				["FNC3", $1.fn3]
			]); /*11328*/
			$1.fncvals = _39; /*11330*/
			$1.msg = $a($1.barlen); /*11331*/
			$1.i = 0; /*11332*/
			$1.j = 0; /*11332*/
			for (;;) {
				/*11371*/
				if ($1.i == $1.barlen) { //no-else/*11333*/
					break; /*11333*/
				} /*11333*/
				$1.char = $get($1.barcode, $1.i); /*11334*/
				$1.i = $1.i + 1; /*11335*/
				if (($1.parsefnc && ($1.char == 94)) && ($1.i < $1.barlen)) { //no-else/*11368*/
					if ($get($1.barcode, $1.i) != 94) {
						/*11366*/
						if ($1.i >= ($1.barlen - 3)) { //no-else/*11340*/
							$k[$j++] = 'bwipp.truncatedFNC'; /*11339*/
							$k[$j++] = "Function character truncated"; /*11339*/
							$0.raiseerror(); /*11339*/
						} /*11339*/
						var _3T = $geti($1.barcode, $1.i, 4); /*11341*/
						$k[$j++] = _3T; /*11363*/
						if ($ne($geti(_3T, 0, 3), "ECI")) {
							/*11362*/
							var _3V = $k[--$j]; /*11343*/
							var _3X = $get($1.fncvals, _3V) !== undefined; /*11343*/
							$k[$j++] = _3V; /*11347*/
							if (!_3X) { //no-else/*11347*/
								var _3Y = $k[--$j]; /*11344*/
								var _3Z = $s(_3Y.length + 28); /*11344*/
								$puti(_3Z, 28, _3Y); /*11344*/
								$puti(_3Z, 0, "Unknown function character: "); /*11345*/
								$k[$j++] = 'bwipp.unknownFNC'; /*11346*/
								$k[$j++] = _3Z; /*11346*/
								$0.raiseerror(); /*11346*/
							} /*11346*/
							var _3c = $get($1.fncvals, $k[--$j]); /*11348*/
							$1.i = $1.i + 4; /*11349*/
							$k[$j++] = _3c; /*11349*/
						} else {
							/*11362*/
							$j--; /*11351*/
							if ($1.i >= ($1.barlen - 8)) { //no-else/*11354*/
								$k[$j++] = 'bwipp.truncatedECI'; /*11353*/
								$k[$j++] = "ECI truncated"; /*11353*/
								$0.raiseerror(); /*11353*/
							} /*11353*/
							var _3i = $geti($1.barcode, $1.i + 3, 6); /*11355*/
							$k[$j++] = _3i; /*11360*/
							$forall(_3i, function() {
								/*11360*/
								var _3j = $k[--$j]; /*11357*/
								if ((_3j < 48) || (_3j > 57)) { //no-else/*11359*/
									$k[$j++] = 'bwipp.invalidECI'; /*11358*/
									$k[$j++] = "ECI must be 000000 to 999999"; /*11358*/
									$0.raiseerror(); /*11358*/
								} /*11358*/
							}); /*11358*/
							var _3k = $k[--$j]; /*11361*/
							$k[$j++] = 0; /*11361*/
							$forall(_3k, function() {
								/*11361*/
								var _3l = $k[--$j]; /*11361*/
								var _3m = $k[--$j]; /*11361*/
								$k[$j++] = (_3m - (_3l - 48)) * 10; /*11361*/
							}); /*11361*/
							var _3n = $k[--$j]; /*11361*/
							$1.i = $1.i + 9; /*11362*/
							$k[$j++] = (~~(_3n / 10)) - 1000000; /*11362*/
						} /*11362*/
						$1.char = $k[--$j]; /*11364*/
					} else {
						/*11366*/
						$1.i = $1.i + 1; /*11366*/
					} /*11366*/
				} /*11366*/
				$put($1.msg, $1.j, $1.char); /*11369*/
				$1.j = $1.j + 1; /*11370*/
			} /*11370*/
			$1.msg = $geti($1.msg, 0, $1.j); /*11372*/
			$1.msglen = $1.msg.length; /*11373*/
			$k[$j++] = Infinity; /*11376*/
			for (var _40 = 0, _41 = $1.msglen; _40 < _41; _40++) {
				/*11376*/
				$k[$j++] = 0; /*11376*/
			} /*11376*/
			$k[$j++] = 0; /*11376*/
			$1.numSA = $a(); /*11376*/
			$k[$j++] = Infinity; /*11377*/
			for (var _44 = 0, _45 = $1.msglen; _44 < _45; _44++) {
				/*11377*/
				$k[$j++] = 0; /*11377*/
			} /*11377*/
			$k[$j++] = 0; /*11377*/
			$1.numEA = $a(); /*11377*/
			for (var _48 = $1.msglen - 1; _48 >= 0; _48 -= 1) {
				/*11387*/
				$1.i = _48; /*11379*/
				if ($get($1.msg, $1.i) >= 0) { //no-else/*11386*/
					if ($get($1.msg, $1.i) >= 128) {
						/*11384*/
						$put($1.numEA, $1.i, $get($1.numEA, $1.i + 1) + 1); /*11382*/
					} else {
						/*11384*/
						$put($1.numSA, $1.i, $get($1.numSA, $1.i + 1) + 1); /*11384*/
					} /*11384*/
				} /*11384*/
			} /*11384*/
			$1.ea = false; /*11390*/
			$1.msgtmp = $a([]); /*11390*/
			for (var _4S = 0, _4R = $1.msglen - 1; _4S <= _4R; _4S += 1) {
				/*11405*/
				$1.i = _4S; /*11392*/
				$1.c = $get($1.msg, $1.i); /*11393*/
				if ((!$xo($1.ea, $1.c < 128)) && ($1.c >= 0)) { //no-else/*11403*/
					if ($1.ea) {
						/*11395*/
						$k[$j++] = $1.numSA; /*11395*/
					} else {
						/*11395*/
						$k[$j++] = $1.numEA; /*11395*/
					} /*11395*/
					var _4e = $get($k[--$j], $1.i); /*11395*/
					var _4h = ((_4e + $1.i) == $1.msglen) ? 3 : 5; /*11396*/
					if (_4e < _4h) {
						/*11401*/
						$k[$j++] = Infinity; /*11398*/
						$aload($1.msgtmp); /*11398*/
						$k[$j++] = $1.fn4; /*11398*/
						$1.msgtmp = $a(); /*11398*/
					} else {
						/*11401*/
						$k[$j++] = Infinity; /*11400*/
						$aload($1.msgtmp); /*11400*/
						$k[$j++] = $1.fn4; /*11400*/
						$k[$j++] = $1.fn4; /*11400*/
						$1.msgtmp = $a(); /*11400*/
						$1.ea = !$1.ea; /*11401*/
					} /*11401*/
				} /*11401*/
				$k[$j++] = Infinity; /*11404*/
				$aload($1.msgtmp); /*11404*/
				if ($1.c >= 0) {
					/*11404*/
					$k[$j++] = $1.c & 127; /*11404*/
				} else {
					/*11404*/
					$k[$j++] = $1.c; /*11404*/
				} /*11404*/
				$1.msgtmp = $a(); /*11404*/
			} /*11404*/
			$1.msg = $1.msgtmp; /*11406*/
			$1.msglen = $1.msg.length; /*11407*/
			$1.numsscr = function() {
				$1.n = 0; /*11411*/
				$1.s = 0; /*11411*/
				$1.p = $k[--$j]; /*11412*/
				for (;;) {
					/*11423*/
					if ($1.p >= $1.msglen) { //no-else/*11413*/
						break; /*11413*/
					} /*11413*/
					var _52 = $get($1.msg, $1.p); /*11414*/
					var _54 = $get($1.setc, _52) !== undefined; /*11415*/
					$k[$j++] = _52; /*11415*/
					if (!_54) { //no-else/*11415*/
						$j--; /*11415*/
						break; /*11415*/
					} /*11415*/
					if ($k[--$j] == $1.fn1) { //no-else/*11419*/
						if (($1.s % 2) == 0) {
							/*11418*/
							$1.s = $1.s + 1; /*11418*/
						} else {
							/*11418*/
							break; /*11418*/
						} /*11418*/
					} /*11418*/
					$1.n = $1.n + 1; /*11420*/
					$1.s = $1.s + 1; /*11421*/
					$1.p = $1.p + 1; /*11422*/
				} /*11422*/
				$k[$j++] = $1.n; /*11424*/
				$k[$j++] = $1.s; /*11424*/
			}; /*11425*/
			$1.enca = function() {
				$put($1.cws, $1.j, $get($1.seta, $k[--$j])); /*11429*/
				$1.j = $1.j + 1; /*11430*/
			}; /*11431*/
			$1.encb = function() {
				$put($1.cws, $1.j, $get($1.setb, $k[--$j])); /*11433*/
				$1.j = $1.j + 1; /*11434*/
			}; /*11435*/
			$1.encc = function() {
				var _5Q = $k[--$j]; /*11437*/
				$k[$j++] = _5Q; /*11441*/
				if ($ne($type(_5Q), 'arraytype')) {
					/*11440*/
					var _5U = $get($1.setc, $k[--$j]); /*11438*/
					$k[$j++] = _5U; /*11438*/
				} else {
					/*11440*/
					$aload($k[--$j]); /*11440*/
					var _5W = $k[--$j]; /*11440*/
					var _5X = $k[--$j]; /*11440*/
					$k[$j++] = (_5W - 48) + ((_5X - 48) * 10); /*11440*/
				} /*11440*/
				$put($1.cws, $1.j, $k[--$j]); /*11442*/
				$1.j = $1.j + 1; /*11443*/
			}; /*11444*/
			$1.anotb = function() {
				var _5c = $k[--$j]; /*11447*/
				var _5e = $get($1.seta, _5c) !== undefined; /*11447*/
				var _5g = $get($1.setb, _5c) !== undefined; /*11447*/
				$k[$j++] = _5e && (!_5g); /*11447*/
			}; /*11447*/
			$1.bnota = function() {
				var _5h = $k[--$j]; /*11448*/
				var _5j = $get($1.setb, _5h) !== undefined; /*11448*/
				var _5l = $get($1.seta, _5h) !== undefined; /*11448*/
				$k[$j++] = _5j && (!_5l); /*11448*/
			}; /*11448*/
			$k[$j++] = Infinity; /*11451*/
			for (var _5n = 0, _5o = $1.msg.length; _5n < _5o; _5n++) {
				/*11451*/
				$k[$j++] = 0; /*11451*/
			} /*11451*/
			$k[$j++] = 9999; /*11451*/
			$1.nextanotb = $a(); /*11451*/
			$k[$j++] = Infinity; /*11452*/
			for (var _5r = 0, _5s = $1.msg.length; _5r < _5s; _5r++) {
				/*11452*/
				$k[$j++] = 0; /*11452*/
			} /*11452*/
			$k[$j++] = 9999; /*11452*/
			$1.nextbnota = $a(); /*11452*/
			for (var _5v = $1.msg.length - 1; _5v >= 0; _5v -= 1) {
				/*11465*/
				$1.i = _5v; /*11454*/
				$k[$j++] = $get($1.msg, $1.i); /*11455*/
				$1.anotb(); /*11455*/
				if ($k[--$j]) {
					/*11458*/
					$put($1.nextanotb, $1.i, 0); /*11456*/
				} else {
					/*11458*/
					$put($1.nextanotb, $1.i, $get($1.nextanotb, $1.i + 1) + 1); /*11458*/
				} /*11458*/
				$k[$j++] = $get($1.msg, $1.i); /*11460*/
				$1.bnota(); /*11460*/
				if ($k[--$j]) {
					/*11463*/
					$put($1.nextbnota, $1.i, 0); /*11461*/
				} else {
					/*11463*/
					$put($1.nextbnota, $1.i, $get($1.nextbnota, $1.i + 1) + 1); /*11463*/
				} /*11463*/
			} /*11463*/
			$1.abeforeb = function() {
				var _6I = $k[--$j]; /*11468*/
				$k[$j++] = $lt($get($1.nextanotb, _6I), $get($1.nextbnota, _6I)); /*11468*/
			}; /*11468*/
			$1.bbeforea = function() {
				var _6N = $k[--$j]; /*11469*/
				$k[$j++] = $lt($get($1.nextbnota, _6N), $get($1.nextanotb, _6N)); /*11469*/
			}; /*11469*/
			$1.cws = $a(($1.barcode.length * 2) + 3); /*11471*/
			$1.i = 0; /*11474*/
			$1.j = 0; /*11474*/
			for (;;) {
				/*11564*/
				if ($1.pos != -1) { //no-else/*11485*/
					$put($1.cws, 0, (~~($1.pos / 10)) - 1); /*11479*/
					$put($1.cws, 1, ($1.pos % 10) - 1); /*11480*/
					$1.j = 2; /*11481*/
					$1.cset = "setb"; /*11482*/
					$1.mode = 7; /*11483*/
					break; /*11484*/
				} /*11484*/
				if ($1.msglen == 0) { //no-else/*11491*/
					$1.cset = "setb"; /*11488*/
					$1.mode = 1; /*11489*/
					break; /*11490*/
				} /*11490*/
				if ($1.msglen >= 2) { //no-else/*11500*/
					$k[$j++] = $get($1.msg, 0) == $1.fn1; /*11494*/
					$k[$j++] = 1; /*11494*/
					$1.numsscr(); /*11494*/
					var _6e = $k[--$j]; /*11494*/
					var _6f = $k[--$j]; /*11494*/
					if ($k[--$j] && (_6e >= 2)) { //no-else/*11499*/
						$1.cset = "setc"; /*11495*/
						$1.mode = 4; /*11496*/
						$1.i = 1; /*11497*/
						break; /*11498*/
					} /*11498*/
				} /*11498*/
				if ($get($1.msg, 0) == $1.fn1) { //no-else/*11507*/
					$1.cset = "setb"; /*11503*/
					$1.mode = 3; /*11504*/
					$1.i = 1; /*11505*/
					break; /*11506*/
				} /*11506*/
				if ($1.msglen >= 2) { //no-else/*11553*/
					$k[$j++] = 0; /*11510*/
					$1.numsscr(); /*11510*/
					var _6l = $k[--$j]; /*11510*/
					var _6m = $k[--$j]; /*11510*/
					if ((_6l >= 2) && ((_6l % 2) == 0)) { //no-else/*11514*/
						$1.cset = "setc"; /*11511*/
						$1.mode = 2; /*11512*/
						break; /*11513*/
					} /*11513*/
					$k[$j++] = 0; /*11516*/
					$1.numsscr(); /*11516*/
					var _6n = $k[--$j]; /*11516*/
					var _6o = $k[--$j]; /*11516*/
					if ((_6n >= 3) && ((_6n % 2) == 1)) { //no-else/*11522*/
						$k[$j++] = $get($1.msg, 0); /*11517*/
						$1.encb(); /*11517*/
						$1.cset = "setc"; /*11518*/
						$1.mode = 5; /*11519*/
						$1.i = 1; /*11520*/
						break; /*11521*/
					} /*11521*/
					var _6u = $get($1.setb, $get($1.msg, 0)) !== undefined; /*11524*/
					$k[$j++] = _6u; /*11525*/
					$k[$j++] = 1; /*11525*/
					$1.numsscr(); /*11525*/
					var _6v = $k[--$j]; /*11525*/
					var _6w = $k[--$j]; /*11525*/
					if ($k[--$j] && ((_6v >= 2) && ((_6v % 2) == 0))) { //no-else/*11531*/
						$k[$j++] = $get($1.msg, 0); /*11526*/
						$1.encb(); /*11526*/
						$1.cset = "setc"; /*11527*/
						$1.mode = 5; /*11528*/
						$1.i = 1; /*11529*/
						break; /*11530*/
					} /*11530*/
					var _73 = $get($1.setb, $get($1.msg, 0)) !== undefined; /*11533*/
					$k[$j++] = _73; /*11534*/
					$k[$j++] = 1; /*11534*/
					$1.numsscr(); /*11534*/
					var _74 = $k[--$j]; /*11534*/
					var _75 = $k[--$j]; /*11534*/
					if ($k[--$j] && ((_74 >= 3) && ((_74 % 2) == 1))) { //no-else/*11541*/
						$k[$j++] = $get($1.msg, 0); /*11535*/
						$1.encb(); /*11535*/
						$k[$j++] = $get($1.msg, 1); /*11536*/
						$1.encb(); /*11536*/
						$1.cset = "setc"; /*11537*/
						$1.mode = 6; /*11538*/
						$1.i = 2; /*11539*/
						break; /*11540*/
					} /*11540*/
					var _7E = $get($1.setb, $get($1.msg, 0)) !== undefined; /*11543*/
					var _7I = $get($1.setb, $get($1.msg, 1)) !== undefined; /*11544*/
					$k[$j++] = _7E && _7I; /*11545*/
					$k[$j++] = 2; /*11545*/
					$1.numsscr(); /*11545*/
					var _7J = $k[--$j]; /*11545*/
					var _7K = $k[--$j]; /*11545*/
					if ($k[--$j] && ((_7J >= 2) && ((_7J % 2) == 0))) { //no-else/*11552*/
						$k[$j++] = $get($1.msg, 0); /*11546*/
						$1.encb(); /*11546*/
						$k[$j++] = $get($1.msg, 1); /*11547*/
						$1.encb(); /*11547*/
						$1.cset = "setc"; /*11548*/
						$1.mode = 6; /*11549*/
						$1.i = 2; /*11550*/
						break; /*11551*/
					} /*11551*/
				} /*11551*/
				$k[$j++] = 0; /*11555*/
				$1.abeforeb(); /*11555*/
				if ($k[--$j]) { //no-else/*11559*/
					$1.cset = "seta"; /*11556*/
					$1.mode = 0; /*11557*/
					break; /*11558*/
				} /*11558*/
				$1.cset = "setb"; /*11561*/
				$1.mode = 1; /*11562*/
				break; /*11563*/
			} /*11563*/
			for (;;) {
				/*11807*/
				if ($1.i == $1.msglen) { //no-else/*11567*/
					break; /*11567*/
				} /*11567*/
				$k[$j++] = $1.i; /*11569*/
				$1.numsscr(); /*11569*/
				$1.nums = $k[--$j]; /*11569*/
				$1.nchars = $k[--$j]; /*11569*/
				for (;;) {
					/*11805*/
					if ($eq($1.cset, "seta")) { //no-else/*11646*/
						if ($1.i < ($1.msglen - 1)) { //no-else/*11583*/
							$k[$j++] = $get($1.msg, $1.i); /*11576*/
							$1.bnota(); /*11576*/
							$k[$j++] = $1.i + 1; /*11577*/
							$1.abeforeb(); /*11577*/
							var _7d = $k[--$j]; /*11577*/
							if (($k[--$j] && _7d)) { //no-else/*11582*/
								$k[$j++] = $1.sb1; /*11578*/
								$1.enca(); /*11578*/
								$k[$j++] = $get($1.msg, $1.i); /*11579*/
								$1.encb(); /*11579*/
								$1.i = $1.i + 1; /*11580*/
								break; /*11581*/
							} /*11581*/
						} /*11581*/
						if ($1.i < ($1.msglen - 2)) { //no-else/*11595*/
							$k[$j++] = $get($1.msg, $1.i); /*11586*/
							$1.bnota(); /*11586*/
							$k[$j++] = $get($1.msg, $1.i + 1); /*11587*/
							$1.bnota(); /*11587*/
							var _7s = $k[--$j]; /*11587*/
							var _7t = $k[--$j]; /*11587*/
							$k[$j++] = $an(_7t, _7s); /*11588*/
							$k[$j++] = $1.i + 2; /*11588*/
							$1.abeforeb(); /*11588*/
							var _7v = $k[--$j]; /*11588*/
							if (($k[--$j] && _7v)) { //no-else/*11594*/
								$k[$j++] = $1.sb2; /*11589*/
								$1.enca(); /*11589*/
								$k[$j++] = $get($1.msg, $1.i); /*11590*/
								$1.encb(); /*11590*/
								$k[$j++] = $get($1.msg, $1.i + 1); /*11591*/
								$1.encb(); /*11591*/
								$1.i = $1.i + 2; /*11592*/
								break; /*11593*/
							} /*11593*/
						} /*11593*/
						$k[$j++] = $get($1.msg, $1.i); /*11597*/
						$1.bnota(); /*11597*/
						if ($k[--$j]) { //no-else/*11601*/
							$k[$j++] = $1.swb; /*11598*/
							$1.enca(); /*11598*/
							$1.cset = "setb"; /*11599*/
							break; /*11600*/
						} /*11600*/
						if ($1.i < ($1.msglen - 4)) { //no-else/*11618*/
							var _8H = $get($1.seta, $get($1.msg, $1.i + 4)) !== undefined; /*11605*/
							if (($1.nums == 4) && _8H) { //no-else/*11617*/
								$k[$j++] = $1.sc2; /*11606*/
								$1.enca(); /*11606*/
								for (var _8J = 0, _8K = 2; _8J < _8K; _8J++) {
									/*11615*/
									if ($get($1.msg, $1.i) == $1.fn1) {
										/*11613*/
										$k[$j++] = $1.fn1; /*11609*/
										$1.encc(); /*11609*/
										$1.i = $1.i + 1; /*11610*/
									} else {
										/*11613*/
										$k[$j++] = $geti($1.msg, $1.i, 2); /*11612*/
										$1.encc(); /*11612*/
										$1.i = $1.i + 2; /*11613*/
									} /*11613*/
								} /*11613*/
								break; /*11616*/
							} /*11616*/
						} /*11616*/
						if ($1.i < ($1.msglen - 6)) { //no-else/*11635*/
							var _8c = $get($1.seta, $get($1.msg, $1.i + 6)) !== undefined; /*11622*/
							if (($1.nums == 6) && _8c) { //no-else/*11634*/
								$k[$j++] = $1.sc3; /*11623*/
								$1.enca(); /*11623*/
								for (var _8e = 0, _8f = 3; _8e < _8f; _8e++) {
									/*11632*/
									if ($get($1.msg, $1.i) == $1.fn1) {
										/*11630*/
										$k[$j++] = $1.fn1; /*11626*/
										$1.encc(); /*11626*/
										$1.i = $1.i + 1; /*11627*/
									} else {
										/*11630*/
										$k[$j++] = $geti($1.msg, $1.i, 2); /*11629*/
										$1.encc(); /*11629*/
										$1.i = $1.i + 2; /*11630*/
									} /*11630*/
								} /*11630*/
								break; /*11633*/
							} /*11633*/
						} /*11633*/
						if (($1.nums >= 4) && (($1.nums % 2) == 0)) { //no-else/*11641*/
							$k[$j++] = $1.swc; /*11638*/
							$1.enca(); /*11638*/
							$1.cset = "setc"; /*11639*/
							break; /*11640*/
						} /*11640*/
						$k[$j++] = $get($1.msg, $1.i); /*11643*/
						$1.enca(); /*11643*/
						$1.i = $1.i + 1; /*11644*/
						break; /*11645*/
					} /*11645*/
					if ($eq($1.cset, "setb")) { //no-else/*11720*/
						if ($1.i < ($1.msglen - 1)) { //no-else/*11657*/
							$k[$j++] = $get($1.msg, $1.i); /*11650*/
							$1.anotb(); /*11650*/
							$k[$j++] = $1.i + 1; /*11651*/
							$1.bbeforea(); /*11651*/
							var _94 = $k[--$j]; /*11651*/
							if (($k[--$j] && _94)) { //no-else/*11656*/
								$k[$j++] = $1.sa1; /*11652*/
								$1.encb(); /*11652*/
								$k[$j++] = $get($1.msg, $1.i); /*11653*/
								$1.enca(); /*11653*/
								$1.i = $1.i + 1; /*11654*/
								break; /*11655*/
							} /*11655*/
						} /*11655*/
						if ($1.i < ($1.msglen - 2)) { //no-else/*11669*/
							$k[$j++] = $get($1.msg, $1.i); /*11660*/
							$1.anotb(); /*11660*/
							$k[$j++] = $get($1.msg, $1.i + 1); /*11661*/
							$1.anotb(); /*11661*/
							var _9J = $k[--$j]; /*11661*/
							var _9K = $k[--$j]; /*11661*/
							$k[$j++] = $an(_9K, _9J); /*11662*/
							$k[$j++] = $1.i + 2; /*11662*/
							$1.bbeforea(); /*11662*/
							var _9M = $k[--$j]; /*11662*/
							if (($k[--$j] && _9M)) { //no-else/*11668*/
								$k[$j++] = $1.sa2; /*11663*/
								$1.encb(); /*11663*/
								$k[$j++] = $get($1.msg, $1.i); /*11664*/
								$1.enca(); /*11664*/
								$k[$j++] = $get($1.msg, $1.i + 1); /*11665*/
								$1.enca(); /*11665*/
								$1.i = $1.i + 2; /*11666*/
								break; /*11667*/
							} /*11667*/
						} /*11667*/
						$k[$j++] = $get($1.msg, $1.i); /*11671*/
						$1.anotb(); /*11671*/
						if ($k[--$j]) { //no-else/*11675*/
							$k[$j++] = $1.swa; /*11672*/
							$1.encb(); /*11672*/
							$1.cset = "seta"; /*11673*/
							break; /*11674*/
						} /*11674*/
						if ($1.i < ($1.msglen - 4)) { //no-else/*11692*/
							var _9i = $get($1.setb, $get($1.msg, $1.i + 4)) !== undefined; /*11679*/
							if (($1.nums == 4) && _9i) { //no-else/*11691*/
								$k[$j++] = $1.sc2; /*11680*/
								$1.encb(); /*11680*/
								for (var _9k = 0, _9l = 2; _9k < _9l; _9k++) {
									/*11689*/
									if ($get($1.msg, $1.i) == $1.fn1) {
										/*11687*/
										$k[$j++] = $1.fn1; /*11683*/
										$1.encc(); /*11683*/
										$1.i = $1.i + 1; /*11684*/
									} else {
										/*11687*/
										$k[$j++] = $geti($1.msg, $1.i, 2); /*11686*/
										$1.encc(); /*11686*/
										$1.i = $1.i + 2; /*11687*/
									} /*11687*/
								} /*11687*/
								break; /*11690*/
							} /*11690*/
						} /*11690*/
						if ($1.i < ($1.msglen - 6)) { //no-else/*11709*/
							var _A3 = $get($1.setb, $get($1.msg, $1.i + 6)) !== undefined; /*11696*/
							if (($1.nums == 6) && _A3) { //no-else/*11708*/
								$k[$j++] = $1.sc3; /*11697*/
								$1.encb(); /*11697*/
								for (var _A5 = 0, _A6 = 3; _A5 < _A6; _A5++) {
									/*11706*/
									if ($get($1.msg, $1.i) == $1.fn1) {
										/*11704*/
										$k[$j++] = $1.fn1; /*11700*/
										$1.encc(); /*11700*/
										$1.i = $1.i + 1; /*11701*/
									} else {
										/*11704*/
										$k[$j++] = $geti($1.msg, $1.i, 2); /*11703*/
										$1.encc(); /*11703*/
										$1.i = $1.i + 2; /*11704*/
									} /*11704*/
								} /*11704*/
								break; /*11707*/
							} /*11707*/
						} /*11707*/
						if (($1.nums >= 4) && (($1.nums % 2) == 0)) { //no-else/*11715*/
							$k[$j++] = $1.swc; /*11712*/
							$1.encb(); /*11712*/
							$1.cset = "setc"; /*11713*/
							break; /*11714*/
						} /*11714*/
						$k[$j++] = $get($1.msg, $1.i); /*11717*/
						$1.encb(); /*11717*/
						$1.i = $1.i + 1; /*11718*/
						break; /*11719*/
					} /*11719*/
					if ($eq($1.cset, "setc")) { //no-else/*11803*/
						if ($1.nums >= 2) { //no-else/*11732*/
							if ($get($1.msg, $1.i) == $1.fn1) {
								/*11729*/
								$k[$j++] = $1.fn1; /*11725*/
								$1.encc(); /*11725*/
								$1.i = $1.i + 1; /*11726*/
							} else {
								/*11729*/
								$k[$j++] = $geti($1.msg, $1.i, 2); /*11728*/
								$1.encc(); /*11728*/
								$1.i = $1.i + 2; /*11729*/
							} /*11729*/
							break; /*11731*/
						} /*11731*/
						if ($1.i < ($1.msglen - 1)) { //no-else/*11742*/
							var _Ag = $get($1.setb, $get($1.msg, $1.i)) !== undefined; /*11735*/
							$k[$j++] = _Ag; /*11736*/
							$k[$j++] = $1.i + 1; /*11736*/
							$1.numsscr(); /*11736*/
							var _Ai = $k[--$j]; /*11736*/
							var _Aj = $k[--$j]; /*11736*/
							if ($k[--$j] && ((_Ai >= 2) && ((_Ai % 2) == 0))) { //no-else/*11741*/
								$k[$j++] = $1.sb1; /*11737*/
								$1.encc(); /*11737*/
								$k[$j++] = $get($1.msg, $1.i); /*11738*/
								$1.encb(); /*11738*/
								$1.i = $1.i + 1; /*11739*/
								break; /*11740*/
							} /*11740*/
						} /*11740*/
						if ($1.i < ($1.msglen - 1)) { //no-else/*11753*/
							var _Aw = $get($1.setb, $get($1.msg, $1.i)) !== undefined; /*11745*/
							$k[$j++] = _Aw; /*11746*/
							$k[$j++] = $1.i + 1; /*11746*/
							$1.numsscr(); /*11746*/
							var _Ay = $k[--$j]; /*11746*/
							var _Az = $k[--$j]; /*11746*/
							if ($k[--$j] && ((_Ay >= 3) && ((_Ay % 2) == 1))) { //no-else/*11752*/
								$k[$j++] = $1.sb2; /*11747*/
								$1.encc(); /*11747*/
								$k[$j++] = $get($1.msg, $1.i); /*11748*/
								$1.encb(); /*11748*/
								$k[$j++] = $get($1.msg, $1.i + 1); /*11749*/
								$1.encb(); /*11749*/
								$1.i = $1.i + 2; /*11750*/
								break; /*11751*/
							} /*11751*/
						} /*11751*/
						if ($1.i < ($1.msglen - 2)) { //no-else/*11765*/
							var _BF = $get($1.setb, $get($1.msg, $1.i)) !== undefined; /*11756*/
							var _BK = $get($1.setb, $get($1.msg, $1.i + 1)) !== undefined; /*11757*/
							$k[$j++] = _BF && _BK; /*11758*/
							$k[$j++] = $1.i + 2; /*11758*/
							$1.numsscr(); /*11758*/
							var _BM = $k[--$j]; /*11758*/
							var _BN = $k[--$j]; /*11758*/
							if ($k[--$j] && ((_BM >= 2) && ((_BM % 2) == 0))) { //no-else/*11764*/
								$k[$j++] = $1.sb2; /*11759*/
								$1.encc(); /*11759*/
								$k[$j++] = $get($1.msg, $1.i); /*11760*/
								$1.encb(); /*11760*/
								$k[$j++] = $get($1.msg, $1.i + 1); /*11761*/
								$1.encb(); /*11761*/
								$1.i = $1.i + 2; /*11762*/
								break; /*11763*/
							} /*11763*/
						} /*11763*/
						if ($1.i < ($1.msglen - 3)) { //no-else/*11778*/
							var _Bd = $get($1.setb, $get($1.msg, $1.i)) !== undefined; /*11768*/
							var _Bi = $get($1.setb, $get($1.msg, $1.i + 1)) !== undefined; /*11769*/
							$k[$j++] = _Bd && _Bi; /*11770*/
							$k[$j++] = $1.i + 2; /*11770*/
							$1.numsscr(); /*11770*/
							var _Bk = $k[--$j]; /*11770*/
							var _Bl = $k[--$j]; /*11770*/
							if ($k[--$j] && ((_Bk >= 3) && ((_Bk % 2) == 1))) { //no-else/*11777*/
								$k[$j++] = $1.sb3; /*11771*/
								$1.encc(); /*11771*/
								$k[$j++] = $get($1.msg, $1.i); /*11772*/
								$1.encb(); /*11772*/
								$k[$j++] = $get($1.msg, $1.i + 1); /*11773*/
								$1.encb(); /*11773*/
								$k[$j++] = $get($1.msg, $1.i + 2); /*11774*/
								$1.encb(); /*11774*/
								$1.i = $1.i + 3; /*11775*/
								break; /*11776*/
							} /*11776*/
						} /*11776*/
						if ($1.i < ($1.msglen - 3)) { //no-else/*11792*/
							var _C4 = $get($1.setb, $get($1.msg, $1.i)) !== undefined; /*11781*/
							var _C9 = $get($1.setb, $get($1.msg, $1.i + 1)) !== undefined; /*11782*/
							var _CE = $get($1.setb, $get($1.msg, $1.i + 2)) !== undefined; /*11783*/
							$k[$j++] = (_C4 && _C9) && _CE; /*11784*/
							$k[$j++] = $1.i + 3; /*11784*/
							$1.numsscr(); /*11784*/
							var _CG = $k[--$j]; /*11784*/
							var _CH = $k[--$j]; /*11784*/
							if ($k[--$j] && ((_CG >= 2) && ((_CG % 2) == 0))) { //no-else/*11791*/
								$k[$j++] = $1.sb3; /*11785*/
								$1.encc(); /*11785*/
								$k[$j++] = $get($1.msg, $1.i); /*11786*/
								$1.encb(); /*11786*/
								$k[$j++] = $get($1.msg, $1.i + 1); /*11787*/
								$1.encb(); /*11787*/
								$k[$j++] = $get($1.msg, $1.i + 2); /*11788*/
								$1.encb(); /*11788*/
								$1.i = $1.i + 3; /*11789*/
								break; /*11790*/
							} /*11790*/
						} /*11790*/
						$k[$j++] = $1.i; /*11794*/
						$1.abeforeb(); /*11794*/
						if ($k[--$j]) { //no-else/*11798*/
							$k[$j++] = $1.swa; /*11795*/
							$1.encc(); /*11795*/
							$1.cset = "seta"; /*11796*/
							break; /*11797*/
						} /*11797*/
						$k[$j++] = $1.swb; /*11800*/
						$1.encc(); /*11800*/
						$1.cset = "setb"; /*11801*/
						break; /*11802*/
					} /*11802*/
					break; /*11804*/
				} /*11804*/
			} /*11804*/
			$1.cws = $geti($1.cws, 0, $1.j); /*11808*/
		} /*11808*/
		$1.metrics = $a([$a([2, 7]), $a([3, 12]), $a([4, 17]), $a([5, 22]), $a([6, 27]), $a([7, 32]), $a([8, 37]), $a([9, 42]), $a([10, 47]), $a([11, 52]), $a([12, 57]), $a([13, 62]), $a([14, 67]), $a([15, 72]), $a([16, 77])]); /*11829*/
		$1.urows = $1.rows; /*11832*/
		$1.i = 0; /*11833*/
		for (;;) {
			/*11843*/
			$1.m = $get($1.metrics, $1.i); /*11835*/
			$1.r = $get($1.m, 0); /*11836*/
			$1.dcws = $get($1.m, 1); /*11837*/
			$1.okay = true; /*11838*/
			if (($1.urows != 0) && ($1.urows != $1.r)) { //no-else/*11839*/
				$1.okay = false; /*11839*/
			} /*11839*/
			if ($1.cws.length > $1.dcws) { //no-else/*11840*/
				$1.okay = false; /*11840*/
			} /*11840*/
			if ($1.okay) { //no-else/*11841*/
				break; /*11841*/
			} /*11841*/
			$1.i = $1.i + 1; /*11842*/
		} /*11842*/
		$k[$j++] = Infinity; /*11846*/
		$aload($1.cws); /*11846*/
		for (var _D9 = 0, _DA = $1.dcws - $1.cws.length; _D9 < _DA; _D9++) {
			/*11846*/
			$k[$j++] = 103; /*11846*/
		} /*11846*/
		$1.cws = $a(); /*11846*/
		$k[$j++] = Infinity; /*11849*/
		$k[$j++] = (($1.r - 2) * 7) + $1.mode; /*11849*/
		$aload($1.cws); /*11849*/
		$1.cws = $a(); /*11849*/
		$k[$j++] = 0; /*11852*/
		for (var _DI = 0, _DH = $1.dcws; _DI <= _DH; _DI += 1) {
			/*11852*/
			var _DL = $k[--$j]; /*11852*/
			$k[$j++] = _DL + ((_DI + 2) * $get($1.cws, _DI)); /*11852*/
		} /*11852*/
		$1.c1 = $k[--$j] % 107; /*11853*/
		$k[$j++] = 0; /*11854*/
		for (var _DP = 0, _DO = $1.dcws; _DP <= _DO; _DP += 1) {
			/*11854*/
			var _DS = $k[--$j]; /*11854*/
			$k[$j++] = _DS + ((_DP + 1) * $get($1.cws, _DP)); /*11854*/
		} /*11854*/
		$1.c2 = ($k[--$j] + ($1.c1 * ($1.dcws + 2))) % 107; /*11855*/
		$k[$j++] = Infinity; /*11856*/
		$aload($1.cws); /*11856*/
		$k[$j++] = $1.c1; /*11856*/
		$k[$j++] = $1.c2; /*11856*/
		$1.cws = $a(); /*11856*/
		$1.encs = $a(["212222", "222122", "222221", "121223", "121322", "131222", "122213", "122312", "132212", "221213", "221312", "231212", "112232", "122132", "122231", "113222", "123122", "123221", "223211", "221132", "221231", "213212", "223112", "312131", "311222", "321122", "321221", "312212", "322112", "322211", "212123", "212321", "232121", "111323", "131123", "131321", "112313", "132113", "132311", "211313", "231113", "231311", "112133", "112331", "132131", "113123", "113321", "133121", "313121", "211331", "231131", "213113", "213311", "213131", "311123", "311321", "331121", "312113", "312311", "332111", "314111", "221411", "431111", "111224", "111422", "121124", "121421", "141122", "141221", "112214", "112412", "122114", "122411", "142112", "142211", "241211", "221114", "413111", "241112", "134111", "111242", "121142", "121241", "114212", "124112", "124211", "411212", "421112", "421211", "212141", "214121", "412121", "111143", "111341", "131141", "114113", "114311", "411113", "411311", "113141", "114131", "311141", "411131", "211412", "211214", "211232", "211133"]); /*11876*/
		$1.startencs = $a(["3211", "2221", "2122", "1411", "1132", "1231", "1114", "3112", "3211", "2221", "2122", "1411", "1132", "1231", "1114", "3112"]); /*11882*/
		$1.stopencsodd = $a(["3211", "2221", "2122", "1411", "1132", "1231", "1114", "3112", "1132", "1231", "1114", "3112", "3211", "2221", "2122", "1411"]); /*11886*/
		$1.stopencseven = $a(["2122", "1411", "1132", "1231", "1114", "3112", "1132", "1231", "1114", "3112", "3211", "2221", "2122", "1411", "3211", "2221"]); /*11890*/
		if (($1.pos == -1) || (((~~($1.pos / 10)) % 2) == 1)) {
			/*11894*/
			$1.stopencs = $1.stopencsodd; /*11892*/
		} else {
			/*11894*/
			$1.stopencs = $1.stopencseven; /*11894*/
		} /*11894*/
		$1.rowbits = $a($1.r); /*11898*/
		for (var _Dm = 0, _Dl = $1.r - 1; _Dm <= _Dl; _Dm += 1) {
			/*11915*/
			$1.i = _Dm; /*11900*/
			$k[$j++] = Infinity; /*11909*/
			$k[$j++] = 10; /*11903*/
			$forall($get($1.startencs, $1.i), function() {
				/*11903*/
				var _Dq = $k[--$j]; /*11903*/
				$k[$j++] = _Dq - 48; /*11903*/
			}); /*11903*/
			$k[$j++] = 1; /*11907*/
			$forall($geti($1.cws, $1.i * 5, 5), function() {
				/*11907*/
				$forall($get($1.encs, $k[--$j]), function() {
					/*11906*/
					var _Dx = $k[--$j]; /*11906*/
					$k[$j++] = _Dx - 48; /*11906*/
				}); /*11906*/
			}); /*11906*/
			$forall($get($1.stopencs, $1.i), function() {
				/*11908*/
				var _E1 = $k[--$j]; /*11908*/
				$k[$j++] = _E1 - 48; /*11908*/
			}); /*11908*/
			$k[$j++] = 1; /*11909*/
			$1.sbs = $a(); /*11909*/
			$k[$j++] = Infinity; /*11911*/
			var _E3 = $1.sbs; /*11912*/
			$k[$j++] = 1; /*11912*/
			for (var _E4 = 0, _E5 = _E3.length; _E4 < _E5; _E4++) {
				/*11912*/
				var _E7 = $k[--$j]; /*11912*/
				var _E8 = (_E7 == 0) ? 1 : 0; /*11912*/
				$k[$j++] = _E7; /*11912*/
				for (var _E9 = 0, _EA = $get(_E3, _E4); _E9 < _EA; _E9++) {
					/*11912*/
					$k[$j++] = _E8 /*11912*/
				} /*11912*/
			} /*11912*/
			$astore($a($counttomark() - 1)); /*11913*/
			var _ED = $k[--$j]; /*11913*/
			var _EE = $k[--$j]; /*11913*/
			var _EF = $k[--$j]; /*11913*/
			$put($1.rowbits, $1.i, _ED); /*11914*/
		} /*11914*/
		$k[$j++] = Infinity; /*11926*/
		for (var _EJ = 0, _EK = 81 * $1.sepheight; _EJ < _EK; _EJ++) {
			/*11919*/
			$k[$j++] = 1; /*11919*/
		} /*11919*/
		for (var _EN = 0, _EM = $1.r - 2; _EN <= _EM; _EN += 1) {
			/*11924*/
			$1.i = _EN; /*11921*/
			for (var _EP = 0, _EQ = $1.rowheight; _EP < _EQ; _EP++) {
				/*11922*/
				$aload($get($1.rowbits, $1.i)); /*11922*/
			} /*11922*/
			for (var _EV = 0, _EW = $1.sepheight; _EV < _EW; _EV++) {
				/*11923*/
				for (var _EX = 0, _EY = 10; _EX < _EY; _EX++) {
					/*11923*/
					$k[$j++] = 0; /*11923*/
				} /*11923*/
				for (var _EZ = 0, _Ea = 70; _EZ < _Ea; _EZ++) {
					/*11923*/
					$k[$j++] = 1; /*11923*/
				} /*11923*/
				$k[$j++] = 0; /*11923*/
			} /*11923*/
		} /*11923*/
		for (var _Ec = 0, _Ed = $1.rowheight; _Ec < _Ed; _Ec++) {
			/*11925*/
			$aload($get($1.rowbits, $1.r - 1)); /*11925*/
		} /*11925*/
		for (var _Ei = 0, _Ej = 81 * $1.sepheight; _Ei < _Ej; _Ei++) {
			/*11926*/
			$k[$j++] = 1; /*11926*/
		} /*11926*/
		$1.pixs = $a(); /*11926*/
		var _Ep = new Map([
			["ren", $0.renmatrix],
			["pixs", $1.pixs],
			["pixx", 81],
			["pixy", ~~($1.pixs.length / 81)],
			["height", (~~($1.pixs.length / 81)) / 72],
			["width", 81 / 72],
			["opt", $1.options]
		]); /*11937*/
		$k[$j++] = _Ep; /*11940*/
		if (!$1.dontdraw) { //no-else/*11940*/
			$0.renmatrix(); /*11940*/
		} /*11940*/
	};
	$0.code49 = function() {
		var $1 = {}; /*11969*/
		$1.options = $k[--$j]; /*11971*/
		$1.barcode = $k[--$j]; /*11972*/
		$1.dontdraw = false; /*11974*/
		$1.mode = -1; /*11975*/
		$1.pos = -1; /*11976*/
		$1.rows = 0; /*11977*/
		$1.rowheight = 8; /*11978*/
		$1.sepheight = 1; /*11979*/
		$1.parse = false; /*11980*/
		$1.parsefnc = false; /*11981*/
		$forall($1.options, function() {
			/*11992*/
			var _3 = $k[--$j]; /*11992*/
			$1[$k[--$j]] = _3; /*11992*/
		}); /*11992*/
		$1.mode = ~~$1.mode; /*11994*/
		$1.pos = ~~$1.pos; /*11995*/
		$1.rows = ~~$1.rows; /*11996*/
		$1.rowheight = ~~$1.rowheight; /*11997*/
		$1.sepheight = ~~$1.sepheight; /*11998*/
		$1.barlen = $1.barcode.length; /*12021*/
		$1.s1 = -1; /*12024*/
		$1.s2 = -2; /*12024*/
		$1.fn1 = -3; /*12024*/
		$1.fn2 = -4; /*12024*/
		$1.fn3 = -5; /*12024*/
		$1.ns = -6; /*12024*/
		var _E = new Map([
			["FNC1", $1.fn1],
			["FNC2", $1.fn2],
			["FNC3", $1.fn3]
		]); /*12028*/
		$1.fncvals = _E; /*12029*/
		$1.msg = $a($1.barlen); /*12030*/
		$1.i = 0; /*12031*/
		$1.j = 0; /*12031*/
		for (;;) {
			/*12070*/
			if ($1.i == $1.barlen) { //no-else/*12032*/
				break; /*12032*/
			} /*12032*/
			$1.char = $get($1.barcode, $1.i); /*12033*/
			$1.i = $1.i + 1; /*12034*/
			if (($1.parsefnc && ($1.char == 94)) && ($1.i < $1.barlen)) { //no-else/*12067*/
				if ($get($1.barcode, $1.i) != 94) {
					/*12065*/
					if ($1.i >= ($1.barlen - 3)) { //no-else/*12039*/
						$k[$j++] = 'bwipp.truncatedFNC'; /*12038*/
						$k[$j++] = "Function character truncated"; /*12038*/
						$0.raiseerror(); /*12038*/
					} /*12038*/
					var _Y = $geti($1.barcode, $1.i, 4); /*12040*/
					$k[$j++] = _Y; /*12062*/
					if ($ne($geti(_Y, 0, 3), "ECI")) {
						/*12061*/
						var _a = $k[--$j]; /*12042*/
						var _c = $get($1.fncvals, _a) !== undefined; /*12042*/
						$k[$j++] = _a; /*12046*/
						if (!_c) { //no-else/*12046*/
							var _d = $k[--$j]; /*12043*/
							var _e = $s(_d.length + 28); /*12043*/
							$puti(_e, 28, _d); /*12043*/
							$puti(_e, 0, "Unknown function character: "); /*12044*/
							$k[$j++] = 'bwipp.unknownFNC'; /*12045*/
							$k[$j++] = _e; /*12045*/
							$0.raiseerror(); /*12045*/
						} /*12045*/
						var _h = $get($1.fncvals, $k[--$j]); /*12047*/
						$1.i = $1.i + 4; /*12048*/
						$k[$j++] = _h; /*12048*/
					} else {
						/*12061*/
						$j--; /*12050*/
						if ($1.i >= ($1.barlen - 8)) { //no-else/*12053*/
							$k[$j++] = 'bwipp.truncatedECI'; /*12052*/
							$k[$j++] = "ECI truncated"; /*12052*/
							$0.raiseerror(); /*12052*/
						} /*12052*/
						var _n = $geti($1.barcode, $1.i + 3, 6); /*12054*/
						$k[$j++] = _n; /*12059*/
						$forall(_n, function() {
							/*12059*/
							var _o = $k[--$j]; /*12056*/
							if ((_o < 48) || (_o > 57)) { //no-else/*12058*/
								$k[$j++] = 'bwipp.invalidECI'; /*12057*/
								$k[$j++] = "ECI must be 000000 to 999999"; /*12057*/
								$0.raiseerror(); /*12057*/
							} /*12057*/
						}); /*12057*/
						var _p = $k[--$j]; /*12060*/
						$k[$j++] = 0; /*12060*/
						$forall(_p, function() {
							/*12060*/
							var _q = $k[--$j]; /*12060*/
							var _r = $k[--$j]; /*12060*/
							$k[$j++] = (_r - (_q - 48)) * 10; /*12060*/
						}); /*12060*/
						var _s = $k[--$j]; /*12060*/
						$1.i = $1.i + 9; /*12061*/
						$k[$j++] = (~~(_s / 10)) - 1000000; /*12061*/
					} /*12061*/
					$1.char = $k[--$j]; /*12063*/
				} else {
					/*12065*/
					$1.i = $1.i + 1; /*12065*/
				} /*12065*/
			} /*12065*/
			$put($1.msg, $1.j, $1.char); /*12068*/
			$1.j = $1.j + 1; /*12069*/
		} /*12069*/
		$1.msg = $geti($1.msg, 0, $1.j); /*12071*/
		$1.msglen = $1.msg.length; /*12072*/
		$1.charmap = $a(["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "-", ".", " ", "$", "/", "+", "%", $1.s1, $1.s2, $1.fn1, $1.fn2, $1.fn3, $1.ns]); /*12081*/
		$1.charvals = new Map; /*12084*/
		for (var _1B = 0; _1B <= 48; _1B += 1) {
			/*12090*/
			$1.i = _1B; /*12086*/
			var _1E = $get($1.charmap, $1.i); /*12087*/
			$k[$j++] = _1E; /*12088*/
			if ($eq($type(_1E), 'stringtype')) { //no-else/*12088*/
				var _1H = $get($k[--$j], 0); /*12088*/
				$k[$j++] = _1H; /*12088*/
			} /*12088*/
			$put($1.charvals, $k[--$j], $1.i); /*12089*/
		} /*12089*/
		$1.combos = $a(["1 ", "1A", "1B", "1C", "1D", "1E", "1F", "1G", "1H", "1I", "1J", "1K", "1L", "1M", "1N", "1O", "1P", "1Q", "1R", "1S", "1T", "1U", "1V", "1W", "1X", "1Y", "1Z", "11", "12", "13", "14", "15", "  ", "16", "17", "18", " $", " %", "19", "10", "1-", "1.", "1$", " +", "1/", " -", " .", " /", " 0", " 1", " 2", " 3", " 4", " 5", " 6", " 7", " 8", " 9", "1+", "21", "22", "23", "24", "25", "26", " A", " B", " C", " D", " E", " F", " G", " H", " I", " J", " K", " L", " M", " N", " O", " P", " Q", " R", " S", " T", " U", " V", " W", " X", " Y", " Z", "27", "28", "29", "20", "2-", "2.", "2A", "2B", "2C", "2D", "2E", "2F", "2G", "2H", "2I", "2J", "2K", "2L", "2M", "2N", "2O", "2P", "2Q", "2R", "2S", "2T", "2U", "2V", "2W", "2X", "2Y", "2Z", "2$", "2/", "2+", "2%", "2 "]); /*12102*/
		for (var _1M = 0; _1M <= 127; _1M += 1) {
			/*12112*/
			$1.i = _1M; /*12104*/
			var _1P = $get($1.combos, $1.i); /*12105*/
			$1.c1 = $get(_1P, 0); /*12105*/
			$1.c2 = $get(_1P, 1); /*12105*/
			if ($1.c1 == 49) { //no-else/*12108*/
				$put($1.charvals, $1.i, $a([$get($1.charvals, $1.s1), $get($1.charvals, $1.c2)])); /*12107*/
			} /*12107*/
			if ($1.c1 == 50) { //no-else/*12111*/
				$put($1.charvals, $1.i, $a([$get($1.charvals, $1.s2), $get($1.charvals, $1.c2)])); /*12110*/
			} /*12110*/
		} /*12110*/
		$1.encodealpha = function() {
			var _1o = $get($1.charvals, $k[--$j]); /*12115*/
			$k[$j++] = _1o; /*12116*/
			if ($ne($type(_1o), 'arraytype')) { //no-else/*12116*/
				$astore($a(1)); /*12116*/
			} /*12116*/
			var _1r = $k[--$j]; /*12117*/
			$puti($1.cws, $1.j, _1r); /*12117*/
			$1.j = _1r.length + $1.j; /*12118*/
		}; /*12119*/
		$1.base48 = function() {
			var _1v = $k[--$j]; /*12122*/
			$k[$j++] = 0; /*12122*/
			$forall(_1v, function() {
				/*12122*/
				var _1w = $k[--$j]; /*12122*/
				var _1x = $k[--$j]; /*12122*/
				$k[$j++] = (_1w - 48) + (_1x * 10); /*12122*/
			}); /*12122*/
			$k[$j++] = Infinity; /*12123*/
			var _1y = $k[--$j]; /*12123*/
			var _1z = $k[--$j]; /*12123*/
			var _20 = $k[--$j]; /*12123*/
			$k[$j++] = _1y; /*12123*/
			$k[$j++] = _1z; /*12123*/
			for (var _21 = 0, _22 = _20 - 1; _21 < _22; _21++) {
				/*12123*/
				var _23 = $k[--$j]; /*12123*/
				$k[$j++] = _23 % 48; /*12123*/
				$k[$j++] = ~~(_23 / 48); /*12123*/
			} /*12123*/
			var _24 = $a(); /*12123*/
			$k[$j++] = _24; /*12124*/
			$k[$j++] = Infinity; /*12124*/
			var _25 = $k[--$j]; /*12124*/
			var _26 = $k[--$j]; /*12124*/
			$k[$j++] = _25; /*12124*/
			$k[$j++] = _26; /*12124*/
			for (var _27 = _26.length - 1; _27 >= 0; _27 -= 1) {
				/*12124*/
				var _28 = $k[--$j]; /*12124*/
				$k[$j++] = $get(_28, _27); /*12124*/
				$k[$j++] = _28; /*12124*/
			} /*12124*/
			$j--; /*12124*/
			var _2A = $a(); /*12124*/
			$puti($1.cws, $1.j, _2A); /*12125*/
			$1.j = _2A.length + $1.j; /*12126*/
		}; /*12127*/
		$1.encodenumeric = function() {
			$1.nums = $k[--$j]; /*12130*/
			var _2G = $1.nums.length; /*12131*/
			var _2H = _2G % 5; /*12131*/
			$k[$j++] = 'pre'; /*12131*/
			$k[$j++] = _2G; /*12131*/
			$k[$j++] = _2H; /*12131*/
			if (_2H != 2) {
				/*12131*/
				var _2I = $k[--$j]; /*12131*/
				var _2J = $k[--$j]; /*12131*/
				$k[$j++] = _2J - _2I; /*12131*/
			} else {
				/*12131*/
				var _2K = $k[--$j]; /*12131*/
				var _2L = $k[--$j]; /*12131*/
				$k[$j++] = (_2L - _2K) - 5; /*12131*/
			} /*12131*/
			var _2M = $k[--$j]; /*12131*/
			$1[$k[--$j]] = _2M; /*12131*/
			for (var _2Q = 0, _2P = $1.pre - 1; _2Q <= _2P; _2Q += 5) {
				/*12132*/
				$k[$j++] = 3; /*12132*/
				$k[$j++] = $geti($1.nums, _2Q, 5); /*12132*/
				$1.base48(); /*12132*/
			} /*12132*/
			$1.nums = $geti($1.nums, $1.pre, $1.nums.length - $1.pre); /*12133*/
			var _2Z = $1.nums.length; /*12135*/
			$k[$j++] = _2Z; /*12135*/
			if (_2Z == 1) { //no-else/*12135*/
				$k[$j++] = $get($1.nums, $1.i); /*12135*/
				$1.encodealpha(); /*12135*/
			} /*12135*/
			var _2d = $k[--$j]; /*12136*/
			$k[$j++] = _2d; /*12136*/
			if (_2d == 3) { //no-else/*12136*/
				$k[$j++] = 2; /*12136*/
				$k[$j++] = $1.nums; /*12136*/
				$1.base48(); /*12136*/
			} /*12136*/
			var _2f = $k[--$j]; /*12137*/
			$k[$j++] = _2f; /*12137*/
			if (_2f == 4) { //no-else/*12137*/
				$k[$j++] = 3; /*12137*/
				$k[$j++] = Infinity; /*12137*/
				$k[$j++] = 49; /*12137*/
				$k[$j++] = 48; /*12137*/
				$aload($1.nums); /*12137*/
				var _2h = $a(); /*12137*/
				$k[$j++] = _2h; /*12137*/
				$1.base48(); /*12137*/
			} /*12137*/
			if ($k[--$j] == 7) { //no-else/*12141*/
				$k[$j++] = 3; /*12139*/
				$k[$j++] = Infinity; /*12139*/
				$k[$j++] = 49; /*12139*/
				$k[$j++] = 48; /*12139*/
				$aload($geti($1.nums, 0, 4)); /*12139*/
				var _2l = $a(); /*12139*/
				$k[$j++] = _2l; /*12139*/
				$1.base48(); /*12139*/
				$k[$j++] = 2; /*12140*/
				$k[$j++] = $geti($1.nums, 4, 3); /*12140*/
				$1.base48(); /*12140*/
			} /*12140*/
		}; /*12142*/
		$k[$j++] = Infinity; /*12145*/
		for (var _2p = 0, _2q = $1.msglen; _2p < _2q; _2p++) {
			/*12145*/
			$k[$j++] = 0; /*12145*/
		} /*12145*/
		$k[$j++] = 0; /*12145*/
		$1.numericruns = $a(); /*12145*/
		for (var _2t = $1.msglen - 1; _2t >= 0; _2t -= 1) {
			/*12154*/
			$1.i = _2t; /*12147*/
			var _2w = $get($1.msg, $1.i); /*12148*/
			if ((_2w >= 48) && (_2w <= 57)) {
				/*12152*/
				$put($1.numericruns, $1.i, $get($1.numericruns, $1.i + 1) + 1); /*12150*/
			} else {
				/*12152*/
				$put($1.numericruns, $1.i, 0); /*12152*/
			} /*12152*/
		} /*12152*/
		if ($1.mode == -1) { //no-else/*12166*/
			for (;;) {
				/*12165*/
				if ($1.pos != -1) { //no-else/*12159*/
					$1.mode = 3; /*12159*/
					break; /*12159*/
				} /*12159*/
				if ($get($1.numericruns, 0) >= 5) { //no-else/*12160*/
					$1.mode = 2; /*12160*/
					break; /*12160*/
				} /*12160*/
				var _3B = $get($1.charvals, $get($1.msg, 0)); /*12161*/
				$k[$j++] = _3B; /*12162*/
				if ($ne($type(_3B), 'arraytype')) { //no-else/*12162*/
					$j--; /*12162*/
					$1.mode = 0; /*12162*/
					break; /*12162*/
				} /*12162*/
				var _3F = ($get($k[--$j], 0) == 43) ? 4 : 5; /*12163*/
				$1.mode = _3F; /*12163*/
				break; /*12164*/
			} /*12164*/
		} /*12164*/
		$1.cws = $a(($1.msglen * 2) + 1); /*12168*/
		$1.method = "alpha"; /*12169*/
		$1.i = -1; /*12169*/
		$1.j = -1; /*12169*/
		if (($1.mode == 0) || ($1.mode == 1)) { //no-else/*12172*/
			$1.method = "alpha"; /*12172*/
			$1.i = 0; /*12172*/
			$1.j = 0; /*12172*/
		} /*12172*/
		if ($1.mode == 2) { //no-else/*12173*/
			$1.method = "numeric"; /*12173*/
			$1.i = 0; /*12173*/
			$1.j = 0; /*12173*/
		} /*12173*/
		if ($1.mode == 3) { //no-else/*12187*/
			$1.posval = $a([12, 22, 13, 23, 33, 14, 24, 34, 44, 15, 25, 35, 45, 55, 16, 26, 36, 46, 56, 66, 17, 27, 37, 47, 57, 67, 77, 18, 28, 38, 48, 58, 68, 78, 88, 19, 29, 39, 49, 59, 69, 79, 89, 99]); /*12184*/
			$k[$j++] = $1.cws; /*12185*/
			$k[$j++] = 0; /*12185*/
			for (var _3O = 0; _3O <= 43; _3O += 1) {
				/*12185*/
				$k[$j++] = _3O; /*12185*/
				if ($get($1.posval, _3O) != $1.pos) { //no-else/*12185*/
					$j--; /*12185*/
				} /*12185*/
			} /*12185*/
			var _3S = $k[--$j]; /*12185*/
			var _3T = $k[--$j]; /*12185*/
			$put($k[--$j], _3T, _3S + 1); /*12185*/
			$1.method = "alpha"; /*12186*/
			$1.i = 0; /*12186*/
			$1.j = 1; /*12186*/
		} /*12186*/
		if (($1.mode == 4) || ($1.mode == 5)) { //no-else/*12191*/
			$put($1.cws, 0, $get($get($1.charvals, $get($1.msg, 0)), 1)); /*12189*/
			$1.method = "alpha"; /*12190*/
			$1.i = 1; /*12190*/
			$1.j = 1; /*12190*/
		} /*12190*/
		for (;;) {
			/*12218*/
			if ($1.i == $1.msglen) { //no-else/*12195*/
				break; /*12195*/
			} /*12195*/
			for (;;) {
				/*12217*/
				if ($eq($1.method, "alpha")) { //no-else/*12206*/
					if ($get($1.numericruns, $1.i) >= 5) { //no-else/*12202*/
						$k[$j++] = $1.ns; /*12199*/
						$1.encodealpha(); /*12199*/
						$1.method = "numeric"; /*12200*/
						break; /*12201*/
					} /*12201*/
					$k[$j++] = $get($1.msg, $1.i); /*12203*/
					$1.encodealpha(); /*12203*/
					$1.i = $1.i + 1; /*12204*/
					break; /*12205*/
				} /*12205*/
				if ($eq($1.method, "numeric")) { //no-else/*12216*/
					if ($get($1.numericruns, $1.i) < 5) { //no-else/*12212*/
						$k[$j++] = $1.ns; /*12209*/
						$1.encodealpha(); /*12209*/
						$1.method = "alpha"; /*12210*/
						break; /*12211*/
					} /*12211*/
					$k[$j++] = $geti($1.msg, $1.i, $get($1.numericruns, $1.i)); /*12213*/
					$1.encodenumeric(); /*12213*/
					$1.i = $1.i + $get($1.numericruns, $1.i); /*12214*/
					break; /*12215*/
				} /*12215*/
			} /*12215*/
		} /*12215*/
		$1.cws = $geti($1.cws, 0, $1.j); /*12219*/
		$1.metrics = $a([$a([2, 9]), $a([3, 16]), $a([4, 23]), $a([5, 30]), $a([6, 37]), $a([7, 42]), $a([8, 49])]); /*12231*/
		$1.urows = $1.rows; /*12234*/
		$1.i = 0; /*12235*/
		for (;;) {
			/*12245*/
			$1.m = $get($1.metrics, $1.i); /*12237*/
			$1.r = $get($1.m, 0); /*12238*/
			$1.dcws = $get($1.m, 1); /*12239*/
			$1.okay = true; /*12240*/
			if (($1.urows != 0) && ($1.urows != $1.r)) { //no-else/*12241*/
				$1.okay = false; /*12241*/
			} /*12241*/
			if ($1.cws.length > $1.dcws) { //no-else/*12242*/
				$1.okay = false; /*12242*/
			} /*12242*/
			if ($1.okay) { //no-else/*12243*/
				break; /*12243*/
			} /*12243*/
			$1.i = $1.i + 1; /*12244*/
		} /*12244*/
		$k[$j++] = Infinity; /*12248*/
		$aload($1.cws); /*12248*/
		for (var _4W = 0, _4X = $1.dcws - $1.cws.length; _4W < _4X; _4W++) {
			/*12248*/
			$k[$j++] = 48; /*12248*/
		} /*12248*/
		$1.cws = $a(); /*12248*/
		$1.ccs = $a($1.r * 8); /*12251*/
		$1.j = 0; /*12252*/
		for (var _4d = 0, _4c = $1.r - 2; _4d <= _4c; _4d += 1) {
			/*12259*/
			$1.i = _4d; /*12254*/
			$1.cc = $geti($1.cws, $1.j, 7); /*12255*/
			$puti($1.ccs, $1.i * 8, $1.cc); /*12256*/
			$k[$j++] = $1.ccs; /*12257*/
			$k[$j++] = ($1.i * 8) + 7; /*12257*/
			$k[$j++] = 0; /*12257*/
			$forall($1.cc, function() {
				/*12257*/
				var _4n = $k[--$j]; /*12257*/
				var _4o = $k[--$j]; /*12257*/
				$k[$j++] = _4o + _4n; /*12257*/
			}); /*12257*/
			var _4p = $k[--$j]; /*12257*/
			var _4q = $k[--$j]; /*12257*/
			$put($k[--$j], _4q, _4p % 49); /*12257*/
			$1.j = $1.j + 7; /*12258*/
		} /*12258*/
		if ($1.j < $1.dcws) { //no-else/*12262*/
			$puti($1.ccs, $1.ccs.length - 8, $geti($1.cws, $1.j, $1.dcws - $1.j)); /*12261*/
		} /*12261*/
		$1.cr7 = (($1.r - 2) * 7) + $1.mode; /*12265*/
		$put($1.ccs, $1.ccs.length - 2, $1.cr7); /*12266*/
		var _57 = $a([1, 9, 31, 26, 2, 12, 17, 23, 37, 18, 22, 6, 27, 44, 15, 43, 39, 11, 13, 5, 41, 33, 36, 8, 4, 32, 3, 19, 40, 25, 29, 10, 24, 30]); /*12270*/
		$k[$j++] = _57; /*12271*/
		$k[$j++] = _57; /*12271*/
		$k[$j++] = Infinity; /*12271*/
		var _58 = $k[--$j]; /*12271*/
		var _5A = $geti($k[--$j], 0, 32); /*12271*/
		$k[$j++] = _58; /*12271*/
		$k[$j++] = 20; /*12271*/
		$aload(_5A); /*12271*/
		$1.weightx = $a(); /*12271*/
		var _5C = $k[--$j]; /*12272*/
		$k[$j++] = _5C; /*12272*/
		$k[$j++] = _5C; /*12272*/
		$k[$j++] = Infinity; /*12272*/
		var _5D = $k[--$j]; /*12272*/
		var _5F = $geti($k[--$j], 1, 32); /*12272*/
		$k[$j++] = _5D; /*12272*/
		$k[$j++] = 16; /*12272*/
		$aload(_5F); /*12272*/
		$1.weighty = $a(); /*12272*/
		$k[$j++] = Infinity; /*12273*/
		var _5H = $k[--$j]; /*12273*/
		var _5J = $geti($k[--$j], 2, 32); /*12273*/
		$k[$j++] = _5H; /*12273*/
		$k[$j++] = 38; /*12273*/
		$aload(_5J); /*12273*/
		$1.weightz = $a(); /*12273*/
		$1.calccheck = function() {
			$1.weights = $k[--$j]; /*12275*/
			$1.score = 0; /*12276*/
			for (var _5O = 0, _5N = (~~((($1.r - 1) * 8) / 2)) - 1; _5O <= _5N; _5O += 1) {
				/*12281*/
				$1.i = _5O; /*12278*/
				$1.score = ((($get($1.ccs, $1.i * 2) * 49) + $get($1.ccs, ($1.i * 2) + 1)) * $get($1.weights, $1.i + 1)) + $1.score; /*12280*/
			} /*12280*/
			$k[$j++] = $1.score; /*12282*/
		}; /*12283*/
		$1.lastrow = $geti($1.ccs, $1.ccs.length - 8, 8); /*12284*/
		if ($1.r >= 7) { //no-else/*12291*/
			$k[$j++] = $1.cr7 * $get($1.weightz, 0); /*12288*/
			$k[$j++] = $1.weightz; /*12288*/
			$1.calccheck(); /*12288*/
			var _5i = $k[--$j]; /*12288*/
			var _5k = ($k[--$j] + _5i) % 2401; /*12289*/
			$k[$j++] = ~~(_5k / 49); /*12289*/
			$k[$j++] = _5k % 49; /*12289*/
			$astore($a(2)); /*12289*/
			$puti($1.lastrow, 0, $k[--$j]); /*12290*/
		} /*12290*/
		$1.wr1 = ($get($1.lastrow, 0) * 49) + $get($1.lastrow, 1); /*12292*/
		$k[$j++] = $1.cr7 * $get($1.weighty, 0); /*12295*/
		$k[$j++] = $1.weighty; /*12295*/
		$1.calccheck(); /*12295*/
		var _5w = $k[--$j]; /*12295*/
		var _62 = (($k[--$j] + _5w) + ($1.wr1 * $get($1.weighty, ($1.r * 4) - 3))) % 2401; /*12297*/
		$1.wr2 = _62; /*12297*/
		$k[$j++] = ~~(_62 / 49); /*12298*/
		$k[$j++] = _62 % 49; /*12298*/
		$astore($a(2)); /*12298*/
		$puti($1.lastrow, 2, $k[--$j]); /*12299*/
		$k[$j++] = $1.cr7 * $get($1.weightx, 0); /*12302*/
		$k[$j++] = $1.weightx; /*12302*/
		$1.calccheck(); /*12302*/
		var _6A = $k[--$j]; /*12302*/
		var _6K = ((($k[--$j] + _6A) + ($1.wr1 * $get($1.weightx, ($1.r * 4) - 3))) + ($1.wr2 * $get($1.weightx, ($1.r * 4) - 2))) % 2401; /*12306*/
		$k[$j++] = ~~(_6K / 49); /*12306*/
		$k[$j++] = _6K % 49; /*12306*/
		$astore($a(2)); /*12306*/
		$puti($1.lastrow, 4, $k[--$j]); /*12307*/
		$k[$j++] = 0; /*12310*/
		$forall($geti($1.ccs, $1.ccs.length - 8, 7), function() {
			/*12310*/
			var _6R = $k[--$j]; /*12310*/
			var _6S = $k[--$j]; /*12310*/
			$k[$j++] = _6S + _6R; /*12310*/
		}); /*12310*/
		$put($1.ccs, $1.ccs.length - 1, $k[--$j] % 49); /*12311*/
		$1.patterns = $a([$a(["11521132", "25112131", "14212132", "25121221", "14221222", "12412132", "23321221", "12421222", "21521221", "15112222", "15121312", "13312222", "24221311", "13321312", "11512222", "22421311", "11521312", "25112311", "14212312", "23312311", "12412312", "21512311", "16121131", "14321131", "12521131", "15212131", "15221221", "13412131", "13421221", "11612131", "16112221", "16121311", "14312221", "14321311", "12512221", "12521311", "15212311", "13412311", "11612311", "11131135", "31131133", "51131131", "21122134", "41122132", "21131224", "41131222", "11113135", "31113133", "51113131", "11122225", "31122223", "51122221", "11131315", "31131313", "51131311", "21113224", "41113222", "21122314", "41122312", "11113315", "31113313", "51113311", "12131134", "32131132", "21231133", "41231131", "22122133", "42122131", "11222134", "22131223", "42131221", "11231224", "31231222", "12113134", "32113132", "12122224", "32122222", "12131314", "32131312", "21231313", "41231311", "22113223", "42113221", "11213224", "22122313", "42122311", "11222314", "31222312", "12113314", "32113312", "21213313", "41213311", "13131133", "33131131", "22231132", "11331133", "31331131", "23122132", "12222133", "23131222", "12231223", "32231221", "21331222", "13113133", "33113131", "13122223", "33122221", "11313133", "13131313", "33131311", "11322223", "22231312", "11331313", "31331311", "23113222", "12213223", "23122312", "12222313", "32222311", "21322312", "13113313", "33113311", "22213312", "11313313", "31313311", "14131132", "23231131", "12331132", "21431131", "24122131", "13222132", "24131221", "13231222", "11422132", "22331221", "11431222", "14113132", "14122222", "12313132", "14131312", "12322222", "23231311", "12331312", "21431311", "24113221", "13213222", "24122311", "13222312", "11413222", "22322311", "11422312", "14113312", "23213311", "12313312", "21413311", "15131131", "13331131", "14222131", "14231221", "12422131", "12431221", "15113131", "15122221", "13313131", "15131311", "13322221", "11513131", "13331311", "11522221", "14213221", "14222311", "12413221", "12422311", "15113311", "13313311", "11513311", "11141134", "31141132", "21132133", "41132131", "21141223", "41141221", "11123134", "31123132", "11132224", "31132222", "11141314", "31141312", "21114133", "41114131", "21123223", "41123221", "21132313", "41132311", "11114224", "31114222", "11123314", "31123312", "21114313", "41114311", "12141133", "32141131", "21241132", "22132132", "11232133", "22141222", "11241223", "31241221", "12123133", "32123131", "12132223", "32132221", "12141313", "32141311", "21241312", "22114132", "11214133", "22123222", "11223223", "22132312", "11232313", "31232311", "12114223", "32114221", "12123313", "32123311", "21223312", "22114312", "11214313", "31214311", "13141132", "22241131", "11341132", "23132131", "12232132", "23141221", "12241222", "21341221", "13123132", "13132222", "11323132", "13141312", "11332222", "22241311", "11341312", "23114131", "12214132", "23123221", "12223222", "23132311", "12232312", "21332311", "13114222", "13123312", "11314222", "22223311", "11323312", "23114311", "12214312", "21314311", "14141131", "12341131", "13232131", "13241221", "11432131", "14123131", "14132221", "12323131", "14141311", "12332221", "12341311", "13214131", "13223221", "11414131", "13232311", "11423221", "11432311", "14114221", "14123311", "12314221", "12323311", "13214311", "11414311", "11151133", "31151131", "21142132", "21151222", "11133133", "31133131", "11142223", "31142221", "11151313", "31151311", "21124132", "21133222", "21142312", "11115133", "31115131", "11124223", "31124221", "11133313", "31133311", "21115222", "21124312", "12151132", "21251131", "22142131", "11242132", "22151221", "11251222", "12133132", "12142222", "12151312", "21251311", "22124131", "11224132", "22133221", "11233222", "22142311", "11242312", "12115132", "12124222", "12133312", "21233311", "22115221", "11215222", "22124311", "11224312", "13151131", "12242131", "12251221", "13133131", "13142221", "11333131", "13151311", "11342221", "12224131", "12233221", "12242311", "13115131", "13124221", "11315131", "13133311", "11324221", "11333311", "12215221", "12224311", "11161132", "21152131", "21161221", "11143132", "11152222", "11161312", "21134131", "21143221", "21152311", "11125132", "11134222", "11143312", "21116131", "21125221", "21134311", "12161131", "11252131", "12143131", "12152221", "12161311", "11234131", "11243221", "11252311", "12125131", "12134221", "12143311", "11216131", "11225221", "11234311", "11111236", "31111234", "51111232", "21111325", "41111323", "61111321", "11111416", "31111414", "51111412", "31211143", "51211141", "12111235", "32111233", "52111231", "21211234", "41211232", "22111324", "42111322", "11211325", "31211323", "51211321", "12111415", "32111413", "52111411", "21211414", "41211412", "12211144", "32211142", "21311143", "41311141", "13111234", "33111232", "22211233", "42211231", "11311234", "31311232", "23111323", "43111321", "12211324", "32211322", "21311323", "41311321", "13111414", "33111412", "22211413", "42211411", "11311414", "31311412", "13211143", "33211141", "22311142", "11411143", "31411141", "14111233", "34111231", "23211232", "12311233", "32311231", "21411232", "24111322", "13211323", "33211321", "22311322", "11411323", "31411321", "14111413", "34111411", "23211412", "12311413", "32311411", "21411412", "14211142", "23311141", "12411142", "21511141", "15111232", "24211231", "13311232", "22411231", "11511232", "25111321", "14211322", "23311321", "12411322", "21511321", "15111412", "24211411", "13311412", "22411411", "11511412", "15211141", "13411141", "11611141", "16111231", "14311231", "12511231", "15211321", "13411321", "11611321", "16111411", "14311411", "12511411", "21121144", "41121142", "11112145", "31112143", "51112141", "11121235", "31121233", "51121231", "21112234", "41112232", "21121324", "41121322", "11112325", "31112323", "51112321", "11121415", "31121413", "51121411", "21112414", "41112412", "22121143", "42121141", "11221144", "31221142", "12112144", "32112142", "12121234", "32121232", "21221233", "41221231", "22112233", "42112231", "11212234", "22121323", "42121321", "11221324", "31221322", "12112324", "32112322", "12121414", "32121412", "21221413", "41221411", "22112413", "42112411", "11212414", "31212412", "23121142", "12221143", "32221141", "21321142", "13112143", "33112141", "13121233", "33121231", "11312143", "22221232", "11321233", "31321231", "23112232", "12212233", "23121322", "12221323", "32221321", "21321322", "13112323", "33112321", "13121413", "33121411", "11312323", "22221412", "11321413", "31321411", "23112412", "12212413", "32212411", "21312412", "24121141", "13221142", "22321141", "11421142", "14112142", "14121232", "12312142", "23221231", "12321232", "21421231", "24112231", "13212232", "24121321", "13221322", "11412232", "22321321", "11421322", "14112322", "14121412", "12312322", "23221411", "12321412", "21421411", "24112411", "13212412", "22312411", "11412412", "14221141", "12421141", "15112141", "15121231", "13312141", "13321231", "11512141", "11521231", "14212231", "14221321", "12412231", "12421321", "15112321", "15121411", "13312321", "13321411", "11512321", "11521411", "14212411", "12412411", "21131143", "41131141", "11122144", "31122142", "11131234", "31131232", "21113143", "41113141", "21122233", "41122231", "21131323", "41131321", "11113234", "31113232", "11122324", "31122322", "11131414", "31131412", "21113323", "41113321", "21122413", "41122411", "11113414", "31113412", "22131142", "11231143", "31231141", "12122143", "32122141", "12131233", "32131231", "21231232", "22113142", "11213143", "22122232", "11222233", "22131322", "11231323", "31231321", "12113233", "32113231", "12122323", "32122321", "12131413", "32131411", "21231412", "22113322", "11213323", "22122412", "11222413", "31222411", "12113413", "32113411", "21213412", "23131141", "12231142", "21331141", "13122142", "13131232", "11322142", "22231231", "11331232", "23113141", "12213142", "23122231", "12222232", "23131321", "12231322", "21331321", "13113232", "13122322", "11313232", "13131412", "11322322", "22231411", "11331412", "23113321", "12213322", "23122411", "12222412", "21322411", "13113412", "22213411", "11313412", "13231141", "11431141", "14122141", "14131231", "12322141", "12331231", "13213141", "13222231", "11413141", "13231321", "11422231", "11431321", "14113231", "14122321", "12313231", "14131411", "12322321", "12331411", "13213321", "13222411", "11413321", "11422411", "14113411", "12313411", "21141142", "11132143", "31132141", "11141233", "31141231", "21123142", "21132232", "21141322", "11114143", "31114141", "11123233", "31123231", "11132323", "31132321", "11141413", "31141411", "21114232", "21123322", "21132412", "11114323", "31114321", "11123413", "31123411", "22141141", "11241142", "12132142", "12141232", "21241231", "22123141", "11223142", "22132231", "11232232", "22141321", "11241322", "12114142", "12123232", "12132322", "12141412", "21241411", "22114231", "11214232", "22123321", "11223322", "22132411", "11232412", "12114322", "12123412", "21223411", "12241141", "13132141", "13141231", "11332141", "11341231", "12223141", "12232231", "12241321", "13114141", "13123231", "11314141", "13132321", "11323231", "13141411", "11332321", "11341411", "12214231", "12223321", "12232411", "13114321", "13123411", "11314321", "11323411", "21151141", "11142142", "11151232", "21133141", "21142231", "21151321", "11124142", "11133232", "11142322", "11151412", "21115141", "21124231", "21133321", "21142411", "11115232", "11124322", "11133412", "11251141", "12142141", "12151231", "11233141", "11242231", "11251321", "12124141", "12133231", "12142321", "12151411", "11215141", "11224231", "11233321", "11242411", "12115231", "12124321", "12133411", "11152141", "11161231", "11134141", "11143231", "11152321", "11161411", "11116141", "11125231", "11134321", "11143411", "21111244", "41111242", "11111335", "31111333", "51111331", "21111424", "41111422", "11111515", "31111513", "51111511", "21211153", "41211151", "22111243", "42111241", "11211244", "31211242", "12111334", "32111332", "21211333", "41211331", "22111423", "42111421", "11211424", "31211422", "12111514", "32111512", "21211513", "41211511", "22211152", "11311153", "31311151", "23111242", "12211243", "32211241", "21311242", "13111333", "33111331", "22211332", "11311333", "31311331", "23111422", "12211423", "32211421", "21311422", "13111513", "33111511", "22211512", "11311513", "31311511", "23211151", "12311152", "21411151", "24111241", "13211242", "22311241", "11411242", "14111332", "23211331", "12311332", "21411331", "24111421", "13211422", "22311421", "11411422", "14111512", "23211511", "12311512", "21411511", "13311151", "11511151", "14211241", "12411241", "15111331", "13311331", "11511331", "14211421", "12411421", "15111511", "13311511", "11511511", "31121152", "21112153", "41112151", "21121243", "41121241", "11112244", "31112242", "11121334", "31121332", "21112333", "41112331", "21121423", "41121421", "11112424", "31112422", "11121514", "31121512", "21112513", "41112511", "12121153", "32121151", "21221152", "22112152", "11212153", "22121242", "11221243", "31221241", "12112243", "32112241", "12121333", "32121331", "21221332", "22112332", "11212333", "22121422", "11221423", "31221421", "12112423", "32112421", "12121513", "32121511", "21221512", "22112512", "11212513", "31212511", "13121152", "22221151", "11321152", "23112151", "12212152", "23121241", "12221242", "21321241", "13112242", "13121332", "11312242", "22221331", "11321332", "23112331", "12212332", "23121421", "12221422", "21321421", "13112422", "13121512", "11312422", "22221511", "11321512", "23112511", "12212512", "21312511", "14121151", "12321151", "13212151", "13221241", "11412151", "11421241", "14112241", "14121331", "12312241", "12321331", "13212331", "13221421", "11412331", "11421421", "14112421", "14121511", "12312421", "12321511", "13212511", "11412511", "11131153", "31131151", "21122152", "21131242", "11113153", "31113151", "11122243", "31122241", "11131333", "31131331", "21113242", "21122332", "21131422", "11113333", "31113331", "11122423", "31122421", "11131513", "31131511", "21113422", "21122512", "12131152", "21231151", "22122151", "11222152", "22131241", "11231242", "12113152", "12122242", "12131332", "21231331", "22113241", "11213242", "22122331", "11222332", "22131421", "11231422", "12113332", "12122422", "12131512", "21231511", "22113421", "11213422", "22122511", "11222512", "13131151", "11331151", "12222151", "12231241", "13113151", "13122241", "11313151", "13131331", "11322241", "11331331", "12213241", "12222331", "12231421", "13113331", "13122421", "11313331", "13131511", "11322421", "11331511", "12213421", "12222511", "11141152", "21132151", "21141241", "11123152", "11132242", "11141332", "21114151", "21123241", "21132331", "21141421", "11114242", "11123332", "11132422", "11141512", "21114331", "21123421", "21132511", "12141151", "11232151", "11241241", "12123151", "12132241", "12141331", "11214151", "11223241", "11232331", "11241421", "12114241", "12123331", "12132421", "12141511", "11214331", "11223421", "11232511", "11151151", "11133151", "11142241", "11151331", "11115151", "11124241", "11133331", "11142421", "11151511", "11111254", "31111252", "21111343", "41111341", "11111434", "31111432", "21111523", "41111521", "11111614", "31111612", "31211161", "12111253", "32111251", "21211252", "22111342", "11211343", "31211341", "12111433", "32111431", "21211432", "22111522", "11211523", "31211521", "12111613", "32111611", "21211612", "12211162", "21311161", "13111252", "22211251", "11311252", "23111341", "12211342", "21311341", "13111432", "22211431", "11311432", "23111521", "12211522", "21311521", "13111612", "22211611", "11311612", "13211161", "11411161", "14111251", "12311251", "13211341", "11411341", "14111431", "12311431", "13211521", "11411521", "14111611", "12311611", "21121162", "11112163", "31112161", "11121253", "31121251", "21112252", "21121342", "11112343", "31112341", "11121433", "31121431", "21112432", "21121522", "11112523", "31112521", "11121613", "31121611", "22121161", "11221162", "12112162", "12121252", "21221251", "22112251", "11212252", "22121341", "11221342", "12112342", "12121432", "21221431", "22112431", "11212432", "22121521", "11221522", "12112522", "12121612", "21221611", "12221161", "13112161", "13121251", "11312161", "11321251", "32121115", "52121113", "21221116", "41221114", "61221112", "22112116", "42112114", "31212115", "51212113", "13121116", "33121114", "22221115", "42221113", "11321116", "31321114", "51321112", "23112115", "43112113", "12212116", "32212114", "52212112", "21312115", "41312113", "61312111", "14121115", "34121113", "23221114", "43221112", "12321115", "32321113", "52321111", "21421114", "41421112", "24112114", "13212115", "33212113", "22312114", "42312112", "11412115", "31412113", "51412111", "15121114", "24221113", "13321114", "33321112", "22421113", "42421111", "11521114", "31521112", "25112113", "14212114", "34212112", "23312113", "43312111", "12412114", "32412112", "21512113", "41512111", "16121113", "25221112", "14321113", "34321111", "23421112", "12521113", "32521111", "15212113", "24312112", "13412113", "33412111", "22512112", "11612113", "31612111", "31131115", "51131113", "21122116", "41122114", "61122112", "31113115", "51113113", "12131116", "32131114", "52131112", "21231115", "41231113", "61231111", "22122115", "42122113", "11222116", "31222114", "51222112", "12113116", "32113114", "52113112", "21213115", "41213113", "61213111", "13131115", "33131113", "22231114", "42231112", "11331115", "31331113", "51331111", "23122114", "43122112", "12222115", "32222113", "52222111", "21322114", "41322112", "13113115", "33113113", "22213114", "42213112", "11313115", "31313113", "51313111", "14131114", "34131112", "23231113", "43231111", "12331114", "32331112", "21431113", "41431111", "24122113", "13222114", "33222112", "22322113", "42322111", "11422114", "31422112", "14113114", "34113112", "23213113", "43213111", "12313114", "32313112", "21413113", "41413111", "15131113", "24231112", "13331113", "33331111", "22431112", "25122112", "14222113", "34222111", "23322112", "12422113", "32422111", "21522112", "15113113", "24213112", "13313113", "33313111", "22413112", "11513113", "31513111", "16131112", "25231111", "14331112", "23431111", "15222112", "24322111", "13422112", "22522111", "16113112", "25213111", "14313112", "23413111", "12513112", "21613111", "11141116", "31141114", "51141112", "21132115", "41132113", "61132111", "11123116", "31123114", "51123112", "21114115", "41114113", "61114111", "12141115", "32141113", "52141111", "21241114", "41241112", "22132114", "42132112", "11232115", "31232113", "51232111", "12123115", "32123113", "52123111", "21223114", "41223112", "22114114", "42114112", "11214115", "31214113", "51214111", "13141114", "33141112", "22241113", "42241111", "11341114", "31341112", "23132113", "43132111", "12232114", "32232112", "21332113", "41332111", "13123114", "33123112", "22223113", "42223111", "11323114", "31323112", "23114113", "43114111", "12214114", "32214112", "21314113", "41314111", "14141113", "34141111", "23241112", "12341113", "32341111", "24132112", "13232113", "33232111", "22332112", "11432113", "31432111", "14123113", "34123111", "23223112", "12323113", "32323111", "21423112", "24114112", "13214113", "33214111", "22314112", "11414113", "31414111", "15141112", "24241111", "13341112", "25132111", "14232112", "23332111", "12432112", "15123112", "24223111", "13323112", "22423111", "11523112", "25114111", "14214112", "23314111", "12414112", "21514111", "16141111", "14341111", "15232111", "13432111", "16123111", "14323111", "12523111", "15214111", "13414111", "11614111", "11151115", "31151113", "51151111", "21142114", "41142112", "11133115", "31133113", "51133111", "21124114", "41124112", "11115115", "31115113", "51115111", "12151114", "32151112", "21251113", "41251111", "22142113", "42142111", "11242114", "31242112", "12133114", "32133112", "21233113", "41233111", "22124113", "42124111", "11224114", "31224112", "12115114", "32115112", "21215113", "41215111", "13151113", "33151111", "22251112", "23142112", "12242113", "32242111", "21342112", "13133113", "33133111", "22233112", "11333113", "31333111", "23124112", "12224113", "32224111", "21324112", "13115113", "33115111", "22215112", "11315113", "31315111", "14151112", "23251111", "24142111", "13242112", "22342111", "14133112", "23233111", "12333112", "21433111", "24124111", "13224112", "22324111", "11424112", "14115112", "23215111", "12315112", "21415111", "15151111", "14242111", "15133111", "13333111", "14224111", "12424111", "15115111", "13315111", "11515111", "11161114", "31161112", "21152113", "41152111", "11143114", "31143112", "21134113", "41134111", "11125114", "31125112", "21116113", "41116111", "12161113", "32161111", "22152112", "11252113", "31252111", "12143113", "32143111", "21243112", "22134112", "11234113", "31234111", "12125113", "32125111", "21225112", "22116112", "11216113", "31216111", "13161112", "23152111", "12252112", "13143112", "22243111", "11343112", "23134111", "12234112", "21334111", "13125112", "22225111", "11325112", "23116111", "12216112", "21316111", "14161111", "13252111", "14143111", "12343111", "13234111", "11434111", "14125111", "12325111", "13216111", "11416111", "31111216", "51111214", "31211125", "51211123", "32111215", "52111213", "21211216", "41211214", "61211212", "12211126", "32211124", "52211122", "21311125", "41311123", "61311121", "13111216", "33111214", "22211215", "42211213", "11311216", "31311214", "51311212", "13211125", "33211123", "22311124", "42311122", "11411125", "31411123", "51411121", "14111215", "34111213", "23211214", "43211212", "12311215", "32311213", "52311211", "21411214", "41411212", "14211124", "34211122", "23311123", "43311121", "12411124", "32411122", "21511123", "41511121", "15111214", "24211213", "13311214", "33311212", "22411213", "42411211", "11511214", "31511212", "15211123", "24311122", "13411123", "33411121", "22511122", "11611123", "31611121", "16111213", "25211212", "14311213", "34311211", "23411212", "12511213", "32511211", "21611212", "21121126", "41121124", "61121122", "31112125", "51112123", "31121215", "51121213", "21112216", "41112214", "61112212", "22121125", "42121123", "11221126", "31221124", "51221122", "12112126", "32112124", "52112122", "12121216", "32121214", "52121212", "21221215", "41221213", "61221211", "22112215", "42112213", "11212216", "31212214", "51212212", "23121124", "43121122", "12221125", "32221123", "52221121", "21321124", "41321122", "13112125", "33112123", "13121215", "33121213", "11312125", "22221214", "42221212", "11321215", "31321213", "51321211", "23112214", "43112212", "12212215", "32212213", "52212211", "21312214", "41312212", "24121123", "13221124", "33221122", "22321123", "42321121", "11421124", "31421122", "14112124", "34112122", "14121214", "34121212", "12312124", "23221213", "43221211", "12321214", "32321212", "21421213", "41421211", "24112213", "13212214", "33212212", "22312213", "42312211", "11412214", "31412212", "25121122", "14221123", "34221121", "23321122", "12421123", "32421121", "21521122", "15112123", "15121213", "13312123", "24221212", "13321213", "33321211", "11512123", "22421212", "11521213", "31521211", "25112212", "14212213", "34212211", "23312212", "12412213", "32412211", "21512212", "15221122", "24321121", "13421122", "22521121", "16112122", "16121212", "14312122", "25221211", "14321212", "12512122", "23421211", "12521212", "15212212", "24312211", "13412212", "22512211", "11612212", "21131125", "41131123", "61131121", "11122126", "31122124", "51122122", "11131216", "31131214", "51131212", "21113125", "41113123", "61113121", "21122215", "41122213", "61122211", "11113216", "31113214", "51113212", "22131124", "42131122", "11231125", "31231123", "51231121", "12122125", "32122123", "52122121", "12131215", "32131213", "52131211", "21231214", "41231212", "22113124", "42113122", "11213125", "22122214", "42122212", "11222215", "31222213", "51222211", "12113215", "32113213", "52113211", "21213214", "41213212", "23131123", "43131121", "12231124", "32231122", "21331123", "41331121", "13122124", "33122122", "13131214", "33131212", "11322124", "22231213", "42231211", "11331214", "31331212", "23113123", "43113121", "12213124", "23122213", "43122211", "12222214", "32222212", "21322213", "41322211", "13113214", "33113212", "22213213", "42213211", "11313214", "31313212", "24131122", "13231123", "33231121", "22331122", "11431123", "31431121", "14122123", "34122121", "14131213", "34131211", "12322123", "23231212", "12331213", "32331211", "21431212", "24113122", "13213123", "24122212", "13222213", "33222211", "11413123", "22322212", "11422213", "31422211", "14113213", "34113211", "23213212", "12313213", "32313211", "21413212", "25131121", "14231122", "23331121", "12431122", "15122122", "15131212", "13322122", "24231211", "13331212", "11522122", "22431211", "25113121", "14213122", "25122211", "14222212", "12413122", "23322211", "12422212", "21522211", "15113212", "24213211", "13313212", "22413211", "11513212", "15231121", "13431121", "16122121", "16131211", "14322121", "14331211", "12522121", "15213121", "15222211", "13413121", "13422211", "11613121", "16113211", "14313211", "12513211", "21141124", "41141122", "11132125", "31132123", "51132121", "11141215", "31141213", "51141211", "21123124", "41123122", "21132214", "41132212", "11114125", "31114123", "51114121", "11123215", "31123213", "51123211", "21114214", "41114212", "22141123", "42141121", "11241124", "31241122", "12132124", "32132122", "12141214", "32141212", "21241213", "41241211", "22123123", "42123121", "11223124", "22132213", "42132211", "11232214", "31232212", "12114124", "32114122", "12123214", "32123212", "21223213", "41223211", "22114213", "42114211", "11214214", "31214212", "23141122", "12241123", "32241121", "21341122", "13132123", "33132121", "13141213", "33141211", "11332123", "22241212", "11341213", "31341211", "23123122", "12223123", "23132212", "12232213", "32232211", "21332212", "13114123", "33114121", "13123213", "33123211", "11314123", "22223212", "11323213", "31323211", "23114212", "12214213", "32214211", "21314212", "24141121", "13241122", "22341121", "14132122", "14141212", "12332122", "23241211", "12341212", "24123121", "13223122", "24132211", "13232212", "11423122", "22332211", "11432212", "14114122", "14123212", "12314122", "23223211", "12323212", "21423211", "24114211", "13214212", "22314211", "11414212", "14241121", "15132121", "15141211", "13332121", "13341211", "14223121", "14232211", "12423121", "12432211", "15114121", "15123211", "13314121", "13323211", "11514121", "11523211", "14214211", "12414211", "21151123", "41151121", "11142124", "31142122", "11151214", "31151212", "21133123", "41133121", "21142213", "41142211", "11124124", "31124122", "11133214", "31133212", "21115123", "41115121", "21124213", "41124211", "11115214", "31115212", "22151122", "11251123", "31251121", "12142123", "32142121", "12151213", "32151211", "21251212", "22133122", "11233123", "22142212", "11242213", "31242211", "12124123", "32124121", "12133213", "32133211", "21233212", "22115122", "11215123", "22124212", "11224213", "31224211", "12115213", "32115211", "21215212", "23151121", "12251122", "13142122", "13151212", "11342122", "22251211", "23133121", "12233122", "23142211", "12242212", "21342211", "13124122", "13133212", "11324122", "22233211", "11333212", "23115121", "12215122", "23124211", "12224212", "21324211", "13115212", "22215211", "11315212", "13251121", "14142121", "14151211", "12342121", "13233121", "13242211", "11433121", "14124121", "14133211", "12324121", "12333211", "13215121", "13224211", "11415121", "11424211", "14115211", "12315211", "21161122", "11152123", "31152121", "11161213", "31161211", "21143122", "21152212", "11134123", "31134121", "11143213", "31143211", "21125122", "21134212", "11116123", "31116121", "11125213", "31125211", "22161121", "12152122", "12161212", "22143121", "11243122", "22152211", "11252212", "12134122", "12143212", "21243211", "22125121", "11225122", "22134211", "11234212", "12116122", "12125212", "21225211", "13152121", "13161211", "12243121", "12252211", "13134121", "13143211", "11334121", "11343211", "12225121", "12234211", "13116121", "13125211", "11316121", "11325211", "21111226", "41111224", "61111222", "31111315", "51111313", "21211135", "41211133", "61211131", "22111225", "42111223", "11211226", "31211224", "51211222", "12111316", "32111314", "52111312", "21211315", "41211313", "61211311", "22211134", "42211132", "11311135", "31311133", "51311131", "23111224", "43111222", "12211225", "32211223", "52211221", "21311224", "41311222", "13111315", "33111313", "22211314", "42211312", "11311315", "31311313", "51311311", "23211133", "43211131", "12311134", "32311132", "21411133", "41411131", "24111223", "13211224", "33211222", "22311223", "42311221", "11411224", "31411222", "14111314", "34111312", "23211313", "43211311", "12311314", "32311312", "21411313", "41411311", "24211132", "13311133", "33311131", "22411132", "11511133", "31511131", "25111222", "14211223", "34211221", "23311222", "12411223", "32411221", "21511222", "15111313", "24211312", "13311313", "33311311", "22411312", "11511313", "31511311", "25211131", "14311132", "23411131", "12511132", "21611131", "15211222", "24311221", "13411222", "22511221", "11611222", "16111312", "25211311", "14311312", "23411311", "12511312", "21611311", "31121134", "51121132", "21112135", "41112133", "61112131", "21121225", "41121223", "61121221", "11112226", "31112224", "51112222", "11121316", "31121314", "51121312", "21112315", "41112313", "61112311", "12121135", "32121133", "52121131", "21221134", "41221132", "22112134", "42112132", "11212135", "22121224", "42121222", "11221225", "31221223", "51221221", "12112225", "32112223", "52112221", "12121315", "32121313", "52121311", "21221314", "41221312", "22112314", "42112312", "11212315", "31212313", "51212311", "13121134", "33121132", "22221133", "42221131", "11321134", "31321132", "23112133", "43112131", "12212134", "23121223", "43121221", "12221224", "32221222", "21321223", "41321221", "13112224", "33112222", "13121314", "33121312", "11312224", "22221313", "42221311", "11321314", "31321312", "23112313", "43112311", "12212314", "32212312", "21312313", "41312311", "14121133", "34121131", "23221132", "12321133", "32321131", "21421132", "24112132", "13212133", "24121222", "13221223", "33221221", "11412133", "22321222", "11421223", "31421221", "14112223", "34112221", "14121313", "34121311", "12312223", "23221312", "12321313", "32321311", "21421312", "24112312", "13212313", "33212311", "22312312", "11412313", "31412311", "15121132", "24221131", "13321132", "22421131"]), $a(["22121116", "42121114", "31221115", "51221113", "32112115", "52112113", "21212116", "41212114", "61212112", "23121115", "43121113", "12221116", "32221114", "52221112", "21321115", "41321113", "61321111", "13112116", "33112114", "22212115", "42212113", "11312116", "31312114", "51312112", "24121114", "13221115", "33221113", "22321114", "42321112", "11421115", "31421113", "51421111", "14112115", "34112113", "23212114", "43212112", "12312115", "32312113", "52312111", "21412114", "41412112", "25121113", "14221114", "34221112", "23321113", "43321111", "12421114", "32421112", "21521113", "41521111", "15112114", "24212113", "13312114", "33312112", "22412113", "42412111", "11512114", "31512112", "15221113", "24321112", "13421113", "33421111", "22521112", "16112113", "25212112", "14312113", "34312111", "23412112", "12512113", "32512111", "21612112", "21131116", "41131114", "61131112", "31122115", "51122113", "21113116", "41113114", "61113112", "22131115", "42131113", "11231116", "31231114", "51231112", "12122116", "32122114", "52122112", "21222115", "41222113", "61222111", "22113115", "42113113", "11213116", "31213114", "51213112", "23131114", "43131112", "12231115", "32231113", "52231111", "21331114", "41331112", "13122115", "33122113", "22222114", "42222112", "11322115", "31322113", "51322111", "23113114", "43113112", "12213115", "32213113", "52213111", "21313114", "41313112", "24131113", "13231114", "33231112", "22331113", "42331111", "11431114", "31431112", "14122114", "34122112", "23222113", "43222111", "12322114", "32322112", "21422113", "41422111", "24113113", "13213114", "33213112", "22313113", "42313111", "11413114", "31413112", "25131112", "14231113", "34231111", "23331112", "12431113", "32431111", "15122113", "24222112", "13322113", "33322111", "22422112", "11522113", "31522111", "25113112", "14213113", "34213111", "23313112", "12413113", "32413111", "21513112", "15231112", "24331111", "13431112", "16122112", "25222111", "14322112", "23422111", "12522112", "15213112", "24313111", "13413112", "22513111", "11613112", "21141115", "41141113", "61141111", "11132116", "31132114", "51132112", "21123115", "41123113", "61123111", "11114116", "31114114", "51114112", "22141114", "42141112", "11241115", "31241113", "51241111", "12132115", "32132113", "52132111", "21232114", "41232112", "22123114", "42123112", "11223115", "31223113", "51223111", "12114115", "32114113", "52114111", "21214114", "41214112", "23141113", "43141111", "12241114", "32241112", "21341113", "41341111", "13132114", "33132112", "22232113", "42232111", "11332114", "31332112", "23123113", "43123111", "12223114", "32223112", "21323113", "41323111", "13114114", "33114112", "22214113", "42214111", "11314114", "31314112", "24141112", "13241113", "33241111", "22341112", "14132113", "34132111", "23232112", "12332113", "32332111", "21432112", "24123112", "13223113", "33223111", "22323112", "11423113", "31423111", "14114113", "34114111", "23214112", "12314113", "32314111", "21414112", "25141111", "14241112", "23341111", "15132112", "24232111", "13332112", "22432111", "25123111", "14223112", "23323111", "12423112", "21523111", "15114112", "24214111", "13314112", "22414111", "11514112", "15241111", "16132111", "14332111", "15223111", "13423111", "16114111", "14314111", "12514111", "21151114", "41151112", "11142115", "31142113", "51142111", "21133114", "41133112", "11124115", "31124113", "51124111", "21115114", "41115112", "22151113", "42151111", "11251114", "31251112", "12142114", "32142112", "21242113", "41242111", "22133113", "42133111", "11233114", "31233112", "12124114", "32124112", "21224113", "41224111", "22115113", "42115111", "11215114", "31215112", "23151112", "12251113", "32251111", "13142113", "33142111", "22242112", "11342113", "31342111", "23133112", "12233113", "32233111", "21333112", "13124113", "33124111", "22224112", "11324113", "31324111", "23115112", "12215113", "32215111", "21315112", "24151111", "13251112", "14142112", "23242111", "12342112", "24133111", "13233112", "22333111", "11433112", "14124112", "23224111", "12324112", "21424111", "24115111", "13215112", "22315111", "11415112", "14251111", "15142111", "13342111", "14233111", "12433111", "15124111", "13324111", "11524111", "14215111", "12415111", "21161113", "41161111", "11152114", "31152112", "21143113", "41143111", "11134114", "31134112", "21125113", "41125111", "11116114", "31116112", "22161112", "12152113", "32152111", "21252112", "22143112", "11243113", "31243111", "12134113", "32134111", "21234112", "22125112", "11225113", "31225111", "12116113", "32116111", "21216112", "23161111", "13152112", "22252111", "23143111", "12243112", "21343111", "13134112", "22234111", "11334112", "23125111", "12225112", "21325111", "13116112", "22216111", "11316112", "14152111", "13243111", "14134111", "12334111", "13225111", "11425111", "14116111", "12316111", "41111215", "61111213", "21211126", "41211124", "61211122", "22111216", "42111214", "31211215", "51211213", "22211125", "42211123", "11311126", "31311124", "51311122", "23111215", "43111213", "12211216", "32211214", "52211212", "21311215", "41311213", "61311211", "23211124", "43211122", "12311125", "32311123", "52311121", "21411124", "41411122", "24111214", "13211215", "33211213", "22311214", "42311212", "11411215", "31411213", "51411211", "24211123", "13311124", "33311122", "22411123", "42411121", "11511124", "31511122", "25111213", "14211214", "34211212", "23311213", "43311211", "12411214", "32411212", "21511213", "41511211", "25211122", "14311123", "34311121", "23411122", "12511123", "32511121", "21611122", "15211213", "24311212", "13411213", "33411211", "22511212", "11611213", "31611211", "31121125", "51121123", "21112126", "41112124", "61112122", "21121216", "41121214", "61121212", "31112215", "51112213", "12121126", "32121124", "52121122", "21221125", "41221123", "61221121", "22112125", "42112123", "11212126", "22121215", "42121213", "11221216", "31221214", "51221212", "12112216", "32112214", "52112212", "21212215", "41212213", "61212211", "13121125", "33121123", "22221124", "42221122", "11321125", "31321123", "51321121", "23112124", "43112122", "12212125", "23121214", "43121212", "12221215", "32221213", "52221211", "21321214", "41321212", "13112215", "33112213", "22212214", "42212212", "11312215", "31312213", "51312211", "14121124", "34121122", "23221123", "43221121", "12321124", "32321122", "21421123", "41421121", "24112123", "13212124", "24121213", "13221214", "33221212", "11412124", "22321213", "42321211", "11421214", "31421212", "14112214", "34112212", "23212213", "43212211", "12312214", "32312212", "21412213", "41412211", "15121123", "24221122", "13321123", "33321121", "22421122", "11521123", "31521121", "25112122", "14212123", "25121212", "14221213", "34221211", "12412123", "23321212", "12421213", "32421211", "21521212", "15112213", "24212212", "13312213", "33312211", "22412212", "11512213", "31512211", "16121122", "25221121", "14321122", "23421121", "12521122", "15212122", "15221212", "13412122", "24321211", "13421212", "11612122", "22521211", "16112212", "25212211", "14312212", "23412211", "12512212", "21612211", "11131126", "31131124", "51131122", "21122125", "41122123", "61122121", "21131215", "41131213", "61131211", "11113126", "31113124", "51113122", "11122216", "31122214", "51122212", "21113215", "41113213", "61113211", "12131125", "32131123", "52131121", "21231124", "41231122", "22122124", "42122122", "11222125", "22131214", "42131212", "11231215", "31231213", "51231211", "12113125", "32113123", "52113121", "12122215", "32122213", "52122211", "21222214", "41222212", "22113214", "42113212", "11213215", "31213213", "51213211", "13131124", "33131122", "22231123", "42231121", "11331124", "31331122", "23122123", "43122121", "12222124", "23131213", "43131211", "12231214", "32231212", "21331213", "41331211", "13113124", "33113122", "13122214", "33122212", "11313124", "22222213", "42222211", "11322214", "31322212", "23113213", "43113211", "12213214", "32213212", "21313213", "41313211", "14131123", "34131121", "23231122", "12331123", "32331121", "21431122", "24122122", "13222123", "24131212", "13231213", "33231211", "11422123", "22331212", "11431213", "31431211", "14113123", "34113121", "14122213", "34122211", "12313123", "23222212", "12322213", "32322211", "21422212", "24113212", "13213213", "33213211", "22313212", "11413213", "31413211", "15131122", "24231121", "13331122", "22431121", "25122121", "14222122", "25131211", "14231212", "12422122", "23331211", "12431212", "15113122", "15122212", "13313122", "24222211", "13322212", "11513122", "22422211", "11522212", "25113211", "14213212", "23313211", "12413212", "21513211", "16131121", "14331121", "15222121", "15231211", "13422121", "13431211", "16113121", "16122211", "14313121", "14322211", "12513121", "12522211", "15213211", "13413211", "11613211", "11141125", "31141123", "51141121", "21132124", "41132122", "21141214", "41141212", "11123125", "31123123", "51123121", "11132215", "31132213", "51132211", "21114124", "41114122", "21123214", "41123212", "11114215", "31114213", "51114211", "12141124", "32141122", "21241123", "41241121", "22132123", "42132121", "11232124", "22141213", "42141211", "11241214", "31241212", "12123124", "32123122", "12132214", "32132212", "21232213", "41232211", "22114123", "42114121", "11214124", "22123213", "42123211", "11223214", "31223212", "12114214", "32114212", "21214213", "41214211", "13141123", "33141121", "22241122", "11341123", "31341121", "23132122", "12232123", "23141212", "12241213", "32241211", "21341212", "13123123", "33123121", "13132213", "33132211", "11323123", "22232212", "11332213", "31332211", "23114122", "12214123", "23123212", "12223213", "32223211", "21323212", "13114213", "33114211", "22214212", "11314213", "31314211", "14141122", "23241121", "12341122", "24132121", "13232122", "24141211", "13241212", "11432122", "22341211", "14123122", "14132212", "12323122", "23232211", "12332212", "21432211", "24114121", "13214122", "24123211", "13223212", "11414122", "22323211", "11423212", "14114212", "23214211", "12314212", "21414211", "15141121", "13341121", "14232121", "14241211", "12432121", "15123121", "15132211", "13323121", "13332211", "11523121", "14214121", "14223211", "12414121", "12423211", "15114211", "13314211", "11514211", "11151124", "31151122", "21142123", "41142121", "21151213", "41151211", "11133124", "31133122", "11142214", "31142212", "21124123", "41124121", "21133213", "41133211", "11115124", "31115122", "11124214", "31124212", "21115213", "41115211", "12151123", "32151121", "21251122", "22142122", "11242123", "22151212", "11251213", "31251211", "12133123", "32133121", "12142213", "32142211", "21242212", "22124122", "11224123", "22133212", "11233213", "31233211", "12115123", "32115121", "12124213", "32124211", "21224212", "22115212", "11215213", "31215211", "13151122", "22251121", "23142121", "12242122", "23151211", "12251212", "13133122", "13142212", "11333122", "22242211", "11342212", "23124121", "12224122", "23133211", "12233212", "21333211", "13115122", "13124212", "11315122", "22224211", "11324212", "23115211", "12215212", "21315211", "14151121", "13242121", "13251211", "14133121", "14142211", "12333121", "12342211", "13224121", "13233211", "11424121", "11433211", "14115121", "14124211", "12315121", "12324211", "13215211", "11415211", "11161123", "31161121", "21152122", "21161212", "11143123", "31143121", "11152213", "31152211", "21134122", "21143212", "11125123", "31125121", "11134213", "31134211", "21116122", "21125212", "12161122", "22152121", "11252122", "22161211", "12143122", "12152212", "21252211", "22134121", "11234122", "22143211", "11243212", "12125122", "12134212", "21234211", "22116121", "11216122", "22125211", "11225212", "13161121", "12252121", "13143121", "13152211", "11343121", "12234121", "12243211", "13125121", "13134211", "11325121", "11334211", "12216121", "12225211", "31111225", "51111223", "21111316", "41111314", "61111312", "31211134", "51211132", "12111226", "32111224", "52111222", "21211225", "41211223", "61211221", "22111315", "42111313", "11211316", "31211314", "51211312", "12211135", "32211133", "52211131", "21311134", "41311132", "13111225", "33111223", "22211224", "42211222", "11311225", "31311223", "51311221", "23111314", "43111312", "12211315", "32211313", "52211311", "21311314", "41311312", "13211134", "33211132", "22311133", "42311131", "11411134", "31411132", "14111224", "34111222", "23211223", "43211221", "12311224", "32311222", "21411223", "41411221", "24111313", "13211314", "33211312", "22311313", "42311311", "11411314", "31411312", "14211133", "34211131", "23311132", "12411133", "32411131", "21511132", "15111223", "24211222", "13311223", "33311221", "22411222", "11511223", "31511221", "25111312", "14211313", "34211311", "23311312", "12411313", "32411311", "21511312", "15211132", "24311131", "13411132", "22511131", "11611132", "16111222", "25211221", "14311222", "23411221", "12511222", "21611221", "15211312", "24311311", "13411312", "22511311", "11611312", "21121135", "41121133", "61121131", "11112136", "31112134", "51112132", "11121226", "31121224", "51121222", "21112225", "41112223", "61112221", "21121315", "41121313", "61121311", "11112316", "31112314", "51112312", "22121134", "42121132", "11221135", "31221133", "51221131", "12112135", "32112133", "52112131", "12121225", "32121223", "52121221", "21221224", "41221222", "22112224", "42112222", "11212225", "22121314", "42121312", "11221315", "31221313", "51221311", "12112315", "32112313", "52112311", "21212314", "41212312", "23121133", "43121131", "12221134", "32221132", "21321133", "41321131", "13112134", "33112132", "13121224", "33121222", "11312134", "22221223", "42221221", "11321224", "31321222", "23112223", "43112221", "12212224", "23121313", "43121311", "12221314", "32221312", "21321313", "41321311", "13112314", "33112312", "22212313", "42212311", "11312314", "31312312", "24121132", "13221133", "33221131", "22321132", "11421133", "31421131", "14112133", "34112131", "14121223", "34121221", "12312133", "23221222", "12321223", "32321221", "21421222", "24112222", "13212223", "24121312", "13221313", "33221311", "11412223", "22321312", "11421313", "31421311", "14112313", "34112311", "23212312", "12312313", "32312311", "21412312", "25121131", "14221132", "23321131", "12421132", "21521131", "15112132", "15121222", "13312132", "24221221", "13321222", "11512132", "22421221", "11521222", "25112221", "14212222", "25121311", "14221312", "12412222", "23321311", "12421312", "21521311", "15112312", "24212311", "13312312", "22412311", "11512312", "15221131", "13421131", "16112131", "16121221", "14312131", "14321221", "12512131", "12521221", "15212221", "15221311", "13412221", "13421311", "11612221", "16112311", "14312311", "12512311", "21131134", "41131132", "11122135", "31122133", "51122131", "11131225", "31131223", "51131221", "21113134", "41113132", "21122224", "41122222", "21131314", "41131312", "11113225", "31113223", "51113221", "11122315", "31122313", "51122311", "21113314", "41113312", "22131133", "42131131", "11231134", "31231132", "12122134", "32122132", "12131224", "32131222", "21231223", "41231221", "22113133", "42113131", "11213134", "22122223", "42122221", "11222224", "22131313", "42131311", "11231314", "31231312", "12113224", "32113222", "12122314", "32122312", "21222313", "41222311", "22113313", "42113311", "11213314", "31213312", "23131132", "12231133", "32231131", "21331132", "13122133", "33122131", "13131223", "33131221", "11322133", "22231222", "11331223", "31331221", "23113132", "12213133", "23122222", "12222223", "23131312", "12231313", "32231311", "21331312", "13113223", "33113221", "13122313", "33122311", "11313223", "22222312", "11322313", "31322311", "23113312", "12213313", "32213311", "21313312", "24131131", "13231132", "22331131", "11431132", "14122132", "14131222", "12322132", "23231221", "12331222", "21431221", "24113131", "13213132", "24122221", "13222222", "24131311", "11413132", "13231312", "11422222", "22331311", "11431312", "14113222", "14122312", "12313222", "23222311", "12322312", "21422311", "24113311", "13213312", "22313311", "11413312", "14231131", "12431131", "15122131", "15131221", "13322131", "13331221", "11522131", "14213131", "14222221", "12413131", "14231311", "12422221", "12431311", "15113221", "15122311", "13313221", "13322311", "11513221", "11522311", "14213311", "12413311", "21141133", "41141131", "11132134", "31132132", "11141224", "31141222", "21123133", "41123131", "21132223", "41132221", "21141313", "41141311", "11114134", "31114132", "11123224", "31123222", "11132314", "31132312", "21114223", "41114221", "21123313", "41123311", "11114314", "31114312", "22141132", "11241133", "31241131", "12132133", "32132131", "12141223", "32141221", "21241222", "22123132", "11223133", "22132222", "11232223", "22141312", "11241313", "31241311", "12114133", "32114131", "12123223", "32123221", "12132313", "32132311", "21232312", "22114222", "11214223", "22123312", "11223313", "31223311", "12114313", "32114311", "21214312", "23141131", "12241132", "21341131", "13132132", "13141222", "11332132", "22241221", "11341222", "23123131", "12223132", "23132221", "12232222", "23141311", "12241312", "21341311", "13114132", "13123222", "11314132", "13132312", "11323222", "22232311", "11332312", "23114221", "12214222", "23123311", "12223312", "21323311", "13114312", "22214311", "11314312", "13241131", "14132131", "14141221", "12332131", "12341221", "13223131", "13232221", "11423131", "13241311", "11432221", "14114131", "14123221", "12314131", "14132311", "12323221", "12332311", "13214221", "13223311", "11414221", "11423311", "14114311", "12314311", "21151132", "11142133", "31142131", "11151223", "31151221", "21133132", "21142222", "21151312", "11124133", "31124131", "11133223", "31133221", "11142313", "31142311", "21115132", "21124222", "21133312", "11115223", "31115221", "11124313", "31124311", "22151131", "11251132", "12142132", "12151222", "21251221", "22133131", "11233132", "22142221", "11242222", "22151311", "11251312", "12124132", "12133222", "12142312", "21242311", "22115131", "11215132", "22124221", "11224222", "22133311", "11233312", "12115222", "12124312", "21224311", "12251131", "13142131", "13151221", "11342131", "12233131", "12242221", "12251311", "13124131", "13133221", "11324131", "13142311", "11333221", "11342311", "12215131", "12224221", "12233311", "13115221", "13124311", "11315221", "11324311", "21161131", "11152132", "11161222", "21143131", "21152221", "21161311", "11134132", "11143222", "11152312", "21125131", "21134221", "21143311", "11116132", "11125222", "11134312", "12152131", "12161221", "11243131", "11252221", "12134131", "12143221", "12152311", "11225131", "11234221", "11243311", "12116131", "12125221", "12134311", "21111235", "41111233", "61111231", "11111326", "31111324", "51111322", "21111415", "41111413", "61111411", "21211144", "41211142", "22111234", "42111232", "11211235", "31211233", "51211231", "12111325", "32111323", "52111321", "21211324", "41211322", "22111414", "42111412", "11211415", "31211413", "51211411", "22211143", "42211141", "11311144", "31311142", "23111233", "43111231", "12211234", "32211232", "21311233", "41311231", "13111324", "33111322", "22211323", "42211321", "11311324", "31311322", "23111413", "43111411", "12211414", "32211412", "21311413", "41311411", "23211142", "12311143", "32311141", "21411142", "24111232", "13211233", "33211231", "22311232", "11411233", "31411231", "14111323", "34111321", "23211322", "12311323", "32311321", "21411322", "24111412", "13211413", "33211411", "22311412", "11411413", "31411411", "24211141", "13311142", "22411141", "11511142", "25111231", "14211232", "23311231", "12411232", "21511231", "15111322", "24211321", "13311322", "22411321", "11511322", "25111411", "14211412", "23311411", "12411412", "21511411", "14311141", "12511141", "15211231", "13411231", "11611231", "16111321", "14311321", "12511321", "15211411", "13411411", "11611411", "31121143", "51121141", "21112144", "41112142", "21121234", "41121232", "11112235", "31112233", "51112231", "11121325", "31121323", "51121321", "21112324", "41112322", "21121414", "41121412", "11112415", "31112413", "51112411", "12121144", "32121142", "21221143", "41221141", "22112143", "42112141", "11212144", "22121233", "42121231", "11221234", "31221232", "12112234", "32112232", "12121324", "32121322", "21221323", "41221321", "22112323", "42112321", "11212324", "22121413", "42121411", "11221414", "31221412", "12112414", "32112412", "21212413", "41212411", "13121143", "33121141", "22221142", "11321143", "31321141", "23112142", "12212143", "23121232", "12221233", "32221231", "21321232", "13112233", "33112231", "13121323", "33121321", "11312233", "22221322", "11321323", "31321321", "23112322", "12212323", "23121412", "12221413", "32221411", "21321412", "13112413", "33112411", "22212412", "11312413", "31312411", "14121142", "23221141", "12321142", "21421141", "24112141", "13212142", "24121231", "13221232", "11412142", "22321231", "11421232", "14112232", "14121322", "12312232", "23221321", "12321322", "21421321", "24112321", "13212322", "24121411", "13221412", "11412322", "22321411", "11421412", "14112412", "23212411", "12312412", "21412411", "15121141", "13321141", "11521141", "14212141", "14221231", "12412141", "12421231", "15112231", "15121321", "13312231", "13321321", "11512231", "11521321", "14212321", "14221411", "12412321", "12421411", "15112411", "13312411", "11512411", "11131144", "31131142", "21122143", "41122141", "21131233", "41131231", "11113144", "31113142", "11122234", "31122232", "11131324", "31131322", "21113233", "41113231", "21122323", "41122321", "21131413", "41131411", "11113324", "31113322", "11122414", "31122412", "21113413", "41113411", "12131143", "32131141", "21231142", "22122142", "11222143", "22131232", "11231233", "31231231", "12113143", "32113141", "12122233", "32122231", "12131323", "32131321", "21231322", "22113232", "11213233", "22122322", "11222323", "22131412", "11231413", "31231411", "12113323", "32113321", "12122413", "32122411", "21222412", "22113412", "11213413", "31213411", "13131142", "22231141", "11331142", "23122141", "12222142", "23131231", "12231232", "21331231", "13113142", "13122232", "11313142", "13131322", "11322232", "22231321", "11331322", "23113231", "12213232", "23122321", "12222322", "23131411", "12231412", "21331411", "13113322", "13122412", "11313322", "22222411", "11322412", "23113411", "12213412", "21313411", "14131141", "12331141", "13222141", "13231231", "11422141", "11431231", "14113141", "14122231", "12313141", "14131321", "12322231", "12331321", "13213231", "13222321", "11413231", "13231411", "11422321", "11431411", "14113321", "14122411", "12313321", "12322411", "13213411", "11413411", "11141143", "31141141", "21132142", "21141232", "11123143", "31123141", "11132233", "31132231", "11141323", "31141321", "21114142", "21123232", "21132322", "21141412", "11114233", "31114231", "11123323", "31123321", "11132413", "31132411", "21114322", "21123412", "12141142", "21241141", "22132141", "11232142", "22141231", "11241232", "12123142", "12132232", "12141322", "21241321", "22114141", "11214142", "22123231", "11223232", "22132321", "11232322", "22141411", "11241412", "12114232", "12123322", "12132412", "21232411", "22114321", "11214322", "22123411", "11223412", "13141141", "11341141", "12232141", "12241231", "13123141", "13132231", "11323141", "13141321", "11332231", "11341321", "12214141", "12223231", "12232321", "12241411", "13114231", "13123321", "11314231", "13132411", "11323321", "11332411", "12214321", "12223411", "11151142", "21142141", "21151231", "11133142", "11142232", "11151322", "21124141", "21133231", "21142321", "21151411", "11115142", "11124232", "11133322", "11142412", "21115231", "21124321", "21133411", "12151141", "11242141", "11251231", "12133141", "12142231", "12151321", "11224141", "11233231", "11242321", "11251411", "12115141", "12124231", "12133321", "12142411", "11215231", "11224321", "11233411", "11161141", "11143141", "11152231", "11161321", "11125141", "11134231", "11143321", "11152411", "11111245", "31111243", "51111241", "21111334", "41111332", "11111425", "31111423", "51111421", "21111514", "41111512", "31211152", "12111244", "32111242", "21211243", "41211241", "22111333", "42111331", "11211334", "31211332", "12111424", "32111422", "21211423", "41211421", "22111513", "42111511", "11211514", "31211512", "12211153", "32211151", "21311152", "13111243", "33111241", "22211242", "11311243", "31311241", "23111332", "12211333", "32211331", "21311332", "13111423", "33111421", "22211422", "11311423", "31311421", "23111512", "12211513", "32211511", "21311512", "13211152", "22311151", "11411152", "14111242", "23211241", "12311242", "21411241", "24111331", "13211332", "22311331", "11411332", "14111422", "23211421", "12311422", "21411421", "24111511", "13211512", "22311511", "11411512", "14211151", "12411151", "15111241", "13311241", "11511241", "14211331", "12411331", "15111421", "13311421", "11511421", "14211511", "12411511", "21121153", "41121151", "11112154", "31112152", "11121244", "31121242", "21112243", "41112241", "21121333", "41121331", "11112334", "31112332", "11121424", "31121422", "21112423", "41112421", "21121513", "41121511", "11112514", "31112512", "22121152", "11221153", "31221151", "12112153", "32112151", "12121243", "32121241", "21221242", "22112242", "11212243", "22121332", "11221333", "31221331", "12112333", "32112331", "12121423", "32121421", "21221422", "22112422", "11212423", "22121512", "11221513", "31221511", "12112513", "32112511", "21212512", "23121151", "12221152", "21321151", "13112152", "13121242", "11312152", "22221241", "11321242", "23112241", "12212242", "23121331", "12221332", "21321331", "13112332", "13121422", "11312332", "22221421", "11321422", "23112421", "12212422", "23121511", "12221512", "21321511", "13112512", "22212511", "11312512", "13221151", "11421151", "14112151", "14121241", "12312151", "12321241", "13212241", "13221331", "11412241", "11421331", "14112331", "14121421", "12312331", "12321421", "13212421", "13221511", "11412421", "11421511", "14112511", "12312511", "21131152", "11122153", "31122151", "11131243", "31131241", "21113152", "21122242", "21131332", "11113243", "31113241", "11122333", "31122331", "11131423", "31131421", "21113332", "21122422", "21131512", "11113423", "31113421", "11122513", "31122511", "22131151", "11231152", "12122152", "12131242", "21231241", "22113151", "11213152", "22122241", "11222242", "22131331", "11231332", "12113242", "12122332", "12131422", "21231421", "22113331", "11213332", "22122421", "11222422", "22131511", "11231512", "12113422", "12122512", "21222511", "12231151", "13122151", "13131241", "11322151", "11331241", "12213151", "12222241", "12231331", "13113241", "13122331", "11313241", "13131421", "11322331", "11331421", "12213331", "12222421", "12231511", "13113421", "13122511", "11313421", "11322511", "21141151", "11132152", "11141242", "21123151", "21132241", "21141331", "11114152", "11123242", "11132332", "11141422", "21114241", "21123331", "21132421", "21141511", "11114332", "11123422", "11132512", "11241151", "12132151", "12141241", "11223151", "11232241", "11241331", "12114151", "12123241", "12132331", "12141421", "11214241", "11223331", "11232421", "11241511", "12114331", "12123421", "12132511", "11142151", "11151241", "11124151", "11133241", "11142331", "11151421", "11115241", "11124331", "11133421", "11142511", "21111253", "41111251", "11111344", "31111342", "21111433", "41111431", "11111524", "31111522", "21111613", "41111611", "21211162", "22111252", "11211253", "31211251", "12111343", "32111341", "21211342", "22111432", "11211433", "31211431", "12111523", "32111521", "21211522", "22111612", "11211613", "31211611", "22211161", "11311162", "23111251", "12211252", "21311251", "13111342", "22211341", "11311342", "23111431", "12211432", "21311431", "13111522", "22211521", "11311522", "23111611", "12211612", "21311611", "12311161", "13211251", "11411251", "14111341", "12311341", "13211431", "11411431", "14111521", "12311521", "13211611", "11411611", "31121161", "21112162", "21121252", "11112253", "31112251", "11121343", "31121341", "21112342", "21121432", "11112433", "31112431", "11121523", "31121521", "21112522", "21121612", "12121162", "21221161", "22112161", "11212162", "22121251", "11221252", "12112252", "12121342", "21221341", "22112341", "11212342", "22121431", "11221432", "12112432", "12121522", "21221521", "22112521", "11212522", "22121611", "11221612", "13121161", "11321161", "12212161", "12221251", "13112251", "13121341", "11312251", "11321341", "12212341", "12221431", "13112431", "13121521", "11312431", "11321521", "12212521", "12221611", "11131162", "21122161", "21131251", "11113162"])]); /*13003*/
		$1.parity = $a(["1001", "0101", "1100", "0011", "1010", "0110", "1111", "0000"]); /*13007*/
		$1.rowbits = $a($1.r); /*13010*/
		for (var _6e = 0, _6d = $1.r - 1; _6e <= _6d; _6e += 1) {
			/*13030*/
			$1.i = _6e; /*13012*/
			$k[$j++] = 'p'; /*13013*/
			if ($1.i != ($1.r - 1)) {
				/*13013*/
				$k[$j++] = $get($1.parity, $1.i); /*13013*/
			} else {
				/*13013*/
				$k[$j++] = "0000"; /*13013*/
			} /*13013*/
			var _6k = $k[--$j]; /*13013*/
			$1[$k[--$j]] = _6k; /*13013*/
			$1.ccrow = $geti($1.ccs, $1.i * 8, 8); /*13014*/
			$k[$j++] = Infinity; /*13016*/
			for (var _6p = 0; _6p <= 7; _6p += 2) {
				/*13016*/
				$aload($geti($1.ccrow, _6p, 2)); /*13016*/
				var _6s = $k[--$j]; /*13016*/
				var _6t = $k[--$j]; /*13016*/
				$k[$j++] = _6s + (_6t * 49); /*13016*/
			} /*13016*/
			$1.scrow = $a(); /*13016*/
			$k[$j++] = Infinity; /*13024*/
			$k[$j++] = 10; /*13023*/
			$k[$j++] = 1; /*13023*/
			$k[$j++] = 1; /*13023*/
			for (var _6v = 0; _6v <= 3; _6v += 1) {
				/*13023*/
				$1.j = _6v; /*13021*/
				$forall($get($get($1.patterns, $get($1.p, $1.j) - 48), $get($1.scrow, $1.j)), function() {
					/*13022*/
					var _75 = $k[--$j]; /*13022*/
					$k[$j++] = _75 - 48; /*13022*/
				}); /*13022*/
			} /*13022*/
			$k[$j++] = 4; /*13024*/
			$k[$j++] = 1; /*13024*/
			$1.sbs = $a(); /*13024*/
			$k[$j++] = Infinity; /*13026*/
			var _77 = $1.sbs; /*13027*/
			$k[$j++] = 1; /*13027*/
			for (var _78 = 0, _79 = _77.length; _78 < _79; _78++) {
				/*13027*/
				var _7B = $k[--$j]; /*13027*/
				var _7C = (_7B == 0) ? 1 : 0; /*13027*/
				$k[$j++] = _7B; /*13027*/
				for (var _7D = 0, _7E = $get(_77, _78); _7D < _7E; _7D++) {
					/*13027*/
					$k[$j++] = _7C /*13027*/
				} /*13027*/
			} /*13027*/
			$astore($a($counttomark() - 1)); /*13028*/
			var _7H = $k[--$j]; /*13028*/
			var _7I = $k[--$j]; /*13028*/
			var _7J = $k[--$j]; /*13028*/
			$put($1.rowbits, $1.i, _7H); /*13029*/
		} /*13029*/
		$k[$j++] = Infinity; /*13041*/
		for (var _7N = 0, _7O = 81 * $1.sepheight; _7N < _7O; _7N++) {
			/*13034*/
			$k[$j++] = 1; /*13034*/
		} /*13034*/
		for (var _7R = 0, _7Q = $1.r - 2; _7R <= _7Q; _7R += 1) {
			/*13039*/
			$1.i = _7R; /*13036*/
			for (var _7T = 0, _7U = $1.rowheight; _7T < _7U; _7T++) {
				/*13037*/
				$aload($get($1.rowbits, $1.i)); /*13037*/
			} /*13037*/
			for (var _7Z = 0, _7a = $1.sepheight; _7Z < _7a; _7Z++) {
				/*13038*/
				for (var _7b = 0, _7c = 10; _7b < _7c; _7b++) {
					/*13038*/
					$k[$j++] = 0; /*13038*/
				} /*13038*/
				for (var _7d = 0, _7e = 70; _7d < _7e; _7d++) {
					/*13038*/
					$k[$j++] = 1; /*13038*/
				} /*13038*/
				$k[$j++] = 0; /*13038*/
			} /*13038*/
		} /*13038*/
		for (var _7g = 0, _7h = $1.rowheight; _7g < _7h; _7g++) {
			/*13040*/
			$aload($get($1.rowbits, $1.r - 1)); /*13040*/
		} /*13040*/
		for (var _7m = 0, _7n = 81 * $1.sepheight; _7m < _7n; _7m++) {
			/*13041*/
			$k[$j++] = 1; /*13041*/
		} /*13041*/
		$1.pixs = $a(); /*13041*/
		var _7t = new Map([
			["ren", $0.renmatrix],
			["pixs", $1.pixs],
			["pixx", 81],
			["pixy", ~~($1.pixs.length / 81)],
			["height", (~~($1.pixs.length / 81)) / 72],
			["width", 81 / 72],
			["opt", $1.options]
		]); /*13052*/
		$k[$j++] = _7t; /*13055*/
		if (!$1.dontdraw) { //no-else/*13055*/
			$0.renmatrix(); /*13055*/
		} /*13055*/
	};
	$0.flattermarken = function() {
		var $1 = {}; /*13346*/
		$1.options = $k[--$j]; /*13348*/
		$1.barcode = $k[--$j]; /*13349*/
		$1.dontdraw = false; /*13351*/
		$1.includetext = false; /*13352*/
		$1.textfont = "OCR-B"; /*13353*/
		$1.textsize = 10; /*13354*/
		$1.textyoffset = -8.5; /*13355*/
		$1.height = 0.3; /*13356*/
		$forall($1.barcode, function() {
			/*13363*/
			var _3 = $k[--$j]; /*13360*/
			if ((_3 < 48) || (_3 > 57)) { //no-else/*13362*/
				$k[$j++] = 'bwipp.flattermarkenBadCharacter'; /*13361*/
				$k[$j++] = "Flattermarken must contain only digits"; /*13361*/
				$0.raiseerror(); /*13361*/
			} /*13361*/
		}); /*13361*/
		$forall($1.options, function() {
			/*13374*/
			var _5 = $k[--$j]; /*13374*/
			$1[$k[--$j]] = _5; /*13374*/
		}); /*13374*/
		$1.textfont = "" + $1.textfont; /*13376*/
		$1.textsize = +$1.textsize; /*13377*/
		$1.textyoffset = +$1.textyoffset; /*13378*/
		$1.height = +$1.height; /*13379*/
		$forall($1.barcode, function() {
			/*13386*/
			var _C = $k[--$j]; /*13383*/
			if ((_C < 48) || (_C > 57)) { //no-else/*13385*/
				$k[$j++] = 'bwipp.flattermarkenBadCharacter'; /*13384*/
				$k[$j++] = "Flattermarken must contain only digits"; /*13384*/
				$0.raiseerror(); /*13384*/
			} /*13384*/
		}); /*13384*/
		$1.encs = $a(["0018", "0117", "0216", "0315", "0414", "0513", "0612", "0711", "0810", "0900"]); /*13392*/
		$1.barchars = "1234567890"; /*13395*/
		$1.barlen = $1.barcode.length; /*13397*/
		$1.sbs = $s($1.barlen * 4); /*13399*/
		$1.txt = $a($1.barlen); /*13400*/
		for (var _L = 0, _K = $1.barlen - 1; _L <= _K; _L += 1) {
			/*13412*/
			$1.i = _L; /*13403*/
			$search($1.barchars, $geti($1.barcode, $1.i, 1)); /*13405*/
			$j--; /*13406*/
			$1.indx = $k[--$j].length; /*13407*/
			$j -= 2; /*13408*/
			$1.enc = $get($1.encs, $1.indx); /*13409*/
			$puti($1.sbs, $1.i * 4, $1.enc); /*13410*/
			$put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), $1.i * 9, $1.textyoffset, $1.textfont, $1.textsize])); /*13411*/
		} /*13411*/
		$k[$j++] = Infinity; /*13421*/
		$k[$j++] = Infinity; /*13417*/
		var _h = $1.sbs; /*13417*/
		for (var _i = 0, _j = _h.length; _i < _j; _i++) {
			/*13417*/
			$k[$j++] = $get(_h, _i) - 48; /*13417*/
		} /*13417*/
		var _l = $a(); /*13417*/
		$k[$j++] = Infinity; /*13418*/
		for (var _n = 0, _o = ~~(($1.sbs.length + 1) / 2); _n < _o; _n++) {
			/*13418*/
			$k[$j++] = $1.height; /*13418*/
		} /*13418*/
		var _q = $a(); /*13418*/
		$k[$j++] = Infinity; /*13419*/
		for (var _s = 0, _t = ~~(($1.sbs.length + 1) / 2); _s < _t; _s++) {
			/*13419*/
			$k[$j++] = 0; /*13419*/
		} /*13419*/
		var _u = $a(); /*13419*/
		$k[$j++] = 'ren'; /*13421*/
		$k[$j++] = $0.renlinear; /*13421*/
		$k[$j++] = 'sbs'; /*13421*/
		$k[$j++] = _l; /*13421*/
		$k[$j++] = 'bhs'; /*13421*/
		$k[$j++] = _q; /*13421*/
		$k[$j++] = 'bbs'; /*13421*/
		$k[$j++] = _u; /*13421*/
		$k[$j++] = 'txt'; /*13421*/
		$k[$j++] = $1.txt; /*13421*/
		$k[$j++] = 'opt'; /*13421*/
		$k[$j++] = $1.options; /*13421*/
		var _x = $d(); /*13421*/
		$k[$j++] = _x; /*13424*/
		if (!$1.dontdraw) { //no-else/*13424*/
			$0.renlinear(); /*13424*/
		} /*13424*/
	};
	$0.raw = function() {
		var $1 = {}; /*13453*/
		$1.options = $k[--$j]; /*13455*/
		$1.barcode = $k[--$j]; /*13456*/
		$1.dontdraw = false; /*13458*/
		$1.height = 1; /*13459*/
		$forall($1.options, function() {
			/*13470*/
			var _3 = $k[--$j]; /*13470*/
			$1[$k[--$j]] = _3; /*13470*/
		}); /*13470*/
		$1.height = +$1.height; /*13472*/
		$forall($1.barcode, function() {
			/*13479*/
			var _7 = $k[--$j]; /*13476*/
			if ((_7 < 49) || (_7 > 57)) { //no-else/*13478*/
				$k[$j++] = 'bwipp.rawBadCharacter'; /*13477*/
				$k[$j++] = "Raw must contain only digits 1 to 9"; /*13477*/
				$0.raiseerror(); /*13477*/
			} /*13477*/
		}); /*13477*/
		$k[$j++] = Infinity; /*13487*/
		$k[$j++] = Infinity; /*13484*/
		$forall($1.barcode, function() {
			/*13484*/
			var _9 = $k[--$j]; /*13484*/
			$k[$j++] = _9 - 48; /*13484*/
		}); /*13484*/
		var _A = $a(); /*13484*/
		$k[$j++] = Infinity; /*13485*/
		for (var _C = 0, _D = ~~(($1.barcode.length + 1) / 2); _C < _D; _C++) {
			/*13485*/
			$k[$j++] = $1.height; /*13485*/
		} /*13485*/
		var _F = $a(); /*13485*/
		$k[$j++] = Infinity; /*13486*/
		for (var _H = 0, _I = ~~(($1.barcode.length + 1) / 2); _H < _I; _H++) {
			/*13486*/
			$k[$j++] = 0; /*13486*/
		} /*13486*/
		var _J = $a(); /*13486*/
		$k[$j++] = 'ren'; /*13487*/
		$k[$j++] = $0.renlinear; /*13487*/
		$k[$j++] = 'sbs'; /*13487*/
		$k[$j++] = _A; /*13487*/
		$k[$j++] = 'bhs'; /*13487*/
		$k[$j++] = _F; /*13487*/
		$k[$j++] = 'bbs'; /*13487*/
		$k[$j++] = _J; /*13487*/
		$k[$j++] = 'opt'; /*13487*/
		$k[$j++] = $1.options; /*13487*/
		var _L = $d(); /*13487*/
		$k[$j++] = _L; /*13490*/
		if (!$1.dontdraw) { //no-else/*13490*/
			$0.renlinear(); /*13490*/
		} /*13490*/
	};
	$0.daft = function() {
		var $1 = {}; /*13519*/
		$1.options = $k[--$j]; /*13521*/
		$1.barcode = $k[--$j]; /*13522*/
		$1.dontdraw = false; /*13524*/
		$1.height = 0.175; /*13525*/
		$forall($1.options, function() {
			/*13536*/
			var _3 = $k[--$j]; /*13536*/
			$1[$k[--$j]] = _3; /*13536*/
		}); /*13536*/
		$1.height = +$1.height; /*13538*/
		$forall($1.barcode, function() {
			/*13544*/
			var _7 = $k[--$j]; /*13541*/
			if ((_7 != 68) && ((_7 != 65) && ((_7 != 70) && (_7 != 84)))) { //no-else/*13543*/
				$k[$j++] = 'bwipp.daftBadCharacter'; /*13542*/
				$k[$j++] = "DAFT must contain only characters D, A, F and T"; /*13542*/
				$0.raiseerror(); /*13542*/
			} /*13542*/
		}); /*13542*/
		$1.barlen = $1.barcode.length; /*13546*/
		$1.bbs = $a($1.barlen); /*13548*/
		$1.bhs = $a($1.barlen); /*13549*/
		for (var _F = 0, _E = $1.barlen - 1; _F <= _E; _F += 1) {
			/*13569*/
			$1.i = _F; /*13551*/
			$1.enc = $geti($1.barcode, $1.i, 1); /*13552*/
			if ($eq($1.enc, "D")) { //no-else/*13556*/
				$put($1.bbs, $1.i, (0 * $1.height) / 8); /*13554*/
				$put($1.bhs, $1.i, (5 * $1.height) / 8); /*13555*/
			} /*13555*/
			if ($eq($1.enc, "A")) { //no-else/*13560*/
				$put($1.bbs, $1.i, (3 * $1.height) / 8); /*13558*/
				$put($1.bhs, $1.i, (5 * $1.height) / 8); /*13559*/
			} /*13559*/
			if ($eq($1.enc, "F")) { //no-else/*13564*/
				$put($1.bbs, $1.i, (0 * $1.height) / 8); /*13562*/
				$put($1.bhs, $1.i, (8 * $1.height) / 8); /*13563*/
			} /*13563*/
			if ($eq($1.enc, "T")) { //no-else/*13568*/
				$put($1.bbs, $1.i, (3 * $1.height) / 8); /*13566*/
				$put($1.bhs, $1.i, (2 * $1.height) / 8); /*13567*/
			} /*13567*/
		} /*13567*/
		$k[$j++] = Infinity; /*13577*/
		var _l = $1.bbs; /*13574*/
		var _m = $1.bhs; /*13575*/
		$k[$j++] = Infinity; /*13576*/
		for (var _o = 0, _p = $1.bhs.length - 1; _o < _p; _o++) {
			/*13576*/
			$k[$j++] = 1.44; /*13576*/
			$k[$j++] = 1.872; /*13576*/
		} /*13576*/
		$k[$j++] = 1.44; /*13576*/
		var _q = $a(); /*13576*/
		$k[$j++] = 'ren'; /*13577*/
		$k[$j++] = $0.renlinear; /*13577*/
		$k[$j++] = 'bbs'; /*13577*/
		$k[$j++] = _l; /*13577*/
		$k[$j++] = 'bhs'; /*13577*/
		$k[$j++] = _m; /*13577*/
		$k[$j++] = 'sbs'; /*13577*/
		$k[$j++] = _q; /*13577*/
		$k[$j++] = 'opt'; /*13577*/
		$k[$j++] = $1.options; /*13577*/
		var _s = $d(); /*13577*/
		$k[$j++] = _s; /*13580*/
		if (!$1.dontdraw) { //no-else/*13580*/
			$0.renlinear(); /*13580*/
		} /*13580*/
	};
	$0.symbol = function() {
		var $1 = {}; /*13609*/
		$1.options = $k[--$j]; /*13611*/
		$1.barcode = $k[--$j]; /*13612*/
		$1.dontdraw = false; /*13614*/
		$forall($1.options, function() {
			/*13625*/
			var _3 = $k[--$j]; /*13625*/
			$1[$k[--$j]] = _3; /*13625*/
		}); /*13625*/
		var _H = new Map([
			["fima", function() {
				$1.sbs = $a([2.25, 2.25, 2.25, 11.25, 2.25, 11.25, 2.25, 2.25, 2.25]); /*13629*/
				$1.bhs = $a([0.625, 0.625, 0.625, 0.625, 0.625]); /*13630*/
				$1.bbs = $a([0, 0, 0, 0, 0]); /*13631*/
			}],
			["fimb", function() {
				$1.sbs = $a([2.25, 6.75, 2.25, 2.25, 2.25, 6.25, 2.25, 2.25, 2.25, 6.75, 2.25]); /*13634*/
				$1.bhs = $a([0.625, 0.625, 0.625, 0.625, 0.625, 0.625]); /*13635*/
				$1.bbs = $a([0, 0, 0, 0, 0, 0]); /*13636*/
			}],
			["fimc", function() {
				$1.sbs = $a([2.25, 2.25, 2.25, 6.75, 2.25, 6.75, 2.25, 6.75, 2.25, 2.25, 2.25]); /*13639*/
				$1.bhs = $a([0.625, 0.625, 0.625, 0.625, 0.625, 0.625]); /*13640*/
				$1.bbs = $a([0, 0, 0, 0, 0, 0]); /*13641*/
			}],
			["fimd", function() {
				$1.sbs = $a([2.25, 2.25, 2.25, 2.25, 2.25, 6.75, 2.25, 6.75, 2.25, 2.25, 2.25, 2.25, 2.25]); /*13644*/
				$1.bhs = $a([0.625, 0.625, 0.625, 0.625, 0.625, 0.625, 0.625]); /*13645*/
				$1.bbs = $a([0, 0, 0, 0, 0, 0, 0]); /*13646*/
			}]
		]); /*13646*/
		$1.symbols = _H; /*13648*/
		var _K = $get($1.symbols, $1.barcode) !== undefined; /*13651*/
		if (!_K) { //no-else/*13653*/
			$k[$j++] = 'bwipp.symbolUnknownSymbol'; /*13652*/
			$k[$j++] = "Unknown symbol name provided"; /*13652*/
			$0.raiseerror(); /*13652*/
		} /*13652*/
		if ($get($1.symbols, $1.barcode)() === true) {
			return true;
		} /*13655*/
		var _S = new Map([
			["ren", $0.renlinear],
			["sbs", $1.sbs],
			["bhs", $1.bhs],
			["bbs", $1.bbs],
			["opt", $1.options]
		]); /*13663*/
		$k[$j++] = _S; /*13666*/
		if (!$1.dontdraw) { //no-else/*13666*/
			$0.renlinear(); /*13666*/
		} /*13666*/
	};
	$0.pdf417 = function() {
		var $1 = {}; /*13695*/
		$1.options = $k[--$j]; /*13697*/
		$1.barcode = $k[--$j]; /*13698*/
		$1.dontdraw = false; /*13700*/
		$1.compact = false; /*13701*/
		$1.eclevel = -1; /*13702*/
		$1.columns = 0; /*13703*/
		$1.rows = 0; /*13704*/
		$1.rowmult = 3; /*13705*/
		$1.encoding = "auto"; /*13706*/
		$1.ccc = false; /*13707*/
		$1.raw = false; /*13708*/
		$1.parse = false; /*13709*/
		$1.parsefnc = false; /*13710*/
		$forall($1.options, function() {
			/*13721*/
			var _3 = $k[--$j]; /*13721*/
			$1[$k[--$j]] = _3; /*13721*/
		}); /*13721*/
		$1.eclevel = ~~$1.eclevel; /*13723*/
		$1.columns = ~~$1.columns; /*13724*/
		$1.rows = ~~$1.rows; /*13725*/
		$1.rowmult = +$1.rowmult; /*13726*/
		$1.barlen = $1.barcode.length; /*13749*/
		if ($1.raw) { //no-else/*13751*/
			$1.encoding = "raw"; /*13751*/
		} /*13751*/
		if ($eq($1.encoding, "raw")) { //no-else/*13765*/
			$1.datcws = $a($1.barlen); /*13755*/
			$1.i = 0; /*13756*/
			$1.j = 0; /*13756*/
			for (;;) {
				/*13763*/
				if ($1.i == $1.barlen) { //no-else/*13758*/
					break; /*13758*/
				} /*13758*/
				$1.cw = ~~$z($geti($1.barcode, $1.i + 1, 3)); /*13759*/
				$put($1.datcws, $1.j, $1.cw); /*13760*/
				$1.i = $1.i + 4; /*13761*/
				$1.j = $1.j + 1; /*13762*/
			} /*13762*/
			$1.datcws = $geti($1.datcws, 0, $1.j); /*13764*/
		} /*13764*/
		if ($1.ccc) { //no-else/*13767*/
			$1.encoding = "ccc"; /*13767*/
		} /*13767*/
		$1.encb = function() {
			$1.in = $k[--$j]; /*13770*/
			$1.inlen = $1.in.length; /*13771*/
			$1.out = $a(((~~($1.inlen / 6)) * 5) + ($1.inlen % 6)); /*13772*/
			for (var _Z = 0, _Y = (~~($1.inlen / 6)) - 1; _Z <= _Y; _Z += 1) {
				/*13795*/
				$1.k = _Z; /*13774*/
				$k[$j++] = Infinity; /*13775*/
				$aload($geti($1.in, $1.k * 6, 3)); /*13775*/
				$1.msbs = $a(); /*13775*/
				$k[$j++] = Infinity; /*13778*/
				$aload($1.msbs); /*13777*/
				var _f = $k[--$j]; /*13777*/
				var _g = $k[--$j]; /*13777*/
				var _h = $k[--$j]; /*13777*/
				$k[$j++] = (_f + (_g * 256)) + (_h * 65536); /*13778*/
				for (var _i = 0, _j = 3; _i < _j; _i++) {
					/*13778*/
					var _k = $k[--$j]; /*13778*/
					$k[$j++] = _k % 900; /*13778*/
					$k[$j++] = ~~(_k / 900); /*13778*/
				} /*13778*/
				$1.mscs = $a(); /*13778*/
				$k[$j++] = Infinity; /*13780*/
				$aload($geti($1.in, ($1.k * 6) + 3, 3)); /*13780*/
				$1.lsbs = $a(); /*13780*/
				$k[$j++] = Infinity; /*13783*/
				$aload($1.lsbs); /*13782*/
				var _r = $k[--$j]; /*13782*/
				var _s = $k[--$j]; /*13782*/
				var _t = $k[--$j]; /*13782*/
				$k[$j++] = (_r + (_s * 256)) + (_t * 65536); /*13783*/
				for (var _u = 0, _v = 3; _u < _v; _u++) {
					/*13783*/
					var _w = $k[--$j]; /*13783*/
					$k[$j++] = _w % 900; /*13783*/
					$k[$j++] = ~~(_w / 900); /*13783*/
				} /*13783*/
				$1.lscs = $a(); /*13783*/
				var _z = $get($1.lscs, 0); /*13785*/
				var _11 = $get($1.mscs, 0); /*13785*/
				$put($1.out, ($1.k * 5) + 4, (_z + (_11 * 316)) % 900); /*13786*/
				var _15 = $get($1.lscs, 1); /*13787*/
				var _17 = $get($1.mscs, 0); /*13787*/
				var _19 = $get($1.mscs, 1); /*13787*/
				$put($1.out, ($1.k * 5) + 3, ((((~~((_z + (_11 * 316)) / 900)) + _15) + (_17 * 641)) + (_19 * 316)) % 900); /*13788*/
				var _1D = $get($1.lscs, 2); /*13789*/
				var _1F = $get($1.mscs, 0); /*13789*/
				var _1H = $get($1.mscs, 1); /*13789*/
				var _1J = $get($1.mscs, 2); /*13789*/
				$put($1.out, ($1.k * 5) + 2, (((((~~(((((~~((_z + (_11 * 316)) / 900)) + _15) + (_17 * 641)) + (_19 * 316)) / 900)) + _1D) + (_1F * 20)) + (_1H * 641)) + (_1J * 316)) % 900); /*13790*/
				var _1N = $get($1.lscs, 3); /*13791*/
				var _1P = $get($1.mscs, 1); /*13791*/
				var _1R = $get($1.mscs, 2); /*13791*/
				$put($1.out, ($1.k * 5) + 1, ((((~~((((((~~(((((~~((_z + (_11 * 316)) / 900)) + _15) + (_17 * 641)) + (_19 * 316)) / 900)) + _1D) + (_1F * 20)) + (_1H * 641)) + (_1J * 316)) / 900)) + _1N) + (_1P * 20)) + (_1R * 641)) % 900); /*13792*/
				$put($1.out, $1.k * 5, ((~~(((((~~((((((~~(((((~~((_z + (_11 * 316)) / 900)) + _15) + (_17 * 641)) + (_19 * 316)) / 900)) + _1D) + (_1F * 20)) + (_1H * 641)) + (_1J * 316)) / 900)) + _1N) + (_1P * 20)) + (_1R * 641)) / 900)) + ($get($1.mscs, 2) * 20)) % 900); /*13794*/
			} /*13794*/
			$1.rem = $1.inlen % 6; /*13796*/
			if ($1.rem != 0) { //no-else/*13801*/
				$k[$j++] = $1.out; /*13799*/
				$k[$j++] = $1.out.length - $1.rem; /*13799*/
				$k[$j++] = Infinity; /*13799*/
				$aload($geti($1.in, $1.inlen - $1.rem, $1.rem)); /*13799*/
				var _1i = $a(); /*13799*/
				var _1j = $k[--$j]; /*13800*/
				$puti($k[--$j], _1j, _1i); /*13800*/
			} /*13800*/
			$k[$j++] = $1.out; /*13802*/
		}; /*13803*/
		if ($eq($1.encoding, "byte") || $eq($1.encoding, "ccc")) { //no-else/*13810*/
			$1.datcws = $a((((~~($1.barlen / 6)) * 5) + ($1.barlen % 6)) + 1); /*13806*/
			var _1t = (($1.barlen % 6) == 0) ? 924 : 901; /*13807*/
			$put($1.datcws, 0, _1t); /*13807*/
			$k[$j++] = $1.datcws; /*13808*/
			$k[$j++] = 1; /*13808*/
			$k[$j++] = Infinity; /*13808*/
			$forall($1.barcode); /*13808*/
			var _1w = $a(); /*13808*/
			$k[$j++] = _1w; /*13808*/
			$1.encb(); /*13808*/
			var _1x = $k[--$j]; /*13808*/
			var _1y = $k[--$j]; /*13808*/
			$puti($k[--$j], _1y, _1x); /*13808*/
			if ($eq($1.encoding, "ccc")) { //no-else/*13809*/
				$k[$j++] = Infinity; /*13809*/
				$k[$j++] = 920; /*13809*/
				$aload($1.datcws); /*13809*/
				$1.datcws = $a(); /*13809*/
			} /*13809*/
		} /*13809*/
		if ($eq($1.encoding, "auto")) { //no-else/*14254*/
			var _24 = new Map([]); /*13817*/
			$1.fncvals = _24; /*13817*/
			$1.msg = $a($1.barlen); /*13818*/
			$1.i = 0; /*13819*/
			$1.j = 0; /*13819*/
			for (;;) {
				/*13858*/
				if ($1.i == $1.barlen) { //no-else/*13820*/
					break; /*13820*/
				} /*13820*/
				$1.char = $get($1.barcode, $1.i); /*13821*/
				$1.i = $1.i + 1; /*13822*/
				if (($1.parsefnc && ($1.char == 94)) && ($1.i < $1.barlen)) { //no-else/*13855*/
					if ($get($1.barcode, $1.i) != 94) {
						/*13853*/
						if ($1.i >= ($1.barlen - 3)) { //no-else/*13827*/
							$k[$j++] = 'bwipp.truncatedFNC'; /*13826*/
							$k[$j++] = "Function character truncated"; /*13826*/
							$0.raiseerror(); /*13826*/
						} /*13826*/
						var _2O = $geti($1.barcode, $1.i, 4); /*13828*/
						$k[$j++] = _2O; /*13850*/
						if ($ne($geti(_2O, 0, 3), "ECI")) {
							/*13849*/
							var _2Q = $k[--$j]; /*13830*/
							var _2S = $get($1.fncvals, _2Q) !== undefined; /*13830*/
							$k[$j++] = _2Q; /*13834*/
							if (!_2S) { //no-else/*13834*/
								var _2T = $k[--$j]; /*13831*/
								var _2U = $s(_2T.length + 28); /*13831*/
								$puti(_2U, 28, _2T); /*13831*/
								$puti(_2U, 0, "Unknown function character: "); /*13832*/
								$k[$j++] = 'bwipp.unknownFNC'; /*13833*/
								$k[$j++] = _2U; /*13833*/
								$0.raiseerror(); /*13833*/
							} /*13833*/
							var _2X = $get($1.fncvals, $k[--$j]); /*13835*/
							$1.i = $1.i + 4; /*13836*/
							$k[$j++] = _2X; /*13836*/
						} else {
							/*13849*/
							$j--; /*13838*/
							if ($1.i >= ($1.barlen - 8)) { //no-else/*13841*/
								$k[$j++] = 'bwipp.truncatedECI'; /*13840*/
								$k[$j++] = "ECI truncated"; /*13840*/
								$0.raiseerror(); /*13840*/
							} /*13840*/
							var _2d = $geti($1.barcode, $1.i + 3, 6); /*13842*/
							$k[$j++] = _2d; /*13847*/
							$forall(_2d, function() {
								/*13847*/
								var _2e = $k[--$j]; /*13844*/
								if ((_2e < 48) || (_2e > 57)) { //no-else/*13846*/
									$k[$j++] = 'bwipp.invalidECI'; /*13845*/
									$k[$j++] = "ECI must be 000000 to 999999"; /*13845*/
									$0.raiseerror(); /*13845*/
								} /*13845*/
							}); /*13845*/
							var _2f = $k[--$j]; /*13848*/
							$k[$j++] = 0; /*13848*/
							$forall(_2f, function() {
								/*13848*/
								var _2g = $k[--$j]; /*13848*/
								var _2h = $k[--$j]; /*13848*/
								$k[$j++] = (_2h - (_2g - 48)) * 10; /*13848*/
							}); /*13848*/
							var _2i = $k[--$j]; /*13848*/
							$1.i = $1.i + 9; /*13849*/
							$k[$j++] = (~~(_2i / 10)) - 1000000; /*13849*/
						} /*13849*/
						$1.char = $k[--$j]; /*13851*/
					} else {
						/*13853*/
						$1.i = $1.i + 1; /*13853*/
					} /*13853*/
				} /*13853*/
				$put($1.msg, $1.j, $1.char); /*13856*/
				$1.j = $1.j + 1; /*13857*/
			} /*13857*/
			$1.msg = $geti($1.msg, 0, $1.j); /*13859*/
			$1.msglen = $1.msg.length; /*13860*/
			$1.T = 0; /*13863*/
			$1.N = 1; /*13863*/
			$1.B = 2; /*13863*/
			$1.A = 0; /*13864*/
			$1.L = 1; /*13864*/
			$1.M = 2; /*13864*/
			$1.P = 3; /*13864*/
			$1.tl = -1; /*13867*/
			$1.nl = -2; /*13867*/
			$1.bl = -3; /*13867*/
			$1.bl6 = -4; /*13867*/
			$1.bs = -5; /*13867*/
			$1.al = -6; /*13870*/
			$1.ll = -7; /*13870*/
			$1.ml = -8; /*13870*/
			$1.pl = -9; /*13870*/
			$1.as = -10; /*13870*/
			$1.ps = -11; /*13870*/
			$1.charmaps = $a([$a(["A", "a", "0", ";"]), $a(["B", "b", "1", "<"]), $a(["C", "c", "2", ">"]), $a(["D", "d", "3", "@"]), $a(["E", "e", "4", "["]), $a(["F", "f", "5", 92]), $a(["G", "g", "6", "]"]), $a(["H", "h", "7", "_"]), $a(["I", "i", "8", "`"]), $a(["J", "j", "9", "~"]), $a(["K", "k", "&", "!"]), $a(["L", "l", 13, 13]), $a(["M", "m", 9, 9]), $a(["N", "n", ",", ","]), $a(["O", "o", ":", ":"]), $a(["P", "p", "#", 10]), $a(["Q", "q", "-", "-"]), $a(["R", "r", ".", "."]), $a(["S", "s", "$", "$"]), $a(["T", "t", "/", "/"]), $a(["U", "u", "+", "\""]), $a(["V", "v", "%", "|"]), $a(["W", "w", "*", "*"]), $a(["X", "x", "=", 40]), $a(["Y", "y", "^", 41]), $a(["Z", "z", $1.pl, "?"]), $a([" ", " ", " ", "{"]), $a([$1.ll, $1.as, $1.ll, "}"]), $a([$1.ml, $1.ml, $1.al, "'"]), $a([$1.ps, $1.ps, $1.ps, $1.al])]); /*13905*/
			$1.charvals = $a([new Map, new Map, new Map, new Map]); /*13908*/
			$1.alltext = new Map; /*13909*/
			for (var _3d = 0, _3c = $1.charmaps.length - 1; _3d <= _3c; _3d += 1) {
				/*13919*/
				$1.i = _3d; /*13911*/
				$1.encs = $get($1.charmaps, $1.i); /*13912*/
				for (var _3h = 0; _3h <= 3; _3h += 1) {
					/*13918*/
					$1.j = _3h; /*13914*/
					var _3k = $get($1.encs, $1.j); /*13915*/
					$k[$j++] = _3k; /*13915*/
					if ($eq($type(_3k), 'stringtype')) { //no-else/*13915*/
						var _3n = $get($k[--$j], 0); /*13915*/
						$k[$j++] = _3n; /*13915*/
					} /*13915*/
					var _3o = $k[--$j]; /*13916*/
					$put($get($1.charvals, $1.j), _3o, $1.i); /*13916*/
					$put($1.alltext, _3o, -1); /*13917*/
				} /*13917*/
			} /*13917*/
			$1.e = 10000; /*13921*/
			$1.latlen = $a([$a([0, 1, 1, 2]), $a([2, 0, 1, 2]), $a([1, 1, 0, 1]), $a([1, 2, 2, 0])]); /*13929*/
			$1.latseq = $a([$a([$a([]), $a([$1.ll]), $a([$1.ml]), $a([$1.ml, $1.pl])]), $a([$a([$1.ml, $1.al]), $a([]), $a([$1.ml]), $a([$1.ml, $1.pl])]), $a([$a([$1.al]), $a([$1.ll]), $a([]), $a([$1.pl])]), $a([$a([$1.al]), $a([$1.al, $1.ll]), $a([$1.al, $1.ml]), $a([])])]); /*13937*/
			$1.shftlen = $a([$a([$1.e, $1.e, $1.e, 1]), $a([1, $1.e, $1.e, 1]), $a([$1.e, $1.e, $1.e, 1]), $a([$1.e, $1.e, $1.e, $1.e])]); /*13945*/
			$k[$j++] = Infinity; /*13948*/
			for (var _4t = 0, _4u = $1.msglen; _4t < _4u; _4t++) {
				/*13948*/
				$k[$j++] = 0; /*13948*/
			} /*13948*/
			$k[$j++] = 0; /*13948*/
			$1.numdigits = $a(); /*13948*/
			$k[$j++] = Infinity; /*13949*/
			for (var _4x = 0, _4y = $1.msglen; _4x < _4y; _4x++) {
				/*13949*/
				$k[$j++] = 0; /*13949*/
			} /*13949*/
			$k[$j++] = 0; /*13949*/
			$1.numtext = $a(); /*13949*/
			$k[$j++] = Infinity; /*13950*/
			for (var _51 = 0, _52 = $1.msglen; _51 < _52; _51++) {
				/*13950*/
				$k[$j++] = 0; /*13950*/
			} /*13950*/
			$k[$j++] = 0; /*13950*/
			$1.numbytes = $a(); /*13950*/
			$k[$j++] = Infinity; /*13951*/
			for (var _55 = 0, _56 = $1.msglen; _55 < _56; _55++) {
				/*13951*/
				$k[$j++] = 0; /*13951*/
			} /*13951*/
			$k[$j++] = 0; /*13951*/
			$1.iseci = $a(); /*13951*/
			for (var _59 = $1.msglen - 1; _59 >= 0; _59 -= 1) {
				/*13964*/
				$1.i = _59; /*13953*/
				var _5C = $get($1.msg, $1.i); /*13954*/
				if ((_5C >= 48) && (_5C <= 57)) { //no-else/*13956*/
					$put($1.numdigits, $1.i, $get($1.numdigits, $1.i + 1) + 1); /*13955*/
				} /*13955*/
				var _5M = $get($1.alltext, $get($1.msg, $1.i)) !== undefined; /*13957*/
				if (_5M && ($get($1.numdigits, $1.i) < 13)) { //no-else/*13959*/
					$put($1.numtext, $1.i, $get($1.numtext, $1.i + 1) + 1); /*13958*/
				} /*13958*/
				if ((($get($1.msg, $1.i) >= 0) && ($get($1.numtext, $1.i) < 5)) && ($get($1.numdigits, $1.i) < 13)) { //no-else/*13962*/
					$put($1.numbytes, $1.i, $get($1.numbytes, $1.i + 1) + 1); /*13961*/
				} /*13961*/
				$put($1.iseci, $1.i, $get($1.msg, $1.i) <= -1000000); /*13963*/
			} /*13963*/
			$1.numdigits = $geti($1.numdigits, 0, $1.msglen); /*13965*/
			$1.numtext = $geti($1.numtext, 0, $1.msglen); /*13966*/
			$1.numbytes = $geti($1.numbytes, 0, $1.msglen); /*13967*/
			$1.seq = $a([]); /*13969*/
			$1.seqlen = 0; /*13969*/
			$1.state = $1.T; /*13969*/
			$1.p = 0; /*13969*/
			for (;;) {
				/*14026*/
				if ($1.p == $1.msglen) { //no-else/*13970*/
					break; /*13970*/
				} /*13970*/
				if ($get($1.iseci, $1.p)) {
					/*14024*/
					$k[$j++] = Infinity; /*13974*/
					$aload($1.seq); /*13973*/
					$k[$j++] = $a([$get($1.msg, $1.p)]); /*13974*/
					$1.seq = $a(); /*13974*/
					$1.p = $1.p + 1; /*13976*/
					$1.seqlen = $1.seqlen + 1; /*13977*/
				} else {
					/*14024*/
					$1.n = $get($1.numdigits, $1.p); /*13979*/
					if ($1.n >= 13) {
						/*14024*/
						$k[$j++] = Infinity; /*13985*/
						$aload($1.seq); /*13982*/
						$k[$j++] = $1.nl; /*13984*/
						if ($1.p > 0) { //no-else/*13984*/
							if ($get($1.iseci, $1.p - 1)) { //no-else/*13984*/
								var _6M = $k[--$j]; /*13984*/
								var _6N = $k[--$j]; /*13984*/
								$k[$j++] = _6M; /*13984*/
								$k[$j++] = _6N; /*13984*/
							} /*13984*/
						} /*13984*/
						$k[$j++] = Infinity; /*13985*/
						$aload($geti($1.msg, $1.p, $1.n)); /*13985*/
						var _6S = $a(); /*13985*/
						$k[$j++] = _6S; /*13985*/
						$1.seq = $a(); /*13985*/
						$1.state = $1.N; /*13987*/
						$1.p = $1.p + $1.n; /*13988*/
						$1.seqlen = ($1.seqlen + 1) + $1.n; /*13989*/
					} else {
						/*14024*/
						$1.t = $get($1.numtext, $1.p); /*13991*/
						if ($1.t >= 5) {
							/*14024*/
							$k[$j++] = Infinity; /*13999*/
							$aload($1.seq); /*13994*/
							if ($1.state != $1.T) { //no-else/*13998*/
								$k[$j++] = $1.tl; /*13997*/
								if ($1.p > 0) { //no-else/*13997*/
									if ($get($1.iseci, $1.p - 1)) { //no-else/*13997*/
										var _6l = $k[--$j]; /*13997*/
										var _6m = $k[--$j]; /*13997*/
										$k[$j++] = _6l; /*13997*/
										$k[$j++] = _6m; /*13997*/
									} /*13997*/
								} /*13997*/
							} /*13997*/
							$k[$j++] = Infinity; /*13999*/
							$aload($geti($1.msg, $1.p, $1.t)); /*13999*/
							var _6r = $a(); /*13999*/
							$k[$j++] = _6r; /*13999*/
							$1.seq = $a(); /*13999*/
							$1.state = $1.T; /*14001*/
							$1.p = $1.p + $1.t; /*14002*/
							$1.seqlen = ($1.seqlen + 1) + $1.t; /*14003*/
						} else {
							/*14024*/
							$1.b = $get($1.numbytes, $1.p); /*14005*/
							if (($1.b == 1) && ($1.state == $1.T)) {
								/*14024*/
								$k[$j++] = Infinity; /*14011*/
								$aload($1.seq); /*14008*/
								$k[$j++] = $1.bs; /*14010*/
								if ($1.p > 0) { //no-else/*14010*/
									if ($get($1.iseci, $1.p - 1)) { //no-else/*14010*/
										var _7A = $k[--$j]; /*14010*/
										var _7B = $k[--$j]; /*14010*/
										$k[$j++] = _7A; /*14010*/
										$k[$j++] = _7B; /*14010*/
									} /*14010*/
								} /*14010*/
								$k[$j++] = $a([$get($1.msg, $1.p)]); /*14011*/
								$1.seq = $a(); /*14011*/
								$1.p = $1.p + $1.b; /*14013*/
								$1.seqlen = $1.seqlen + 2; /*14014*/
							} else {
								/*14024*/
								$k[$j++] = Infinity; /*14020*/
								$aload($1.seq); /*14017*/
								var _7M = (($1.b % 6) != 0) ? $1.bl : $1.bl6; /*14018*/
								$k[$j++] = _7M; /*14019*/
								if ($1.p > 0) { //no-else/*14019*/
									if ($get($1.iseci, $1.p - 1)) { //no-else/*14019*/
										var _7R = $k[--$j]; /*14019*/
										var _7S = $k[--$j]; /*14019*/
										$k[$j++] = _7R; /*14019*/
										$k[$j++] = _7S; /*14019*/
									} /*14019*/
								} /*14019*/
								$k[$j++] = Infinity; /*14020*/
								$aload($geti($1.msg, $1.p, $1.b)); /*14020*/
								var _7X = $a(); /*14020*/
								$k[$j++] = _7X; /*14020*/
								$1.seq = $a(); /*14020*/
								$1.state = $1.B; /*14022*/
								$1.p = $1.p + $1.b; /*14023*/
								$1.seqlen = ($1.seqlen + 1) + $1.b; /*14024*/
							} /*14024*/
						} /*14024*/
					} /*14024*/
				} /*14024*/
			} /*14024*/
			$k[$j++] = Infinity; /*14029*/
			$k[$j++] = $1.tl; /*14029*/
			$k[$j++] = 900; /*14029*/
			$k[$j++] = $1.bl; /*14029*/
			$k[$j++] = 901; /*14029*/
			$k[$j++] = $1.bl6; /*14029*/
			$k[$j++] = 924; /*14029*/
			$k[$j++] = $1.nl; /*14029*/
			$k[$j++] = 902; /*14029*/
			$k[$j++] = $1.bs; /*14029*/
			$k[$j++] = 913; /*14029*/
			$1.latchcws = $d(); /*14030*/
			$1.enca = function() {
				var _7o = $get($get($1.charvals, $1.A), $k[--$j]); /*14033*/
				$k[$j++] = _7o; /*14033*/
			}; /*14033*/
			$1.encl = function() {
				var _7t = $get($get($1.charvals, $1.L), $k[--$j]); /*14034*/
				$k[$j++] = _7t; /*14034*/
			}; /*14034*/
			$1.encm = function() {
				var _7y = $get($get($1.charvals, $1.M), $k[--$j]); /*14035*/
				$k[$j++] = _7y; /*14035*/
			}; /*14035*/
			$1.encp = function() {
				var _83 = $get($get($1.charvals, $1.P), $k[--$j]); /*14036*/
				$k[$j++] = _83; /*14036*/
			}; /*14036*/
			$1.textencfuncs = $a(['enca', 'encl', 'encm', 'encp']); /*14037*/
			$1.addtotext = function() {
				$put($1.text, $1.l, $k[--$j]); /*14040*/
				$1.l = $1.l + 1; /*14041*/
			}; /*14042*/
			$1.enct = function() {
				$1.in = $k[--$j]; /*14045*/
				$1.curlen = $a([$1.e, $1.e, $1.e, $1.e]); /*14047*/
				$put($1.curlen, $1.submode, 0); /*14048*/
				$1.curseq = $a([$a([]), $a([]), $a([]), $a([])]); /*14049*/
				$forall($1.in, function() {
					/*14119*/
					$1.char = $k[--$j]; /*14054*/
					for (;;) {
						/*14075*/
						$1.imp = false; /*14058*/
						var _8S = $a([$1.A, $1.L, $1.M, $1.P]); /*14059*/
						for (var _8T = 0, _8U = _8S.length; _8T < _8U; _8T++) {
							/*14073*/
							$1.x = $get(_8S, _8T); /*14060*/
							var _8a = $a([$1.A, $1.L, $1.M, $1.P]); /*14061*/
							for (var _8b = 0, _8c = _8a.length; _8b < _8c; _8b++) {
								/*14072*/
								$1.y = $get(_8a, _8b); /*14062*/
								$1.cost = $get($1.curlen, $1.x) + $get($get($1.latlen, $1.x), $1.y); /*14063*/
								if ($1.cost < $get($1.curlen, $1.y)) { //no-else/*14071*/
									$put($1.curlen, $1.y, $1.cost); /*14065*/
									$k[$j++] = $1.curseq; /*14068*/
									$k[$j++] = $1.y; /*14068*/
									$k[$j++] = Infinity; /*14068*/
									$aload($get($1.curseq, $1.x)); /*14067*/
									$aload($get($get($1.latseq, $1.x), $1.y)); /*14068*/
									var _93 = $a(); /*14068*/
									var _94 = $k[--$j]; /*14069*/
									$put($k[--$j], _94, _93); /*14069*/
									$1.imp = true; /*14070*/
								} /*14070*/
							} /*14070*/
						} /*14070*/
						if (!$1.imp) { //no-else/*14074*/
							break; /*14074*/
						} /*14074*/
					} /*14074*/
					$1.nxtlen = $a([$1.e, $1.e, $1.e, $1.e]); /*14078*/
					$1.nxtseq = $a(4); /*14079*/
					var _9H = $a([$1.A, $1.L, $1.M, $1.P]); /*14081*/
					for (var _9I = 0, _9J = _9H.length; _9I < _9J; _9I++) {
						/*14114*/
						$1.x = $get(_9H, _9I); /*14082*/
						for (;;) {
							/*14112*/
							var _9P = $get($get($1.charvals, $1.x), $1.char) !== undefined; /*14086*/
							if (!_9P) { //no-else/*14086*/
								break; /*14086*/
							} /*14086*/
							$1.cost = $get($1.curlen, $1.x) + 1; /*14089*/
							if ($1.cost < $get($1.nxtlen, $1.x)) { //no-else/*14093*/
								$put($1.nxtlen, $1.x, $1.cost); /*14091*/
								$k[$j++] = $1.nxtseq; /*14092*/
								$k[$j++] = $1.x; /*14092*/
								$k[$j++] = Infinity; /*14092*/
								$aload($get($1.curseq, $1.x)); /*14092*/
								$k[$j++] = $1.char; /*14092*/
								var _9g = $a(); /*14092*/
								var _9h = $k[--$j]; /*14092*/
								$put($k[--$j], _9h, _9g); /*14092*/
							} /*14092*/
							var _9n = $a([$1.A, $1.L, $1.M, $1.P]); /*14096*/
							for (var _9o = 0, _9p = _9n.length; _9o < _9p; _9o++) {
								/*14109*/
								$1.y = $get(_9n, _9o); /*14097*/
								if ($ne($1.x, $1.y)) { //no-else/*14108*/
									$1.cost = ($get($1.curlen, $1.y) + $get($get($1.shftlen, $1.y), $1.x)) + 1; /*14099*/
									if ($1.cost < $get($1.nxtlen, $1.y)) { //no-else/*14107*/
										$put($1.nxtlen, $1.y, $1.cost); /*14101*/
										$k[$j++] = $1.nxtseq; /*14105*/
										$k[$j++] = $1.y; /*14105*/
										$k[$j++] = Infinity; /*14105*/
										$aload($get($1.curseq, $1.y)); /*14103*/
										var _AF = ($1.x == $1.A) ? $1.as : $1.ps; /*14104*/
										$k[$j++] = _AF; /*14105*/
										$k[$j++] = $1.char; /*14105*/
										var _AH = $a(); /*14105*/
										var _AI = $k[--$j]; /*14106*/
										$put($k[--$j], _AI, _AH); /*14106*/
									} /*14106*/
								} /*14106*/
							} /*14106*/
							break; /*14111*/
						} /*14111*/
					} /*14111*/
					$1.curlen = $1.nxtlen; /*14116*/
					$1.curseq = $1.nxtseq; /*14117*/
				}); /*14117*/
				$1.minseq = $1.e; /*14122*/
				var _AR = $a([$1.A, $1.L, $1.M, $1.P]); /*14123*/
				for (var _AS = 0, _AT = _AR.length; _AS < _AT; _AS++) {
					/*14129*/
					$1.k = $get(_AR, _AS); /*14124*/
					if ($get($1.curlen, $1.k) < $1.minseq) { //no-else/*14128*/
						$1.minseq = $get($1.curlen, $1.k); /*14126*/
						$1.txtseq = $get($1.curseq, $1.k); /*14127*/
					} /*14127*/
				} /*14127*/
				$1.text = $a($1.minseq); /*14132*/
				$1.k = 0; /*14133*/
				$1.l = 0; /*14133*/
				for (;;) {
					/*14153*/
					if ($1.k >= $1.txtseq.length) { //no-else/*14134*/
						break; /*14134*/
					} /*14134*/
					$1.char = $get($1.txtseq, $1.k); /*14136*/
					$k[$j++] = $1.char; /*14139*/
					if ($1[$get($1.textencfuncs, $1.submode)]() === true) {
						break;
					} /*14139*/
					$1.addtotext(); /*14139*/
					$1.k = $1.k + 1; /*14140*/
					if (($1.char == $1.as) || ($1.char == $1.ps)) { //no-else/*14146*/
						$k[$j++] = $get($1.txtseq, $1.k); /*14144*/
						if ($1.char == $1.as) {
							/*14144*/
							$1.enca(); /*14144*/
						} else {
							/*14144*/
							$1.encp(); /*14144*/
						} /*14144*/
						$1.addtotext(); /*14144*/
						$1.k = $1.k + 1; /*14145*/
					} /*14145*/
					if ($1.char == $1.al) { //no-else/*14149*/
						$1.submode = $1.A; /*14149*/
					} /*14149*/
					if ($1.char == $1.ll) { //no-else/*14150*/
						$1.submode = $1.L; /*14150*/
					} /*14150*/
					if ($1.char == $1.ml) { //no-else/*14151*/
						$1.submode = $1.M; /*14151*/
					} /*14151*/
					if ($1.char == $1.pl) { //no-else/*14152*/
						$1.submode = $1.P; /*14152*/
					} /*14152*/
				} /*14152*/
				if (($1.text.length % 2) == 1) { //no-else/*14163*/
					if ($1.submode == $1.P) {
						/*14160*/
						$k[$j++] = 'pad'; /*14157*/
						$k[$j++] = $1.al; /*14157*/
						$1.encp(); /*14157*/
						var _BI = $k[--$j]; /*14157*/
						$1[$k[--$j]] = _BI; /*14157*/
						$1.submode = $1.A; /*14158*/
					} else {
						/*14160*/
						$k[$j++] = 'pad'; /*14160*/
						$k[$j++] = $1.ps; /*14160*/
						if ($1[$get($1.textencfuncs, $1.submode)]() === true) {
							return true;
						} /*14160*/
						var _BQ = $k[--$j]; /*14160*/
						$1[$k[--$j]] = _BQ; /*14160*/
					} /*14160*/
					$k[$j++] = Infinity; /*14162*/
					$aload($1.text); /*14162*/
					$k[$j++] = $1.pad; /*14162*/
					$1.text = $a(); /*14162*/
				} /*14162*/
				$1.out = $a(~~($1.text.length / 2)); /*14165*/
				for (var _BZ = 0, _BY = $1.out.length - 1; _BZ <= _BY; _BZ += 1) {
					/*14169*/
					$1.k = _BZ; /*14167*/
					$put($1.out, $1.k, ($get($1.text, $1.k * 2) * 30) + $get($1.text, ($1.k * 2) + 1)); /*14168*/
				} /*14168*/
				$k[$j++] = $1.out; /*14171*/
			}; /*14173*/
			$1.encn = function() {
				$1.in = $k[--$j]; /*14176*/
				$1.out = $a([]); /*14177*/
				for (var _Bn = 0, _Bm = $1.in.length - 1; _Bn <= _Bm; _Bn += 44) {
					/*14205*/
					$1.k = _Bn; /*14179*/
					$k[$j++] = Infinity; /*14182*/
					var _Bs = $1.in.length - $1.k; /*14181*/
					$k[$j++] = 1; /*14181*/
					$k[$j++] = $1.in; /*14181*/
					$k[$j++] = $1.k; /*14181*/
					$k[$j++] = _Bs; /*14181*/
					if (_Bs > 44) { //no-else/*14181*/
						$j--; /*14181*/
						$k[$j++] = 44; /*14181*/
					} /*14181*/
					var _Bt = $k[--$j]; /*14181*/
					var _Bu = $k[--$j]; /*14181*/
					$forall($geti($k[--$j], _Bu, _Bt), function() {
						/*14182*/
						var _Bx = $k[--$j]; /*14182*/
						$k[$j++] = _Bx - 48; /*14182*/
					}); /*14182*/
					$1.gmod = $a(); /*14182*/
					$1.cwn = $a([]); /*14184*/
					for (;;) {
						/*14203*/
						$1.dv = 900; /*14185*/
						$1.gmul = $a([]); /*14186*/
						$1.val = 0; /*14186*/
						for (;;) {
							/*14198*/
							if ($1.gmod.length == 0) { //no-else/*14187*/
								break; /*14187*/
							} /*14187*/
							$1.val = ($1.val * 10) + $get($1.gmod, 0); /*14188*/
							$1.gmod = $geti($1.gmod, 1, $1.gmod.length - 1); /*14189*/
							if ($1.val < $1.dv) {
								/*14195*/
								if ($1.gmul.length != 0) { //no-else/*14193*/
									$k[$j++] = Infinity; /*14192*/
									$aload($1.gmul); /*14192*/
									$k[$j++] = 0; /*14192*/
									$1.gmul = $a(); /*14192*/
								} /*14192*/
							} else {
								/*14195*/
								$k[$j++] = Infinity; /*14195*/
								$aload($1.gmul); /*14195*/
								$k[$j++] = ~~($1.val / $1.dv); /*14195*/
								$1.gmul = $a(); /*14195*/
							} /*14195*/
							$1.val = $1.val % $1.dv; /*14197*/
						} /*14197*/
						$1.dv = $1.val; /*14199*/
						$k[$j++] = Infinity; /*14200*/
						$k[$j++] = $1.dv; /*14200*/
						$aload($1.cwn); /*14200*/
						$1.cwn = $a(); /*14200*/
						$1.gmod = $1.gmul; /*14201*/
						if ($1.gmul.length == 0) { //no-else/*14202*/
							break; /*14202*/
						} /*14202*/
					} /*14202*/
					$k[$j++] = Infinity; /*14204*/
					$aload($1.out); /*14204*/
					$aload($1.cwn); /*14204*/
					$1.out = $a(); /*14204*/
				} /*14204*/
				$k[$j++] = $1.out; /*14206*/
			}; /*14207*/
			$1.ence = function() {
				var _CV = (-$get($k[--$j], 0)) - 1000000; /*14211*/
				$k[$j++] = _CV; /*14219*/
				if (_CV <= 899) {
					/*14218*/
					var _CW = $k[--$j]; /*14212*/
					$k[$j++] = 927; /*14212*/
					$k[$j++] = _CW; /*14212*/
					$astore($a(2)); /*14212*/
				} else {
					/*14218*/
					var _CY = $k[--$j]; /*14213*/
					$k[$j++] = _CY; /*14219*/
					if (_CY <= 810899) {
						/*14218*/
						var _CZ = $k[--$j]; /*14214*/
						$k[$j++] = 926; /*14214*/
						$k[$j++] = (~~(_CZ / 900)) - 1; /*14214*/
						$k[$j++] = _CZ % 900; /*14214*/
						$astore($a(3)); /*14214*/
					} else {
						/*14218*/
						var _Cb = $k[--$j]; /*14215*/
						$k[$j++] = _Cb; /*14219*/
						if (_Cb <= 811799) {
							/*14218*/
							var _Cc = $k[--$j]; /*14216*/
							$k[$j++] = 925; /*14216*/
							$k[$j++] = _Cc - 810900; /*14216*/
							$k[$j++] = $a(2); /*14216*/
						} else {
							/*14218*/
							$k[$j++] = 'bwipp.pdf417badECI'; /*14218*/
							$k[$j++] = "PDF417 supports ECIs 000000 to 811799"; /*14218*/
							$0.raiseerror(); /*14218*/
						} /*14218*/
					} /*14218*/
				} /*14218*/
			}; /*14220*/
			$1.encfuncs = $a(['enct', 'encn', 'encb']); /*14222*/
			$1.addtocws = function() {
				var _Cf = $k[--$j]; /*14225*/
				$puti($1.datcws, $1.j, _Cf); /*14225*/
				$1.j = _Cf.length + $1.j; /*14226*/
			}; /*14227*/
			$1.state = $1.T; /*14230*/
			$1.submode = $1.A; /*14230*/
			$1.datcws = $a($1.seqlen); /*14231*/
			$1.i = 0; /*14232*/
			$1.j = 0; /*14232*/
			for (;;) {
				/*14252*/
				if ($1.i >= $1.seq.length) { //no-else/*14233*/
					break; /*14233*/
				} /*14233*/
				$1.chars = $get($1.seq, $1.i); /*14234*/
				if ($eq($type($1.chars), 'arraytype')) {
					/*14248*/
					if ($get($1.chars, 0) <= -1000000) {
						/*14239*/
						$k[$j++] = $1.chars; /*14237*/
						$1.ence(); /*14237*/
						$1.addtocws(); /*14237*/
					} else {
						/*14239*/
						$k[$j++] = $1.chars; /*14239*/
						if ($1[$get($1.encfuncs, $1.state)]() === true) {
							break;
						} /*14239*/
						$1.addtocws(); /*14239*/
					} /*14239*/
				} else {
					/*14248*/
					$k[$j++] = $a([$get($1.latchcws, $1.chars)]); /*14242*/
					$1.addtocws(); /*14242*/
					if ($1.chars == $1.tl) { //no-else/*14243*/
						$1.state = $1.T; /*14243*/
						$1.submode = $1.A; /*14243*/
					} /*14243*/
					if ($1.chars == $1.nl) { //no-else/*14244*/
						$1.state = $1.N; /*14244*/
					} /*14244*/
					if (($1.chars == $1.bl) || ($1.chars == $1.bl6)) { //no-else/*14245*/
						$1.state = $1.B; /*14245*/
					} /*14245*/
					if ($1.chars == $1.bs) { //no-else/*14249*/
						$1.i = $1.i + 1; /*14247*/
						$k[$j++] = $get($1.seq, $1.i); /*14248*/
						$1.encb(); /*14248*/
						$1.addtocws(); /*14248*/
					} /*14248*/
				} /*14248*/
				$1.i = $1.i + 1; /*14251*/
			} /*14251*/
			$1.datcws = $geti($1.datcws, 0, $1.j); /*14253*/
		} /*14253*/
		$1.m = $1.datcws.length; /*14257*/
		if ($1.eclevel == -1) { //no-else/*14263*/
			if ($1.m <= 40) { //no-else/*14259*/
				$1.eclevel = 2; /*14259*/
			} /*14259*/
			if (($1.m >= 41) && ($1.m <= 160)) { //no-else/*14260*/
				$1.eclevel = 3; /*14260*/
			} /*14260*/
			if (($1.m >= 161) && ($1.m <= 320)) { //no-else/*14261*/
				$1.eclevel = 4; /*14261*/
			} /*14261*/
			if ($1.m >= 321) { //no-else/*14262*/
				$1.eclevel = 5; /*14262*/
			} /*14262*/
		} /*14262*/
		$1.maxeclevel = (~~((Math.log((928 - 1) - $1.m)) / Math.log(2))) - 1; /*14266*/
		if ($1.eclevel > $1.maxeclevel) { //no-else/*14267*/
			$1.eclevel = $1.maxeclevel; /*14267*/
		} /*14267*/
		$1.k = ~~Math.pow(2, $1.eclevel + 1); /*14268*/
		if ($1.columns == 0) { //no-else/*14271*/
			$1.columns = ~~(Math.round(Math.sqrt(($1.m + $1.k) / 3))); /*14271*/
		} /*14271*/
		$k[$j++] = 'c'; /*14272*/
		if ($1.columns >= 1) {
			/*14272*/
			$k[$j++] = $1.columns; /*14272*/
		} else {
			/*14272*/
			$k[$j++] = 1; /*14272*/
		} /*14272*/
		var _Dk = $k[--$j]; /*14272*/
		$1[$k[--$j]] = _Dk; /*14272*/
		$1.r = ~~(Math.ceil((($1.m + $1.k) + 1) / $1.columns)); /*14275*/
		if (($1.r < $1.rows) && ($1.rows <= 90)) { //no-else/*14276*/
			$1.r = $1.rows; /*14276*/
		} /*14276*/
		if ($1.r < 3) { //no-else/*14277*/
			$1.r = 3; /*14277*/
		} /*14277*/
		var _Du = $1.c; /*14280*/
		var _Dv = $1.r; /*14280*/
		var _Dw = $1.m; /*14280*/
		var _Dx = 8; /*14280*/
		var _Dy = (~~((Math.log(((_Du * _Dv) - 1) - _Dw)) / Math.log(2))) - 1; /*14280*/
		if (((~~((Math.log(((_Du * _Dv) - 1) - _Dw)) / Math.log(2))) - 1) > 8) { //no-else/*14280*/
			var _ = _Dx; /*14280*/
			_Dx = _Dy; /*14280*/
			_Dy = _; /*14280*/
		} /*14280*/
		$1.maxeclevel = _Dy; /*14280*/
		if ($1.maxeclevel > $1.eclevel) { //no-else/*14284*/
			$1.eclevel = $1.maxeclevel; /*14282*/
			$1.k = ~~Math.pow(2, $1.eclevel + 1); /*14283*/
		} /*14283*/
		$1.n = ($1.c * $1.r) - $1.k; /*14287*/
		$1.cws = $a(($1.c * $1.r) + 1); /*14288*/
		$put($1.cws, 0, $1.n); /*14289*/
		$puti($1.cws, 1, $1.datcws); /*14290*/
		$k[$j++] = $1.cws; /*14291*/
		$k[$j++] = $1.m + 1; /*14291*/
		$k[$j++] = Infinity; /*14291*/
		for (var _EH = 0, _EI = ($1.n - $1.m) - 1; _EH < _EI; _EH++) {
			/*14291*/
			$k[$j++] = 900; /*14291*/
		} /*14291*/
		var _EJ = $a(); /*14291*/
		var _EK = $k[--$j]; /*14291*/
		$puti($k[--$j], _EK, _EJ); /*14291*/
		$k[$j++] = $1.cws; /*14292*/
		$k[$j++] = $1.n; /*14292*/
		$k[$j++] = Infinity; /*14292*/
		for (var _EP = 0, _EQ = $1.k; _EP < _EQ; _EP++) {
			/*14292*/
			$k[$j++] = 0; /*14292*/
		} /*14292*/
		$k[$j++] = 0; /*14292*/
		var _ER = $a(); /*14292*/
		var _ES = $k[--$j]; /*14292*/
		$puti($k[--$j], _ES, _ER); /*14292*/
		$k[$j++] = Infinity; /*14295*/
		$k[$j++] = 1; /*14295*/
		for (var _EU = 0, _EV = 928; _EU < _EV; _EU++) {
			/*14295*/
			var _EW = $k[--$j]; /*14295*/
			$k[$j++] = _EW; /*14295*/
			$k[$j++] = (_EW * 3) % 929; /*14295*/
		} /*14295*/
		$1.rsalog = $a(); /*14295*/
		$1.rslog = $a(929); /*14296*/
		for (var _EZ = 1; _EZ <= 928; _EZ += 1) {
			/*14297*/
			$put($1.rslog, $get($1.rsalog, _EZ), _EZ); /*14297*/
		} /*14297*/
		$1.rsprod = function() {
			var _Ed = $k[--$j]; /*14301*/
			var _Ee = $k[--$j]; /*14301*/
			$k[$j++] = _Ee; /*14305*/
			$k[$j++] = _Ed; /*14305*/
			if ((_Ed != 0) && (_Ee != 0)) {
				/*14304*/
				var _Eh = $get($1.rslog, $k[--$j]); /*14302*/
				var _Em = $get($1.rsalog, (_Eh + $get($1.rslog, $k[--$j])) % 928); /*14302*/
				$k[$j++] = _Em; /*14302*/
			} else {
				/*14304*/
				$j -= 2; /*14304*/
				$k[$j++] = 0; /*14304*/
			} /*14304*/
		}; /*14306*/
		$k[$j++] = Infinity; /*14309*/
		$k[$j++] = 1; /*14309*/
		for (var _Eo = 0, _Ep = $1.k; _Eo < _Ep; _Eo++) {
			/*14309*/
			$k[$j++] = 0; /*14309*/
		} /*14309*/
		$1.coeffs = $a(); /*14309*/
		for (var _Et = 1, _Es = $1.k; _Et <= _Es; _Et += 1) {
			/*14318*/
			$1.i = _Et; /*14311*/
			$put($1.coeffs, $1.i, $get($1.coeffs, $1.i - 1)); /*14312*/
			for (var _F0 = $1.i - 1; _F0 >= 1; _F0 -= 1) {
				/*14316*/
				$1.j = _F0; /*14314*/
				$k[$j++] = $1.coeffs; /*14315*/
				$k[$j++] = $1.j; /*14315*/
				$k[$j++] = $get($1.coeffs, $1.j - 1); /*14315*/
				$k[$j++] = $get($1.coeffs, $1.j); /*14315*/
				$k[$j++] = $get($1.rsalog, $1.i); /*14315*/
				$1.rsprod(); /*14315*/
				var _FC = $k[--$j]; /*14315*/
				var _FD = $k[--$j]; /*14315*/
				var _FE = $k[--$j]; /*14315*/
				$put($k[--$j], _FE, (_FD + _FC) % 929); /*14315*/
			} /*14315*/
			$k[$j++] = $1.coeffs; /*14317*/
			$k[$j++] = 0; /*14317*/
			$k[$j++] = $get($1.coeffs, 0); /*14317*/
			$k[$j++] = $get($1.rsalog, $1.i); /*14317*/
			$1.rsprod(); /*14317*/
			var _FM = $k[--$j]; /*14317*/
			var _FN = $k[--$j]; /*14317*/
			$put($k[--$j], _FN, _FM); /*14317*/
		} /*14317*/
		$1.coeffs = $geti($1.coeffs, 0, $1.coeffs.length - 1); /*14319*/
		for (var _FT = $1.coeffs.length - 1; _FT >= 0; _FT -= 2) {
			/*14320*/
			var _FU = $1.coeffs; /*14320*/
			$put(_FU, _FT, 929 - $get(_FU, _FT)); /*14320*/
		} /*14320*/
		for (var _FY = 0, _FX = $1.n - 1; _FY <= _FX; _FY += 1) {
			/*14329*/
			$1.t = ($get($1.cws, _FY) + $get($1.cws, $1.n)) % 929; /*14324*/
			for (var _Fg = 0, _Ff = $1.k - 1; _Fg <= _Ff; _Fg += 1) {
				/*14328*/
				$1.j = _Fg; /*14326*/
				$put($1.cws, $1.n + $1.j, ($get($1.cws, ($1.n + $1.j) + 1) + (929 - (($1.t * $get($1.coeffs, ($1.k - $1.j) - 1)) % 929))) % 929); /*14327*/
			} /*14327*/
		} /*14327*/
		for (var _Fx = $1.n, _Fw = $1.n + $1.k; _Fx <= _Fw; _Fx += 1) {
			/*14330*/
			$put($1.cws, _Fx, (929 - $get($1.cws, _Fx)) % 929); /*14330*/
		} /*14330*/
		$1.cws = $geti($1.cws, 0, $1.cws.length - 1); /*14333*/
		$1.clusters = $a([$a([120256, 125680, 128380, 120032, 125560, 128318, 108736, 119920, 108640, 86080, 108592, 86048, 110016, 120560, 125820, 109792, 120440, 125758, 88256, 109680, 88160, 89536, 110320, 120700, 89312, 110200, 120638, 89200, 110140, 89840, 110460, 89720, 110398, 89980, 128506, 119520, 125304, 128190, 107712, 119408, 125244, 107616, 119352, 84032, 107568, 119324, 84000, 107544, 83984, 108256, 119672, 125374, 85184, 108144, 119612, 85088, 108088, 119582, 85040, 108060, 85728, 108408, 119742, 85616, 108348, 85560, 108318, 85880, 108478, 85820, 85790, 107200, 119152, 125116, 107104, 119096, 125086, 83008, 107056, 119068, 82976, 107032, 82960, 82952, 83648, 107376, 119228, 83552, 107320, 119198, 83504, 107292, 83480, 83468, 83824, 107452, 83768, 107422, 83740, 83900, 106848, 118968, 125022, 82496, 106800, 118940, 82464, 106776, 118926, 82448, 106764, 82440, 106758, 82784, 106936, 119006, 82736, 106908, 82712, 106894, 82700, 82694, 106974, 82830, 82240, 106672, 118876, 82208, 106648, 118862, 82192, 106636, 82184, 106630, 82180, 82352, 82328, 82316, 82080, 118830, 106572, 106566, 82050, 117472, 124280, 127678, 103616, 117360, 124220, 103520, 117304, 124190, 75840, 103472, 75808, 104160, 117624, 124350, 76992, 104048, 117564, 76896, 103992, 76848, 76824, 77536, 104312, 117694, 77424, 104252, 77368, 77340, 77688, 104382, 77628, 77758, 121536, 126320, 128700, 121440, 126264, 128670, 111680, 121392, 126236, 111648, 121368, 126222, 111632, 121356, 103104, 117104, 124092, 112320, 103008, 117048, 124062, 112224, 121656, 126366, 93248, 74784, 102936, 117006, 93216, 112152, 93200, 75456, 103280, 117180, 93888, 75360, 103224, 117150, 93792, 112440, 121758, 93744, 75288, 93720, 75632, 103356, 94064, 75576, 103326, 94008, 112542, 93980, 75708, 94140, 75678, 94110, 121184, 126136, 128606, 111168, 121136, 126108, 111136, 121112, 126094, 111120, 121100, 111112, 111108, 102752, 116920, 123998, 111456, 102704, 116892, 91712, 74272, 121244, 116878, 91680, 74256, 102668, 91664, 111372, 102662, 74244, 74592, 102840, 116958, 92000, 74544, 102812, 91952, 111516, 102798, 91928, 74508, 74502, 74680, 102878, 92088, 74652, 92060, 74638, 92046, 92126, 110912, 121008, 126044, 110880, 120984, 126030, 110864, 120972, 110856, 120966, 110852, 110850, 74048, 102576, 116828, 90944, 74016, 102552, 116814, 90912, 111000, 121038, 90896, 73992, 102534, 90888, 110982, 90884, 74160, 102620, 91056, 74136, 102606, 91032, 111054, 91020, 74118, 91014, 91100, 91086, 110752, 120920, 125998, 110736, 120908, 110728, 120902, 110724, 110722, 73888, 102488, 116782, 90528, 73872, 102476, 90512, 110796, 102470, 90504, 73860, 90500, 73858, 73944, 90584, 90572, 90566, 120876, 120870, 110658, 102444, 73800, 90312, 90308, 90306, 101056, 116080, 123580, 100960, 116024, 70720, 100912, 115996, 70688, 100888, 70672, 70664, 71360, 101232, 116156, 71264, 101176, 116126, 71216, 101148, 71192, 71180, 71536, 101308, 71480, 101278, 71452, 71612, 71582, 118112, 124600, 127838, 105024, 118064, 124572, 104992, 118040, 124558, 104976, 118028, 104968, 118022, 100704, 115896, 123486, 105312, 100656, 115868, 79424, 70176, 118172, 115854, 79392, 105240, 100620, 79376, 70152, 79368, 70496, 100792, 115934, 79712, 70448, 118238, 79664, 105372, 100750, 79640, 70412, 79628, 70584, 100830, 79800, 70556, 79772, 70542, 70622, 79838, 122176, 126640, 128860, 122144, 126616, 128846, 122128, 126604, 122120, 126598, 122116, 104768, 117936, 124508, 113472, 104736, 126684, 124494, 113440, 122264, 126670, 113424, 104712, 117894, 113416, 122246, 104706, 69952, 100528, 115804, 78656, 69920, 100504, 115790, 96064, 78624, 104856, 117966, 96032, 113560, 122318, 100486, 96016, 78600, 104838, 96008, 69890, 70064, 100572, 78768, 70040, 100558, 96176, 78744, 104910, 96152, 113614, 70022, 78726, 70108, 78812, 70094, 96220, 78798, 122016, 126552, 128814, 122000, 126540, 121992, 126534, 121988, 121986, 104608, 117848, 124462, 113056, 104592, 126574, 113040, 122060, 117830, 113032, 104580, 113028, 104578, 113026, 69792, 100440, 115758, 78240, 69776, 100428, 95136, 78224, 104652, 100422, 95120, 113100, 69764, 95112, 78212, 69762, 78210, 69848, 100462, 78296, 69836, 95192, 78284, 69830, 95180, 78278, 69870, 95214, 121936, 126508, 121928, 126502, 121924, 121922, 104528, 117804, 112848, 104520, 117798, 112840, 121958, 112836, 104514, 112834, 69712, 100396, 78032, 69704, 100390, 94672, 78024, 104550, 94664, 112870, 69698, 94660, 78018, 94658, 78060, 94700, 94694, 126486, 121890, 117782, 104484, 104482, 69672, 77928, 94440, 69666, 77922, 99680, 68160, 99632, 68128, 99608, 115342, 68112, 99596, 68104, 99590, 68448, 99768, 115422, 68400, 99740, 68376, 99726, 68364, 68358, 68536, 99806, 68508, 68494, 68574, 101696, 116400, 123740, 101664, 116376, 101648, 116364, 101640, 116358, 101636, 67904, 99504, 115292, 72512, 67872, 116444, 115278, 72480, 101784, 116430, 72464, 67848, 99462, 72456, 101766, 67842, 68016, 99548, 72624, 67992, 99534, 72600, 101838, 72588, 67974, 68060, 72668, 68046, 72654, 118432, 124760, 127918, 118416, 124748, 118408, 124742, 118404, 118402, 101536, 116312, 105888, 101520, 116300, 105872, 118476, 116294, 105864, 101508, 105860, 101506, 105858, 67744, 99416, 72096, 67728, 116334, 80800, 72080, 101580, 99398, 80784, 105932, 67716, 80776, 72068, 67714, 72066, 67800, 99438, 72152, 67788, 80856, 72140, 67782, 80844, 72134, 67822, 72174, 80878, 126800, 128940, 126792, 128934, 126788, 126786, 118352, 124716, 122576, 126828, 124710, 122568, 126822, 122564, 118338, 122562, 101456, 116268, 105680, 101448, 116262, 114128, 105672, 118374, 114120, 122598, 101442, 114116, 105666, 114114, 67664, 99372, 71888, 67656, 99366, 80336, 71880, 101478, 97232, 80328, 105702, 67650, 97224, 114150, 71874, 97220, 67692, 71916, 67686, 80364, 71910, 97260, 80358, 97254, 126760, 128918, 126756, 126754, 118312, 124694, 122472, 126774, 122468, 118306, 122466, 101416, 116246, 105576, 101412, 113896, 105572, 101410, 113892, 105570, 113890, 67624, 99350, 71784, 101430, 80104, 71780, 67618, 96744, 80100, 71778, 96740, 80098, 96738, 71798, 96758, 126738, 122420, 122418, 105524, 113780, 113778, 71732, 79988, 96500, 96498, 66880, 66848, 98968, 66832, 66824, 66820, 66992, 66968, 66956, 66950, 67036, 67022, 100000, 99984, 115532, 99976, 115526, 99972, 99970, 66720, 98904, 69024, 100056, 98892, 69008, 100044, 69000, 100038, 68996, 66690, 68994, 66776, 98926, 69080, 100078, 69068, 66758, 69062, 66798, 69102, 116560, 116552, 116548, 116546, 99920, 102096, 116588, 115494, 102088, 116582, 102084, 99906, 102082, 66640, 68816, 66632, 98854, 73168, 68808, 66628, 73160, 68804, 66626, 73156, 68802, 66668, 68844, 66662, 73196, 68838, 73190, 124840, 124836, 124834, 116520, 118632, 124854, 118628, 116514, 118626, 99880, 115478, 101992, 116534, 106216, 101988, 99874, 106212, 101986, 106210, 66600, 98838, 68712, 99894, 72936, 68708, 66594, 81384, 72932, 68706, 81380, 72930, 66614, 68726, 72950, 81398, 128980, 128978, 124820, 126900, 124818, 126898, 116500, 118580, 116498, 122740, 118578, 122738, 99860, 101940, 99858, 106100, 101938, 114420]), $a([128352, 129720, 125504, 128304, 129692, 125472, 128280, 129678, 125456, 128268, 125448, 128262, 125444, 125792, 128440, 129758, 120384, 125744, 128412, 120352, 125720, 128398, 120336, 125708, 120328, 125702, 120324, 120672, 125880, 128478, 110144, 120624, 125852, 110112, 120600, 125838, 110096, 120588, 110088, 120582, 110084, 110432, 120760, 125918, 89664, 110384, 120732, 89632, 110360, 120718, 89616, 110348, 89608, 110342, 89952, 110520, 120798, 89904, 110492, 89880, 110478, 89868, 90040, 110558, 90012, 89998, 125248, 128176, 129628, 125216, 128152, 129614, 125200, 128140, 125192, 128134, 125188, 125186, 119616, 125360, 128220, 119584, 125336, 128206, 119568, 125324, 119560, 125318, 119556, 119554, 108352, 119728, 125404, 108320, 119704, 125390, 108304, 119692, 108296, 119686, 108292, 108290, 85824, 108464, 119772, 85792, 108440, 119758, 85776, 108428, 85768, 108422, 85764, 85936, 108508, 85912, 108494, 85900, 85894, 85980, 85966, 125088, 128088, 129582, 125072, 128076, 125064, 128070, 125060, 125058, 119200, 125144, 128110, 119184, 125132, 119176, 125126, 119172, 119170, 107424, 119256, 125166, 107408, 119244, 107400, 119238, 107396, 107394, 83872, 107480, 119278, 83856, 107468, 83848, 107462, 83844, 83842, 83928, 107502, 83916, 83910, 83950, 125008, 128044, 125000, 128038, 124996, 124994, 118992, 125036, 118984, 125030, 118980, 118978, 106960, 119020, 106952, 119014, 106948, 106946, 82896, 106988, 82888, 106982, 82884, 82882, 82924, 82918, 124968, 128022, 124964, 124962, 118888, 124982, 118884, 118882, 106728, 118902, 106724, 106722, 82408, 106742, 82404, 82402, 124948, 124946, 118836, 118834, 106612, 106610, 124224, 127664, 129372, 124192, 127640, 129358, 124176, 127628, 124168, 127622, 124164, 124162, 117568, 124336, 127708, 117536, 124312, 127694, 117520, 124300, 117512, 124294, 117508, 117506, 104256, 117680, 124380, 104224, 117656, 124366, 104208, 117644, 104200, 117638, 104196, 104194, 77632, 104368, 117724, 77600, 104344, 117710, 77584, 104332, 77576, 104326, 77572, 77744, 104412, 77720, 104398, 77708, 77702, 77788, 77774, 128672, 129880, 93168, 128656, 129868, 92664, 128648, 129862, 92412, 128644, 128642, 124064, 127576, 129326, 126368, 124048, 129902, 126352, 128716, 127558, 126344, 124036, 126340, 124034, 126338, 117152, 124120, 127598, 121760, 117136, 124108, 121744, 126412, 124102, 121736, 117124, 121732, 117122, 121730, 103328, 117208, 124142, 112544, 103312, 117196, 112528, 121804, 117190, 112520, 103300, 112516, 103298, 112514, 75680, 103384, 117230, 94112, 75664, 103372, 94096, 112588, 103366, 94088, 75652, 94084, 75650, 75736, 103406, 94168, 75724, 94156, 75718, 94150, 75758, 128592, 129836, 91640, 128584, 129830, 91388, 128580, 91262, 128578, 123984, 127532, 126160, 123976, 127526, 126152, 128614, 126148, 123970, 126146, 116944, 124012, 121296, 116936, 124006, 121288, 126182, 121284, 116930, 121282, 102864, 116972, 111568, 102856, 116966, 111560, 121318, 111556, 102850, 111554, 74704, 102892, 92112, 74696, 102886, 92104, 111590, 92100, 74690, 92098, 74732, 92140, 74726, 92134, 128552, 129814, 90876, 128548, 90750, 128546, 123944, 127510, 126056, 128566, 126052, 123938, 126050, 116840, 123958, 121064, 116836, 121060, 116834, 121058, 102632, 116854, 111080, 121078, 111076, 102626, 111074, 74216, 102646, 91112, 74212, 91108, 74210, 91106, 74230, 91126, 128532, 90494, 128530, 123924, 126004, 123922, 126002, 116788, 120948, 116786, 120946, 102516, 110836, 102514, 110834, 73972, 90612, 73970, 90610, 128522, 123914, 125978, 116762, 120890, 102458, 110714, 123552, 127320, 129198, 123536, 127308, 123528, 127302, 123524, 123522, 116128, 123608, 127342, 116112, 123596, 116104, 123590, 116100, 116098, 101280, 116184, 123630, 101264, 116172, 101256, 116166, 101252, 101250, 71584, 101336, 116206, 71568, 101324, 71560, 101318, 71556, 71554, 71640, 101358, 71628, 71622, 71662, 127824, 129452, 79352, 127816, 129446, 79100, 127812, 78974, 127810, 123472, 127276, 124624, 123464, 127270, 124616, 127846, 124612, 123458, 124610, 115920, 123500, 118224, 115912, 123494, 118216, 124646, 118212, 115906, 118210, 100816, 115948, 105424, 100808, 115942, 105416, 118246, 105412, 100802, 105410, 70608, 100844, 79824, 70600, 100838, 79816, 105446, 79812, 70594, 79810, 70636, 79852, 70630, 79846, 129960, 95728, 113404, 129956, 95480, 113278, 129954, 95356, 95294, 127784, 129430, 78588, 128872, 129974, 95996, 78462, 128868, 127778, 95870, 128866, 123432, 127254, 124520, 123428, 126696, 128886, 123426, 126692, 124514, 126690, 115816, 123446, 117992, 115812, 122344, 117988, 115810, 122340, 117986, 122338, 100584, 115830, 104936, 100580, 113640, 104932, 100578, 113636, 104930, 113634, 70120, 100598, 78824, 70116, 96232, 78820, 70114, 96228, 78818, 96226, 70134, 78838, 129940, 94968, 113022, 129938, 94844, 94782, 127764, 78206, 128820, 127762, 95102, 128818, 123412, 124468, 123410, 126580, 124466, 126578, 115764, 117876, 115762, 122100, 117874, 122098, 100468, 104692, 100466, 113140, 104690, 113138, 69876, 78324, 69874, 95220, 78322, 95218, 129930, 94588, 94526, 127754, 128794, 123402, 124442, 126522, 115738, 117818, 121978, 100410, 104570, 112890, 69754, 78074, 94714, 94398, 123216, 127148, 123208, 127142, 123204, 123202, 115408, 123244, 115400, 123238, 115396, 115394, 99792, 115436, 99784, 115430, 99780, 99778, 68560, 99820, 68552, 99814, 68548, 68546, 68588, 68582, 127400, 129238, 72444, 127396, 72318, 127394, 123176, 127126, 123752, 123172, 123748, 123170, 123746, 115304, 123190, 116456, 115300, 116452, 115298, 116450, 99560, 115318, 101864, 99556, 101860, 99554, 101858, 68072, 99574, 72680, 68068, 72676, 68066, 72674, 68086, 72694, 129492, 80632, 105854, 129490, 80508, 80446, 127380, 72062, 127924, 127378, 80766, 127922, 123156, 123700, 123154, 124788, 123698, 124786, 115252, 116340, 115250, 118516, 116338, 118514, 99444, 101620, 99442, 105972, 101618, 105970, 67828, 72180, 67826, 80884, 72178, 80882, 97008, 114044, 96888, 113982, 96828, 96798, 129482, 80252, 130010, 97148, 80190, 97086, 127370, 127898, 128954, 123146, 123674, 124730, 126842, 115226, 116282, 118394, 122618, 99386, 101498, 105722, 114170, 67706, 71930, 80378, 96632, 113854, 96572, 96542, 80062, 96702, 96444, 96414, 96350, 123048, 123044, 123042, 115048, 123062, 115044, 115042, 99048, 115062, 99044, 99042, 67048, 99062, 67044, 67042, 67062, 127188, 68990, 127186, 123028, 123316, 123026, 123314, 114996, 115572, 114994, 115570, 98932, 100084, 98930, 100082, 66804, 69108, 66802, 69106, 129258, 73084, 73022, 127178, 127450, 123018, 123290, 123834, 114970, 115514, 116602, 98874, 99962, 102138, 66682, 68858, 73210, 81272, 106174, 81212, 81182, 72894, 81342, 97648, 114364, 97592, 114334, 97564, 97550, 81084, 97724, 81054, 97694, 97464, 114270, 97436, 97422, 80990, 97502, 97372, 97358, 97326, 114868, 114866, 98676, 98674, 66292, 66290, 123098, 114842, 115130, 98618, 99194, 66170, 67322, 69310, 73404, 73374, 81592, 106334, 81564, 81550, 73310, 81630, 97968, 114524, 97944, 114510, 97932, 97926, 81500, 98012, 81486, 97998, 97880, 114478, 97868, 97862, 81454, 97902, 97836, 97830, 69470, 73564, 73550, 81752, 106414, 81740, 81734, 73518, 81774, 81708, 81702]), $a([109536, 120312, 86976, 109040, 120060, 86496, 108792, 119934, 86256, 108668, 86136, 129744, 89056, 110072, 129736, 88560, 109820, 129732, 88312, 109694, 129730, 88188, 128464, 129772, 89592, 128456, 129766, 89340, 128452, 89214, 128450, 125904, 128492, 125896, 128486, 125892, 125890, 120784, 125932, 120776, 125926, 120772, 120770, 110544, 120812, 110536, 120806, 110532, 84928, 108016, 119548, 84448, 107768, 119422, 84208, 107644, 84088, 107582, 84028, 129640, 85488, 108284, 129636, 85240, 108158, 129634, 85116, 85054, 128232, 129654, 85756, 128228, 85630, 128226, 125416, 128246, 125412, 125410, 119784, 125430, 119780, 119778, 108520, 119798, 108516, 108514, 83424, 107256, 119166, 83184, 107132, 83064, 107070, 83004, 82974, 129588, 83704, 107390, 129586, 83580, 83518, 128116, 83838, 128114, 125172, 125170, 119284, 119282, 107508, 107506, 82672, 106876, 82552, 106814, 82492, 82462, 129562, 82812, 82750, 128058, 125050, 119034, 82296, 106686, 82236, 82206, 82366, 82108, 82078, 76736, 103920, 117500, 76256, 103672, 117374, 76016, 103548, 75896, 103486, 75836, 129384, 77296, 104188, 129380, 77048, 104062, 129378, 76924, 76862, 127720, 129398, 77564, 127716, 77438, 127714, 124392, 127734, 124388, 124386, 117736, 124406, 117732, 117730, 104424, 117750, 104420, 104418, 112096, 121592, 126334, 92608, 111856, 121468, 92384, 111736, 121406, 92272, 111676, 92216, 111646, 92188, 75232, 103160, 117118, 93664, 74992, 103036, 93424, 112252, 102974, 93304, 74812, 93244, 74782, 93214, 129332, 75512, 103294, 129908, 129330, 93944, 75388, 129906, 93820, 75326, 93758, 127604, 75646, 128756, 127602, 94078, 128754, 124148, 126452, 124146, 126450, 117236, 121844, 117234, 121842, 103412, 103410, 91584, 111344, 121212, 91360, 111224, 121150, 91248, 111164, 91192, 111134, 91164, 91150, 74480, 102780, 91888, 74360, 102718, 91768, 111422, 91708, 74270, 91678, 129306, 74620, 129850, 92028, 74558, 91966, 127546, 128634, 124026, 126202, 116986, 121338, 102906, 90848, 110968, 121022, 90736, 110908, 90680, 110878, 90652, 90638, 74104, 102590, 91000, 74044, 90940, 74014, 90910, 74174, 91070, 90480, 110780, 90424, 110750, 90396, 90382, 73916, 90556, 73886, 90526, 90296, 110686, 90268, 90254, 73822, 90334, 90204, 90190, 71136, 101112, 116094, 70896, 100988, 70776, 100926, 70716, 70686, 129204, 71416, 101246, 129202, 71292, 71230, 127348, 71550, 127346, 123636, 123634, 116212, 116210, 101364, 101362, 79296, 105200, 118140, 79072, 105080, 118078, 78960, 105020, 78904, 104990, 78876, 78862, 70384, 100732, 79600, 70264, 100670, 79480, 105278, 79420, 70174, 79390, 129178, 70524, 129466, 79740, 70462, 79678, 127290, 127866, 123514, 124666, 115962, 118266, 100858, 113376, 122232, 126654, 95424, 113264, 122172, 95328, 113208, 122142, 95280, 113180, 95256, 113166, 95244, 78560, 104824, 117950, 95968, 78448, 104764, 95856, 113468, 104734, 95800, 78364, 95772, 78350, 95758, 70008, 100542, 78712, 69948, 96120, 78652, 69918, 96060, 78622, 96030, 70078, 78782, 96190, 94912, 113008, 122044, 94816, 112952, 122014, 94768, 112924, 94744, 112910, 94732, 94726, 78192, 104636, 95088, 78136, 104606, 95032, 113054, 95004, 78094, 94990, 69820, 78268, 69790, 95164, 78238, 95134, 94560, 112824, 121950, 94512, 112796, 94488, 112782, 94476, 94470, 78008, 104542, 94648, 77980, 94620, 77966, 94606, 69726, 78046, 94686, 94384, 112732, 94360, 112718, 94348, 94342, 77916, 94428, 77902, 94414, 94296, 112686, 94284, 94278, 77870, 94318, 94252, 94246, 68336, 99708, 68216, 99646, 68156, 68126, 68476, 68414, 127162, 123258, 115450, 99834, 72416, 101752, 116414, 72304, 101692, 72248, 101662, 72220, 72206, 67960, 99518, 72568, 67900, 72508, 67870, 72478, 68030, 72638, 80576, 105840, 118460, 80480, 105784, 118430, 80432, 105756, 80408, 105742, 80396, 80390, 72048, 101564, 80752, 71992, 101534, 80696, 71964, 80668, 71950, 80654, 67772, 72124, 67742, 80828, 72094, 80798, 114016, 122552, 126814, 96832, 113968, 122524, 96800, 113944, 122510, 96784, 113932, 96776, 113926, 96772, 80224, 105656, 118366, 97120, 80176, 105628, 97072, 114076, 105614, 97048, 80140, 97036, 80134, 97030, 71864, 101470, 80312, 71836, 97208, 80284, 71822, 97180, 80270, 97166, 67678, 71902, 80350, 97246, 96576, 113840, 122460, 96544, 113816, 122446, 96528, 113804, 96520, 113798, 96516, 96514, 80048, 105564, 96688, 80024, 105550, 96664, 113870, 96652, 80006, 96646, 71772, 80092, 71758, 96732, 80078, 96718, 96416, 113752, 122414, 96400, 113740, 96392, 113734, 96388, 96386, 79960, 105518, 96472, 79948, 96460, 79942, 96454, 71726, 79982, 96494, 96336, 113708, 96328, 113702, 96324, 96322, 79916, 96364, 79910, 96358, 96296, 113686, 96292, 96290, 79894, 96310, 66936, 99006, 66876, 66846, 67006, 68976, 100028, 68920, 99998, 68892, 68878, 66748, 69052, 66718, 69022, 73056, 102072, 116574, 73008, 102044, 72984, 102030, 72972, 72966, 68792, 99934, 73144, 68764, 73116, 68750, 73102, 66654, 68830, 73182, 81216, 106160, 118620, 81184, 106136, 118606, 81168, 106124, 81160, 106118, 81156, 81154, 72880, 101980, 81328, 72856, 101966, 81304, 106190, 81292, 72838, 81286, 68700, 72924, 68686, 81372, 72910, 81358, 114336, 122712, 126894, 114320, 122700, 114312, 122694, 114308, 114306, 81056, 106072, 118574, 97696, 81040, 106060, 97680, 114380, 106054, 97672, 81028, 97668, 81026, 97666, 72792, 101934, 81112, 72780, 97752, 81100, 72774, 97740, 81094, 97734, 68654, 72814, 81134, 97774, 114256, 122668, 114248, 122662, 114244, 114242, 80976, 106028, 97488, 80968, 106022, 97480, 114278, 97476, 80962, 97474, 72748, 81004, 72742, 97516, 80998, 97510, 114216, 122646, 114212, 114210, 80936, 106006, 97384, 80932, 97380, 80930, 97378, 72726, 80950, 97398, 114196, 114194, 80916, 97332, 80914, 97330, 66236, 66206, 67256, 99166, 67228, 67214, 66142, 67294, 69296, 100188, 69272, 100174, 69260, 69254, 67164, 69340, 67150, 69326, 73376, 102232, 116654, 73360, 102220, 73352, 102214, 73348, 73346, 69208, 100142, 73432, 102254, 73420, 69190, 73414, 67118, 69230, 73454, 106320, 118700, 106312, 118694, 106308, 106306, 73296, 102188, 81616, 106348, 102182, 81608, 73284, 81604, 73282, 81602, 69164, 73324, 69158, 81644, 73318, 81638, 122792, 126934, 122788, 122786, 106280, 118678, 114536, 106276, 114532, 106274, 114530, 73256, 102166, 81512, 73252, 98024, 81508, 73250, 98020, 81506, 98018, 69142, 73270, 81526, 98038, 122772, 122770, 106260, 114484, 106258, 114482, 73236, 81460, 73234, 97908, 81458, 97906, 122762, 106250, 114458, 73226, 81434, 97850, 66396, 66382, 67416, 99246, 67404, 67398, 66350, 67438, 69456, 100268, 69448, 100262, 69444, 69442, 67372, 69484, 67366, 69478, 102312, 116694, 102308, 102306, 69416, 100246, 73576, 102326, 73572, 69410, 73570, 67350, 69430, 73590, 118740, 118738, 102292, 106420, 102290, 106418, 69396, 73524, 69394, 81780, 73522, 81778, 118730, 102282, 106394, 69386, 73498, 81722, 66476, 66470, 67496, 99286, 67492, 67490, 66454, 67510, 100308, 100306, 67476, 69556, 67474, 69554, 116714])]); /*14575*/
		$1.cwtobits = function() {
			var _GA = $get($1.clusters, $k[--$j]); /*14579*/
			$1.v = $get(_GA, $k[--$j]); /*14579*/
			$k[$j++] = Infinity; /*14580*/
			for (var _GD = 0, _GE = 17; _GD < _GE; _GD++) {
				/*14580*/
				$k[$j++] = 0; /*14580*/
			} /*14580*/
			var _GH = $cvrs($s(17), $1.v, 2); /*14580*/
			for (var _GI = 0, _GJ = _GH.length; _GI < _GJ; _GI++) {
				/*14580*/
				$k[$j++] = $get(_GH, _GI) - 48; /*14580*/
			} /*14580*/
			var _GL = $a(); /*14580*/
			$k[$j++] = $geti(_GL, _GL.length - 17, 17); /*14581*/
		}; /*14582*/
		if ($1.compact) {
			/*14588*/
			$1.rwid = (((17 * $1.c) + 17) + 17) + 1; /*14586*/
		} else {
			/*14588*/
			$1.rwid = ((((17 * $1.c) + 17) + 17) + 17) + 18; /*14588*/
		} /*14588*/
		$1.pixs = $a($1.rwid * $1.r); /*14590*/
		for (var _GV = 0, _GU = $1.r - 1; _GV <= _GU; _GV += 1) {
			/*14620*/
			$1.i = _GV; /*14593*/
			if (($1.i % 3) == 0) { //no-else/*14598*/
				$1.lcw = ((~~($1.i / 3)) * 30) + (~~(($1.r - 1) / 3)); /*14596*/
				$1.rcw = (((~~($1.i / 3)) * 30) + $1.c) - 1; /*14597*/
			} /*14597*/
			if (($1.i % 3) == 1) { //no-else/*14602*/
				$1.lcw = (((~~($1.i / 3)) * 30) + ($1.eclevel * 3)) + (($1.r - 1) % 3); /*14600*/
				$1.rcw = ((~~($1.i / 3)) * 30) + (~~(($1.r - 1) / 3)); /*14601*/
			} /*14601*/
			if (($1.i % 3) == 2) { //no-else/*14606*/
				$1.lcw = (((~~($1.i / 3)) * 30) + $1.c) - 1; /*14604*/
				$1.rcw = (((~~($1.i / 3)) * 30) + ($1.eclevel * 3)) + (($1.r - 1) % 3); /*14605*/
			} /*14605*/
			$k[$j++] = $1.pixs; /*14616*/
			$k[$j++] = $1.rwid * $1.i; /*14616*/
			$k[$j++] = Infinity; /*14616*/
			$k[$j++] = 1; /*14610*/
			$k[$j++] = 1; /*14610*/
			$k[$j++] = 1; /*14610*/
			$k[$j++] = 1; /*14610*/
			$k[$j++] = 1; /*14610*/
			$k[$j++] = 1; /*14610*/
			$k[$j++] = 1; /*14610*/
			$k[$j++] = 1; /*14610*/
			$k[$j++] = 0; /*14610*/
			$k[$j++] = 1; /*14610*/
			$k[$j++] = 0; /*14610*/
			$k[$j++] = 1; /*14610*/
			$k[$j++] = 0; /*14610*/
			$k[$j++] = 1; /*14610*/
			$k[$j++] = 0; /*14610*/
			$k[$j++] = 0; /*14610*/
			$k[$j++] = 0; /*14610*/
			$k[$j++] = $1.lcw; /*14610*/
			$k[$j++] = $1.i % 3; /*14610*/
			$1.cwtobits(); /*14610*/
			$forall($k[--$j]); /*14610*/
			$forall($geti($1.cws, $1.c * $1.i, $1.c), function() {
				/*14611*/
				$k[$j++] = $1.i % 3; /*14611*/
				$1.cwtobits(); /*14611*/
				$forall($k[--$j]); /*14611*/
			}); /*14611*/
			if ($1.compact) {
				/*14616*/
				$k[$j++] = 1; /*14613*/
			} else {
				/*14616*/
				$k[$j++] = $1.rcw; /*14615*/
				$k[$j++] = $1.i % 3; /*14615*/
				$1.cwtobits(); /*14615*/
				$forall($k[--$j]); /*14615*/
				$k[$j++] = 1; /*14616*/
				$k[$j++] = 1; /*14616*/
				$k[$j++] = 1; /*14616*/
				$k[$j++] = 1; /*14616*/
				$k[$j++] = 1; /*14616*/
				$k[$j++] = 1; /*14616*/
				$k[$j++] = 1; /*14616*/
				$k[$j++] = 0; /*14616*/
				$k[$j++] = 1; /*14616*/
				$k[$j++] = 0; /*14616*/
				$k[$j++] = 0; /*14616*/
				$k[$j++] = 0; /*14616*/
				$k[$j++] = 1; /*14616*/
				$k[$j++] = 0; /*14616*/
				$k[$j++] = 1; /*14616*/
				$k[$j++] = 0; /*14616*/
				$k[$j++] = 0; /*14616*/
				$k[$j++] = 1; /*14616*/
			} /*14616*/
			var _H4 = $a(); /*14616*/
			var _H5 = $k[--$j]; /*14618*/
			$puti($k[--$j], _H5, _H4); /*14618*/
		} /*14618*/
		var _HE = new Map([
			["ren", $0.renmatrix],
			["pixs", $1.pixs],
			["pixx", $1.rwid],
			["pixy", $1.r],
			["height", ($1.r / 72) * $1.rowmult],
			["width", $1.rwid / 72],
			["opt", $1.options]
		]); /*14630*/
		$k[$j++] = _HE; /*14633*/
		if (!$1.dontdraw) { //no-else/*14633*/
			$0.renmatrix(); /*14633*/
		} /*14633*/
	};
	$0.pdf417compact = function() {
		var $1 = {}; /*14663*/
		$1.options = $k[--$j]; /*14665*/
		$1.barcode = $k[--$j]; /*14666*/
		$1.dontdraw = false; /*14668*/
		$forall($1.options, function() {
			/*14679*/
			var _3 = $k[--$j]; /*14679*/
			$1[$k[--$j]] = _3; /*14679*/
		}); /*14679*/
		$put($1.options, "dontdraw", true); /*14682*/
		$put($1.options, "compact", true); /*14683*/
		$k[$j++] = 'args'; /*14685*/
		$k[$j++] = $1.barcode; /*14685*/
		$k[$j++] = $1.options; /*14685*/
		$0.pdf417(); /*14685*/
		var _9 = $k[--$j]; /*14685*/
		$1[$k[--$j]] = _9; /*14685*/
		$put($1.args, "opt", $1.options); /*14687*/
		$k[$j++] = $1.args; /*14690*/
		if (!$1.dontdraw) { //no-else/*14690*/
			$0.renmatrix(); /*14690*/
		} /*14690*/
	};
	$0.micropdf417 = function() {
		var $1 = {}; /*14719*/
		$1.options = $k[--$j]; /*14721*/
		$1.barcode = $k[--$j]; /*14722*/
		$1.dontdraw = false; /*14724*/
		$1.version = "unset"; /*14725*/
		$1.columns = 0; /*14726*/
		$1.rows = 0; /*14727*/
		$1.rowmult = 2; /*14728*/
		$1.encoding = "auto"; /*14729*/
		$1.cca = false; /*14730*/
		$1.ccb = false; /*14731*/
		$1.raw = false; /*14732*/
		$1.parse = false; /*14733*/
		$1.parsefnc = false; /*14734*/
		$forall($1.options, function() {
			/*14745*/
			var _3 = $k[--$j]; /*14745*/
			$1[$k[--$j]] = _3; /*14745*/
		}); /*14745*/
		if ($ne($1.version, "unset")) { //no-else/*14751*/
			$search($1.version, "x"); /*14748*/
			$j--; /*14749*/
			$1.columns = $k[--$j]; /*14749*/
			$j--; /*14750*/
			$1.rows = $k[--$j]; /*14750*/
		} /*14750*/
		$1.columns = ~~$z($1.columns); /*14753*/
		$1.rows = ~~$z($1.rows); /*14754*/
		$1.rowmult = +$1.rowmult; /*14755*/
		$1.barlen = $1.barcode.length; /*14778*/
		if ($1.raw) { //no-else/*14780*/
			$1.encoding = "raw"; /*14780*/
		} /*14780*/
		if ($1.cca) { //no-else/*14781*/
			$1.encoding = "cca"; /*14781*/
		} /*14781*/
		if ($eq($1.encoding, "raw") || $eq($1.encoding, "cca")) { //no-else/*14795*/
			$1.datcws = $a($1.barlen); /*14785*/
			$1.i = 0; /*14786*/
			$1.j = 0; /*14786*/
			for (;;) {
				/*14793*/
				if ($1.i == $1.barlen) { //no-else/*14788*/
					break; /*14788*/
				} /*14788*/
				$1.cw = ~~$z($geti($1.barcode, $1.i + 1, 3)); /*14789*/
				$put($1.datcws, $1.j, $1.cw); /*14790*/
				$1.i = $1.i + 4; /*14791*/
				$1.j = $1.j + 1; /*14792*/
			} /*14792*/
			$1.datcws = $geti($1.datcws, 0, $1.j); /*14794*/
		} /*14794*/
		if ($1.ccb) { //no-else/*14797*/
			$1.encoding = "ccb"; /*14797*/
		} /*14797*/
		$1.encb = function() {
			$1.in = $k[--$j]; /*14800*/
			$1.inlen = $1.in.length; /*14801*/
			$1.out = $a(((~~($1.inlen / 6)) * 5) + ($1.inlen % 6)); /*14802*/
			for (var _e = 0, _d = (~~($1.inlen / 6)) - 1; _e <= _d; _e += 1) {
				/*14825*/
				$1.k = _e; /*14804*/
				$k[$j++] = Infinity; /*14805*/
				$aload($geti($1.in, $1.k * 6, 3)); /*14805*/
				$1.msbs = $a(); /*14805*/
				$k[$j++] = Infinity; /*14808*/
				$aload($1.msbs); /*14807*/
				var _k = $k[--$j]; /*14807*/
				var _l = $k[--$j]; /*14807*/
				var _m = $k[--$j]; /*14807*/
				$k[$j++] = (_k + (_l * 256)) + (_m * 65536); /*14808*/
				for (var _n = 0, _o = 3; _n < _o; _n++) {
					/*14808*/
					var _p = $k[--$j]; /*14808*/
					$k[$j++] = _p % 900; /*14808*/
					$k[$j++] = ~~(_p / 900); /*14808*/
				} /*14808*/
				$1.mscs = $a(); /*14808*/
				$k[$j++] = Infinity; /*14810*/
				$aload($geti($1.in, ($1.k * 6) + 3, 3)); /*14810*/
				$1.lsbs = $a(); /*14810*/
				$k[$j++] = Infinity; /*14813*/
				$aload($1.lsbs); /*14812*/
				var _w = $k[--$j]; /*14812*/
				var _x = $k[--$j]; /*14812*/
				var _y = $k[--$j]; /*14812*/
				$k[$j++] = (_w + (_x * 256)) + (_y * 65536); /*14813*/
				for (var _z = 0, _10 = 3; _z < _10; _z++) {
					/*14813*/
					var _11 = $k[--$j]; /*14813*/
					$k[$j++] = _11 % 900; /*14813*/
					$k[$j++] = ~~(_11 / 900); /*14813*/
				} /*14813*/
				$1.lscs = $a(); /*14813*/
				var _14 = $get($1.lscs, 0); /*14815*/
				var _16 = $get($1.mscs, 0); /*14815*/
				$put($1.out, ($1.k * 5) + 4, (_14 + (_16 * 316)) % 900); /*14816*/
				var _1A = $get($1.lscs, 1); /*14817*/
				var _1C = $get($1.mscs, 0); /*14817*/
				var _1E = $get($1.mscs, 1); /*14817*/
				$put($1.out, ($1.k * 5) + 3, ((((~~((_14 + (_16 * 316)) / 900)) + _1A) + (_1C * 641)) + (_1E * 316)) % 900); /*14818*/
				var _1I = $get($1.lscs, 2); /*14819*/
				var _1K = $get($1.mscs, 0); /*14819*/
				var _1M = $get($1.mscs, 1); /*14819*/
				var _1O = $get($1.mscs, 2); /*14819*/
				$put($1.out, ($1.k * 5) + 2, (((((~~(((((~~((_14 + (_16 * 316)) / 900)) + _1A) + (_1C * 641)) + (_1E * 316)) / 900)) + _1I) + (_1K * 20)) + (_1M * 641)) + (_1O * 316)) % 900); /*14820*/
				var _1S = $get($1.lscs, 3); /*14821*/
				var _1U = $get($1.mscs, 1); /*14821*/
				var _1W = $get($1.mscs, 2); /*14821*/
				$put($1.out, ($1.k * 5) + 1, ((((~~((((((~~(((((~~((_14 + (_16 * 316)) / 900)) + _1A) + (_1C * 641)) + (_1E * 316)) / 900)) + _1I) + (_1K * 20)) + (_1M * 641)) + (_1O * 316)) / 900)) + _1S) + (_1U * 20)) + (_1W * 641)) % 900); /*14822*/
				$put($1.out, $1.k * 5, ((~~(((((~~((((((~~(((((~~((_14 + (_16 * 316)) / 900)) + _1A) + (_1C * 641)) + (_1E * 316)) / 900)) + _1I) + (_1K * 20)) + (_1M * 641)) + (_1O * 316)) / 900)) + _1S) + (_1U * 20)) + (_1W * 641)) / 900)) + ($get($1.mscs, 2) * 20)) % 900); /*14824*/
			} /*14824*/
			$1.rem = $1.inlen % 6; /*14826*/
			if ($1.rem != 0) { //no-else/*14831*/
				$k[$j++] = $1.out; /*14829*/
				$k[$j++] = $1.out.length - $1.rem; /*14829*/
				$k[$j++] = Infinity; /*14829*/
				$aload($geti($1.in, $1.inlen - $1.rem, $1.rem)); /*14829*/
				var _1n = $a(); /*14829*/
				var _1o = $k[--$j]; /*14830*/
				$puti($k[--$j], _1o, _1n); /*14830*/
			} /*14830*/
			$k[$j++] = $1.out; /*14832*/
		}; /*14833*/
		if ($eq($1.encoding, "byte") || $eq($1.encoding, "ccb")) { //no-else/*14840*/
			$1.datcws = $a((((~~($1.barlen / 6)) * 5) + ($1.barlen % 6)) + 1); /*14836*/
			var _1y = (($1.barlen % 6) == 0) ? 924 : 901; /*14837*/
			$put($1.datcws, 0, _1y); /*14837*/
			$k[$j++] = $1.datcws; /*14838*/
			$k[$j++] = 1; /*14838*/
			$k[$j++] = Infinity; /*14838*/
			$forall($1.barcode); /*14838*/
			var _21 = $a(); /*14838*/
			$k[$j++] = _21; /*14838*/
			$1.encb(); /*14838*/
			var _22 = $k[--$j]; /*14838*/
			var _23 = $k[--$j]; /*14838*/
			$puti($k[--$j], _23, _22); /*14838*/
			if ($eq($1.encoding, "ccb")) { //no-else/*14839*/
				$k[$j++] = Infinity; /*14839*/
				$k[$j++] = 920; /*14839*/
				$aload($1.datcws); /*14839*/
				$1.datcws = $a(); /*14839*/
			} /*14839*/
		} /*14839*/
		if ($eq($1.encoding, "auto")) { //no-else/*15285*/
			var _29 = new Map([]); /*14847*/
			$1.fncvals = _29; /*14847*/
			$1.msg = $a($1.barlen); /*14848*/
			$1.i = 0; /*14849*/
			$1.j = 0; /*14849*/
			for (;;) {
				/*14888*/
				if ($1.i == $1.barlen) { //no-else/*14850*/
					break; /*14850*/
				} /*14850*/
				$1.char = $get($1.barcode, $1.i); /*14851*/
				$1.i = $1.i + 1; /*14852*/
				if (($1.parsefnc && ($1.char == 94)) && ($1.i < $1.barlen)) { //no-else/*14885*/
					if ($get($1.barcode, $1.i) != 94) {
						/*14883*/
						if ($1.i >= ($1.barlen - 3)) { //no-else/*14857*/
							$k[$j++] = 'bwipp.truncatedFNC'; /*14856*/
							$k[$j++] = "Function character truncated"; /*14856*/
							$0.raiseerror(); /*14856*/
						} /*14856*/
						var _2T = $geti($1.barcode, $1.i, 4); /*14858*/
						$k[$j++] = _2T; /*14880*/
						if ($ne($geti(_2T, 0, 3), "ECI")) {
							/*14879*/
							var _2V = $k[--$j]; /*14860*/
							var _2X = $get($1.fncvals, _2V) !== undefined; /*14860*/
							$k[$j++] = _2V; /*14864*/
							if (!_2X) { //no-else/*14864*/
								var _2Y = $k[--$j]; /*14861*/
								var _2Z = $s(_2Y.length + 28); /*14861*/
								$puti(_2Z, 28, _2Y); /*14861*/
								$puti(_2Z, 0, "Unknown function character: "); /*14862*/
								$k[$j++] = 'bwipp.unknownFNC'; /*14863*/
								$k[$j++] = _2Z; /*14863*/
								$0.raiseerror(); /*14863*/
							} /*14863*/
							var _2c = $get($1.fncvals, $k[--$j]); /*14865*/
							$1.i = $1.i + 4; /*14866*/
							$k[$j++] = _2c; /*14866*/
						} else {
							/*14879*/
							$j--; /*14868*/
							if ($1.i >= ($1.barlen - 8)) { //no-else/*14871*/
								$k[$j++] = 'bwipp.truncatedECI'; /*14870*/
								$k[$j++] = "ECI truncated"; /*14870*/
								$0.raiseerror(); /*14870*/
							} /*14870*/
							var _2i = $geti($1.barcode, $1.i + 3, 6); /*14872*/
							$k[$j++] = _2i; /*14877*/
							$forall(_2i, function() {
								/*14877*/
								var _2j = $k[--$j]; /*14874*/
								if ((_2j < 48) || (_2j > 57)) { //no-else/*14876*/
									$k[$j++] = 'bwipp.invalidECI'; /*14875*/
									$k[$j++] = "ECI must be 000000 to 999999"; /*14875*/
									$0.raiseerror(); /*14875*/
								} /*14875*/
							}); /*14875*/
							var _2k = $k[--$j]; /*14878*/
							$k[$j++] = 0; /*14878*/
							$forall(_2k, function() {
								/*14878*/
								var _2l = $k[--$j]; /*14878*/
								var _2m = $k[--$j]; /*14878*/
								$k[$j++] = (_2m - (_2l - 48)) * 10; /*14878*/
							}); /*14878*/
							var _2n = $k[--$j]; /*14878*/
							$1.i = $1.i + 9; /*14879*/
							$k[$j++] = (~~(_2n / 10)) - 1000000; /*14879*/
						} /*14879*/
						$1.char = $k[--$j]; /*14881*/
					} else {
						/*14883*/
						$1.i = $1.i + 1; /*14883*/
					} /*14883*/
				} /*14883*/
				$put($1.msg, $1.j, $1.char); /*14886*/
				$1.j = $1.j + 1; /*14887*/
			} /*14887*/
			$1.msg = $geti($1.msg, 0, $1.j); /*14889*/
			$1.msglen = $1.msg.length; /*14890*/
			$1.T = 0; /*14893*/
			$1.N = 1; /*14893*/
			$1.B = 2; /*14893*/
			$1.A = 0; /*14894*/
			$1.L = 1; /*14894*/
			$1.M = 2; /*14894*/
			$1.P = 3; /*14894*/
			$1.tl = -1; /*14897*/
			$1.nl = -2; /*14897*/
			$1.bl = -3; /*14897*/
			$1.bl6 = -4; /*14897*/
			$1.bs = -5; /*14897*/
			$1.al = -6; /*14900*/
			$1.ll = -7; /*14900*/
			$1.ml = -8; /*14900*/
			$1.pl = -9; /*14900*/
			$1.as = -10; /*14900*/
			$1.ps = -11; /*14900*/
			$1.charmaps = $a([$a(["A", "a", "0", ";"]), $a(["B", "b", "1", "<"]), $a(["C", "c", "2", ">"]), $a(["D", "d", "3", "@"]), $a(["E", "e", "4", "["]), $a(["F", "f", "5", 92]), $a(["G", "g", "6", "]"]), $a(["H", "h", "7", "_"]), $a(["I", "i", "8", "`"]), $a(["J", "j", "9", "~"]), $a(["K", "k", "&", "!"]), $a(["L", "l", 13, 13]), $a(["M", "m", 9, 9]), $a(["N", "n", ",", ","]), $a(["O", "o", ":", ":"]), $a(["P", "p", "#", 10]), $a(["Q", "q", "-", "-"]), $a(["R", "r", ".", "."]), $a(["S", "s", "$", "$"]), $a(["T", "t", "/", "/"]), $a(["U", "u", "+", "\""]), $a(["V", "v", "%", "|"]), $a(["W", "w", "*", "*"]), $a(["X", "x", "=", 40]), $a(["Y", "y", "^", 41]), $a(["Z", "z", $1.pl, "?"]), $a([" ", " ", " ", "{"]), $a([$1.ll, $1.as, $1.ll, "}"]), $a([$1.ml, $1.ml, $1.al, "'"]), $a([$1.ps, $1.ps, $1.ps, $1.al])]); /*14935*/
			$1.charvals = $a([new Map, new Map, new Map, new Map]); /*14938*/
			$1.alltext = new Map; /*14939*/
			for (var _3i = 0, _3h = $1.charmaps.length - 1; _3i <= _3h; _3i += 1) {
				/*14949*/
				$1.i = _3i; /*14941*/
				$1.encs = $get($1.charmaps, $1.i); /*14942*/
				for (var _3m = 0; _3m <= 3; _3m += 1) {
					/*14948*/
					$1.j = _3m; /*14944*/
					var _3p = $get($1.encs, $1.j); /*14945*/
					$k[$j++] = _3p; /*14945*/
					if ($eq($type(_3p), 'stringtype')) { //no-else/*14945*/
						var _3s = $get($k[--$j], 0); /*14945*/
						$k[$j++] = _3s; /*14945*/
					} /*14945*/
					var _3t = $k[--$j]; /*14946*/
					$put($get($1.charvals, $1.j), _3t, $1.i); /*14946*/
					$put($1.alltext, _3t, -1); /*14947*/
				} /*14947*/
			} /*14947*/
			$1.e = 10000; /*14951*/
			$1.latlen = $a([$a([0, 1, 1, 2]), $a([2, 0, 1, 2]), $a([1, 1, 0, 1]), $a([1, 2, 2, 0])]); /*14959*/
			$1.latseq = $a([$a([$a([]), $a([$1.ll]), $a([$1.ml]), $a([$1.ml, $1.pl])]), $a([$a([$1.ml, $1.al]), $a([]), $a([$1.ml]), $a([$1.ml, $1.pl])]), $a([$a([$1.al]), $a([$1.ll]), $a([]), $a([$1.pl])]), $a([$a([$1.al]), $a([$1.al, $1.ll]), $a([$1.al, $1.ml]), $a([])])]); /*14967*/
			$1.shftlen = $a([$a([$1.e, $1.e, $1.e, 1]), $a([1, $1.e, $1.e, 1]), $a([$1.e, $1.e, $1.e, 1]), $a([$1.e, $1.e, $1.e, $1.e])]); /*14975*/
			$k[$j++] = Infinity; /*14978*/
			for (var _4y = 0, _4z = $1.msglen; _4y < _4z; _4y++) {
				/*14978*/
				$k[$j++] = 0; /*14978*/
			} /*14978*/
			$k[$j++] = 0; /*14978*/
			$1.numdigits = $a(); /*14978*/
			$k[$j++] = Infinity; /*14979*/
			for (var _52 = 0, _53 = $1.msglen; _52 < _53; _52++) {
				/*14979*/
				$k[$j++] = 0; /*14979*/
			} /*14979*/
			$k[$j++] = 0; /*14979*/
			$1.numtext = $a(); /*14979*/
			$k[$j++] = Infinity; /*14980*/
			for (var _56 = 0, _57 = $1.msglen; _56 < _57; _56++) {
				/*14980*/
				$k[$j++] = 0; /*14980*/
			} /*14980*/
			$k[$j++] = 0; /*14980*/
			$1.numbytes = $a(); /*14980*/
			$k[$j++] = Infinity; /*14981*/
			for (var _5A = 0, _5B = $1.msglen; _5A < _5B; _5A++) {
				/*14981*/
				$k[$j++] = 0; /*14981*/
			} /*14981*/
			$1.iseci = $a(); /*14981*/
			for (var _5E = $1.msglen - 1; _5E >= 0; _5E -= 1) {
				/*14994*/
				$1.i = _5E; /*14983*/
				var _5H = $get($1.msg, $1.i); /*14984*/
				if ((_5H >= 48) && (_5H <= 57)) { //no-else/*14986*/
					$put($1.numdigits, $1.i, $get($1.numdigits, $1.i + 1) + 1); /*14985*/
				} /*14985*/
				var _5R = $get($1.alltext, $get($1.msg, $1.i)) !== undefined; /*14987*/
				if (_5R && ($get($1.numdigits, $1.i) < 13)) { //no-else/*14989*/
					$put($1.numtext, $1.i, $get($1.numtext, $1.i + 1) + 1); /*14988*/
				} /*14988*/
				if ((($get($1.msg, $1.i) >= 0) && ($get($1.numtext, $1.i) < 5)) && ($get($1.numdigits, $1.i) < 13)) { //no-else/*14992*/
					$put($1.numbytes, $1.i, $get($1.numbytes, $1.i + 1) + 1); /*14991*/
				} /*14991*/
				$put($1.iseci, $1.i, $get($1.msg, $1.i) <= -1000000); /*14993*/
			} /*14993*/
			$1.numdigits = $geti($1.numdigits, 0, $1.msglen); /*14995*/
			$1.numtext = $geti($1.numtext, 0, $1.msglen); /*14996*/
			$1.numbytes = $geti($1.numbytes, 0, $1.msglen); /*14997*/
			$1.seq = $a([]); /*14999*/
			$1.seqlen = 0; /*14999*/
			$1.state = $1.B; /*14999*/
			$1.p = 0; /*14999*/
			for (;;) {
				/*15056*/
				if ($1.p == $1.msglen) { //no-else/*15000*/
					break; /*15000*/
				} /*15000*/
				if ($get($1.iseci, $1.p)) {
					/*15054*/
					$k[$j++] = Infinity; /*15004*/
					$aload($1.seq); /*15003*/
					$k[$j++] = $a([$get($1.msg, $1.p)]); /*15004*/
					$1.seq = $a(); /*15004*/
					$1.p = $1.p + 1; /*15006*/
					$1.seqlen = $1.seqlen + 1; /*15007*/
				} else {
					/*15054*/
					$1.n = $get($1.numdigits, $1.p); /*15009*/
					if ($1.n >= 13) {
						/*15054*/
						$k[$j++] = Infinity; /*15015*/
						$aload($1.seq); /*15012*/
						$k[$j++] = $1.nl; /*15014*/
						if ($1.p > 0) { //no-else/*15014*/
							if ($get($1.iseci, $1.p - 1)) { //no-else/*15014*/
								var _6R = $k[--$j]; /*15014*/
								var _6S = $k[--$j]; /*15014*/
								$k[$j++] = _6R; /*15014*/
								$k[$j++] = _6S; /*15014*/
							} /*15014*/
						} /*15014*/
						$k[$j++] = Infinity; /*15015*/
						$aload($geti($1.msg, $1.p, $1.n)); /*15015*/
						var _6X = $a(); /*15015*/
						$k[$j++] = _6X; /*15015*/
						$1.seq = $a(); /*15015*/
						$1.state = $1.N; /*15017*/
						$1.p = $1.p + $1.n; /*15018*/
						$1.seqlen = ($1.seqlen + 1) + $1.n; /*15019*/
					} else {
						/*15054*/
						$1.t = $get($1.numtext, $1.p); /*15021*/
						if ($1.t >= 5) {
							/*15054*/
							$k[$j++] = Infinity; /*15029*/
							$aload($1.seq); /*15024*/
							if ($1.state != $1.T) { //no-else/*15028*/
								$k[$j++] = $1.tl; /*15027*/
								if ($1.p > 0) { //no-else/*15027*/
									if ($get($1.iseci, $1.p - 1)) { //no-else/*15027*/
										var _6q = $k[--$j]; /*15027*/
										var _6r = $k[--$j]; /*15027*/
										$k[$j++] = _6q; /*15027*/
										$k[$j++] = _6r; /*15027*/
									} /*15027*/
								} /*15027*/
							} /*15027*/
							$k[$j++] = Infinity; /*15029*/
							$aload($geti($1.msg, $1.p, $1.t)); /*15029*/
							var _6w = $a(); /*15029*/
							$k[$j++] = _6w; /*15029*/
							$1.seq = $a(); /*15029*/
							$1.state = $1.T; /*15031*/
							$1.p = $1.p + $1.t; /*15032*/
							$1.seqlen = ($1.seqlen + 1) + $1.t; /*15033*/
						} else {
							/*15054*/
							$1.b = $get($1.numbytes, $1.p); /*15035*/
							if (($1.b == 1) && ($1.state == $1.T)) {
								/*15054*/
								$k[$j++] = Infinity; /*15041*/
								$aload($1.seq); /*15038*/
								$k[$j++] = $1.bs; /*15040*/
								if ($1.p > 0) { //no-else/*15040*/
									if ($get($1.iseci, $1.p - 1)) { //no-else/*15040*/
										var _7F = $k[--$j]; /*15040*/
										var _7G = $k[--$j]; /*15040*/
										$k[$j++] = _7F; /*15040*/
										$k[$j++] = _7G; /*15040*/
									} /*15040*/
								} /*15040*/
								$k[$j++] = $a([$get($1.msg, $1.p)]); /*15041*/
								$1.seq = $a(); /*15041*/
								$1.p = $1.p + $1.b; /*15043*/
								$1.seqlen = $1.seqlen + 2; /*15044*/
							} else {
								/*15054*/
								$k[$j++] = Infinity; /*15050*/
								$aload($1.seq); /*15047*/
								var _7R = (($1.b % 6) != 0) ? $1.bl : $1.bl6; /*15048*/
								$k[$j++] = _7R; /*15049*/
								if ($1.p > 0) { //no-else/*15049*/
									if ($get($1.iseci, $1.p - 1)) { //no-else/*15049*/
										var _7W = $k[--$j]; /*15049*/
										var _7X = $k[--$j]; /*15049*/
										$k[$j++] = _7W; /*15049*/
										$k[$j++] = _7X; /*15049*/
									} /*15049*/
								} /*15049*/
								$k[$j++] = Infinity; /*15050*/
								$aload($geti($1.msg, $1.p, $1.b)); /*15050*/
								var _7c = $a(); /*15050*/
								$k[$j++] = _7c; /*15050*/
								$1.seq = $a(); /*15050*/
								$1.state = $1.B; /*15052*/
								$1.p = $1.p + $1.b; /*15053*/
								$1.seqlen = ($1.seqlen + 1) + $1.b; /*15054*/
							} /*15054*/
						} /*15054*/
					} /*15054*/
				} /*15054*/
			} /*15054*/
			$k[$j++] = Infinity; /*15059*/
			$k[$j++] = $1.tl; /*15059*/
			$k[$j++] = 900; /*15059*/
			$k[$j++] = $1.bl; /*15059*/
			$k[$j++] = 901; /*15059*/
			$k[$j++] = $1.bl6; /*15059*/
			$k[$j++] = 924; /*15059*/
			$k[$j++] = $1.nl; /*15059*/
			$k[$j++] = 902; /*15059*/
			$k[$j++] = $1.bs; /*15059*/
			$k[$j++] = 913; /*15059*/
			$1.latchcws = $d(); /*15060*/
			$1.enca = function() {
				var _7t = $get($get($1.charvals, $1.A), $k[--$j]); /*15063*/
				$k[$j++] = _7t; /*15063*/
			}; /*15063*/
			$1.encl = function() {
				var _7y = $get($get($1.charvals, $1.L), $k[--$j]); /*15064*/
				$k[$j++] = _7y; /*15064*/
			}; /*15064*/
			$1.encm = function() {
				var _83 = $get($get($1.charvals, $1.M), $k[--$j]); /*15065*/
				$k[$j++] = _83; /*15065*/
			}; /*15065*/
			$1.encp = function() {
				var _88 = $get($get($1.charvals, $1.P), $k[--$j]); /*15066*/
				$k[$j++] = _88; /*15066*/
			}; /*15066*/
			$1.textencfuncs = $a(['enca', 'encl', 'encm', 'encp']); /*15067*/
			$1.addtotext = function() {
				$put($1.text, $1.l, $k[--$j]); /*15070*/
				$1.l = $1.l + 1; /*15071*/
			}; /*15072*/
			$1.enct = function() {
				$1.in = $k[--$j]; /*15076*/
				$1.curlen = $a([$1.e, $1.e, $1.e, $1.e]); /*15078*/
				$put($1.curlen, $1.submode, 0); /*15079*/
				$1.curseq = $a([$a([]), $a([]), $a([]), $a([])]); /*15080*/
				$forall($1.in, function() {
					/*15150*/
					$1.char = $k[--$j]; /*15085*/
					for (;;) {
						/*15106*/
						$1.imp = false; /*15089*/
						var _8X = $a([$1.A, $1.L, $1.M, $1.P]); /*15090*/
						for (var _8Y = 0, _8Z = _8X.length; _8Y < _8Z; _8Y++) {
							/*15104*/
							$1.x = $get(_8X, _8Y); /*15091*/
							var _8f = $a([$1.A, $1.L, $1.M, $1.P]); /*15092*/
							for (var _8g = 0, _8h = _8f.length; _8g < _8h; _8g++) {
								/*15103*/
								$1.y = $get(_8f, _8g); /*15093*/
								$1.cost = $get($1.curlen, $1.x) + $get($get($1.latlen, $1.x), $1.y); /*15094*/
								if ($1.cost < $get($1.curlen, $1.y)) { //no-else/*15102*/
									$put($1.curlen, $1.y, $1.cost); /*15096*/
									$k[$j++] = $1.curseq; /*15099*/
									$k[$j++] = $1.y; /*15099*/
									$k[$j++] = Infinity; /*15099*/
									$aload($get($1.curseq, $1.x)); /*15098*/
									$aload($get($get($1.latseq, $1.x), $1.y)); /*15099*/
									var _98 = $a(); /*15099*/
									var _99 = $k[--$j]; /*15100*/
									$put($k[--$j], _99, _98); /*15100*/
									$1.imp = true; /*15101*/
								} /*15101*/
							} /*15101*/
						} /*15101*/
						if (!$1.imp) { //no-else/*15105*/
							break; /*15105*/
						} /*15105*/
					} /*15105*/
					$1.nxtlen = $a([$1.e, $1.e, $1.e, $1.e]); /*15109*/
					$1.nxtseq = $a(4); /*15110*/
					var _9M = $a([$1.A, $1.L, $1.M, $1.P]); /*15112*/
					for (var _9N = 0, _9O = _9M.length; _9N < _9O; _9N++) {
						/*15145*/
						$1.x = $get(_9M, _9N); /*15113*/
						for (;;) {
							/*15143*/
							var _9U = $get($get($1.charvals, $1.x), $1.char) !== undefined; /*15117*/
							if (!_9U) { //no-else/*15117*/
								break; /*15117*/
							} /*15117*/
							$1.cost = $get($1.curlen, $1.x) + 1; /*15120*/
							if ($1.cost < $get($1.nxtlen, $1.x)) { //no-else/*15124*/
								$put($1.nxtlen, $1.x, $1.cost); /*15122*/
								$k[$j++] = $1.nxtseq; /*15123*/
								$k[$j++] = $1.x; /*15123*/
								$k[$j++] = Infinity; /*15123*/
								$aload($get($1.curseq, $1.x)); /*15123*/
								$k[$j++] = $1.char; /*15123*/
								var _9l = $a(); /*15123*/
								var _9m = $k[--$j]; /*15123*/
								$put($k[--$j], _9m, _9l); /*15123*/
							} /*15123*/
							var _9s = $a([$1.A, $1.L, $1.M, $1.P]); /*15127*/
							for (var _9t = 0, _9u = _9s.length; _9t < _9u; _9t++) {
								/*15140*/
								$1.y = $get(_9s, _9t); /*15128*/
								if ($ne($1.x, $1.y)) { //no-else/*15139*/
									$1.cost = ($get($1.curlen, $1.y) + $get($get($1.shftlen, $1.y), $1.x)) + 1; /*15130*/
									if ($1.cost < $get($1.nxtlen, $1.y)) { //no-else/*15138*/
										$put($1.nxtlen, $1.y, $1.cost); /*15132*/
										$k[$j++] = $1.nxtseq; /*15136*/
										$k[$j++] = $1.y; /*15136*/
										$k[$j++] = Infinity; /*15136*/
										$aload($get($1.curseq, $1.y)); /*15134*/
										var _AK = ($1.x == $1.A) ? $1.as : $1.ps; /*15135*/
										$k[$j++] = _AK; /*15136*/
										$k[$j++] = $1.char; /*15136*/
										var _AM = $a(); /*15136*/
										var _AN = $k[--$j]; /*15137*/
										$put($k[--$j], _AN, _AM); /*15137*/
									} /*15137*/
								} /*15137*/
							} /*15137*/
							break; /*15142*/
						} /*15142*/
					} /*15142*/
					$1.curlen = $1.nxtlen; /*15147*/
					$1.curseq = $1.nxtseq; /*15148*/
				}); /*15148*/
				$1.minseq = $1.e; /*15153*/
				var _AW = $a([$1.A, $1.L, $1.M, $1.P]); /*15154*/
				for (var _AX = 0, _AY = _AW.length; _AX < _AY; _AX++) {
					/*15160*/
					$1.k = $get(_AW, _AX); /*15155*/
					if ($get($1.curlen, $1.k) < $1.minseq) { //no-else/*15159*/
						$1.minseq = $get($1.curlen, $1.k); /*15157*/
						$1.txtseq = $get($1.curseq, $1.k); /*15158*/
					} /*15158*/
				} /*15158*/
				$1.text = $a($1.minseq); /*15163*/
				$1.k = 0; /*15164*/
				$1.l = 0; /*15164*/
				for (;;) {
					/*15184*/
					if ($1.k >= $1.txtseq.length) { //no-else/*15165*/
						break; /*15165*/
					} /*15165*/
					$1.char = $get($1.txtseq, $1.k); /*15167*/
					$k[$j++] = $1.char; /*15170*/
					if ($1[$get($1.textencfuncs, $1.submode)]() === true) {
						break;
					} /*15170*/
					$1.addtotext(); /*15170*/
					$1.k = $1.k + 1; /*15171*/
					if (($1.char == $1.as) || ($1.char == $1.ps)) { //no-else/*15177*/
						$k[$j++] = $get($1.txtseq, $1.k); /*15175*/
						if ($1.char == $1.as) {
							/*15175*/
							$1.enca(); /*15175*/
						} else {
							/*15175*/
							$1.encp(); /*15175*/
						} /*15175*/
						$1.addtotext(); /*15175*/
						$1.k = $1.k + 1; /*15176*/
					} /*15176*/
					if ($1.char == $1.al) { //no-else/*15180*/
						$1.submode = $1.A; /*15180*/
					} /*15180*/
					if ($1.char == $1.ll) { //no-else/*15181*/
						$1.submode = $1.L; /*15181*/
					} /*15181*/
					if ($1.char == $1.ml) { //no-else/*15182*/
						$1.submode = $1.M; /*15182*/
					} /*15182*/
					if ($1.char == $1.pl) { //no-else/*15183*/
						$1.submode = $1.P; /*15183*/
					} /*15183*/
				} /*15183*/
				if (($1.text.length % 2) == 1) { //no-else/*15194*/
					if ($1.submode == $1.P) {
						/*15191*/
						$k[$j++] = 'pad'; /*15188*/
						$k[$j++] = $1.al; /*15188*/
						$1.encp(); /*15188*/
						var _BN = $k[--$j]; /*15188*/
						$1[$k[--$j]] = _BN; /*15188*/
						$1.submode = $1.A; /*15189*/
					} else {
						/*15191*/
						$k[$j++] = 'pad'; /*15191*/
						$k[$j++] = $1.ps; /*15191*/
						if ($1[$get($1.textencfuncs, $1.submode)]() === true) {
							return true;
						} /*15191*/
						var _BV = $k[--$j]; /*15191*/
						$1[$k[--$j]] = _BV; /*15191*/
					} /*15191*/
					$k[$j++] = Infinity; /*15193*/
					$aload($1.text); /*15193*/
					$k[$j++] = $1.pad; /*15193*/
					$1.text = $a(); /*15193*/
				} /*15193*/
				$1.out = $a(~~($1.text.length / 2)); /*15196*/
				for (var _Be = 0, _Bd = $1.out.length - 1; _Be <= _Bd; _Be += 1) {
					/*15200*/
					$1.k = _Be; /*15198*/
					$put($1.out, $1.k, ($get($1.text, $1.k * 2) * 30) + $get($1.text, ($1.k * 2) + 1)); /*15199*/
				} /*15199*/
				$k[$j++] = $1.out; /*15202*/
			}; /*15204*/
			$1.encn = function() {
				$1.in = $k[--$j]; /*15207*/
				$1.out = $a([]); /*15208*/
				for (var _Bs = 0, _Br = $1.in.length - 1; _Bs <= _Br; _Bs += 44) {
					/*15236*/
					$1.k = _Bs; /*15210*/
					$k[$j++] = Infinity; /*15213*/
					var _Bx = $1.in.length - $1.k; /*15212*/
					$k[$j++] = 1; /*15212*/
					$k[$j++] = $1.in; /*15212*/
					$k[$j++] = $1.k; /*15212*/
					$k[$j++] = _Bx; /*15212*/
					if (_Bx > 44) { //no-else/*15212*/
						$j--; /*15212*/
						$k[$j++] = 44; /*15212*/
					} /*15212*/
					var _By = $k[--$j]; /*15212*/
					var _Bz = $k[--$j]; /*15212*/
					$forall($geti($k[--$j], _Bz, _By), function() {
						/*15213*/
						var _C2 = $k[--$j]; /*15213*/
						$k[$j++] = _C2 - 48; /*15213*/
					}); /*15213*/
					$1.gmod = $a(); /*15213*/
					$1.cwn = $a([]); /*15215*/
					for (;;) {
						/*15234*/
						$1.dv = 900; /*15216*/
						$1.gmul = $a([]); /*15217*/
						$1.val = 0; /*15217*/
						for (;;) {
							/*15229*/
							if ($1.gmod.length == 0) { //no-else/*15218*/
								break; /*15218*/
							} /*15218*/
							$1.val = ($1.val * 10) + $get($1.gmod, 0); /*15219*/
							$1.gmod = $geti($1.gmod, 1, $1.gmod.length - 1); /*15220*/
							if ($1.val < $1.dv) {
								/*15226*/
								if ($1.gmul.length != 0) { //no-else/*15224*/
									$k[$j++] = Infinity; /*15223*/
									$aload($1.gmul); /*15223*/
									$k[$j++] = 0; /*15223*/
									$1.gmul = $a(); /*15223*/
								} /*15223*/
							} else {
								/*15226*/
								$k[$j++] = Infinity; /*15226*/
								$aload($1.gmul); /*15226*/
								$k[$j++] = ~~($1.val / $1.dv); /*15226*/
								$1.gmul = $a(); /*15226*/
							} /*15226*/
							$1.val = $1.val % $1.dv; /*15228*/
						} /*15228*/
						$1.dv = $1.val; /*15230*/
						$k[$j++] = Infinity; /*15231*/
						$k[$j++] = $1.dv; /*15231*/
						$aload($1.cwn); /*15231*/
						$1.cwn = $a(); /*15231*/
						$1.gmod = $1.gmul; /*15232*/
						if ($1.gmul.length == 0) { //no-else/*15233*/
							break; /*15233*/
						} /*15233*/
					} /*15233*/
					$k[$j++] = Infinity; /*15235*/
					$aload($1.out); /*15235*/
					$aload($1.cwn); /*15235*/
					$1.out = $a(); /*15235*/
				} /*15235*/
				$k[$j++] = $1.out; /*15237*/
			}; /*15238*/
			$1.ence = function() {
				var _Ca = (-$get($k[--$j], 0)) - 1000000; /*15242*/
				$k[$j++] = _Ca; /*15250*/
				if (_Ca <= 899) {
					/*15249*/
					var _Cb = $k[--$j]; /*15243*/
					$k[$j++] = 927; /*15243*/
					$k[$j++] = _Cb; /*15243*/
					$astore($a(2)); /*15243*/
				} else {
					/*15249*/
					var _Cd = $k[--$j]; /*15244*/
					$k[$j++] = _Cd; /*15250*/
					if (_Cd <= 810899) {
						/*15249*/
						var _Ce = $k[--$j]; /*15245*/
						$k[$j++] = 926; /*15245*/
						$k[$j++] = (~~(_Ce / 900)) - 1; /*15245*/
						$k[$j++] = _Ce % 900; /*15245*/
						$astore($a(3)); /*15245*/
					} else {
						/*15249*/
						var _Cg = $k[--$j]; /*15246*/
						$k[$j++] = _Cg; /*15250*/
						if (_Cg <= 811799) {
							/*15249*/
							var _Ch = $k[--$j]; /*15247*/
							$k[$j++] = 925; /*15247*/
							$k[$j++] = _Ch - 810900; /*15247*/
							$k[$j++] = $a(2); /*15247*/
						} else {
							/*15249*/
							$k[$j++] = 'bwipp.pdf417badECI'; /*15249*/
							$k[$j++] = "PDF417 supports ECIs 000000 to 811799"; /*15249*/
							$0.raiseerror(); /*15249*/
						} /*15249*/
					} /*15249*/
				} /*15249*/
			}; /*15251*/
			$1.encfuncs = $a(['enct', 'encn', 'encb']); /*15253*/
			$1.addtocws = function() {
				var _Ck = $k[--$j]; /*15256*/
				$puti($1.datcws, $1.j, _Ck); /*15256*/
				$1.j = _Ck.length + $1.j; /*15257*/
			}; /*15258*/
			$1.datcws = $a($1.seqlen); /*15262*/
			$1.i = 0; /*15263*/
			$1.j = 0; /*15263*/
			for (;;) {
				/*15283*/
				if ($1.i >= $1.seq.length) { //no-else/*15264*/
					break; /*15264*/
				} /*15264*/
				$1.chars = $get($1.seq, $1.i); /*15265*/
				if ($eq($type($1.chars), 'arraytype')) {
					/*15279*/
					if ($get($1.chars, 0) <= -1000000) {
						/*15270*/
						$k[$j++] = $1.chars; /*15268*/
						$1.ence(); /*15268*/
						$1.addtocws(); /*15268*/
					} else {
						/*15270*/
						$k[$j++] = $1.chars; /*15270*/
						if ($1[$get($1.encfuncs, $1.state)]() === true) {
							break;
						} /*15270*/
						$1.addtocws(); /*15270*/
					} /*15270*/
				} else {
					/*15279*/
					$k[$j++] = $a([$get($1.latchcws, $1.chars)]); /*15273*/
					$1.addtocws(); /*15273*/
					if ($1.chars == $1.tl) { //no-else/*15274*/
						$1.state = $1.T; /*15274*/
						$1.submode = $1.A; /*15274*/
					} /*15274*/
					if ($1.chars == $1.nl) { //no-else/*15275*/
						$1.state = $1.N; /*15275*/
					} /*15275*/
					if (($1.chars == $1.bl) || ($1.chars == $1.bl6)) { //no-else/*15276*/
						$1.state = $1.B; /*15276*/
					} /*15276*/
					if ($1.chars == $1.bs) { //no-else/*15280*/
						$1.i = $1.i + 1; /*15278*/
						$k[$j++] = $get($1.seq, $1.i); /*15279*/
						$1.encb(); /*15279*/
						$1.addtocws(); /*15279*/
					} /*15279*/
				} /*15279*/
				$1.i = $1.i + 1; /*15282*/
			} /*15282*/
			$1.datcws = $geti($1.datcws, 0, $1.j); /*15284*/
		} /*15284*/
		$1.metrics = $a([$a([1, 11, 7, 1, 0, 9]), $a([1, 14, 7, 8, 0, 8]), $a([1, 17, 7, 36, 0, 36]), $a([1, 20, 8, 19, 0, 19]), $a([1, 24, 8, 9, 0, 17]), $a([1, 28, 8, 25, 0, 33]), $a([2, 8, 8, 1, 0, 1]), $a([2, 11, 9, 1, 0, 9]), $a([2, 14, 9, 8, 0, 8]), $a([2, 17, 10, 36, 0, 36]), $a([2, 20, 11, 19, 0, 19]), $a([2, 23, 13, 9, 0, 17]), $a([2, 26, 15, 27, 0, 35]), $a([3, 6, 12, 1, 1, 1]), $a([3, 8, 14, 7, 7, 7]), $a([3, 10, 16, 15, 15, 15]), $a([3, 12, 18, 25, 25, 25]), $a([3, 15, 21, 37, 37, 37]), $a([3, 20, 26, 1, 17, 33]), $a([3, 26, 32, 1, 9, 17]), $a([3, 32, 38, 21, 29, 37]), $a([3, 38, 44, 15, 31, 47]), $a([3, 44, 50, 1, 25, 49]), $a([4, 4, 8, 47, 19, 43]), $a([4, 6, 12, 1, 1, 1]), $a([4, 8, 14, 7, 7, 7]), $a([4, 10, 16, 15, 15, 15]), $a([4, 12, 18, 25, 25, 25]), $a([4, 15, 21, 37, 37, 37]), $a([4, 20, 26, 1, 17, 33]), $a([4, 26, 32, 1, 9, 17]), $a([4, 32, 38, 21, 29, 37]), $a([4, 38, 44, 15, 31, 47]), $a([4, 44, 50, 1, 25, 49])]); /*15324*/
		$1.ccametrics = $a([$a([2, 5, 4, 39, 0, 19]), $a([2, 6, 4, 1, 0, 33]), $a([2, 7, 5, 32, 0, 12]), $a([2, 8, 5, 8, 0, 40]), $a([2, 9, 6, 14, 0, 46]), $a([2, 10, 6, 43, 0, 23]), $a([2, 12, 7, 20, 0, 52]), $a([3, 4, 4, 11, 43, 23]), $a([3, 5, 5, 1, 33, 13]), $a([3, 6, 6, 5, 37, 17]), $a([3, 7, 7, 15, 47, 27]), $a([3, 8, 7, 21, 1, 33]), $a([4, 3, 4, 40, 20, 52]), $a([4, 4, 5, 43, 23, 3]), $a([4, 5, 6, 46, 26, 6]), $a([4, 6, 7, 34, 14, 46]), $a([4, 7, 8, 29, 9, 41])]); /*15346*/
		if ($1.cca) { //no-else/*15347*/
			$1.metrics = $1.ccametrics; /*15347*/
		} /*15347*/
		$1.urows = $1.rows; /*15350*/
		$1.ucols = $1.columns; /*15351*/
		$1.i = 0; /*15352*/
		for (;;) {
			/*15368*/
			$1.m = $get($1.metrics, $1.i); /*15354*/
			$1.c = $get($1.m, 0); /*15355*/
			$1.r = $get($1.m, 1); /*15356*/
			$1.k = $get($1.m, 2); /*15357*/
			$1.rapl = $get($1.m, 3); /*15358*/
			$1.rapc = $get($1.m, 4); /*15359*/
			$1.rapr = $get($1.m, 5); /*15360*/
			$1.ncws = ($1.r * $1.c) - $1.k; /*15361*/
			$1.okay = true; /*15362*/
			if ($1.datcws.length > $1.ncws) { //no-else/*15363*/
				$1.okay = false; /*15363*/
			} /*15363*/
			if (($1.urows != 0) && ($1.urows != $1.r)) { //no-else/*15364*/
				$1.okay = false; /*15364*/
			} /*15364*/
			if (($1.ucols != 0) && ($1.ucols != $1.c)) { //no-else/*15365*/
				$1.okay = false; /*15365*/
			} /*15365*/
			if ($1.okay) { //no-else/*15366*/
				break; /*15366*/
			} /*15366*/
			$1.i = $1.i + 1; /*15367*/
		} /*15367*/
		$1.m = $1.datcws.length; /*15369*/
		$1.n = ($1.c * $1.r) - $1.k; /*15372*/
		$1.cws = $a(($1.c * $1.r) + 1); /*15373*/
		$puti($1.cws, 0, $1.datcws); /*15374*/
		$k[$j++] = $1.cws; /*15375*/
		$k[$j++] = $1.m; /*15375*/
		$k[$j++] = Infinity; /*15375*/
		for (var _F5 = 0, _F6 = $1.n - $1.m; _F5 < _F6; _F5++) {
			/*15375*/
			$k[$j++] = 900; /*15375*/
		} /*15375*/
		var _F7 = $a(); /*15375*/
		var _F8 = $k[--$j]; /*15375*/
		$puti($k[--$j], _F8, _F7); /*15375*/
		$k[$j++] = $1.cws; /*15376*/
		$k[$j++] = $1.n; /*15376*/
		$k[$j++] = Infinity; /*15376*/
		for (var _FD = 0, _FE = $1.k; _FD < _FE; _FD++) {
			/*15376*/
			$k[$j++] = 0; /*15376*/
		} /*15376*/
		$k[$j++] = 0; /*15376*/
		var _FF = $a(); /*15376*/
		var _FG = $k[--$j]; /*15376*/
		$puti($k[--$j], _FG, _FF); /*15376*/
		$k[$j++] = Infinity; /*15379*/
		$k[$j++] = 1; /*15379*/
		for (var _FI = 0, _FJ = 928; _FI < _FJ; _FI++) {
			/*15379*/
			var _FK = $k[--$j]; /*15379*/
			$k[$j++] = _FK; /*15379*/
			$k[$j++] = (_FK * 3) % 929; /*15379*/
		} /*15379*/
		$1.rsalog = $a(); /*15379*/
		$1.rslog = $a(929); /*15380*/
		for (var _FN = 1; _FN <= 928; _FN += 1) {
			/*15381*/
			$put($1.rslog, $get($1.rsalog, _FN), _FN); /*15381*/
		} /*15381*/
		$1.rsprod = function() {
			var _FR = $k[--$j]; /*15385*/
			var _FS = $k[--$j]; /*15385*/
			$k[$j++] = _FS; /*15389*/
			$k[$j++] = _FR; /*15389*/
			if ((_FR != 0) && (_FS != 0)) {
				/*15388*/
				var _FV = $get($1.rslog, $k[--$j]); /*15386*/
				var _Fa = $get($1.rsalog, (_FV + $get($1.rslog, $k[--$j])) % 928); /*15386*/
				$k[$j++] = _Fa; /*15386*/
			} else {
				/*15388*/
				$j -= 2; /*15388*/
				$k[$j++] = 0; /*15388*/
			} /*15388*/
		}; /*15390*/
		$k[$j++] = Infinity; /*15393*/
		$k[$j++] = 1; /*15393*/
		for (var _Fc = 0, _Fd = $1.k; _Fc < _Fd; _Fc++) {
			/*15393*/
			$k[$j++] = 0; /*15393*/
		} /*15393*/
		$1.coeffs = $a(); /*15393*/
		for (var _Fh = 1, _Fg = $1.k; _Fh <= _Fg; _Fh += 1) {
			/*15402*/
			$1.i = _Fh; /*15395*/
			$put($1.coeffs, $1.i, $get($1.coeffs, $1.i - 1)); /*15396*/
			for (var _Fo = $1.i - 1; _Fo >= 1; _Fo -= 1) {
				/*15400*/
				$1.j = _Fo; /*15398*/
				$k[$j++] = $1.coeffs; /*15399*/
				$k[$j++] = $1.j; /*15399*/
				$k[$j++] = $get($1.coeffs, $1.j - 1); /*15399*/
				$k[$j++] = $get($1.coeffs, $1.j); /*15399*/
				$k[$j++] = $get($1.rsalog, $1.i); /*15399*/
				$1.rsprod(); /*15399*/
				var _G0 = $k[--$j]; /*15399*/
				var _G1 = $k[--$j]; /*15399*/
				var _G2 = $k[--$j]; /*15399*/
				$put($k[--$j], _G2, (_G1 + _G0) % 929); /*15399*/
			} /*15399*/
			$k[$j++] = $1.coeffs; /*15401*/
			$k[$j++] = 0; /*15401*/
			$k[$j++] = $get($1.coeffs, 0); /*15401*/
			$k[$j++] = $get($1.rsalog, $1.i); /*15401*/
			$1.rsprod(); /*15401*/
			var _GA = $k[--$j]; /*15401*/
			var _GB = $k[--$j]; /*15401*/
			$put($k[--$j], _GB, _GA); /*15401*/
		} /*15401*/
		$1.coeffs = $geti($1.coeffs, 0, $1.coeffs.length - 1); /*15403*/
		for (var _GH = $1.coeffs.length - 1; _GH >= 0; _GH -= 2) {
			/*15404*/
			var _GI = $1.coeffs; /*15404*/
			$put(_GI, _GH, 929 - $get(_GI, _GH)); /*15404*/
		} /*15404*/
		for (var _GM = 0, _GL = $1.n - 1; _GM <= _GL; _GM += 1) {
			/*15413*/
			$1.t = ($get($1.cws, _GM) + $get($1.cws, $1.n)) % 929; /*15408*/
			for (var _GU = 0, _GT = $1.k - 1; _GU <= _GT; _GU += 1) {
				/*15412*/
				$1.j = _GU; /*15410*/
				$put($1.cws, $1.n + $1.j, ($get($1.cws, ($1.n + $1.j) + 1) + (929 - (($1.t * $get($1.coeffs, ($1.k - $1.j) - 1)) % 929))) % 929); /*15411*/
			} /*15411*/
		} /*15411*/
		for (var _Gl = $1.n, _Gk = $1.n + $1.k; _Gl <= _Gk; _Gl += 1) {
			/*15414*/
			$put($1.cws, _Gl, (929 - $get($1.cws, _Gl)) % 929); /*15414*/
		} /*15414*/
		$1.cws = $geti($1.cws, 0, $1.cws.length - 1); /*15417*/
		$1.clusters = $a([$a([120256, 125680, 128380, 120032, 125560, 128318, 108736, 119920, 108640, 86080, 108592, 86048, 110016, 120560, 125820, 109792, 120440, 125758, 88256, 109680, 88160, 89536, 110320, 120700, 89312, 110200, 120638, 89200, 110140, 89840, 110460, 89720, 110398, 89980, 128506, 119520, 125304, 128190, 107712, 119408, 125244, 107616, 119352, 84032, 107568, 119324, 84000, 107544, 83984, 108256, 119672, 125374, 85184, 108144, 119612, 85088, 108088, 119582, 85040, 108060, 85728, 108408, 119742, 85616, 108348, 85560, 108318, 85880, 108478, 85820, 85790, 107200, 119152, 125116, 107104, 119096, 125086, 83008, 107056, 119068, 82976, 107032, 82960, 82952, 83648, 107376, 119228, 83552, 107320, 119198, 83504, 107292, 83480, 83468, 83824, 107452, 83768, 107422, 83740, 83900, 106848, 118968, 125022, 82496, 106800, 118940, 82464, 106776, 118926, 82448, 106764, 82440, 106758, 82784, 106936, 119006, 82736, 106908, 82712, 106894, 82700, 82694, 106974, 82830, 82240, 106672, 118876, 82208, 106648, 118862, 82192, 106636, 82184, 106630, 82180, 82352, 82328, 82316, 82080, 118830, 106572, 106566, 82050, 117472, 124280, 127678, 103616, 117360, 124220, 103520, 117304, 124190, 75840, 103472, 75808, 104160, 117624, 124350, 76992, 104048, 117564, 76896, 103992, 76848, 76824, 77536, 104312, 117694, 77424, 104252, 77368, 77340, 77688, 104382, 77628, 77758, 121536, 126320, 128700, 121440, 126264, 128670, 111680, 121392, 126236, 111648, 121368, 126222, 111632, 121356, 103104, 117104, 124092, 112320, 103008, 117048, 124062, 112224, 121656, 126366, 93248, 74784, 102936, 117006, 93216, 112152, 93200, 75456, 103280, 117180, 93888, 75360, 103224, 117150, 93792, 112440, 121758, 93744, 75288, 93720, 75632, 103356, 94064, 75576, 103326, 94008, 112542, 93980, 75708, 94140, 75678, 94110, 121184, 126136, 128606, 111168, 121136, 126108, 111136, 121112, 126094, 111120, 121100, 111112, 111108, 102752, 116920, 123998, 111456, 102704, 116892, 91712, 74272, 121244, 116878, 91680, 74256, 102668, 91664, 111372, 102662, 74244, 74592, 102840, 116958, 92000, 74544, 102812, 91952, 111516, 102798, 91928, 74508, 74502, 74680, 102878, 92088, 74652, 92060, 74638, 92046, 92126, 110912, 121008, 126044, 110880, 120984, 126030, 110864, 120972, 110856, 120966, 110852, 110850, 74048, 102576, 116828, 90944, 74016, 102552, 116814, 90912, 111000, 121038, 90896, 73992, 102534, 90888, 110982, 90884, 74160, 102620, 91056, 74136, 102606, 91032, 111054, 91020, 74118, 91014, 91100, 91086, 110752, 120920, 125998, 110736, 120908, 110728, 120902, 110724, 110722, 73888, 102488, 116782, 90528, 73872, 102476, 90512, 110796, 102470, 90504, 73860, 90500, 73858, 73944, 90584, 90572, 90566, 120876, 120870, 110658, 102444, 73800, 90312, 90308, 90306, 101056, 116080, 123580, 100960, 116024, 70720, 100912, 115996, 70688, 100888, 70672, 70664, 71360, 101232, 116156, 71264, 101176, 116126, 71216, 101148, 71192, 71180, 71536, 101308, 71480, 101278, 71452, 71612, 71582, 118112, 124600, 127838, 105024, 118064, 124572, 104992, 118040, 124558, 104976, 118028, 104968, 118022, 100704, 115896, 123486, 105312, 100656, 115868, 79424, 70176, 118172, 115854, 79392, 105240, 100620, 79376, 70152, 79368, 70496, 100792, 115934, 79712, 70448, 118238, 79664, 105372, 100750, 79640, 70412, 79628, 70584, 100830, 79800, 70556, 79772, 70542, 70622, 79838, 122176, 126640, 128860, 122144, 126616, 128846, 122128, 126604, 122120, 126598, 122116, 104768, 117936, 124508, 113472, 104736, 126684, 124494, 113440, 122264, 126670, 113424, 104712, 117894, 113416, 122246, 104706, 69952, 100528, 115804, 78656, 69920, 100504, 115790, 96064, 78624, 104856, 117966, 96032, 113560, 122318, 100486, 96016, 78600, 104838, 96008, 69890, 70064, 100572, 78768, 70040, 100558, 96176, 78744, 104910, 96152, 113614, 70022, 78726, 70108, 78812, 70094, 96220, 78798, 122016, 126552, 128814, 122000, 126540, 121992, 126534, 121988, 121986, 104608, 117848, 124462, 113056, 104592, 126574, 113040, 122060, 117830, 113032, 104580, 113028, 104578, 113026, 69792, 100440, 115758, 78240, 69776, 100428, 95136, 78224, 104652, 100422, 95120, 113100, 69764, 95112, 78212, 69762, 78210, 69848, 100462, 78296, 69836, 95192, 78284, 69830, 95180, 78278, 69870, 95214, 121936, 126508, 121928, 126502, 121924, 121922, 104528, 117804, 112848, 104520, 117798, 112840, 121958, 112836, 104514, 112834, 69712, 100396, 78032, 69704, 100390, 94672, 78024, 104550, 94664, 112870, 69698, 94660, 78018, 94658, 78060, 94700, 94694, 126486, 121890, 117782, 104484, 104482, 69672, 77928, 94440, 69666, 77922, 99680, 68160, 99632, 68128, 99608, 115342, 68112, 99596, 68104, 99590, 68448, 99768, 115422, 68400, 99740, 68376, 99726, 68364, 68358, 68536, 99806, 68508, 68494, 68574, 101696, 116400, 123740, 101664, 116376, 101648, 116364, 101640, 116358, 101636, 67904, 99504, 115292, 72512, 67872, 116444, 115278, 72480, 101784, 116430, 72464, 67848, 99462, 72456, 101766, 67842, 68016, 99548, 72624, 67992, 99534, 72600, 101838, 72588, 67974, 68060, 72668, 68046, 72654, 118432, 124760, 127918, 118416, 124748, 118408, 124742, 118404, 118402, 101536, 116312, 105888, 101520, 116300, 105872, 118476, 116294, 105864, 101508, 105860, 101506, 105858, 67744, 99416, 72096, 67728, 116334, 80800, 72080, 101580, 99398, 80784, 105932, 67716, 80776, 72068, 67714, 72066, 67800, 99438, 72152, 67788, 80856, 72140, 67782, 80844, 72134, 67822, 72174, 80878, 126800, 128940, 126792, 128934, 126788, 126786, 118352, 124716, 122576, 126828, 124710, 122568, 126822, 122564, 118338, 122562, 101456, 116268, 105680, 101448, 116262, 114128, 105672, 118374, 114120, 122598, 101442, 114116, 105666, 114114, 67664, 99372, 71888, 67656, 99366, 80336, 71880, 101478, 97232, 80328, 105702, 67650, 97224, 114150, 71874, 97220, 67692, 71916, 67686, 80364, 71910, 97260, 80358, 97254, 126760, 128918, 126756, 126754, 118312, 124694, 122472, 126774, 122468, 118306, 122466, 101416, 116246, 105576, 101412, 113896, 105572, 101410, 113892, 105570, 113890, 67624, 99350, 71784, 101430, 80104, 71780, 67618, 96744, 80100, 71778, 96740, 80098, 96738, 71798, 96758, 126738, 122420, 122418, 105524, 113780, 113778, 71732, 79988, 96500, 96498, 66880, 66848, 98968, 66832, 66824, 66820, 66992, 66968, 66956, 66950, 67036, 67022, 100000, 99984, 115532, 99976, 115526, 99972, 99970, 66720, 98904, 69024, 100056, 98892, 69008, 100044, 69000, 100038, 68996, 66690, 68994, 66776, 98926, 69080, 100078, 69068, 66758, 69062, 66798, 69102, 116560, 116552, 116548, 116546, 99920, 102096, 116588, 115494, 102088, 116582, 102084, 99906, 102082, 66640, 68816, 66632, 98854, 73168, 68808, 66628, 73160, 68804, 66626, 73156, 68802, 66668, 68844, 66662, 73196, 68838, 73190, 124840, 124836, 124834, 116520, 118632, 124854, 118628, 116514, 118626, 99880, 115478, 101992, 116534, 106216, 101988, 99874, 106212, 101986, 106210, 66600, 98838, 68712, 99894, 72936, 68708, 66594, 81384, 72932, 68706, 81380, 72930, 66614, 68726, 72950, 81398, 128980, 128978, 124820, 126900, 124818, 126898, 116500, 118580, 116498, 122740, 118578, 122738, 99860, 101940, 99858, 106100, 101938, 114420]), $a([128352, 129720, 125504, 128304, 129692, 125472, 128280, 129678, 125456, 128268, 125448, 128262, 125444, 125792, 128440, 129758, 120384, 125744, 128412, 120352, 125720, 128398, 120336, 125708, 120328, 125702, 120324, 120672, 125880, 128478, 110144, 120624, 125852, 110112, 120600, 125838, 110096, 120588, 110088, 120582, 110084, 110432, 120760, 125918, 89664, 110384, 120732, 89632, 110360, 120718, 89616, 110348, 89608, 110342, 89952, 110520, 120798, 89904, 110492, 89880, 110478, 89868, 90040, 110558, 90012, 89998, 125248, 128176, 129628, 125216, 128152, 129614, 125200, 128140, 125192, 128134, 125188, 125186, 119616, 125360, 128220, 119584, 125336, 128206, 119568, 125324, 119560, 125318, 119556, 119554, 108352, 119728, 125404, 108320, 119704, 125390, 108304, 119692, 108296, 119686, 108292, 108290, 85824, 108464, 119772, 85792, 108440, 119758, 85776, 108428, 85768, 108422, 85764, 85936, 108508, 85912, 108494, 85900, 85894, 85980, 85966, 125088, 128088, 129582, 125072, 128076, 125064, 128070, 125060, 125058, 119200, 125144, 128110, 119184, 125132, 119176, 125126, 119172, 119170, 107424, 119256, 125166, 107408, 119244, 107400, 119238, 107396, 107394, 83872, 107480, 119278, 83856, 107468, 83848, 107462, 83844, 83842, 83928, 107502, 83916, 83910, 83950, 125008, 128044, 125000, 128038, 124996, 124994, 118992, 125036, 118984, 125030, 118980, 118978, 106960, 119020, 106952, 119014, 106948, 106946, 82896, 106988, 82888, 106982, 82884, 82882, 82924, 82918, 124968, 128022, 124964, 124962, 118888, 124982, 118884, 118882, 106728, 118902, 106724, 106722, 82408, 106742, 82404, 82402, 124948, 124946, 118836, 118834, 106612, 106610, 124224, 127664, 129372, 124192, 127640, 129358, 124176, 127628, 124168, 127622, 124164, 124162, 117568, 124336, 127708, 117536, 124312, 127694, 117520, 124300, 117512, 124294, 117508, 117506, 104256, 117680, 124380, 104224, 117656, 124366, 104208, 117644, 104200, 117638, 104196, 104194, 77632, 104368, 117724, 77600, 104344, 117710, 77584, 104332, 77576, 104326, 77572, 77744, 104412, 77720, 104398, 77708, 77702, 77788, 77774, 128672, 129880, 93168, 128656, 129868, 92664, 128648, 129862, 92412, 128644, 128642, 124064, 127576, 129326, 126368, 124048, 129902, 126352, 128716, 127558, 126344, 124036, 126340, 124034, 126338, 117152, 124120, 127598, 121760, 117136, 124108, 121744, 126412, 124102, 121736, 117124, 121732, 117122, 121730, 103328, 117208, 124142, 112544, 103312, 117196, 112528, 121804, 117190, 112520, 103300, 112516, 103298, 112514, 75680, 103384, 117230, 94112, 75664, 103372, 94096, 112588, 103366, 94088, 75652, 94084, 75650, 75736, 103406, 94168, 75724, 94156, 75718, 94150, 75758, 128592, 129836, 91640, 128584, 129830, 91388, 128580, 91262, 128578, 123984, 127532, 126160, 123976, 127526, 126152, 128614, 126148, 123970, 126146, 116944, 124012, 121296, 116936, 124006, 121288, 126182, 121284, 116930, 121282, 102864, 116972, 111568, 102856, 116966, 111560, 121318, 111556, 102850, 111554, 74704, 102892, 92112, 74696, 102886, 92104, 111590, 92100, 74690, 92098, 74732, 92140, 74726, 92134, 128552, 129814, 90876, 128548, 90750, 128546, 123944, 127510, 126056, 128566, 126052, 123938, 126050, 116840, 123958, 121064, 116836, 121060, 116834, 121058, 102632, 116854, 111080, 121078, 111076, 102626, 111074, 74216, 102646, 91112, 74212, 91108, 74210, 91106, 74230, 91126, 128532, 90494, 128530, 123924, 126004, 123922, 126002, 116788, 120948, 116786, 120946, 102516, 110836, 102514, 110834, 73972, 90612, 73970, 90610, 128522, 123914, 125978, 116762, 120890, 102458, 110714, 123552, 127320, 129198, 123536, 127308, 123528, 127302, 123524, 123522, 116128, 123608, 127342, 116112, 123596, 116104, 123590, 116100, 116098, 101280, 116184, 123630, 101264, 116172, 101256, 116166, 101252, 101250, 71584, 101336, 116206, 71568, 101324, 71560, 101318, 71556, 71554, 71640, 101358, 71628, 71622, 71662, 127824, 129452, 79352, 127816, 129446, 79100, 127812, 78974, 127810, 123472, 127276, 124624, 123464, 127270, 124616, 127846, 124612, 123458, 124610, 115920, 123500, 118224, 115912, 123494, 118216, 124646, 118212, 115906, 118210, 100816, 115948, 105424, 100808, 115942, 105416, 118246, 105412, 100802, 105410, 70608, 100844, 79824, 70600, 100838, 79816, 105446, 79812, 70594, 79810, 70636, 79852, 70630, 79846, 129960, 95728, 113404, 129956, 95480, 113278, 129954, 95356, 95294, 127784, 129430, 78588, 128872, 129974, 95996, 78462, 128868, 127778, 95870, 128866, 123432, 127254, 124520, 123428, 126696, 128886, 123426, 126692, 124514, 126690, 115816, 123446, 117992, 115812, 122344, 117988, 115810, 122340, 117986, 122338, 100584, 115830, 104936, 100580, 113640, 104932, 100578, 113636, 104930, 113634, 70120, 100598, 78824, 70116, 96232, 78820, 70114, 96228, 78818, 96226, 70134, 78838, 129940, 94968, 113022, 129938, 94844, 94782, 127764, 78206, 128820, 127762, 95102, 128818, 123412, 124468, 123410, 126580, 124466, 126578, 115764, 117876, 115762, 122100, 117874, 122098, 100468, 104692, 100466, 113140, 104690, 113138, 69876, 78324, 69874, 95220, 78322, 95218, 129930, 94588, 94526, 127754, 128794, 123402, 124442, 126522, 115738, 117818, 121978, 100410, 104570, 112890, 69754, 78074, 94714, 94398, 123216, 127148, 123208, 127142, 123204, 123202, 115408, 123244, 115400, 123238, 115396, 115394, 99792, 115436, 99784, 115430, 99780, 99778, 68560, 99820, 68552, 99814, 68548, 68546, 68588, 68582, 127400, 129238, 72444, 127396, 72318, 127394, 123176, 127126, 123752, 123172, 123748, 123170, 123746, 115304, 123190, 116456, 115300, 116452, 115298, 116450, 99560, 115318, 101864, 99556, 101860, 99554, 101858, 68072, 99574, 72680, 68068, 72676, 68066, 72674, 68086, 72694, 129492, 80632, 105854, 129490, 80508, 80446, 127380, 72062, 127924, 127378, 80766, 127922, 123156, 123700, 123154, 124788, 123698, 124786, 115252, 116340, 115250, 118516, 116338, 118514, 99444, 101620, 99442, 105972, 101618, 105970, 67828, 72180, 67826, 80884, 72178, 80882, 97008, 114044, 96888, 113982, 96828, 96798, 129482, 80252, 130010, 97148, 80190, 97086, 127370, 127898, 128954, 123146, 123674, 124730, 126842, 115226, 116282, 118394, 122618, 99386, 101498, 105722, 114170, 67706, 71930, 80378, 96632, 113854, 96572, 96542, 80062, 96702, 96444, 96414, 96350, 123048, 123044, 123042, 115048, 123062, 115044, 115042, 99048, 115062, 99044, 99042, 67048, 99062, 67044, 67042, 67062, 127188, 68990, 127186, 123028, 123316, 123026, 123314, 114996, 115572, 114994, 115570, 98932, 100084, 98930, 100082, 66804, 69108, 66802, 69106, 129258, 73084, 73022, 127178, 127450, 123018, 123290, 123834, 114970, 115514, 116602, 98874, 99962, 102138, 66682, 68858, 73210, 81272, 106174, 81212, 81182, 72894, 81342, 97648, 114364, 97592, 114334, 97564, 97550, 81084, 97724, 81054, 97694, 97464, 114270, 97436, 97422, 80990, 97502, 97372, 97358, 97326, 114868, 114866, 98676, 98674, 66292, 66290, 123098, 114842, 115130, 98618, 99194, 66170, 67322, 69310, 73404, 73374, 81592, 106334, 81564, 81550, 73310, 81630, 97968, 114524, 97944, 114510, 97932, 97926, 81500, 98012, 81486, 97998, 97880, 114478, 97868, 97862, 81454, 97902, 97836, 97830, 69470, 73564, 73550, 81752, 106414, 81740, 81734, 73518, 81774, 81708, 81702]), $a([109536, 120312, 86976, 109040, 120060, 86496, 108792, 119934, 86256, 108668, 86136, 129744, 89056, 110072, 129736, 88560, 109820, 129732, 88312, 109694, 129730, 88188, 128464, 129772, 89592, 128456, 129766, 89340, 128452, 89214, 128450, 125904, 128492, 125896, 128486, 125892, 125890, 120784, 125932, 120776, 125926, 120772, 120770, 110544, 120812, 110536, 120806, 110532, 84928, 108016, 119548, 84448, 107768, 119422, 84208, 107644, 84088, 107582, 84028, 129640, 85488, 108284, 129636, 85240, 108158, 129634, 85116, 85054, 128232, 129654, 85756, 128228, 85630, 128226, 125416, 128246, 125412, 125410, 119784, 125430, 119780, 119778, 108520, 119798, 108516, 108514, 83424, 107256, 119166, 83184, 107132, 83064, 107070, 83004, 82974, 129588, 83704, 107390, 129586, 83580, 83518, 128116, 83838, 128114, 125172, 125170, 119284, 119282, 107508, 107506, 82672, 106876, 82552, 106814, 82492, 82462, 129562, 82812, 82750, 128058, 125050, 119034, 82296, 106686, 82236, 82206, 82366, 82108, 82078, 76736, 103920, 117500, 76256, 103672, 117374, 76016, 103548, 75896, 103486, 75836, 129384, 77296, 104188, 129380, 77048, 104062, 129378, 76924, 76862, 127720, 129398, 77564, 127716, 77438, 127714, 124392, 127734, 124388, 124386, 117736, 124406, 117732, 117730, 104424, 117750, 104420, 104418, 112096, 121592, 126334, 92608, 111856, 121468, 92384, 111736, 121406, 92272, 111676, 92216, 111646, 92188, 75232, 103160, 117118, 93664, 74992, 103036, 93424, 112252, 102974, 93304, 74812, 93244, 74782, 93214, 129332, 75512, 103294, 129908, 129330, 93944, 75388, 129906, 93820, 75326, 93758, 127604, 75646, 128756, 127602, 94078, 128754, 124148, 126452, 124146, 126450, 117236, 121844, 117234, 121842, 103412, 103410, 91584, 111344, 121212, 91360, 111224, 121150, 91248, 111164, 91192, 111134, 91164, 91150, 74480, 102780, 91888, 74360, 102718, 91768, 111422, 91708, 74270, 91678, 129306, 74620, 129850, 92028, 74558, 91966, 127546, 128634, 124026, 126202, 116986, 121338, 102906, 90848, 110968, 121022, 90736, 110908, 90680, 110878, 90652, 90638, 74104, 102590, 91000, 74044, 90940, 74014, 90910, 74174, 91070, 90480, 110780, 90424, 110750, 90396, 90382, 73916, 90556, 73886, 90526, 90296, 110686, 90268, 90254, 73822, 90334, 90204, 90190, 71136, 101112, 116094, 70896, 100988, 70776, 100926, 70716, 70686, 129204, 71416, 101246, 129202, 71292, 71230, 127348, 71550, 127346, 123636, 123634, 116212, 116210, 101364, 101362, 79296, 105200, 118140, 79072, 105080, 118078, 78960, 105020, 78904, 104990, 78876, 78862, 70384, 100732, 79600, 70264, 100670, 79480, 105278, 79420, 70174, 79390, 129178, 70524, 129466, 79740, 70462, 79678, 127290, 127866, 123514, 124666, 115962, 118266, 100858, 113376, 122232, 126654, 95424, 113264, 122172, 95328, 113208, 122142, 95280, 113180, 95256, 113166, 95244, 78560, 104824, 117950, 95968, 78448, 104764, 95856, 113468, 104734, 95800, 78364, 95772, 78350, 95758, 70008, 100542, 78712, 69948, 96120, 78652, 69918, 96060, 78622, 96030, 70078, 78782, 96190, 94912, 113008, 122044, 94816, 112952, 122014, 94768, 112924, 94744, 112910, 94732, 94726, 78192, 104636, 95088, 78136, 104606, 95032, 113054, 95004, 78094, 94990, 69820, 78268, 69790, 95164, 78238, 95134, 94560, 112824, 121950, 94512, 112796, 94488, 112782, 94476, 94470, 78008, 104542, 94648, 77980, 94620, 77966, 94606, 69726, 78046, 94686, 94384, 112732, 94360, 112718, 94348, 94342, 77916, 94428, 77902, 94414, 94296, 112686, 94284, 94278, 77870, 94318, 94252, 94246, 68336, 99708, 68216, 99646, 68156, 68126, 68476, 68414, 127162, 123258, 115450, 99834, 72416, 101752, 116414, 72304, 101692, 72248, 101662, 72220, 72206, 67960, 99518, 72568, 67900, 72508, 67870, 72478, 68030, 72638, 80576, 105840, 118460, 80480, 105784, 118430, 80432, 105756, 80408, 105742, 80396, 80390, 72048, 101564, 80752, 71992, 101534, 80696, 71964, 80668, 71950, 80654, 67772, 72124, 67742, 80828, 72094, 80798, 114016, 122552, 126814, 96832, 113968, 122524, 96800, 113944, 122510, 96784, 113932, 96776, 113926, 96772, 80224, 105656, 118366, 97120, 80176, 105628, 97072, 114076, 105614, 97048, 80140, 97036, 80134, 97030, 71864, 101470, 80312, 71836, 97208, 80284, 71822, 97180, 80270, 97166, 67678, 71902, 80350, 97246, 96576, 113840, 122460, 96544, 113816, 122446, 96528, 113804, 96520, 113798, 96516, 96514, 80048, 105564, 96688, 80024, 105550, 96664, 113870, 96652, 80006, 96646, 71772, 80092, 71758, 96732, 80078, 96718, 96416, 113752, 122414, 96400, 113740, 96392, 113734, 96388, 96386, 79960, 105518, 96472, 79948, 96460, 79942, 96454, 71726, 79982, 96494, 96336, 113708, 96328, 113702, 96324, 96322, 79916, 96364, 79910, 96358, 96296, 113686, 96292, 96290, 79894, 96310, 66936, 99006, 66876, 66846, 67006, 68976, 100028, 68920, 99998, 68892, 68878, 66748, 69052, 66718, 69022, 73056, 102072, 116574, 73008, 102044, 72984, 102030, 72972, 72966, 68792, 99934, 73144, 68764, 73116, 68750, 73102, 66654, 68830, 73182, 81216, 106160, 118620, 81184, 106136, 118606, 81168, 106124, 81160, 106118, 81156, 81154, 72880, 101980, 81328, 72856, 101966, 81304, 106190, 81292, 72838, 81286, 68700, 72924, 68686, 81372, 72910, 81358, 114336, 122712, 126894, 114320, 122700, 114312, 122694, 114308, 114306, 81056, 106072, 118574, 97696, 81040, 106060, 97680, 114380, 106054, 97672, 81028, 97668, 81026, 97666, 72792, 101934, 81112, 72780, 97752, 81100, 72774, 97740, 81094, 97734, 68654, 72814, 81134, 97774, 114256, 122668, 114248, 122662, 114244, 114242, 80976, 106028, 97488, 80968, 106022, 97480, 114278, 97476, 80962, 97474, 72748, 81004, 72742, 97516, 80998, 97510, 114216, 122646, 114212, 114210, 80936, 106006, 97384, 80932, 97380, 80930, 97378, 72726, 80950, 97398, 114196, 114194, 80916, 97332, 80914, 97330, 66236, 66206, 67256, 99166, 67228, 67214, 66142, 67294, 69296, 100188, 69272, 100174, 69260, 69254, 67164, 69340, 67150, 69326, 73376, 102232, 116654, 73360, 102220, 73352, 102214, 73348, 73346, 69208, 100142, 73432, 102254, 73420, 69190, 73414, 67118, 69230, 73454, 106320, 118700, 106312, 118694, 106308, 106306, 73296, 102188, 81616, 106348, 102182, 81608, 73284, 81604, 73282, 81602, 69164, 73324, 69158, 81644, 73318, 81638, 122792, 126934, 122788, 122786, 106280, 118678, 114536, 106276, 114532, 106274, 114530, 73256, 102166, 81512, 73252, 98024, 81508, 73250, 98020, 81506, 98018, 69142, 73270, 81526, 98038, 122772, 122770, 106260, 114484, 106258, 114482, 73236, 81460, 73234, 97908, 81458, 97906, 122762, 106250, 114458, 73226, 81434, 97850, 66396, 66382, 67416, 99246, 67404, 67398, 66350, 67438, 69456, 100268, 69448, 100262, 69444, 69442, 67372, 69484, 67366, 69478, 102312, 116694, 102308, 102306, 69416, 100246, 73576, 102326, 73572, 69410, 73570, 67350, 69430, 73590, 118740, 118738, 102292, 106420, 102290, 106418, 69396, 73524, 69394, 81780, 73522, 81778, 118730, 102282, 106394, 69386, 73498, 81722, 66476, 66470, 67496, 99286, 67492, 67490, 66454, 67510, 100308, 100306, 67476, 69556, 67474, 69554, 116714])]); /*15659*/
		$1.raps = $a([$a([802, 930, 946, 818, 882, 890, 826, 954, 922, 986, 970, 906, 778, 794, 786, 914, 978, 982, 980, 916, 948, 932, 934, 942, 940, 936, 808, 812, 814, 806, 822, 950, 918, 790, 788, 820, 884, 868, 870, 878, 876, 872, 840, 856, 860, 862, 846, 844, 836, 838, 834, 866]), $a([718, 590, 622, 558, 550, 566, 534, 530, 538, 570, 562, 546, 610, 626, 634, 762, 754, 758, 630, 628, 612, 614, 582, 578, 706, 738, 742, 740, 748, 620, 556, 552, 616, 744, 712, 716, 708, 710, 646, 654, 652, 668, 664, 696, 688, 656, 720, 592, 600, 604, 732, 734])]); /*15674*/
		$1.cwtobits = function() {
			var _H1 = $get($1.clusters, $k[--$j]); /*15678*/
			$1.v = $get(_H1, $k[--$j]); /*15678*/
			$k[$j++] = Infinity; /*15679*/
			for (var _H4 = 0, _H5 = 17; _H4 < _H5; _H4++) {
				/*15679*/
				$k[$j++] = 0; /*15679*/
			} /*15679*/
			var _H8 = $cvrs($s(17), $1.v, 2); /*15679*/
			for (var _H9 = 0, _HA = _H8.length; _H9 < _HA; _H9++) {
				/*15679*/
				$k[$j++] = $get(_H8, _H9) - 48; /*15679*/
			} /*15679*/
			var _HC = $a(); /*15679*/
			$k[$j++] = $geti(_HC, _HC.length - 17, 17); /*15680*/
		}; /*15681*/
		$1.raptobits = function() {
			var _HG = $get($1.raps, $k[--$j]); /*15685*/
			$1.v = $get(_HG, $k[--$j]); /*15685*/
			$k[$j++] = Infinity; /*15686*/
			for (var _HJ = 0, _HK = 10; _HJ < _HK; _HJ++) {
				/*15686*/
				$k[$j++] = 0; /*15686*/
			} /*15686*/
			var _HN = $cvrs($s(10), $1.v, 2); /*15686*/
			for (var _HO = 0, _HP = _HN.length; _HO < _HP; _HO++) {
				/*15686*/
				$k[$j++] = $get(_HN, _HO) - 48; /*15686*/
			} /*15686*/
			var _HR = $a(); /*15686*/
			$k[$j++] = $geti(_HR, _HR.length - 10, 10); /*15687*/
		}; /*15688*/
		$1.rwid = $get($a([38, 55, 82, 99]), $1.c - 1); /*15691*/
		if (($1.c == 3) && $1.cca) { //no-else/*15692*/
			$1.rwid = 72; /*15692*/
		} /*15692*/
		$1.pixs = $a($1.rwid * $1.r); /*15693*/
		for (var _Hd = 0, _Hc = $1.r - 1; _Hd <= _Hc; _Hd += 1) {
			/*15731*/
			$1.i = _Hd; /*15696*/
			$1.clst = (($1.i + $1.rapl) - 1) % 3; /*15697*/
			$k[$j++] = $1.pixs; /*15729*/
			$k[$j++] = $1.rwid * $1.i; /*15729*/
			$k[$j++] = Infinity; /*15729*/
			if ($1.c == 1) { //no-else/*15703*/
				$k[$j++] = (($1.i + $1.rapl) - 1) % 52; /*15700*/
				$k[$j++] = 0; /*15700*/
				$1.raptobits(); /*15700*/
				$aload($k[--$j]); /*15700*/
				$k[$j++] = $get($1.cws, $1.i); /*15701*/
				$k[$j++] = $1.clst; /*15701*/
				$1.cwtobits(); /*15701*/
				$aload($k[--$j]); /*15701*/
				$k[$j++] = (($1.i + $1.rapr) - 1) % 52; /*15702*/
				$k[$j++] = 0; /*15702*/
				$1.raptobits(); /*15702*/
				$aload($k[--$j]); /*15702*/
			} /*15702*/
			if ($1.c == 2) { //no-else/*15709*/
				$k[$j++] = (($1.i + $1.rapl) - 1) % 52; /*15705*/
				$k[$j++] = 0; /*15705*/
				$1.raptobits(); /*15705*/
				$aload($k[--$j]); /*15705*/
				$k[$j++] = $get($1.cws, $1.i * 2); /*15706*/
				$k[$j++] = $1.clst; /*15706*/
				$1.cwtobits(); /*15706*/
				$aload($k[--$j]); /*15706*/
				$k[$j++] = $get($1.cws, ($1.i * 2) + 1); /*15707*/
				$k[$j++] = $1.clst; /*15707*/
				$1.cwtobits(); /*15707*/
				$aload($k[--$j]); /*15707*/
				$k[$j++] = (($1.i + $1.rapr) - 1) % 52; /*15708*/
				$k[$j++] = 0; /*15708*/
				$1.raptobits(); /*15708*/
				$aload($k[--$j]); /*15708*/
			} /*15708*/
			if ($1.c == 3) { //no-else/*15719*/
				if (!$1.cca) { //no-else/*15713*/
					$k[$j++] = (($1.i + $1.rapl) - 1) % 52; /*15712*/
					$k[$j++] = 0; /*15712*/
					$1.raptobits(); /*15712*/
					$aload($k[--$j]); /*15712*/
				} /*15712*/
				$k[$j++] = $get($1.cws, $1.i * 3); /*15714*/
				$k[$j++] = $1.clst; /*15714*/
				$1.cwtobits(); /*15714*/
				$aload($k[--$j]); /*15714*/
				$k[$j++] = (($1.i + $1.rapc) - 1) % 52; /*15715*/
				$k[$j++] = 1; /*15715*/
				$1.raptobits(); /*15715*/
				$aload($k[--$j]); /*15715*/
				$k[$j++] = $get($1.cws, ($1.i * 3) + 1); /*15716*/
				$k[$j++] = $1.clst; /*15716*/
				$1.cwtobits(); /*15716*/
				$aload($k[--$j]); /*15716*/
				$k[$j++] = $get($1.cws, ($1.i * 3) + 2); /*15717*/
				$k[$j++] = $1.clst; /*15717*/
				$1.cwtobits(); /*15717*/
				$aload($k[--$j]); /*15717*/
				$k[$j++] = (($1.i + $1.rapr) - 1) % 52; /*15718*/
				$k[$j++] = 0; /*15718*/
				$1.raptobits(); /*15718*/
				$aload($k[--$j]); /*15718*/
			} /*15718*/
			if ($1.c == 4) { //no-else/*15728*/
				$k[$j++] = (($1.i + $1.rapl) - 1) % 52; /*15721*/
				$k[$j++] = 0; /*15721*/
				$1.raptobits(); /*15721*/
				$aload($k[--$j]); /*15721*/
				$k[$j++] = $get($1.cws, $1.i * 4); /*15722*/
				$k[$j++] = $1.clst; /*15722*/
				$1.cwtobits(); /*15722*/
				$aload($k[--$j]); /*15722*/
				$k[$j++] = $get($1.cws, ($1.i * 4) + 1); /*15723*/
				$k[$j++] = $1.clst; /*15723*/
				$1.cwtobits(); /*15723*/
				$aload($k[--$j]); /*15723*/
				$k[$j++] = (($1.i + $1.rapc) - 1) % 52; /*15724*/
				$k[$j++] = 1; /*15724*/
				$1.raptobits(); /*15724*/
				$aload($k[--$j]); /*15724*/
				$k[$j++] = $get($1.cws, ($1.i * 4) + 2); /*15725*/
				$k[$j++] = $1.clst; /*15725*/
				$1.cwtobits(); /*15725*/
				$aload($k[--$j]); /*15725*/
				$k[$j++] = $get($1.cws, ($1.i * 4) + 3); /*15726*/
				$k[$j++] = $1.clst; /*15726*/
				$1.cwtobits(); /*15726*/
				$aload($k[--$j]); /*15726*/
				$k[$j++] = (($1.i + $1.rapr) - 1) % 52; /*15727*/
				$k[$j++] = 0; /*15727*/
				$1.raptobits(); /*15727*/
				$aload($k[--$j]); /*15727*/
			} /*15727*/
			$k[$j++] = 1; /*15729*/
			var _J6 = $a(); /*15729*/
			var _J7 = $k[--$j]; /*15730*/
			$puti($k[--$j], _J7, _J6); /*15730*/
		} /*15730*/
		var _JG = new Map([
			["ren", $0.renmatrix],
			["pixs", $1.pixs],
			["pixx", $1.rwid],
			["pixy", $1.r],
			["height", ($1.r / 72) * $1.rowmult],
			["width", $1.rwid / 72],
			["opt", $1.options]
		]); /*15741*/
		$k[$j++] = _JG; /*15744*/
		if (!$1.dontdraw) { //no-else/*15744*/
			$0.renmatrix(); /*15744*/
		} /*15744*/
	};
	$0.datamatrix = function() {
		var $1 = {}; /*15773*/
		$1.options = $k[--$j]; /*15775*/
		$1.barcode = $k[--$j]; /*15776*/
		$1.dontdraw = false; /*15778*/
		$1.columns = 0; /*15779*/
		$1.rows = 0; /*15780*/
		$1.format = "square"; /*15781*/
		$1.version = "unset"; /*15782*/
		$1.parse = false; /*15783*/
		$1.parsefnc = false; /*15784*/
		$1.encoding = "auto"; /*15785*/
		$1.mailmark = false; /*15786*/
		$1.raw = false; /*15787*/
		$1.dmre = false; /*15788*/
		$1.dindmre = false; /*15789*/
		$1.isodmre = false; /*15790*/
		$forall($1.options, function() {
			/*15801*/
			var _3 = $k[--$j]; /*15801*/
			$1[$k[--$j]] = _3; /*15801*/
		}); /*15801*/
		if ($ne($1.version, "unset")) { //no-else/*15807*/
			$search($1.version, "x"); /*15804*/
			$j--; /*15805*/
			$1.rows = $k[--$j]; /*15805*/
			$j--; /*15806*/
			$1.columns = $k[--$j]; /*15806*/
		} /*15806*/
		$1.columns = ~~$z($1.columns); /*15809*/
		$1.rows = ~~$z($1.rows); /*15810*/
		$1.isodmre = $1.dmre; /*15833*/
		$k[$j++] = Infinity; /*15890*/
		$k[$j++] = $a([10, 10, 1, 1, 5, 1]); /*15866*/
		$k[$j++] = $a([12, 12, 1, 1, 7, 1]); /*15866*/
		$k[$j++] = $a([14, 14, 1, 1, 10, 1]); /*15866*/
		$k[$j++] = $a([16, 16, 1, 1, 12, 1]); /*15866*/
		$k[$j++] = $a([18, 18, 1, 1, 14, 1]); /*15866*/
		$k[$j++] = $a([20, 20, 1, 1, 18, 1]); /*15866*/
		$k[$j++] = $a([22, 22, 1, 1, 20, 1]); /*15866*/
		$k[$j++] = $a([24, 24, 1, 1, 24, 1]); /*15866*/
		$k[$j++] = $a([26, 26, 1, 1, 28, 1]); /*15866*/
		$k[$j++] = $a([32, 32, 2, 2, 36, 1]); /*15866*/
		$k[$j++] = $a([36, 36, 2, 2, 42, 1]); /*15866*/
		$k[$j++] = $a([40, 40, 2, 2, 48, 1]); /*15866*/
		$k[$j++] = $a([44, 44, 2, 2, 56, 1]); /*15866*/
		$k[$j++] = $a([48, 48, 2, 2, 68, 1]); /*15866*/
		$k[$j++] = $a([52, 52, 2, 2, 84, 2]); /*15866*/
		$k[$j++] = $a([64, 64, 4, 4, 112, 2]); /*15866*/
		$k[$j++] = $a([72, 72, 4, 4, 144, 4]); /*15866*/
		$k[$j++] = $a([80, 80, 4, 4, 192, 4]); /*15866*/
		$k[$j++] = $a([88, 88, 4, 4, 224, 4]); /*15866*/
		$k[$j++] = $a([96, 96, 4, 4, 272, 4]); /*15866*/
		$k[$j++] = $a([104, 104, 4, 4, 336, 6]); /*15866*/
		$k[$j++] = $a([120, 120, 6, 6, 408, 6]); /*15866*/
		$k[$j++] = $a([132, 132, 6, 6, 496, 8]); /*15866*/
		$k[$j++] = $a([144, 144, 6, 6, 620, 10]); /*15866*/
		$k[$j++] = $a([8, 18, 1, 1, 7, 1]); /*15866*/
		$k[$j++] = $a([8, 32, 1, 2, 11, 1]); /*15866*/
		if ($1.dindmre || $1.isodmre) { //no-else/*15866*/
			$k[$j++] = $a([8, 48, 1, 2, 15, 1]); /*15866*/
		} /*15866*/
		if ($1.dindmre || $1.isodmre) { //no-else/*15867*/
			$k[$j++] = $a([8, 64, 1, 4, 18, 1]); /*15867*/
		} /*15867*/
		if ($1.isodmre) { //no-else/*15868*/
			$k[$j++] = $a([8, 80, 1, 4, 22, 1]); /*15868*/
		} /*15868*/
		if ($1.isodmre) { //no-else/*15869*/
			$k[$j++] = $a([8, 96, 1, 4, 28, 1]); /*15869*/
		} /*15869*/
		if ($1.isodmre) { //no-else/*15870*/
			$k[$j++] = $a([8, 120, 1, 6, 32, 1]); /*15870*/
		} /*15870*/
		if ($1.isodmre) { //no-else/*15871*/
			$k[$j++] = $a([8, 144, 1, 6, 36, 1]); /*15871*/
		} /*15871*/
		$k[$j++] = $a([12, 26, 1, 1, 14, 1]); /*15874*/
		$k[$j++] = $a([12, 36, 1, 2, 18, 1]); /*15874*/
		if ($1.dindmre || $1.isodmre) { //no-else/*15874*/
			$k[$j++] = $a([12, 64, 1, 4, 27, 1]); /*15874*/
		} /*15874*/
		if ($1.isodmre) { //no-else/*15875*/
			$k[$j++] = $a([12, 88, 1, 4, 36, 1]); /*15875*/
		} /*15875*/
		$k[$j++] = $a([16, 36, 1, 2, 24, 1]); /*15878*/
		$k[$j++] = $a([16, 48, 1, 2, 28, 1]); /*15878*/
		if ($1.dindmre || $1.isodmre) { //no-else/*15878*/
			$k[$j++] = $a([16, 64, 1, 4, 36, 1]); /*15878*/
		} /*15878*/
		if ($1.isodmre) { //no-else/*15879*/
			$k[$j++] = $a([20, 36, 1, 2, 28, 1]); /*15879*/
		} /*15879*/
		if ($1.isodmre) { //no-else/*15880*/
			$k[$j++] = $a([20, 44, 1, 2, 34, 1]); /*15880*/
		} /*15880*/
		if ($1.isodmre) { //no-else/*15881*/
			$k[$j++] = $a([20, 64, 1, 4, 42, 1]); /*15881*/
		} /*15881*/
		if ($1.isodmre) { //no-else/*15882*/
			$k[$j++] = $a([22, 48, 1, 2, 38, 1]); /*15882*/
		} /*15882*/
		if ($1.dindmre) { //no-else/*15883*/
			$k[$j++] = $a([24, 32, 1, 2, 28, 1]); /*15883*/
		} /*15883*/
		if ($1.dindmre) { //no-else/*15884*/
			$k[$j++] = $a([24, 36, 1, 2, 33, 1]); /*15884*/
		} /*15884*/
		if ($1.dindmre || $1.isodmre) { //no-else/*15885*/
			$k[$j++] = $a([24, 48, 1, 2, 41, 1]); /*15885*/
		} /*15885*/
		if ($1.dindmre || $1.isodmre) { //no-else/*15886*/
			$k[$j++] = $a([24, 64, 1, 4, 46, 1]); /*15886*/
		} /*15886*/
		if ($1.dindmre) { //no-else/*15887*/
			$k[$j++] = $a([26, 32, 1, 2, 32, 1]); /*15887*/
		} /*15887*/
		if ($1.dindmre || $1.isodmre) { //no-else/*15888*/
			$k[$j++] = $a([26, 40, 1, 2, 38, 1]); /*15888*/
		} /*15888*/
		if ($1.dindmre || $1.isodmre) { //no-else/*15889*/
			$k[$j++] = $a([26, 48, 1, 2, 42, 1]); /*15889*/
		} /*15889*/
		if ($1.dindmre || $1.isodmre) { //no-else/*15890*/
			$k[$j++] = $a([26, 64, 1, 4, 50, 1]); /*15890*/
		} /*15890*/
		$1.metrics = $a(); /*15890*/
		$1.urows = $1.rows; /*15894*/
		$1.ucols = $1.columns; /*15895*/
		$1.fullcws = $a([]); /*15896*/
		var _1Z = $1.metrics; /*15897*/
		for (var _1a = 0, _1b = _1Z.length; _1a < _1b; _1a++) {
			/*15914*/
			$1.m = $get(_1Z, _1a); /*15898*/
			$1.rows = $get($1.m, 0); /*15899*/
			$1.cols = $get($1.m, 1); /*15900*/
			$1.regh = $get($1.m, 2); /*15901*/
			$1.regv = $get($1.m, 3); /*15902*/
			$1.rscw = $get($1.m, 4); /*15903*/
			$1.rsbl = $get($1.m, 5); /*15904*/
			$1.mrows = $1.rows - (2 * $1.regh); /*15905*/
			$1.mcols = $1.cols - (2 * $1.regv); /*15906*/
			$1.ncws = (~~(($1.mrows * $1.mcols) / 8)) - $1.rscw; /*15907*/
			$1.okay = true; /*15908*/
			if (($1.urows != 0) && ($1.urows != $1.rows)) { //no-else/*15909*/
				$1.okay = false; /*15909*/
			} /*15909*/
			if (($1.ucols != 0) && ($1.ucols != $1.cols)) { //no-else/*15910*/
				$1.okay = false; /*15910*/
			} /*15910*/
			if ($eq($1.format, "square") && $ne($1.rows, $1.cols)) { //no-else/*15911*/
				$1.okay = false; /*15911*/
			} /*15911*/
			if ($eq($1.format, "rectangle") && $eq($1.rows, $1.cols)) { //no-else/*15912*/
				$1.okay = false; /*15912*/
			} /*15912*/
			if ($1.okay) { //no-else/*15913*/
				$k[$j++] = Infinity; /*15913*/
				$aload($1.fullcws); /*15913*/
				$k[$j++] = $1.ncws; /*15913*/
				$1.fullcws = $a(); /*15913*/
			} /*15913*/
		} /*15913*/
		$k[$j++] = Infinity; /*15915*/
		for (var _2C = 0, _2D = 1558; _2C < _2D; _2C++) {
			/*15915*/
			$k[$j++] = 10000; /*15915*/
		} /*15915*/
		$1.numremcws = $a(); /*15915*/
		var _2F = $1.fullcws; /*15916*/
		for (var _2G = 0, _2H = _2F.length; _2G < _2H; _2G++) {
			/*15916*/
			$put($1.numremcws, $get(_2F, _2G) - 1, 1); /*15916*/
		} /*15916*/
		for (var _2K = 1556; _2K >= 0; _2K -= 1) {
			/*15922*/
			$1.i = _2K; /*15918*/
			if ($get($1.numremcws, $1.i) != 1) { //no-else/*15921*/
				$put($1.numremcws, $1.i, $get($1.numremcws, $1.i + 1) + 1); /*15920*/
			} /*15920*/
		} /*15920*/
		if ($1.raw) { //no-else/*15924*/
			$1.encoding = "raw"; /*15924*/
		} /*15924*/
		if ($eq($1.encoding, "raw")) { //no-else/*15937*/
			$1.cws = $a($1.barcode.length); /*15927*/
			$1.i = 0; /*15928*/
			$1.j = 0; /*15928*/
			for (;;) {
				/*15935*/
				if ($1.i == $1.barcode.length) { //no-else/*15930*/
					break; /*15930*/
				} /*15930*/
				$1.cw = ~~$z($geti($1.barcode, $1.i + 1, 3)); /*15931*/
				$put($1.cws, $1.j, $1.cw); /*15932*/
				$1.i = $1.i + 4; /*15933*/
				$1.j = $1.j + 1; /*15934*/
			} /*15934*/
			$1.cws = $geti($1.cws, 0, $1.j); /*15936*/
		} /*15936*/
		if ($eq($1.encoding, "auto")) { //no-else/*16477*/
			$1.mac05comp = false; /*15942*/
			$1.mac06comp = false; /*15943*/
			if ($1.barcode.length >= 9) { //no-else/*15952*/
				var _2n = $geti($1.barcode, 0, 7); /*15945*/
				if ((($eq(_2n, "[)>03605035")) || ($eq(_2n, "[)>03606035"))) && $eq($geti($1.barcode, $1.barcode.length - 2, 2), "036004")) { //no-else/*15951*/
					if ($get($1.barcode, 5) == 53) {
						/*15949*/
						$k[$j++] = 'mac05comp'; /*15949*/
					} else {
						/*15949*/
						$k[$j++] = 'mac06comp'; /*15949*/
					} /*15949*/
					$1[$k[--$j]] = true; /*15949*/
					$1.barcode = $geti($1.barcode, 7, $1.barcode.length - 9); /*15950*/
				} /*15950*/
			} /*15950*/
			$1.barlen = $1.barcode.length; /*15953*/
			$1.fnc1 = -1; /*15956*/
			$1.prog = -2; /*15956*/
			$1.m05 = -3; /*15956*/
			$1.m06 = -4; /*15956*/
			var _30 = new Map([
				["FNC1", $1.fnc1],
				["PROG", $1.prog]
			]); /*15959*/
			$1.fncvals = _30; /*15962*/
			$1.msg = $a($1.barlen); /*15963*/
			$1.i = 0; /*15964*/
			$1.j = 0; /*15964*/
			for (;;) {
				/*16003*/
				if ($1.i == $1.barlen) { //no-else/*15965*/
					break; /*15965*/
				} /*15965*/
				$1.char = $get($1.barcode, $1.i); /*15966*/
				$1.i = $1.i + 1; /*15967*/
				if (($1.parsefnc && ($1.char == 94)) && ($1.i < $1.barlen)) { //no-else/*16000*/
					if ($get($1.barcode, $1.i) != 94) {
						/*15998*/
						if ($1.i >= ($1.barlen - 3)) { //no-else/*15972*/
							$k[$j++] = 'bwipp.truncatedFNC'; /*15971*/
							$k[$j++] = "Function character truncated"; /*15971*/
							$0.raiseerror(); /*15971*/
						} /*15971*/
						var _3K = $geti($1.barcode, $1.i, 4); /*15973*/
						$k[$j++] = _3K; /*15995*/
						if ($ne($geti(_3K, 0, 3), "ECI")) {
							/*15994*/
							var _3M = $k[--$j]; /*15975*/
							var _3O = $get($1.fncvals, _3M) !== undefined; /*15975*/
							$k[$j++] = _3M; /*15979*/
							if (!_3O) { //no-else/*15979*/
								var _3P = $k[--$j]; /*15976*/
								var _3Q = $s(_3P.length + 28); /*15976*/
								$puti(_3Q, 28, _3P); /*15976*/
								$puti(_3Q, 0, "Unknown function character: "); /*15977*/
								$k[$j++] = 'bwipp.unknownFNC'; /*15978*/
								$k[$j++] = _3Q; /*15978*/
								$0.raiseerror(); /*15978*/
							} /*15978*/
							var _3T = $get($1.fncvals, $k[--$j]); /*15980*/
							$1.i = $1.i + 4; /*15981*/
							$k[$j++] = _3T; /*15981*/
						} else {
							/*15994*/
							$j--; /*15983*/
							if ($1.i >= ($1.barlen - 8)) { //no-else/*15986*/
								$k[$j++] = 'bwipp.truncatedECI'; /*15985*/
								$k[$j++] = "ECI truncated"; /*15985*/
								$0.raiseerror(); /*15985*/
							} /*15985*/
							var _3Z = $geti($1.barcode, $1.i + 3, 6); /*15987*/
							$k[$j++] = _3Z; /*15992*/
							$forall(_3Z, function() {
								/*15992*/
								var _3a = $k[--$j]; /*15989*/
								if ((_3a < 48) || (_3a > 57)) { //no-else/*15991*/
									$k[$j++] = 'bwipp.invalidECI'; /*15990*/
									$k[$j++] = "ECI must be 000000 to 999999"; /*15990*/
									$0.raiseerror(); /*15990*/
								} /*15990*/
							}); /*15990*/
							var _3b = $k[--$j]; /*15993*/
							$k[$j++] = 0; /*15993*/
							$forall(_3b, function() {
								/*15993*/
								var _3c = $k[--$j]; /*15993*/
								var _3d = $k[--$j]; /*15993*/
								$k[$j++] = (_3d - (_3c - 48)) * 10; /*15993*/
							}); /*15993*/
							var _3e = $k[--$j]; /*15993*/
							$1.i = $1.i + 9; /*15994*/
							$k[$j++] = (~~(_3e / 10)) - 1000000; /*15994*/
						} /*15994*/
						$1.char = $k[--$j]; /*15996*/
					} else {
						/*15998*/
						$1.i = $1.i + 1; /*15998*/
					} /*15998*/
				} /*15998*/
				$put($1.msg, $1.j, $1.char); /*16001*/
				$1.j = $1.j + 1; /*16002*/
			} /*16002*/
			$1.msg = $geti($1.msg, 0, $1.j); /*16004*/
			$1.msglen = $1.msg.length; /*16005*/
			if ($1.mac05comp) { //no-else/*16008*/
				$k[$j++] = Infinity; /*16008*/
				$k[$j++] = $1.m05; /*16008*/
				$aload($1.msg); /*16008*/
				$1.msg = $a(); /*16008*/
			} /*16008*/
			if ($1.mac06comp) { //no-else/*16009*/
				$k[$j++] = Infinity; /*16009*/
				$k[$j++] = $1.m06; /*16009*/
				$aload($1.msg); /*16009*/
				$1.msg = $a(); /*16009*/
			} /*16009*/
			$1.msglen = $1.msg.length; /*16011*/
			$1.lC = -5; /*16014*/
			$1.lB = -6; /*16014*/
			$1.lX = -7; /*16014*/
			$1.lT = -8; /*16014*/
			$1.lE = -9; /*16014*/
			$1.unl = -10; /*16014*/
			$1.sapp = -11; /*16015*/
			$1.usft = -12; /*16015*/
			$1.sft1 = -13; /*16015*/
			$1.sft2 = -14; /*16015*/
			$1.sft3 = -15; /*16015*/
			$1.eci = -16; /*16015*/
			$1.pad = -17; /*16015*/
			$1.unlcw = 254; /*16016*/
			$k[$j++] = Infinity; /*16025*/
			for (var _3z = 0; _3z <= 128; _3z += 1) {
				/*16019*/
				$k[$j++] = _3z; /*16019*/
				$k[$j++] = _3z + 1; /*16019*/
			} /*16019*/
			$k[$j++] = $1.pad; /*16024*/
			$k[$j++] = 129; /*16024*/
			for (var _41 = 0; _41 <= 99; _41 += 1) {
				/*16024*/
				var _43 = $cvrs($s(2), _41, 10); /*16022*/
				var _45 = $strcpy($s(2), "00"); /*16022*/
				$puti(_45, 2 - _43.length, _43); /*16022*/
				$k[$j++] = _45; /*16023*/
				$k[$j++] = _41 + 130; /*16023*/
			} /*16023*/
			var _4I = $a([$1.lC, $1.lB, $1.fnc1, $1.sapp, $1.prog, $1.usft, $1.m05, $1.m06, $1.lX, $1.lT, $1.lE, $1.eci]); /*16025*/
			$k[$j++] = 229; /*16025*/
			for (var _4J = 0, _4K = _4I.length; _4J < _4K; _4J++) {
				/*16025*/
				var _4N = $k[--$j] + 1; /*16025*/
				$k[$j++] = $get(_4I, _4J); /*16025*/
				$k[$j++] = _4N; /*16025*/
				$k[$j++] = _4N; /*16025*/
			} /*16025*/
			$j--; /*16025*/
			$1.Avals = $d(); /*16026*/
			$k[$j++] = Infinity; /*16028*/
			var _4P = $1.Avals; /*16028*/
			for (var _4U = _4P.size, _4T = _4P.keys(), _4S = 0; _4S < _4U; _4S++) {
				/*16028*/
				var _4Q = _4T.next().value; /*16028*/
				$k[$j++] = _4Q; /*16028*/
				$k[$j++] = _4P.get(_4Q); /*16028*/
				$k[$j++] = Infinity; /*16028*/
				var _4V = $k[--$j]; /*16028*/
				var _4W = $k[--$j]; /*16028*/
				$k[$j++] = _4V; /*16028*/
				$k[$j++] = _4W; /*16028*/
				var _4X = $a(); /*16028*/
				$k[$j++] = _4X; /*16028*/
			} /*16028*/
			$1.Avals = $d(); /*16029*/
			$k[$j++] = Infinity; /*16037*/
			$k[$j++] = $1.sft1; /*16036*/
			$k[$j++] = 0; /*16036*/
			$k[$j++] = $1.sft2; /*16036*/
			$k[$j++] = 1; /*16036*/
			$k[$j++] = $1.sft3; /*16036*/
			$k[$j++] = 2; /*16036*/
			$k[$j++] = 32; /*16036*/
			$k[$j++] = 3; /*16036*/
			for (var _4c = 48; _4c <= 57; _4c += 1) {
				/*16036*/
				$k[$j++] = _4c; /*16036*/
				$k[$j++] = _4c - 44; /*16036*/
			} /*16036*/
			for (var _4d = 65; _4d <= 90; _4d += 1) {
				/*16037*/
				$k[$j++] = _4d; /*16037*/
				$k[$j++] = _4d - 51; /*16037*/
			} /*16037*/
			$1.CNvals = $d(); /*16038*/
			$k[$j++] = Infinity; /*16039*/
			for (var _4f = 0; _4f <= 31; _4f += 1) {
				/*16039*/
				$k[$j++] = _4f; /*16039*/
				$k[$j++] = _4f; /*16039*/
			} /*16039*/
			$1.C1vals = $d(); /*16039*/
			$k[$j++] = Infinity; /*16045*/
			for (var _4h = 33; _4h <= 47; _4h += 1) {
				/*16041*/
				$k[$j++] = _4h; /*16041*/
				$k[$j++] = _4h - 33; /*16041*/
			} /*16041*/
			for (var _4i = 58; _4i <= 64; _4i += 1) {
				/*16042*/
				$k[$j++] = _4i; /*16042*/
				$k[$j++] = _4i - 43; /*16042*/
			} /*16042*/
			for (var _4j = 91; _4j <= 95; _4j += 1) {
				/*16043*/
				$k[$j++] = _4j; /*16043*/
				$k[$j++] = _4j - 69; /*16043*/
			} /*16043*/
			$k[$j++] = $1.fnc1; /*16045*/
			$k[$j++] = 27; /*16045*/
			$k[$j++] = $1.usft; /*16045*/
			$k[$j++] = 30; /*16045*/
			$1.C2vals = $d(); /*16046*/
			$k[$j++] = Infinity; /*16047*/
			for (var _4n = 96; _4n <= 127; _4n += 1) {
				/*16047*/
				$k[$j++] = _4n; /*16047*/
				$k[$j++] = _4n - 96; /*16047*/
			} /*16047*/
			$1.C3vals = $d(); /*16047*/
			$k[$j++] = Infinity; /*16052*/
			var _4p = $1.CNvals; /*16049*/
			for (var _4u = _4p.size, _4t = _4p.keys(), _4s = 0; _4s < _4u; _4s++) {
				/*16049*/
				var _4q = _4t.next().value; /*16049*/
				$k[$j++] = _4q; /*16049*/
				$k[$j++] = _4p.get(_4q); /*16049*/
				$k[$j++] = Infinity; /*16049*/
				var _4v = $k[--$j]; /*16049*/
				var _4w = $k[--$j]; /*16049*/
				$k[$j++] = _4v; /*16049*/
				$k[$j++] = _4w; /*16049*/
				var _4x = $a(); /*16049*/
				$k[$j++] = _4x; /*16049*/
			} /*16049*/
			var _4y = $1.C1vals; /*16050*/
			for (var _53 = _4y.size, _52 = _4y.keys(), _51 = 0; _51 < _53; _51++) {
				/*16050*/
				var _4z = _52.next().value; /*16050*/
				$k[$j++] = _4z; /*16050*/
				$k[$j++] = _4y.get(_4z); /*16050*/
				$k[$j++] = Infinity; /*16050*/
				var _54 = $k[--$j]; /*16050*/
				var _55 = $k[--$j]; /*16050*/
				$k[$j++] = _54; /*16050*/
				$k[$j++] = $get($1.CNvals, $1.sft1); /*16050*/
				$k[$j++] = _55; /*16050*/
				var _59 = $a(); /*16050*/
				$k[$j++] = _59; /*16050*/
			} /*16050*/
			var _5A = $1.C2vals; /*16051*/
			for (var _5F = _5A.size, _5E = _5A.keys(), _5D = 0; _5D < _5F; _5D++) {
				/*16051*/
				var _5B = _5E.next().value; /*16051*/
				$k[$j++] = _5B; /*16051*/
				$k[$j++] = _5A.get(_5B); /*16051*/
				$k[$j++] = Infinity; /*16051*/
				var _5G = $k[--$j]; /*16051*/
				var _5H = $k[--$j]; /*16051*/
				$k[$j++] = _5G; /*16051*/
				$k[$j++] = $get($1.CNvals, $1.sft2); /*16051*/
				$k[$j++] = _5H; /*16051*/
				var _5L = $a(); /*16051*/
				$k[$j++] = _5L; /*16051*/
			} /*16051*/
			var _5M = $1.C3vals; /*16052*/
			for (var _5R = _5M.size, _5Q = _5M.keys(), _5P = 0; _5P < _5R; _5P++) {
				/*16052*/
				var _5N = _5Q.next().value; /*16052*/
				$k[$j++] = _5N; /*16052*/
				$k[$j++] = _5M.get(_5N); /*16052*/
				$k[$j++] = Infinity; /*16052*/
				var _5S = $k[--$j]; /*16052*/
				var _5T = $k[--$j]; /*16052*/
				$k[$j++] = _5S; /*16052*/
				$k[$j++] = $get($1.CNvals, $1.sft3); /*16052*/
				$k[$j++] = _5T; /*16052*/
				var _5X = $a(); /*16052*/
				$k[$j++] = _5X; /*16052*/
			} /*16052*/
			$1.Cvals = $d(); /*16053*/
			$k[$j++] = Infinity; /*16061*/
			$k[$j++] = $1.sft1; /*16060*/
			$k[$j++] = 0; /*16060*/
			$k[$j++] = $1.sft2; /*16060*/
			$k[$j++] = 1; /*16060*/
			$k[$j++] = $1.sft3; /*16060*/
			$k[$j++] = 2; /*16060*/
			$k[$j++] = 32; /*16060*/
			$k[$j++] = 3; /*16060*/
			for (var _5c = 48; _5c <= 57; _5c += 1) {
				/*16060*/
				$k[$j++] = _5c; /*16060*/
				$k[$j++] = _5c - 44; /*16060*/
			} /*16060*/
			for (var _5d = 97; _5d <= 122; _5d += 1) {
				/*16061*/
				$k[$j++] = _5d; /*16061*/
				$k[$j++] = _5d - 83; /*16061*/
			} /*16061*/
			$1.TNvals = $d(); /*16062*/
			$k[$j++] = Infinity; /*16063*/
			for (var _5f = 0; _5f <= 31; _5f += 1) {
				/*16063*/
				$k[$j++] = _5f; /*16063*/
				$k[$j++] = _5f; /*16063*/
			} /*16063*/
			$1.T1vals = $d(); /*16063*/
			$k[$j++] = Infinity; /*16069*/
			for (var _5h = 33; _5h <= 47; _5h += 1) {
				/*16065*/
				$k[$j++] = _5h; /*16065*/
				$k[$j++] = _5h - 33; /*16065*/
			} /*16065*/
			for (var _5i = 58; _5i <= 64; _5i += 1) {
				/*16066*/
				$k[$j++] = _5i; /*16066*/
				$k[$j++] = _5i - 43; /*16066*/
			} /*16066*/
			for (var _5j = 91; _5j <= 95; _5j += 1) {
				/*16067*/
				$k[$j++] = _5j; /*16067*/
				$k[$j++] = _5j - 69; /*16067*/
			} /*16067*/
			$k[$j++] = $1.fnc1; /*16069*/
			$k[$j++] = 27; /*16069*/
			$k[$j++] = $1.usft; /*16069*/
			$k[$j++] = 30; /*16069*/
			$1.T2vals = $d(); /*16070*/
			$k[$j++] = Infinity; /*16074*/
			$k[$j++] = 96; /*16073*/
			$k[$j++] = 0; /*16073*/
			for (var _5n = 65; _5n <= 90; _5n += 1) {
				/*16073*/
				$k[$j++] = _5n; /*16073*/
				$k[$j++] = _5n - 64; /*16073*/
			} /*16073*/
			for (var _5o = 123; _5o <= 127; _5o += 1) {
				/*16074*/
				$k[$j++] = _5o; /*16074*/
				$k[$j++] = _5o - 96; /*16074*/
			} /*16074*/
			$1.T3vals = $d(); /*16075*/
			$k[$j++] = Infinity; /*16080*/
			var _5q = $1.TNvals; /*16077*/
			for (var _5v = _5q.size, _5u = _5q.keys(), _5t = 0; _5t < _5v; _5t++) {
				/*16077*/
				var _5r = _5u.next().value; /*16077*/
				$k[$j++] = _5r; /*16077*/
				$k[$j++] = _5q.get(_5r); /*16077*/
				$k[$j++] = Infinity; /*16077*/
				var _5w = $k[--$j]; /*16077*/
				var _5x = $k[--$j]; /*16077*/
				$k[$j++] = _5w; /*16077*/
				$k[$j++] = _5x; /*16077*/
				var _5y = $a(); /*16077*/
				$k[$j++] = _5y; /*16077*/
			} /*16077*/
			var _5z = $1.T1vals; /*16078*/
			for (var _64 = _5z.size, _63 = _5z.keys(), _62 = 0; _62 < _64; _62++) {
				/*16078*/
				var _60 = _63.next().value; /*16078*/
				$k[$j++] = _60; /*16078*/
				$k[$j++] = _5z.get(_60); /*16078*/
				$k[$j++] = Infinity; /*16078*/
				var _65 = $k[--$j]; /*16078*/
				var _66 = $k[--$j]; /*16078*/
				$k[$j++] = _65; /*16078*/
				$k[$j++] = $get($1.TNvals, $1.sft1); /*16078*/
				$k[$j++] = _66; /*16078*/
				var _6A = $a(); /*16078*/
				$k[$j++] = _6A; /*16078*/
			} /*16078*/
			var _6B = $1.T2vals; /*16079*/
			for (var _6G = _6B.size, _6F = _6B.keys(), _6E = 0; _6E < _6G; _6E++) {
				/*16079*/
				var _6C = _6F.next().value; /*16079*/
				$k[$j++] = _6C; /*16079*/
				$k[$j++] = _6B.get(_6C); /*16079*/
				$k[$j++] = Infinity; /*16079*/
				var _6H = $k[--$j]; /*16079*/
				var _6I = $k[--$j]; /*16079*/
				$k[$j++] = _6H; /*16079*/
				$k[$j++] = $get($1.TNvals, $1.sft2); /*16079*/
				$k[$j++] = _6I; /*16079*/
				var _6M = $a(); /*16079*/
				$k[$j++] = _6M; /*16079*/
			} /*16079*/
			var _6N = $1.T3vals; /*16080*/
			for (var _6S = _6N.size, _6R = _6N.keys(), _6Q = 0; _6Q < _6S; _6Q++) {
				/*16080*/
				var _6O = _6R.next().value; /*16080*/
				$k[$j++] = _6O; /*16080*/
				$k[$j++] = _6N.get(_6O); /*16080*/
				$k[$j++] = Infinity; /*16080*/
				var _6T = $k[--$j]; /*16080*/
				var _6U = $k[--$j]; /*16080*/
				$k[$j++] = _6T; /*16080*/
				$k[$j++] = $get($1.TNvals, $1.sft3); /*16080*/
				$k[$j++] = _6U; /*16080*/
				var _6Y = $a(); /*16080*/
				$k[$j++] = _6Y; /*16080*/
			} /*16080*/
			$1.Tvals = $d(); /*16081*/
			for (var _6a = 128; _6a <= 255; _6a += 1) {
				/*16089*/
				$1.i = _6a; /*16085*/
				$k[$j++] = $1.Avals; /*16086*/
				$k[$j++] = $1.i; /*16086*/
				$k[$j++] = Infinity; /*16086*/
				$aload($get($1.Avals, $1.usft)); /*16086*/
				$aload($get($1.Avals, $1.i - 128)); /*16086*/
				var _6j = $a(); /*16086*/
				var _6k = $k[--$j]; /*16086*/
				$put($k[--$j], _6k, _6j); /*16086*/
				$k[$j++] = $1.Cvals; /*16087*/
				$k[$j++] = $1.i; /*16087*/
				$k[$j++] = Infinity; /*16087*/
				$aload($get($1.Cvals, $1.usft)); /*16087*/
				$aload($get($1.Cvals, $1.i - 128)); /*16087*/
				var _6u = $a(); /*16087*/
				var _6v = $k[--$j]; /*16087*/
				$put($k[--$j], _6v, _6u); /*16087*/
				$k[$j++] = $1.Tvals; /*16088*/
				$k[$j++] = $1.i; /*16088*/
				$k[$j++] = Infinity; /*16088*/
				$aload($get($1.Tvals, $1.usft)); /*16088*/
				$aload($get($1.Tvals, $1.i - 128)); /*16088*/
				var _75 = $a(); /*16088*/
				var _76 = $k[--$j]; /*16088*/
				$put($k[--$j], _76, _75); /*16088*/
			} /*16088*/
			$k[$j++] = Infinity; /*16097*/
			$k[$j++] = 13; /*16096*/
			$k[$j++] = 0; /*16096*/
			$k[$j++] = 42; /*16096*/
			$k[$j++] = 1; /*16096*/
			$k[$j++] = 62; /*16096*/
			$k[$j++] = 2; /*16096*/
			$k[$j++] = 32; /*16096*/
			$k[$j++] = 3; /*16096*/
			for (var _78 = 48; _78 <= 57; _78 += 1) {
				/*16096*/
				$k[$j++] = _78; /*16096*/
				$k[$j++] = _78 - 44; /*16096*/
			} /*16096*/
			for (var _79 = 65; _79 <= 90; _79 += 1) {
				/*16097*/
				$k[$j++] = _79; /*16097*/
				$k[$j++] = _79 - 51; /*16097*/
			} /*16097*/
			$1.Xvals = $d(); /*16098*/
			$k[$j++] = Infinity; /*16100*/
			var _7B = $1.Xvals; /*16100*/
			for (var _7G = _7B.size, _7F = _7B.keys(), _7E = 0; _7E < _7G; _7E++) {
				/*16100*/
				var _7C = _7F.next().value; /*16100*/
				$k[$j++] = _7C; /*16100*/
				$k[$j++] = _7B.get(_7C); /*16100*/
				$k[$j++] = Infinity; /*16100*/
				var _7H = $k[--$j]; /*16100*/
				var _7I = $k[--$j]; /*16100*/
				$k[$j++] = _7H; /*16100*/
				$k[$j++] = _7I; /*16100*/
				var _7J = $a(); /*16100*/
				$k[$j++] = _7J; /*16100*/
			} /*16100*/
			$1.Xvals = $d(); /*16101*/
			$k[$j++] = Infinity; /*16106*/
			for (var _7L = 64; _7L <= 94; _7L += 1) {
				/*16104*/
				$k[$j++] = _7L; /*16104*/
				$k[$j++] = _7L - 64; /*16104*/
			} /*16104*/
			$k[$j++] = $1.unl; /*16106*/
			$k[$j++] = 31; /*16106*/
			for (var _7N = 32; _7N <= 63; _7N += 1) {
				/*16106*/
				$k[$j++] = _7N; /*16106*/
				$k[$j++] = _7N; /*16106*/
			} /*16106*/
			$1.Evals = $d(); /*16107*/
			$k[$j++] = Infinity; /*16109*/
			var _7P = $1.Evals; /*16109*/
			for (var _7U = _7P.size, _7T = _7P.keys(), _7S = 0; _7S < _7U; _7S++) {
				/*16109*/
				var _7Q = _7T.next().value; /*16109*/
				$k[$j++] = _7Q; /*16109*/
				$k[$j++] = _7P.get(_7Q); /*16109*/
				$k[$j++] = Infinity; /*16109*/
				var _7V = $k[--$j]; /*16109*/
				var _7W = $k[--$j]; /*16109*/
				$k[$j++] = _7V; /*16109*/
				$k[$j++] = _7W; /*16109*/
				var _7X = $a(); /*16109*/
				$k[$j++] = _7X; /*16109*/
			} /*16109*/
			$1.Evals = $d(); /*16110*/
			$k[$j++] = Infinity; /*16113*/
			for (var _7Z = 0; _7Z <= 255; _7Z += 1) {
				/*16113*/
				$k[$j++] = _7Z; /*16113*/
				$k[$j++] = _7Z; /*16113*/
			} /*16113*/
			$1.Bvals = $d(); /*16114*/
			$k[$j++] = Infinity; /*16116*/
			var _7b = $1.Bvals; /*16116*/
			for (var _7g = _7b.size, _7f = _7b.keys(), _7e = 0; _7e < _7g; _7e++) {
				/*16116*/
				var _7c = _7f.next().value; /*16116*/
				$k[$j++] = _7c; /*16116*/
				$k[$j++] = _7b.get(_7c); /*16116*/
				$k[$j++] = Infinity; /*16116*/
				var _7h = $k[--$j]; /*16116*/
				var _7i = $k[--$j]; /*16116*/
				$k[$j++] = _7h; /*16116*/
				$k[$j++] = _7i; /*16116*/
				var _7j = $a(); /*16116*/
				$k[$j++] = _7j; /*16116*/
			} /*16116*/
			$1.Bvals = $d(); /*16117*/
			$1.encvals = $a([$1.Avals, $1.Cvals, $1.Tvals, $1.Xvals, $1.Evals, $1.Bvals]); /*16119*/
			$k[$j++] = Infinity; /*16121*/
			for (var _7t = 0, _7u = $1.msglen; _7t < _7u; _7t++) {
				/*16121*/
				$k[$j++] = 0; /*16121*/
			} /*16121*/
			$k[$j++] = 0; /*16121*/
			$1.numD = $a(); /*16121*/
			$k[$j++] = Infinity; /*16122*/
			for (var _7x = 0, _7y = $1.msglen; _7x < _7y; _7x++) {
				/*16122*/
				$k[$j++] = 0; /*16122*/
			} /*16122*/
			$k[$j++] = 9999; /*16122*/
			$1.nextXterm = $a(); /*16122*/
			$k[$j++] = Infinity; /*16123*/
			for (var _81 = 0, _82 = $1.msglen; _81 < _82; _81++) {
				/*16123*/
				$k[$j++] = 0; /*16123*/
			} /*16123*/
			$k[$j++] = 9999; /*16123*/
			$1.nextNonX = $a(); /*16123*/
			$k[$j++] = Infinity; /*16124*/
			for (var _85 = 0, _86 = $1.msglen; _85 < _86; _85++) {
				/*16124*/
				$k[$j++] = false; /*16124*/
			} /*16124*/
			$k[$j++] = false; /*16124*/
			$1.isECI = $a(); /*16124*/
			for (var _89 = $1.msglen - 1; _89 >= 0; _89 -= 1) {
				/*16142*/
				$1.i = _89; /*16126*/
				$1.barchar = $get($1.msg, $1.i); /*16127*/
				if (($1.barchar >= 48) && ($1.barchar <= 57)) { //no-else/*16130*/
					$put($1.numD, $1.i, $get($1.numD, $1.i + 1) + 1); /*16129*/
				} /*16129*/
				if ((($1.barchar == 13) || ($1.barchar == 42)) || ($1.barchar == 62)) {
					/*16134*/
					$put($1.nextXterm, $1.i, 0); /*16132*/
				} else {
					/*16134*/
					$put($1.nextXterm, $1.i, $get($1.nextXterm, $1.i + 1) + 1); /*16134*/
				} /*16134*/
				var _8W = $get($1.Xvals, $1.barchar) !== undefined; /*16136*/
				if (!_8W) {
					/*16139*/
					$put($1.nextNonX, $1.i, 0); /*16137*/
				} else {
					/*16139*/
					$put($1.nextNonX, $1.i, $get($1.nextNonX, $1.i + 1) + 1); /*16139*/
				} /*16139*/
				$put($1.isECI, $1.i, $1.barchar <= -1000000); /*16141*/
			} /*16141*/
			$k[$j++] = Infinity; /*16143*/
			var _8h = $1.nextXterm; /*16143*/
			for (var _8i = 0, _8j = _8h.length; _8i < _8j; _8i++) {
				/*16143*/
				var _8k = $get(_8h, _8i); /*16143*/
				$k[$j++] = _8k; /*16143*/
				if (_8k > 10000) { //no-else/*16143*/
					$j--; /*16143*/
					$k[$j++] = 10000; /*16143*/
				} /*16143*/
			} /*16143*/
			$1.nextXterm = $a(); /*16143*/
			$k[$j++] = Infinity; /*16144*/
			var _8m = $1.nextNonX; /*16144*/
			for (var _8n = 0, _8o = _8m.length; _8n < _8o; _8n++) {
				/*16144*/
				var _8p = $get(_8m, _8n); /*16144*/
				$k[$j++] = _8p; /*16144*/
				if (_8p > 10000) { //no-else/*16144*/
					$j--; /*16144*/
					$k[$j++] = 10000; /*16144*/
				} /*16144*/
			} /*16144*/
			$1.nextNonX = $a(); /*16144*/
			$1.isD = function() {
				$k[$j++] = ($1.char >= 48) && ($1.char <= 57); /*16146*/
			}; /*16146*/
			$1.isC = function() {
				var _8v = $get($1.CNvals, $1.char) !== undefined; /*16147*/
				$k[$j++] = _8v; /*16147*/
			}; /*16147*/
			$1.isT = function() {
				var _8y = $get($1.TNvals, $1.char) !== undefined; /*16148*/
				$k[$j++] = _8y; /*16148*/
			}; /*16148*/
			$1.isX = function() {
				var _91 = $get($1.Xvals, $1.char) !== undefined; /*16149*/
				$k[$j++] = _91; /*16149*/
			}; /*16149*/
			$1.isE = function() {
				var _94 = $get($1.Evals, $1.char) !== undefined; /*16150*/
				$k[$j++] = _94; /*16150*/
			}; /*16150*/
			$1.isEA = function() {
				$k[$j++] = $1.char > 127; /*16151*/
			}; /*16151*/
			$1.isFN = function() {
				$k[$j++] = $1.char < 0; /*16152*/
			}; /*16152*/
			$1.XtermFirst = function() {
				var _97 = $k[--$j]; /*16153*/
				$k[$j++] = $lt($get($1.nextXterm, _97), $get($1.nextNonX, _97)); /*16153*/
			}; /*16153*/
			$1.A = 0; /*16155*/
			$1.C = 1; /*16155*/
			$1.T = 2; /*16155*/
			$1.X = 3; /*16155*/
			$1.E = 4; /*16155*/
			$1.B = 5; /*16155*/
			$1.lookup = function() {
				$1.ac = 1; /*16158*/
				$1.cc = 2; /*16158*/
				$1.tc = 2; /*16158*/
				$1.xc = 2; /*16158*/
				$1.ec = 2; /*16158*/
				$1.bc = 2.25; /*16158*/
				if ($1.mode == $1.A) { //no-else/*16159*/
					$1.ac = 0; /*16159*/
					$1.cc = 1; /*16159*/
					$1.tc = 1; /*16159*/
					$1.xc = 1; /*16159*/
					$1.ec = 1; /*16159*/
					$1.bc = 1.25; /*16159*/
				} /*16159*/
				if ($1.mode == $1.C) { //no-else/*16160*/
					$1.cc = 0; /*16160*/
				} /*16160*/
				if ($1.mode == $1.T) { //no-else/*16161*/
					$1.tc = 0; /*16161*/
				} /*16161*/
				if ($1.mode == $1.X) { //no-else/*16162*/
					$1.xc = 0; /*16162*/
				} /*16162*/
				if ($1.mode == $1.E) { //no-else/*16163*/
					$1.ec = 0; /*16163*/
				} /*16163*/
				if ($1.mode == $1.B) { //no-else/*16164*/
					$1.bc = 0; /*16164*/
				} /*16164*/
				for (var _9O = 0, _9P = 1; _9O < _9P; _9O++) {
					/*16199*/
					if ($get($1.isECI, $1.i)) { //no-else/*16166*/
						$k[$j++] = $1.A; /*16166*/
						break; /*16166*/
					} /*16166*/
					if ($1.mailmark && ($1.i < 45)) { //no-else/*16167*/
						$k[$j++] = $1.C; /*16167*/
						break; /*16167*/
					} /*16167*/
					$1.k = 0; /*16168*/
					for (;;) {
						/*16198*/
						if (($1.i + $1.k) == $1.msglen) { //no-else/*16177*/
							var _9a = $a(['ac', 'cc', 'tc', 'xc', 'ec', 'bc']); /*16170*/
							for (var _9b = 0, _9c = _9a.length; _9b < _9c; _9b++) {
								/*16170*/
								var _9d = $get(_9a, _9b); /*16170*/
								$1[_9d] = Math.ceil($1[_9d]); /*16170*/
							} /*16170*/
							var _9k = $a([$1.cc, $1.tc, $1.xc, $1.ec, $1.bc]); /*16171*/
							$k[$j++] = true; /*16171*/
							for (var _9l = 0, _9m = _9k.length; _9l < _9m; _9l++) {
								/*16171*/
								var _9p = $k[--$j]; /*16171*/
								$k[$j++] = _9p && ($1.ac <= $get(_9k, _9l)); /*16171*/
							} /*16171*/
							if ($k[--$j]) { //no-else/*16171*/
								$k[$j++] = $1.A; /*16171*/
								break; /*16171*/
							} /*16171*/
							var _9x = $a([$1.ac, $1.cc, $1.tc, $1.xc, $1.ec]); /*16172*/
							$k[$j++] = true; /*16172*/
							for (var _9y = 0, _9z = _9x.length; _9y < _9z; _9y++) {
								/*16172*/
								var _A2 = $k[--$j]; /*16172*/
								$k[$j++] = _A2 && ($1.bc < $get(_9x, _9y)); /*16172*/
							} /*16172*/
							if ($k[--$j]) { //no-else/*16172*/
								$k[$j++] = $1.B; /*16172*/
								break; /*16172*/
							} /*16172*/
							var _AA = $a([$1.ac, $1.cc, $1.tc, $1.xc, $1.bc]); /*16173*/
							$k[$j++] = true; /*16173*/
							for (var _AB = 0, _AC = _AA.length; _AB < _AC; _AB++) {
								/*16173*/
								var _AF = $k[--$j]; /*16173*/
								$k[$j++] = _AF && ($1.ec < $get(_AA, _AB)); /*16173*/
							} /*16173*/
							if ($k[--$j]) { //no-else/*16173*/
								$k[$j++] = $1.E; /*16173*/
								break; /*16173*/
							} /*16173*/
							var _AN = $a([$1.ac, $1.cc, $1.xc, $1.ec, $1.bc]); /*16174*/
							$k[$j++] = true; /*16174*/
							for (var _AO = 0, _AP = _AN.length; _AO < _AP; _AO++) {
								/*16174*/
								var _AS = $k[--$j]; /*16174*/
								$k[$j++] = _AS && ($1.tc < $get(_AN, _AO)); /*16174*/
							} /*16174*/
							if ($k[--$j]) { //no-else/*16174*/
								$k[$j++] = $1.T; /*16174*/
								break; /*16174*/
							} /*16174*/
							var _Aa = $a([$1.ac, $1.cc, $1.tc, $1.ec, $1.bc]); /*16175*/
							$k[$j++] = true; /*16175*/
							for (var _Ab = 0, _Ac = _Aa.length; _Ab < _Ac; _Ab++) {
								/*16175*/
								var _Af = $k[--$j]; /*16175*/
								$k[$j++] = _Af && ($1.xc < $get(_Aa, _Ab)); /*16175*/
							} /*16175*/
							if ($k[--$j]) { //no-else/*16175*/
								$k[$j++] = $1.X; /*16175*/
								break; /*16175*/
							} /*16175*/
							$k[$j++] = $1.C; /*16176*/
							break; /*16176*/
						} /*16176*/
						$1.char = $get($1.msg, $1.i + $1.k); /*16178*/
						$k[$j++] = 'ac'; /*16179*/
						$k[$j++] = $1.ac; /*16179*/
						$1.isD(); /*16179*/
						if ($k[--$j]) {
							/*16179*/
							var _Ap = $k[--$j]; /*16179*/
							$k[$j++] = _Ap + (1 / 2); /*16179*/
						} else {
							/*16179*/
							$1.isEA(); /*16179*/
							if ($k[--$j]) {
								/*16179*/
								var _Ar = $k[--$j]; /*16179*/
								$k[$j++] = Math.ceil(_Ar) + 2; /*16179*/
							} else {
								/*16179*/
								var _As = $k[--$j]; /*16179*/
								$k[$j++] = Math.ceil(_As) + 1; /*16179*/
							} /*16179*/
						} /*16179*/
						var _At = $k[--$j]; /*16179*/
						$1[$k[--$j]] = _At; /*16179*/
						$k[$j++] = 'cc'; /*16180*/
						$k[$j++] = $1.cc; /*16180*/
						$1.isC(); /*16180*/
						if ($k[--$j]) {
							/*16180*/
							var _Ax = $k[--$j]; /*16180*/
							$k[$j++] = _Ax + 0.66666667; /*16180*/
						} else {
							/*16180*/
							$1.isEA(); /*16180*/
							if ($k[--$j]) {
								/*16180*/
								var _Az = $k[--$j]; /*16180*/
								$k[$j++] = _Az + 2.66666667; /*16180*/
							} else {
								/*16180*/
								var _B0 = $k[--$j]; /*16180*/
								$k[$j++] = _B0 + 1.33333334; /*16180*/
							} /*16180*/
						} /*16180*/
						var _B1 = $k[--$j]; /*16180*/
						$1[$k[--$j]] = _B1; /*16180*/
						$k[$j++] = 'tc'; /*16181*/
						$k[$j++] = $1.tc; /*16181*/
						$1.isT(); /*16181*/
						if ($k[--$j]) {
							/*16181*/
							var _B5 = $k[--$j]; /*16181*/
							$k[$j++] = _B5 + 0.66666667; /*16181*/
						} else {
							/*16181*/
							$1.isEA(); /*16181*/
							if ($k[--$j]) {
								/*16181*/
								var _B7 = $k[--$j]; /*16181*/
								$k[$j++] = _B7 + 2.66666667; /*16181*/
							} else {
								/*16181*/
								var _B8 = $k[--$j]; /*16181*/
								$k[$j++] = _B8 + 1.33333334; /*16181*/
							} /*16181*/
						} /*16181*/
						var _B9 = $k[--$j]; /*16181*/
						$1[$k[--$j]] = _B9; /*16181*/
						$k[$j++] = 'xc'; /*16182*/
						$k[$j++] = $1.xc; /*16182*/
						$1.isX(); /*16182*/
						if ($k[--$j]) {
							/*16182*/
							var _BD = $k[--$j]; /*16182*/
							$k[$j++] = _BD + 0.66666667; /*16182*/
						} else {
							/*16182*/
							$1.isEA(); /*16182*/
							if ($k[--$j]) {
								/*16182*/
								var _BF = $k[--$j]; /*16182*/
								$k[$j++] = _BF + 4.33333334; /*16182*/
							} else {
								/*16182*/
								var _BG = $k[--$j]; /*16182*/
								$k[$j++] = _BG + 3.33333334; /*16182*/
							} /*16182*/
						} /*16182*/
						var _BH = $k[--$j]; /*16182*/
						$1[$k[--$j]] = _BH; /*16182*/
						$k[$j++] = 'ec'; /*16183*/
						$k[$j++] = $1.ec; /*16183*/
						$1.isE(); /*16183*/
						if ($k[--$j]) {
							/*16183*/
							var _BL = $k[--$j]; /*16183*/
							$k[$j++] = _BL + (3 / 4); /*16183*/
						} else {
							/*16183*/
							$1.isEA(); /*16183*/
							if ($k[--$j]) {
								/*16183*/
								var _BN = $k[--$j]; /*16183*/
								$k[$j++] = _BN + (17 / 4); /*16183*/
							} else {
								/*16183*/
								var _BO = $k[--$j]; /*16183*/
								$k[$j++] = _BO + (13 / 4); /*16183*/
							} /*16183*/
						} /*16183*/
						var _BP = $k[--$j]; /*16183*/
						$1[$k[--$j]] = _BP; /*16183*/
						$k[$j++] = 'bc'; /*16184*/
						$k[$j++] = $1.bc; /*16184*/
						$1.isFN(); /*16184*/
						if ($k[--$j]) {
							/*16184*/
							var _BT = $k[--$j]; /*16184*/
							$k[$j++] = _BT + 4; /*16184*/
						} else {
							/*16184*/
							var _BU = $k[--$j]; /*16184*/
							$k[$j++] = _BU + 1; /*16184*/
						} /*16184*/
						var _BV = $k[--$j]; /*16184*/
						$1[$k[--$j]] = _BV; /*16184*/
						if ($1.k >= 4) { //no-else/*16196*/
							var _Bd = $a([$1.cc, $1.tc, $1.xc, $1.ec, $1.bc]); /*16186*/
							$k[$j++] = true; /*16186*/
							for (var _Be = 0, _Bf = _Bd.length; _Be < _Bf; _Be++) {
								/*16186*/
								var _Bi = $k[--$j]; /*16186*/
								$k[$j++] = _Bi && (($1.ac + 1) <= $get(_Bd, _Be)); /*16186*/
							} /*16186*/
							if ($k[--$j]) { //no-else/*16186*/
								$k[$j++] = $1.A; /*16186*/
								break; /*16186*/
							} /*16186*/
							if (($1.bc + 1) <= $1.ac) { //no-else/*16187*/
								$k[$j++] = $1.B; /*16187*/
								break; /*16187*/
							} /*16187*/
							var _Bs = $a([$1.cc, $1.tc, $1.xc, $1.ec]); /*16188*/
							$k[$j++] = true; /*16188*/
							for (var _Bt = 0, _Bu = _Bs.length; _Bt < _Bu; _Bt++) {
								/*16188*/
								var _Bx = $k[--$j]; /*16188*/
								$k[$j++] = _Bx && (($1.bc + 1) < $get(_Bs, _Bt)); /*16188*/
							} /*16188*/
							if ($k[--$j]) { //no-else/*16188*/
								$k[$j++] = $1.B; /*16188*/
								break; /*16188*/
							} /*16188*/
							var _C5 = $a([$1.ac, $1.cc, $1.tc, $1.xc, $1.bc]); /*16189*/
							$k[$j++] = true; /*16189*/
							for (var _C6 = 0, _C7 = _C5.length; _C6 < _C7; _C6++) {
								/*16189*/
								var _CA = $k[--$j]; /*16189*/
								$k[$j++] = _CA && (($1.ec + 1) < $get(_C5, _C6)); /*16189*/
							} /*16189*/
							if ($k[--$j]) { //no-else/*16189*/
								$k[$j++] = $1.E; /*16189*/
								break; /*16189*/
							} /*16189*/
							var _CI = $a([$1.ac, $1.cc, $1.xc, $1.ec, $1.bc]); /*16190*/
							$k[$j++] = true; /*16190*/
							for (var _CJ = 0, _CK = _CI.length; _CJ < _CK; _CJ++) {
								/*16190*/
								var _CN = $k[--$j]; /*16190*/
								$k[$j++] = _CN && (($1.tc + 1) < $get(_CI, _CJ)); /*16190*/
							} /*16190*/
							if ($k[--$j]) { //no-else/*16190*/
								$k[$j++] = $1.T; /*16190*/
								break; /*16190*/
							} /*16190*/
							var _CV = $a([$1.ac, $1.cc, $1.tc, $1.ec, $1.bc]); /*16191*/
							$k[$j++] = true; /*16191*/
							for (var _CW = 0, _CX = _CV.length; _CW < _CX; _CW++) {
								/*16191*/
								var _Ca = $k[--$j]; /*16191*/
								$k[$j++] = _Ca && (($1.xc + 1) < $get(_CV, _CW)); /*16191*/
							} /*16191*/
							if ($k[--$j]) { //no-else/*16191*/
								$k[$j++] = $1.X; /*16191*/
								break; /*16191*/
							} /*16191*/
							var _Ch = $a([$1.ac, $1.tc, $1.ec, $1.bc]); /*16192*/
							$k[$j++] = true; /*16192*/
							for (var _Ci = 0, _Cj = _Ch.length; _Ci < _Cj; _Ci++) {
								/*16192*/
								var _Cm = $k[--$j]; /*16192*/
								$k[$j++] = _Cm && (($1.cc + 1) < $get(_Ch, _Ci)); /*16192*/
							} /*16192*/
							if ($k[--$j]) { //no-else/*16195*/
								if ($1.cc < $1.xc) { //no-else/*16193*/
									$k[$j++] = $1.C; /*16193*/
									break; /*16193*/
								} /*16193*/
								if ($1.cc == $1.xc) { //no-else/*16194*/
									$k[$j++] = ($1.i + $1.k) + 1; /*16194*/
									$1.XtermFirst(); /*16194*/
									if ($k[--$j]) {
										/*16194*/
										$k[$j++] = $1.X; /*16194*/
										break; /*16194*/
									} else {
										/*16194*/
										$k[$j++] = $1.C; /*16194*/
										break; /*16194*/
									} /*16194*/
								} /*16194*/
							} /*16194*/
						} /*16194*/
						$1.k = $1.k + 1; /*16197*/
					} /*16197*/
				} /*16197*/
			}; /*16200*/
			$1.addtocws = function() {
				var _Cz = $k[--$j]; /*16203*/
				$puti($1.cws, $1.j, _Cz); /*16203*/
				$1.j = _Cz.length + $1.j; /*16204*/
			}; /*16205*/
			$1.ECItocws = function() {
				var _D4 = (-$k[--$j]) - 1000000; /*16209*/
				$k[$j++] = _D4; /*16223*/
				if (_D4 <= 126) {
					/*16222*/
					var _D5 = $k[--$j]; /*16210*/
					$k[$j++] = _D5 + 1; /*16211*/
					$astore($a(1)); /*16211*/
				} else {
					/*16222*/
					var _D7 = $k[--$j]; /*16212*/
					$k[$j++] = _D7; /*16223*/
					if (_D7 <= 16382) {
						/*16222*/
						var _D9 = $k[--$j] - 127; /*16214*/
						$k[$j++] = (~~(_D9 / 254)) + 128; /*16216*/
						$k[$j++] = (_D9 % 254) + 1; /*16216*/
						$astore($a(2)); /*16216*/
					} else {
						/*16222*/
						var _DC = $k[--$j] - 16383; /*16219*/
						$k[$j++] = (~~(_DC / 64516)) + 192; /*16222*/
						$k[$j++] = ((~~(_DC / 254)) % 254) + 1; /*16222*/
						$k[$j++] = (_DC % 254) + 1; /*16222*/
						$astore($a(3)); /*16222*/
					} /*16222*/
				} /*16222*/
			}; /*16224*/
			$1.encA = function() {
				for (var _DE = 0, _DF = 1; _DE < _DF; _DE++) {
					/*16248*/
					if ($get($1.isECI, $1.i)) { //no-else/*16233*/
						$k[$j++] = $get($1.Avals, $1.eci); /*16229*/
						$1.addtocws(); /*16229*/
						$k[$j++] = $get($1.msg, $1.i); /*16230*/
						$1.ECItocws(); /*16230*/
						$1.addtocws(); /*16230*/
						$1.i = $1.i + 1; /*16231*/
						break; /*16232*/
					} /*16232*/
					if ($get($1.numD, $1.i) >= 2) { //no-else/*16238*/
						var _DT = $s(2); /*16235*/
						$put(_DT, 0, $get($1.msg, $1.i)); /*16235*/
						$put(_DT, 1, $get($1.msg, $1.i + 1)); /*16235*/
						$k[$j++] = $get($1.Avals, _DT); /*16235*/
						$1.addtocws(); /*16235*/
						$1.i = $1.i + 2; /*16236*/
						break; /*16237*/
					} /*16237*/
					$k[$j++] = 'newmode'; /*16239*/
					$1.lookup(); /*16239*/
					var _Dd = $k[--$j]; /*16239*/
					$1[$k[--$j]] = _Dd; /*16239*/
					if ($1.newmode != $1.mode) { //no-else/*16244*/
						$k[$j++] = $get($1.Avals, $get($a([-1, $1.lC, $1.lT, $1.lX, $1.lE, $1.lB]), $1.newmode)); /*16241*/
						$1.addtocws(); /*16241*/
						$1.mode = $1.newmode; /*16242*/
						break; /*16243*/
					} /*16243*/
					$k[$j++] = $get($1.Avals, $get($1.msg, $1.i)); /*16245*/
					$1.addtocws(); /*16245*/
					$1.i = $1.i + 1; /*16246*/
					break; /*16247*/
				} /*16247*/
			}; /*16249*/
			$1.CTXvalstocws = function() {
				$1.in = $k[--$j]; /*16252*/
				$k[$j++] = Infinity; /*16253*/
				for (var _E1 = 0, _E0 = $1.in.length - 1; _E1 <= _E0; _E1 += 3) {
					/*16257*/
					$k[$j++] = 0; /*16255*/
					$forall($geti($1.in, _E1, 3), function() {
						/*16255*/
						var _E4 = $k[--$j]; /*16255*/
						var _E5 = $k[--$j]; /*16255*/
						$k[$j++] = (_E5 + _E4) * 40; /*16255*/
					}); /*16255*/
					var _E7 = (~~($k[--$j] / 40)) + 1; /*16256*/
					$k[$j++] = ~~(_E7 / 256); /*16256*/
					$k[$j++] = _E7 % 256; /*16256*/
				} /*16256*/
				$astore($a($counttomark())); /*16258*/
				var _EA = $k[--$j]; /*16258*/
				var _EB = $k[--$j]; /*16258*/
				$k[$j++] = _EA; /*16258*/
			}; /*16259*/
			$1.encCTX = function() {
				$1.p = 0; /*16262*/
				$1.ctxvals = $a(2500); /*16263*/
				$1.done = false; /*16264*/
				for (;;) {
					/*16341*/
					if ($1.i == $1.msglen) { //no-else/*16268*/
						break; /*16268*/
					} /*16268*/
					var _EL = $get($get($1.encvals, $1.mode), $get($1.msg, $1.i)) !== undefined; /*16269*/
					if (!_EL) { //no-else/*16269*/
						break; /*16269*/
					} /*16269*/
					if (($1.p % 3) == 0) { //no-else/*16336*/
						$k[$j++] = 'newmode'; /*16271*/
						$1.lookup(); /*16271*/
						var _EN = $k[--$j]; /*16271*/
						$1[$k[--$j]] = _EN; /*16271*/
						if ($ne($1.newmode, $1.mode)) { //no-else/*16281*/
							$k[$j++] = $geti($1.ctxvals, 0, $1.p); /*16273*/
							$1.CTXvalstocws(); /*16273*/
							$1.addtocws(); /*16273*/
							$k[$j++] = $a([$1.unlcw]); /*16274*/
							$1.addtocws(); /*16274*/
							if ($1.newmode != $1.A) { //no-else/*16277*/
								$k[$j++] = $get($1.Avals, $get($a([-1, $1.lC, $1.lT, $1.lX, $1.lE, $1.lB]), $1.newmode)); /*16276*/
								$1.addtocws(); /*16276*/
							} /*16276*/
							$1.mode = $1.newmode; /*16278*/
							$1.done = true; /*16279*/
							break; /*16280*/
						} /*16280*/
						if (($1.msglen - $1.i) <= 3) { //no-else/*16335*/
							$1.remcws = $get($1.numremcws, $1.j + ((~~($1.p / 3)) * 2)); /*16283*/
							$k[$j++] = Infinity; /*16289*/
							$forall($geti($1.msg, $1.i, $1.msglen - $1.i), function() {
								/*16291*/
								var _Eu = $k[--$j]; /*16286*/
								var _Ey = $get($get($1.encvals, $1.mode), _Eu) !== undefined; /*16286*/
								$k[$j++] = _Eu; /*16290*/
								if (_Ey) {
									/*16289*/
									$aload($get($get($1.encvals, $1.mode), $k[--$j])); /*16287*/
								} else {
									/*16289*/
									$j--; /*16289*/
									$k[$j++] = -1; /*16289*/
									$k[$j++] = -1; /*16289*/
									$k[$j++] = -1; /*16289*/
									$k[$j++] = -1; /*16289*/
								} /*16289*/
							}); /*16289*/
							$1.remvals = $a(); /*16289*/
							if (($1.remcws == 2) && ($1.remvals.length == 3)) { //no-else/*16303*/
								$k[$j++] = Infinity; /*16297*/
								$aload($geti($1.ctxvals, 0, $1.p)); /*16296*/
								$aload($1.remvals); /*16297*/
								var _FB = $a(); /*16297*/
								$k[$j++] = _FB; /*16298*/
								$1.CTXvalstocws(); /*16298*/
								$1.addtocws(); /*16298*/
								$1.mode = $1.A; /*16299*/
								$1.i = $1.msglen; /*16300*/
								$1.done = true; /*16301*/
								break; /*16302*/
							} /*16302*/
							if ((($1.remcws == 2) && ($1.remvals.length == 2)) && ($1.mode != $1.X)) { //no-else/*16315*/
								$k[$j++] = Infinity; /*16309*/
								$aload($geti($1.ctxvals, 0, $1.p)); /*16307*/
								$aload($1.remvals); /*16308*/
								$aload($get($get($1.encvals, $1.mode), $1.sft1)); /*16309*/
								var _FR = $a(); /*16309*/
								$k[$j++] = _FR; /*16310*/
								$1.CTXvalstocws(); /*16310*/
								$1.addtocws(); /*16310*/
								$1.mode = $1.A; /*16311*/
								$1.i = $1.msglen; /*16312*/
								$1.done = true; /*16313*/
								break; /*16314*/
							} /*16314*/
							if (($1.remcws == 2) && ($1.remvals.length == 1)) { //no-else/*16325*/
								$k[$j++] = $geti($1.ctxvals, 0, $1.p); /*16318*/
								$1.CTXvalstocws(); /*16318*/
								$1.addtocws(); /*16318*/
								$k[$j++] = $a([$1.unlcw]); /*16319*/
								$1.addtocws(); /*16319*/
								$k[$j++] = $get($1.Avals, $get($1.msg, $1.i)); /*16320*/
								$1.addtocws(); /*16320*/
								$1.mode = $1.A; /*16321*/
								$1.i = $1.msglen; /*16322*/
								$1.done = true; /*16323*/
								break; /*16324*/
							} /*16324*/
							if (($1.remcws == 1) && ($1.remvals.length == 1)) { //no-else/*16334*/
								$k[$j++] = $geti($1.ctxvals, 0, $1.p); /*16328*/
								$1.CTXvalstocws(); /*16328*/
								$1.addtocws(); /*16328*/
								$k[$j++] = $get($1.Avals, $get($1.msg, $1.i)); /*16329*/
								$1.addtocws(); /*16329*/
								$1.mode = $1.A; /*16330*/
								$1.i = $1.msglen; /*16331*/
								$1.done = true; /*16332*/
								break; /*16333*/
							} /*16333*/
						} /*16333*/
					} /*16333*/
					var _G0 = $get($get($1.encvals, $1.mode), $get($1.msg, $1.i)); /*16337*/
					$puti($1.ctxvals, $1.p, _G0); /*16338*/
					$1.p = _G0.length + $1.p; /*16339*/
					$1.i = $1.i + 1; /*16340*/
				} /*16340*/
				if (!$1.done) { //no-else/*16365*/
					for (;;) {
						/*16349*/
						if (($1.p % 3) == 0) { //no-else/*16346*/
							break; /*16346*/
						} /*16346*/
						$1.i = $1.i - 1; /*16347*/
						$1.p = $1.p - $get($get($1.encvals, $1.mode), $get($1.msg, $1.i)).length; /*16348*/
					} /*16348*/
					$k[$j++] = Infinity; /*16351*/
					$aload($geti($1.ctxvals, 0, $1.p)); /*16351*/
					var _GJ = $a(); /*16351*/
					$k[$j++] = _GJ; /*16352*/
					$1.CTXvalstocws(); /*16352*/
					$1.addtocws(); /*16352*/
					$k[$j++] = $a([$1.unlcw]); /*16353*/
					$1.addtocws(); /*16353*/
					$1.mode = $1.A; /*16354*/
					if (($1.i != $1.msglen) && $nt($get($1.isECI, $1.i))) { //no-else/*16364*/
						if ($get($1.numD, $1.i) >= 2) {
							/*16362*/
							var _GV = $s(2); /*16358*/
							$put(_GV, 0, $get($1.msg, $1.i)); /*16358*/
							$put(_GV, 1, $get($1.msg, $1.i + 1)); /*16358*/
							$k[$j++] = $get($1.Avals, _GV); /*16358*/
							$1.addtocws(); /*16358*/
							$1.i = $1.i + 2; /*16359*/
						} else {
							/*16362*/
							$k[$j++] = $get($1.Avals, $get($1.msg, $1.i)); /*16361*/
							$1.addtocws(); /*16361*/
							$1.i = $1.i + 1; /*16362*/
						} /*16362*/
					} /*16362*/
				} /*16362*/
			}; /*16367*/
			$1.Evalstocws = function() {
				$1.in = $k[--$j]; /*16370*/
				$1.inlen = $1.in.length; /*16371*/
				$1.outlen = ~~(Math.ceil(($1.in.length / 4) * 3)); /*16372*/
				$k[$j++] = Infinity; /*16373*/
				$aload($1.in); /*16373*/
				$k[$j++] = 0; /*16373*/
				$k[$j++] = 0; /*16373*/
				$k[$j++] = 0; /*16373*/
				$1.in = $a(); /*16373*/
				$k[$j++] = Infinity; /*16374*/
				for (var _Gs = 0, _Gr = $1.inlen - 1; _Gs <= _Gr; _Gs += 4) {
					/*16380*/
					$k[$j++] = 0; /*16376*/
					$forall($geti($1.in, _Gs, 4), function() {
						/*16376*/
						var _Gv = $k[--$j]; /*16376*/
						var _Gw = $k[--$j]; /*16376*/
						$k[$j++] = $or(_Gw, _Gv) << 6; /*16376*/
					}); /*16376*/
					var _Gy = $k[--$j] >>> 6; /*16377*/
					$k[$j++] = (_Gy >>> 16) & 255; /*16379*/
					$k[$j++] = (_Gy >>> 8) & 255; /*16379*/
					$k[$j++] = _Gy & 255; /*16379*/
				} /*16379*/
				$astore($a($counttomark())); /*16381*/
				var _H1 = $k[--$j]; /*16381*/
				var _H2 = $k[--$j]; /*16381*/
				$k[$j++] = $geti(_H1, 0, $1.outlen); /*16382*/
			}; /*16383*/
			$1.encE = function() {
				$1.p = 0; /*16386*/
				$1.edifactvals = $a(2100); /*16387*/
				for (;;) {
					/*16416*/
					if ($1.i == $1.msglen) { //no-else/*16391*/
						break; /*16391*/
					} /*16391*/
					var _HC = $get($1.Evals, $get($1.msg, $1.i)) !== undefined; /*16392*/
					if (!_HC) { //no-else/*16392*/
						break; /*16392*/
					} /*16392*/
					if (($1.p % 4) == 0) { //no-else/*16411*/
						if (($1.msglen - $1.i) <= 2) { //no-else/*16409*/
							$1.remcws = $get($1.numremcws, $1.j + ((~~($1.p / 4)) * 3)); /*16395*/
							$k[$j++] = Infinity; /*16398*/
							$forall($geti($1.msg, $1.i, $1.msglen - $1.i), function() {
								/*16399*/
								$aload($get($1.Avals, $k[--$j])); /*16398*/
							}); /*16398*/
							$1.remvals = $a(); /*16398*/
							if ((($1.remcws == 1) || ($1.remcws == 2)) && ($1.remvals.length <= $1.remcws)) { //no-else/*16408*/
								$k[$j++] = $geti($1.edifactvals, 0, $1.p); /*16403*/
								$1.Evalstocws(); /*16403*/
								$1.addtocws(); /*16403*/
								$k[$j++] = $1.remvals; /*16404*/
								$1.addtocws(); /*16404*/
								$1.mode = $1.A; /*16405*/
								$1.i = $1.msglen; /*16406*/
								break; /*16407*/
							} /*16407*/
						} /*16407*/
						$1.lookup(); /*16410*/
						if ($k[--$j] != $1.mode) { //no-else/*16410*/
							break; /*16410*/
						} /*16410*/
					} /*16410*/
					var _Hj = $get($1.Evals, $get($1.msg, $1.i)); /*16412*/
					$puti($1.edifactvals, $1.p, _Hj); /*16413*/
					$1.p = _Hj.length + $1.p; /*16414*/
					$1.i = $1.i + 1; /*16415*/
				} /*16415*/
				if ($1.mode != $1.A) { //no-else/*16438*/
					$1.remcws = $get($1.numremcws, ($1.j + ((~~($1.p / 4)) * 3)) - 1) - 1; /*16420*/
					if (((($1.p % 4) != 0) || ($1.i != $1.msglen)) || ($1.remcws >= 3)) { //no-else/*16425*/
						var _I0 = $get($1.Evals, $1.unl); /*16422*/
						$puti($1.edifactvals, $1.p, _I0); /*16423*/
						$1.p = _I0.length + $1.p; /*16424*/
					} /*16424*/
					$k[$j++] = $geti($1.edifactvals, 0, $1.p); /*16426*/
					$1.Evalstocws(); /*16426*/
					$1.addtocws(); /*16426*/
					$1.mode = $1.A; /*16427*/
					if (($1.i != $1.msglen) && $nt($get($1.isECI, $1.i))) { //no-else/*16437*/
						if ($get($1.numD, $1.i) >= 2) {
							/*16435*/
							var _IG = $s(2); /*16431*/
							$put(_IG, 0, $get($1.msg, $1.i)); /*16431*/
							$put(_IG, 1, $get($1.msg, $1.i + 1)); /*16431*/
							$k[$j++] = $get($1.Avals, _IG); /*16431*/
							$1.addtocws(); /*16431*/
							$1.i = $1.i + 2; /*16432*/
						} else {
							/*16435*/
							$k[$j++] = $get($1.Avals, $get($1.msg, $1.i)); /*16434*/
							$1.addtocws(); /*16434*/
							$1.i = $1.i + 1; /*16435*/
						} /*16435*/
					} /*16435*/
				} /*16435*/
			}; /*16440*/
			$1.encB = function() {
				$1.p = 0; /*16443*/
				$1.bvals = $a(1558); /*16443*/
				for (;;) {
					/*16449*/
					if ($1.i == $1.msglen) { //no-else/*16444*/
						break; /*16444*/
					} /*16444*/
					$1.lookup(); /*16445*/
					if ($k[--$j] != $1.mode) { //no-else/*16445*/
						break; /*16445*/
					} /*16445*/
					$put($1.bvals, $1.p, $get($1.msg, $1.i)); /*16446*/
					$1.p = $1.p + 1; /*16447*/
					$1.i = $1.i + 1; /*16448*/
				} /*16448*/
				$1.remcws = $get($1.numremcws, $1.j + $1.p) - 1; /*16450*/
				$k[$j++] = Infinity; /*16457*/
				if (($1.remcws == 0) && ($1.i == $1.msglen)) {
					/*16455*/
					$k[$j++] = 0; /*16453*/
				} else {
					/*16455*/
					if ($1.p < 250) {
						/*16455*/
						$k[$j++] = $1.p; /*16455*/
					} else {
						/*16455*/
						$k[$j++] = (~~($1.p / 250)) + 249; /*16455*/
						$k[$j++] = $1.p % 250; /*16455*/
					} /*16455*/
				} /*16455*/
				$aload($geti($1.bvals, 0, $1.p)); /*16457*/
				$1.bvals = $a(); /*16457*/
				for (var _Iz = 0, _Iy = $1.bvals.length - 1; _Iz <= _Iy; _Iz += 1) {
					/*16464*/
					$1.p = _Iz; /*16460*/
					var _J5 = ((((($1.j + $1.p) + 1) * 149) % 255) + 1) + $get($1.bvals, $1.p); /*16462*/
					$k[$j++] = _J5; /*16462*/
					if (_J5 >= 256) { //no-else/*16462*/
						var _J6 = $k[--$j]; /*16462*/
						$k[$j++] = _J6 - 256; /*16462*/
					} /*16462*/
					$put($1.bvals, $1.p, $k[--$j]); /*16463*/
				} /*16463*/
				$k[$j++] = $1.bvals; /*16465*/
				$1.addtocws(); /*16465*/
				$1.mode = $1.A; /*16466*/
			}; /*16467*/
			$1.cws = $a(1558); /*16470*/
			$1.mode = $1.A; /*16471*/
			$1.i = 0; /*16471*/
			$1.j = 0; /*16471*/
			for (;;) {
				/*16474*/
				if ($1.i >= $1.msglen) { //no-else/*16472*/
					break; /*16472*/
				} /*16472*/
				if ($1[$get($a(['encA', 'encCTX', 'encCTX', 'encCTX', 'encE', 'encB']), $1.mode)]() === true) {
					break;
				} /*16473*/
			} /*16473*/
			$1.cws = $geti($1.cws, 0, $1.j); /*16475*/
		} /*16475*/
		$1.datlen = $1.cws.length; /*16480*/
		$1.remcws = $get($1.numremcws, $1.j - 1) - 1; /*16481*/
		if ($1.remcws > 0) { //no-else/*16490*/
			$k[$j++] = Infinity; /*16483*/
			$aload($1.cws); /*16483*/
			for (var _JU = 0, _JV = $1.remcws; _JU < _JV; _JU++) {
				/*16483*/
				$k[$j++] = 129; /*16483*/
			} /*16483*/
			$1.cws = $a(); /*16483*/
			for (var _Jb = $1.datlen + 1, _Ja = ($1.datlen + $1.remcws) - 1; _Jb <= _Ja; _Jb += 1) {
				/*16489*/
				$1.i = _Jb; /*16485*/
				var _Jd = (((($1.i + 1) * 149) % 253) + 1) + 129; /*16487*/
				$k[$j++] = _Jd; /*16487*/
				if (_Jd > 254) { //no-else/*16487*/
					var _Je = $k[--$j]; /*16487*/
					$k[$j++] = _Je - 254; /*16487*/
				} /*16487*/
				$put($1.cws, $1.i, $k[--$j]); /*16488*/
			} /*16488*/
		} /*16488*/
		$1.i = 0; /*16493*/
		for (;;) {
			/*16514*/
			$1.m = $get($1.metrics, $1.i); /*16494*/
			$1.rows = $get($1.m, 0); /*16495*/
			$1.cols = $get($1.m, 1); /*16496*/
			$1.regh = $get($1.m, 2); /*16497*/
			$1.regv = $get($1.m, 3); /*16498*/
			$1.rscw = $get($1.m, 4); /*16499*/
			$1.rsbl = $get($1.m, 5); /*16500*/
			$1.mrows = $1.rows - (2 * $1.regh); /*16501*/
			$1.mcols = $1.cols - (2 * $1.regv); /*16502*/
			$1.rrows = ~~($1.mrows / $1.regh); /*16503*/
			$1.rcols = ~~($1.mcols / $1.regv); /*16504*/
			$1.ncws = (~~(($1.mrows * $1.mcols) / 8)) - $1.rscw; /*16505*/
			$1.okay = true; /*16506*/
			if ($1.cws.length != $1.ncws) { //no-else/*16507*/
				$1.okay = false; /*16507*/
			} /*16507*/
			if (($1.urows != 0) && ($1.urows != $1.rows)) { //no-else/*16508*/
				$1.okay = false; /*16508*/
			} /*16508*/
			if (($1.ucols != 0) && ($1.ucols != $1.cols)) { //no-else/*16509*/
				$1.okay = false; /*16509*/
			} /*16509*/
			if ($eq($1.format, "square") && $ne($1.rows, $1.cols)) { //no-else/*16510*/
				$1.okay = false; /*16510*/
			} /*16510*/
			if ($eq($1.format, "rectangle") && $eq($1.rows, $1.cols)) { //no-else/*16511*/
				$1.okay = false; /*16511*/
			} /*16511*/
			if ($1.okay) { //no-else/*16512*/
				break; /*16512*/
			} /*16512*/
			$1.i = $1.i + 1; /*16513*/
		} /*16513*/
		$1.cwbs = $a($1.rsbl); /*16517*/
		$1.ecbs = $a($1.rsbl); /*16518*/
		for (var _KU = 0, _KT = $1.rsbl - 1; _KU <= _KT; _KU += 1) {
			/*16533*/
			$1.i = _KU; /*16520*/
			if ($1.cws.length != 1558) {
				/*16524*/
				$1.cwbsize = ~~($1.cws.length / $1.rsbl); /*16522*/
			} else {
				/*16524*/
				if ($1.i <= 7) {
					/*16524*/
					$1.cwbsize = 156; /*16524*/
				} else {
					/*16524*/
					$1.cwbsize = 155; /*16524*/
				} /*16524*/
			} /*16524*/
			$1.cwb = $a($1.cwbsize); /*16526*/
			for (var _Kd = 0, _Kc = $1.cwbsize - 1; _Kd <= _Kc; _Kd += 1) {
				/*16530*/
				$1.j = _Kd; /*16528*/
				$put($1.cwb, $1.j, $get($1.cws, ($1.j * $1.rsbl) + $1.i)); /*16529*/
			} /*16529*/
			$put($1.cwbs, $1.i, $1.cwb); /*16531*/
			$k[$j++] = $1.ecbs; /*16532*/
			$k[$j++] = $1.i; /*16532*/
			$k[$j++] = Infinity; /*16532*/
			for (var _Ks = 0, _Kt = ~~($1.rscw / $1.rsbl); _Ks < _Kt; _Ks++) {
				/*16532*/
				$k[$j++] = 0; /*16532*/
			} /*16532*/
			var _Ku = $a(); /*16532*/
			var _Kv = $k[--$j]; /*16532*/
			$put($k[--$j], _Kv, _Ku); /*16532*/
		} /*16532*/
		$k[$j++] = Infinity; /*16536*/
		$k[$j++] = 1; /*16536*/
		for (var _Kx = 0, _Ky = 255; _Kx < _Ky; _Kx++) {
			/*16536*/
			var _Kz = $k[--$j]; /*16536*/
			var _L0 = _Kz * 2; /*16536*/
			$k[$j++] = _Kz; /*16536*/
			$k[$j++] = _L0; /*16536*/
			if (_L0 >= 256) { //no-else/*16536*/
				var _L1 = $k[--$j]; /*16536*/
				$k[$j++] = _L1 ^ 301; /*16536*/
			} /*16536*/
		} /*16536*/
		$1.rsalog = $a(); /*16536*/
		$1.rslog = $a(256); /*16537*/
		for (var _L4 = 1; _L4 <= 255; _L4 += 1) {
			/*16538*/
			$put($1.rslog, $get($1.rsalog, _L4), _L4); /*16538*/
		} /*16538*/
		$1.rsprod = function() {
			var _L8 = $k[--$j]; /*16542*/
			var _L9 = $k[--$j]; /*16542*/
			$k[$j++] = _L9; /*16546*/
			$k[$j++] = _L8; /*16546*/
			if ((_L8 != 0) && (_L9 != 0)) {
				/*16545*/
				var _LC = $get($1.rslog, $k[--$j]); /*16543*/
				var _LH = $get($1.rsalog, (_LC + $get($1.rslog, $k[--$j])) % 255); /*16543*/
				$k[$j++] = _LH; /*16543*/
			} else {
				/*16545*/
				$j -= 2; /*16545*/
				$k[$j++] = 0; /*16545*/
			} /*16545*/
		}; /*16547*/
		$k[$j++] = Infinity; /*16550*/
		$k[$j++] = 1; /*16550*/
		for (var _LK = 0, _LL = ~~($1.rscw / $1.rsbl); _LK < _LL; _LK++) {
			/*16550*/
			$k[$j++] = 0; /*16550*/
		} /*16550*/
		$1.coeffs = $a(); /*16550*/
		for (var _LQ = 1, _LP = ~~($1.rscw / $1.rsbl); _LQ <= _LP; _LQ += 1) {
			/*16559*/
			$1.i = _LQ; /*16552*/
			$put($1.coeffs, $1.i, $get($1.coeffs, $1.i - 1)); /*16553*/
			for (var _LX = $1.i - 1; _LX >= 1; _LX -= 1) {
				/*16557*/
				$1.j = _LX; /*16555*/
				$k[$j++] = $1.coeffs; /*16556*/
				$k[$j++] = $1.j; /*16556*/
				$k[$j++] = $get($1.coeffs, $1.j - 1); /*16556*/
				$k[$j++] = $get($1.coeffs, $1.j); /*16556*/
				$k[$j++] = $get($1.rsalog, $1.i); /*16556*/
				$1.rsprod(); /*16556*/
				var _Lj = $k[--$j]; /*16556*/
				var _Lk = $k[--$j]; /*16556*/
				var _Ll = $k[--$j]; /*16556*/
				$put($k[--$j], _Ll, $xo(_Lk, _Lj)); /*16556*/
			} /*16556*/
			$k[$j++] = $1.coeffs; /*16558*/
			$k[$j++] = 0; /*16558*/
			$k[$j++] = $get($1.coeffs, 0); /*16558*/
			$k[$j++] = $get($1.rsalog, $1.i); /*16558*/
			$1.rsprod(); /*16558*/
			var _Lt = $k[--$j]; /*16558*/
			var _Lu = $k[--$j]; /*16558*/
			$put($k[--$j], _Lu, _Lt); /*16558*/
		} /*16558*/
		$1.coeffs = $geti($1.coeffs, 0, $1.coeffs.length - 1); /*16560*/
		for (var _M1 = 0, _M0 = $1.cwbs.length - 1; _M1 <= _M0; _M1 += 1) {
			/*16576*/
			$1.i = _M1; /*16564*/
			$1.cwb = $get($1.cwbs, $1.i); /*16565*/
			$1.ecb = $get($1.ecbs, $1.i); /*16566*/
			for (var _MA = 0, _M9 = $1.cwb.length - 1; _MA <= _M9; _MA += 1) {
				/*16575*/
				$1.t = $xo($get($1.cwb, _MA), $get($1.ecb, 0)); /*16568*/
				for (var _MG = $1.ecb.length - 1; _MG >= 0; _MG -= 1) {
					/*16574*/
					$1.j = _MG; /*16570*/
					$1.p = ($1.ecb.length - $1.j) - 1; /*16571*/
					$k[$j++] = $1.ecb; /*16572*/
					$k[$j++] = $1.p; /*16572*/
					$k[$j++] = $1.t; /*16572*/
					$k[$j++] = $get($1.coeffs, $1.j); /*16572*/
					$1.rsprod(); /*16572*/
					var _MP = $k[--$j]; /*16572*/
					var _MQ = $k[--$j]; /*16572*/
					$put($k[--$j], _MQ, _MP); /*16572*/
					if ($1.j > 0) { //no-else/*16573*/
						$put($1.ecb, $1.p, $xo($get($1.ecb, $1.p + 1), $get($1.ecb, $1.p))); /*16573*/
					} /*16573*/
				} /*16573*/
			} /*16573*/
		} /*16573*/
		if ($1.ncws == 1558) { //no-else/*16581*/
			$k[$j++] = Infinity; /*16580*/
			$forall($geti($1.ecbs, 8, 2)); /*16580*/
			$forall($geti($1.ecbs, 0, 8)); /*16580*/
			$1.ecbs = $a(); /*16580*/
		} /*16580*/
		$k[$j++] = Infinity; /*16584*/
		var _Mh = $1.cws; /*16584*/
		for (var _Mi = 0, _Mj = _Mh.length; _Mi < _Mj; _Mi++) {
			/*16584*/
			$k[$j++] = $get(_Mh, _Mi); /*16584*/
		} /*16584*/
		for (var _Mm = 0, _Mn = $1.rscw; _Mm < _Mn; _Mm++) {
			/*16584*/
			$k[$j++] = 0; /*16584*/
		} /*16584*/
		$1.cws = $a(); /*16584*/
		for (var _Mr = 0, _Mq = $1.rscw - 1; _Mr <= _Mq; _Mr += 1) {
			/*16588*/
			$1.i = _Mr; /*16586*/
			$put($1.cws, $1.ncws + $1.i, $get($get($1.ecbs, $1.i % $1.rsbl), ~~($1.i / $1.rsbl))); /*16587*/
		} /*16587*/
		$1.module = function() {
			var _N2 = $k[--$j]; /*16593*/
			var _N3 = $k[--$j]; /*16593*/
			var _N4 = $k[--$j]; /*16593*/
			var _N7 = $strcpy($s(8), "00000000"); /*16594*/
			var _N9 = $cvrs($s(8), $k[--$j], 2); /*16594*/
			$puti(_N7, 8 - _N9.length, _N9); /*16595*/
			$k[$j++] = _N4; /*16596*/
			$k[$j++] = _N3; /*16596*/
			$k[$j++] = _N2; /*16596*/
			$k[$j++] = _N7; /*16596*/
			for (var _NA = 7; _NA >= 0; _NA -= 1) {
				/*16596*/
				var _NB = $k[--$j]; /*16596*/
				$k[$j++] = $get(_NB, _NA) - 48; /*16596*/
				$k[$j++] = _NB; /*16596*/
			} /*16596*/
			$j--; /*16596*/
			var _ND = $k[--$j]; /*16597*/
			var _NE = $k[--$j]; /*16597*/
			var _NF = $k[--$j]; /*16597*/
			var _NG = $k[--$j]; /*16597*/
			var _NH = $k[--$j]; /*16597*/
			var _NI = $k[--$j]; /*16597*/
			var _NJ = $k[--$j]; /*16597*/
			var _NK = $k[--$j]; /*16597*/
			var _NL = $k[--$j]; /*16597*/
			var _NM = $k[--$j]; /*16597*/
			var _NN = $k[--$j]; /*16597*/
			$k[$j++] = _NK; /*16614*/
			$k[$j++] = _NJ; /*16614*/
			$k[$j++] = _NI; /*16614*/
			$k[$j++] = _NH; /*16614*/
			$k[$j++] = _NG; /*16614*/
			$k[$j++] = _NF; /*16614*/
			$k[$j++] = _NE; /*16614*/
			$k[$j++] = _ND; /*16614*/
			$k[$j++] = _NN; /*16614*/
			$k[$j++] = _NM; /*16614*/
			$forall(_NL, function() {
				/*16614*/
				if ($k[--$j]() === true) {
					return true;
				} /*16600*/
				var _NP = $k[--$j]; /*16601*/
				var _NQ = $k[--$j]; /*16601*/
				$k[$j++] = _NQ; /*16604*/
				$k[$j++] = _NP; /*16604*/
				if (_NQ < 0) { //no-else/*16604*/
					var _NR = $k[--$j]; /*16602*/
					var _NS = $k[--$j]; /*16602*/
					$k[$j++] = _NS + $1.mrows; /*16603*/
					$k[$j++] = _NR + (4 - (($1.mrows + 4) % 8)); /*16603*/
				} /*16603*/
				var _NV = $k[--$j]; /*16605*/
				$k[$j++] = _NV; /*16608*/
				if (_NV < 0) { //no-else/*16608*/
					var _NX = $k[--$j]; /*16606*/
					var _NY = $k[--$j]; /*16606*/
					$k[$j++] = _NY + (4 - (($1.mcols + 4) % 8)); /*16607*/
					$k[$j++] = _NX + $1.mcols; /*16607*/
				} /*16607*/
				var _Na = $k[--$j]; /*16609*/
				var _Nb = $k[--$j]; /*16609*/
				$k[$j++] = _Nb; /*16611*/
				$k[$j++] = _Na; /*16611*/
				if (_Nb >= $1.mrows) { //no-else/*16611*/
					var _Nd = $k[--$j]; /*16610*/
					var _Ne = $k[--$j]; /*16610*/
					$k[$j++] = _Ne - $1.mrows; /*16610*/
					$k[$j++] = _Nd; /*16610*/
				} /*16610*/
				var _Ng = $k[--$j]; /*16612*/
				var _Nh = $k[--$j]; /*16612*/
				var _Nk = $k[--$j]; /*16613*/
				var _Nl = $k[--$j]; /*16613*/
				$put($1.mmat, _Ng + (_Nh * $1.mcols), $k[--$j]); /*16613*/
				$k[$j++] = _Nl; /*16613*/
				$k[$j++] = _Nk; /*16613*/
			}); /*16613*/
		}; /*16615*/
		var _O3 = $a([function() {
			var _Nn = $k[--$j]; /*16619*/
			var _No = $k[--$j]; /*16619*/
			$k[$j++] = _No; /*16619*/
			$k[$j++] = _Nn; /*16619*/
			$k[$j++] = _No - 2; /*16619*/
			$k[$j++] = _Nn - 2; /*16619*/
		}, function() {
			var _Np = $k[--$j]; /*16619*/
			var _Nq = $k[--$j]; /*16619*/
			$k[$j++] = _Nq; /*16619*/
			$k[$j++] = _Np; /*16619*/
			$k[$j++] = _Nq - 2; /*16619*/
			$k[$j++] = _Np - 1; /*16619*/
		}, function() {
			var _Nr = $k[--$j]; /*16620*/
			var _Ns = $k[--$j]; /*16620*/
			$k[$j++] = _Ns; /*16620*/
			$k[$j++] = _Nr; /*16620*/
			$k[$j++] = _Ns - 1; /*16620*/
			$k[$j++] = _Nr - 2; /*16620*/
		}, function() {
			var _Nt = $k[--$j]; /*16620*/
			var _Nu = $k[--$j]; /*16620*/
			$k[$j++] = _Nu; /*16620*/
			$k[$j++] = _Nt; /*16620*/
			$k[$j++] = _Nu - 1; /*16620*/
			$k[$j++] = _Nt - 1; /*16620*/
		}, function() {
			var _Nv = $k[--$j]; /*16621*/
			var _Nw = $k[--$j]; /*16621*/
			$k[$j++] = _Nw; /*16621*/
			$k[$j++] = _Nv; /*16621*/
			$k[$j++] = _Nw - 1; /*16621*/
			$k[$j++] = _Nv; /*16621*/
		}, function() {
			var _Nx = $k[--$j]; /*16621*/
			var _Ny = $k[--$j]; /*16621*/
			$k[$j++] = _Ny; /*16621*/
			$k[$j++] = _Nx; /*16621*/
			$k[$j++] = _Ny; /*16621*/
			$k[$j++] = _Nx - 2; /*16621*/
		}, function() {
			var _Nz = $k[--$j]; /*16622*/
			var _O0 = $k[--$j]; /*16622*/
			$k[$j++] = _O0; /*16622*/
			$k[$j++] = _Nz; /*16622*/
			$k[$j++] = _O0; /*16622*/
			$k[$j++] = _Nz - 1; /*16622*/
		}, function() {
			var _O1 = $k[--$j]; /*16622*/
			var _O2 = $k[--$j]; /*16622*/
			$k[$j++] = _O2; /*16622*/
			$k[$j++] = _O1; /*16622*/
			$k[$j++] = _O2; /*16622*/
			$k[$j++] = _O1; /*16622*/
		}]); /*16622*/
		$1.dmn = _O3; /*16623*/
		var _OC = $a([function() {
			$k[$j++] = $1.mrows - 1; /*16626*/
			$k[$j++] = 0; /*16626*/
		}, function() {
			$k[$j++] = $1.mrows - 1; /*16626*/
			$k[$j++] = 1; /*16626*/
		}, function() {
			$k[$j++] = $1.mrows - 1; /*16627*/
			$k[$j++] = 2; /*16627*/
		}, function() {
			$k[$j++] = 0; /*16627*/
			$k[$j++] = $1.mcols - 2; /*16627*/
		}, function() {
			$k[$j++] = 0; /*16628*/
			$k[$j++] = $1.mcols - 1; /*16628*/
		}, function() {
			$k[$j++] = 1; /*16628*/
			$k[$j++] = $1.mcols - 1; /*16628*/
		}, function() {
			$k[$j++] = 2; /*16629*/
			$k[$j++] = $1.mcols - 1; /*16629*/
		}, function() {
			$k[$j++] = 3; /*16629*/
			$k[$j++] = $1.mcols - 1; /*16629*/
		}]); /*16629*/
		$1.dmc1 = _OC; /*16630*/
		var _OL = $a([function() {
			$k[$j++] = $1.mrows - 3; /*16633*/
			$k[$j++] = 0; /*16633*/
		}, function() {
			$k[$j++] = $1.mrows - 2; /*16633*/
			$k[$j++] = 0; /*16633*/
		}, function() {
			$k[$j++] = $1.mrows - 1; /*16634*/
			$k[$j++] = 0; /*16634*/
		}, function() {
			$k[$j++] = 0; /*16634*/
			$k[$j++] = $1.mcols - 4; /*16634*/
		}, function() {
			$k[$j++] = 0; /*16635*/
			$k[$j++] = $1.mcols - 3; /*16635*/
		}, function() {
			$k[$j++] = 0; /*16635*/
			$k[$j++] = $1.mcols - 2; /*16635*/
		}, function() {
			$k[$j++] = 0; /*16636*/
			$k[$j++] = $1.mcols - 1; /*16636*/
		}, function() {
			$k[$j++] = 1; /*16636*/
			$k[$j++] = $1.mcols - 1; /*16636*/
		}]); /*16636*/
		$1.dmc2 = _OL; /*16637*/
		var _OU = $a([function() {
			$k[$j++] = $1.mrows - 3; /*16640*/
			$k[$j++] = 0; /*16640*/
		}, function() {
			$k[$j++] = $1.mrows - 2; /*16640*/
			$k[$j++] = 0; /*16640*/
		}, function() {
			$k[$j++] = $1.mrows - 1; /*16641*/
			$k[$j++] = 0; /*16641*/
		}, function() {
			$k[$j++] = 0; /*16641*/
			$k[$j++] = $1.mcols - 2; /*16641*/
		}, function() {
			$k[$j++] = 0; /*16642*/
			$k[$j++] = $1.mcols - 1; /*16642*/
		}, function() {
			$k[$j++] = 1; /*16642*/
			$k[$j++] = $1.mcols - 1; /*16642*/
		}, function() {
			$k[$j++] = 2; /*16643*/
			$k[$j++] = $1.mcols - 1; /*16643*/
		}, function() {
			$k[$j++] = 3; /*16643*/
			$k[$j++] = $1.mcols - 1; /*16643*/
		}]); /*16643*/
		$1.dmc3 = _OU; /*16644*/
		var _Oe = $a([function() {
			$k[$j++] = $1.mrows - 1; /*16647*/
			$k[$j++] = 0; /*16647*/
		}, function() {
			$k[$j++] = $1.mrows - 1; /*16647*/
			$k[$j++] = $1.mcols - 1; /*16647*/
		}, function() {
			$k[$j++] = 0; /*16648*/
			$k[$j++] = $1.mcols - 3; /*16648*/
		}, function() {
			$k[$j++] = 0; /*16648*/
			$k[$j++] = $1.mcols - 2; /*16648*/
		}, function() {
			$k[$j++] = 0; /*16649*/
			$k[$j++] = $1.mcols - 1; /*16649*/
		}, function() {
			$k[$j++] = 1; /*16649*/
			$k[$j++] = $1.mcols - 3; /*16649*/
		}, function() {
			$k[$j++] = 1; /*16650*/
			$k[$j++] = $1.mcols - 2; /*16650*/
		}, function() {
			$k[$j++] = 1; /*16650*/
			$k[$j++] = $1.mcols - 1; /*16650*/
		}]); /*16650*/
		$1.dmc4 = _Oe; /*16651*/
		$k[$j++] = Infinity; /*16653*/
		for (var _Oh = 0, _Oi = $1.mrows * $1.mcols; _Oh < _Oi; _Oh++) {
			/*16653*/
			$k[$j++] = -1; /*16653*/
		} /*16653*/
		$1.mmat = $a(); /*16653*/
		for (var _Ol = $1.cws.length - 1; _Ol >= 0; _Ol -= 1) {
			/*16654*/
			$k[$j++] = $get($1.cws, _Ol); /*16654*/
		} /*16654*/
		$k[$j++] = 4; /*16694*/
		$k[$j++] = 0; /*16694*/
		for (;;) {
			/*16694*/
			var _Oo = $k[--$j]; /*16657*/
			var _Op = $k[--$j]; /*16657*/
			$k[$j++] = _Op; /*16659*/
			$k[$j++] = _Oo; /*16659*/
			if ((_Oo == 0) && (_Op == $1.mrows)) { //no-else/*16659*/
				$k[$j++] = $1.dmc1; /*16658*/
				$1.module(); /*16658*/
			} /*16658*/
			var _Os = $k[--$j]; /*16660*/
			var _Ot = $k[--$j]; /*16660*/
			$k[$j++] = _Ot; /*16662*/
			$k[$j++] = _Os; /*16662*/
			if (((_Os == 0) && (_Ot == ($1.mrows - 2))) && (($1.mcols % 4) != 0)) { //no-else/*16662*/
				$k[$j++] = $1.dmc2; /*16661*/
				$1.module(); /*16661*/
			} /*16661*/
			var _Ox = $k[--$j]; /*16663*/
			var _Oy = $k[--$j]; /*16663*/
			$k[$j++] = _Oy; /*16665*/
			$k[$j++] = _Ox; /*16665*/
			if (((_Ox == 0) && (_Oy == ($1.mrows - 2))) && (($1.mcols % 8) == 4)) { //no-else/*16665*/
				$k[$j++] = $1.dmc3; /*16664*/
				$1.module(); /*16664*/
			} /*16664*/
			var _P2 = $k[--$j]; /*16666*/
			var _P3 = $k[--$j]; /*16666*/
			$k[$j++] = _P3; /*16668*/
			$k[$j++] = _P2; /*16668*/
			if (((_P2 == 2) && (_P3 == ($1.mrows + 4))) && (($1.mcols % 8) == 0)) { //no-else/*16668*/
				$k[$j++] = $1.dmc4; /*16667*/
				$1.module(); /*16667*/
			} /*16667*/
			for (;;) {
				/*16678*/
				var _P7 = $k[--$j]; /*16671*/
				var _P8 = $k[--$j]; /*16671*/
				$k[$j++] = _P8; /*16675*/
				$k[$j++] = _P7; /*16675*/
				if ((_P7 >= 0) && (_P8 < $1.mrows)) { //no-else/*16675*/
					var _PA = $k[--$j]; /*16672*/
					var _PB = $k[--$j]; /*16672*/
					$k[$j++] = _PB; /*16674*/
					$k[$j++] = _PA; /*16674*/
					if ($get($1.mmat, _PA + (_PB * $1.mcols)) == -1) { //no-else/*16674*/
						$k[$j++] = $1.dmn; /*16673*/
						$1.module(); /*16673*/
					} /*16673*/
				} /*16673*/
				var _PG = $k[--$j]; /*16676*/
				var _PH = $k[--$j]; /*16676*/
				$k[$j++] = _PH - 2; /*16677*/
				$k[$j++] = _PG + 2; /*16677*/
				if (!(((_PG + 2) < $1.mcols) && ((_PH - 2) >= 0))) { //no-else/*16677*/
					break; /*16677*/
				} /*16677*/
			} /*16677*/
			var _PJ = $k[--$j]; /*16679*/
			var _PK = $k[--$j]; /*16679*/
			$k[$j++] = _PK + 1; /*16689*/
			$k[$j++] = _PJ + 3; /*16689*/
			for (;;) {
				/*16689*/
				var _PL = $k[--$j]; /*16682*/
				var _PM = $k[--$j]; /*16682*/
				$k[$j++] = _PM; /*16686*/
				$k[$j++] = _PL; /*16686*/
				if ((_PL < $1.mcols) && (_PM >= 0)) { //no-else/*16686*/
					var _PO = $k[--$j]; /*16683*/
					var _PP = $k[--$j]; /*16683*/
					$k[$j++] = _PP; /*16685*/
					$k[$j++] = _PO; /*16685*/
					if ($get($1.mmat, _PO + (_PP * $1.mcols)) == -1) { //no-else/*16685*/
						$k[$j++] = $1.dmn; /*16684*/
						$1.module(); /*16684*/
					} /*16684*/
				} /*16684*/
				var _PU = $k[--$j]; /*16687*/
				var _PV = $k[--$j]; /*16687*/
				$k[$j++] = _PV + 2; /*16688*/
				$k[$j++] = _PU - 2; /*16688*/
				if (!(((_PU - 2) >= 0) && ((_PV + 2) < $1.mrows))) { //no-else/*16688*/
					break; /*16688*/
				} /*16688*/
			} /*16688*/
			var _PX = $k[--$j]; /*16690*/
			var _PY = $k[--$j]; /*16690*/
			$k[$j++] = _PY + 3; /*16692*/
			$k[$j++] = _PX + 1; /*16692*/
			if (!(((_PX + 1) < $1.mcols) || ((_PY + 3) < $1.mrows))) { //no-else/*16692*/
				$j -= 2; /*16692*/
				break; /*16692*/
			} /*16692*/
		} /*16692*/
		if ($get($1.mmat, ($1.mrows * $1.mcols) - 1) == -1) { //no-else/*16700*/
			$puti($1.mmat, ($1.mrows * ($1.mcols - 1)) - 2, $a([1, 0])); /*16698*/
			$puti($1.mmat, ($1.mrows * $1.mcols) - 2, $a([0, 1])); /*16699*/
		} /*16699*/
		$1.pixs = $a($1.rows * $1.cols); /*16703*/
		$1.cwpos = 0; /*16704*/
		for (var _Ps = 0, _Pr = $1.rows - 1; _Ps <= _Pr; _Ps += 1) {
			/*16720*/
			$1.i = _Ps; /*16706*/
			if (($1.i % ($1.rrows + 2)) == 0) { //no-else/*16707*/
				$k[$j++] = $1.pixs; /*16707*/
				$k[$j++] = $1.i * $1.cols; /*16707*/
				$k[$j++] = Infinity; /*16707*/
				for (var _Pz = 0, _Q0 = ~~($1.cols / 2); _Pz < _Q0; _Pz++) {
					/*16707*/
					$k[$j++] = 1; /*16707*/
					$k[$j++] = 0; /*16707*/
				} /*16707*/
				var _Q1 = $a(); /*16707*/
				var _Q2 = $k[--$j]; /*16707*/
				$puti($k[--$j], _Q2, _Q1); /*16707*/
			} /*16707*/
			if (($1.i % ($1.rrows + 2)) == ($1.rrows + 1)) { //no-else/*16708*/
				$k[$j++] = $1.pixs; /*16708*/
				$k[$j++] = $1.i * $1.cols; /*16708*/
				$k[$j++] = Infinity; /*16708*/
				for (var _QB = 0, _QC = $1.cols; _QB < _QC; _QB++) {
					/*16708*/
					$k[$j++] = 1; /*16708*/
				} /*16708*/
				var _QD = $a(); /*16708*/
				var _QE = $k[--$j]; /*16708*/
				$puti($k[--$j], _QE, _QD); /*16708*/
			} /*16708*/
			if ((($1.i % ($1.rrows + 2)) != 0) && (($1.i % ($1.rrows + 2)) != ($1.rrows + 1))) { //no-else/*16719*/
				for (var _QN = 0, _QM = $1.cols - 1; _QN <= _QM; _QN += 1) {
					/*16718*/
					$1.j = _QN; /*16711*/
					if (($1.j % ($1.rcols + 2)) == 0) { //no-else/*16712*/
						$put($1.pixs, ($1.i * $1.cols) + $1.j, 1); /*16712*/
					} /*16712*/
					if (($1.j % ($1.rcols + 2)) == ($1.rcols + 1)) { //no-else/*16713*/
						$put($1.pixs, ($1.i * $1.cols) + $1.j, $1.i % 2); /*16713*/
					} /*16713*/
					if ((($1.j % ($1.rcols + 2)) != 0) && (($1.j % ($1.rcols + 2)) != ($1.rcols + 1))) { //no-else/*16717*/
						$put($1.pixs, ($1.i * $1.cols) + $1.j, $get($1.mmat, $1.cwpos)); /*16715*/
						$1.cwpos = $1.cwpos + 1; /*16716*/
					} /*16716*/
				} /*16716*/
			} /*16716*/
		} /*16716*/
		var _Qv = new Map([
			["ren", $0.renmatrix],
			["pixs", $1.pixs],
			["pixx", $1.cols],
			["pixy", $1.rows],
			["height", ($1.rows * 2) / 72],
			["width", ($1.cols * 2) / 72],
			["opt", $1.options]
		]); /*16730*/
		$k[$j++] = _Qv; /*16733*/
		if (!$1.dontdraw) { //no-else/*16733*/
			$0.renmatrix(); /*16733*/
		} /*16733*/
	};
	$0.datamatrixrectangular = function() {
		var $1 = {}; /*16763*/
		$1.options = $k[--$j]; /*16765*/
		$1.barcode = $k[--$j]; /*16766*/
		$1.dontdraw = false; /*16768*/
		$forall($1.options, function() {
			/*16779*/
			var _3 = $k[--$j]; /*16779*/
			$1[$k[--$j]] = _3; /*16779*/
		}); /*16779*/
		$put($1.options, "dontdraw", true); /*16782*/
		$put($1.options, "format", "rectangle"); /*16783*/
		$k[$j++] = 'args'; /*16785*/
		$k[$j++] = $1.barcode; /*16785*/
		$k[$j++] = $1.options; /*16785*/
		$0.datamatrix(); /*16785*/
		var _9 = $k[--$j]; /*16785*/
		$1[$k[--$j]] = _9; /*16785*/
		$put($1.args, "opt", $1.options); /*16787*/
		$k[$j++] = $1.args; /*16790*/
		if (!$1.dontdraw) { //no-else/*16790*/
			$0.renmatrix(); /*16790*/
		} /*16790*/
	};
	$0.datamatrixrectangularextension = function() {
		var $1 = {}; /*16820*/
		$1.options = $k[--$j]; /*16822*/
		$1.barcode = $k[--$j]; /*16823*/
		$1.dontdraw = false; /*16825*/
		$1.dmre = false; /*16827*/
		$1.dindmre = false; /*16828*/
		$forall($1.options, function() {
			/*16839*/
			var _3 = $k[--$j]; /*16839*/
			$1[$k[--$j]] = _3; /*16839*/
		}); /*16839*/
		$put($1.options, "dontdraw", true); /*16842*/
		$put($1.options, "format", "rectangle"); /*16843*/
		if (!($1.dindmre || $1.dmre)) {
			/*16849*/
			$put($1.options, "dmre", true); /*16846*/
		} else {
			/*16849*/
			$put($1.options, "dmre", $1.dmre); /*16848*/
			$put($1.options, "dindmre", $1.dindmre); /*16849*/
		} /*16849*/
		$k[$j++] = 'args'; /*16852*/
		$k[$j++] = $1.barcode; /*16852*/
		$k[$j++] = $1.options; /*16852*/
		$0.datamatrix(); /*16852*/
		var _G = $k[--$j]; /*16852*/
		$1[$k[--$j]] = _G; /*16852*/
		$put($1.args, "opt", $1.options); /*16854*/
		$k[$j++] = $1.args; /*16857*/
		if (!$1.dontdraw) { //no-else/*16857*/
			$0.renmatrix(); /*16857*/
		} /*16857*/
	};
	$0.mailmark = function() {
		var $1 = {}; /*16887*/
		$1.options = $k[--$j]; /*16889*/
		$1.barcode = $k[--$j]; /*16890*/
		$1.type = "unset"; /*16892*/
		$1.parse = false; /*16893*/
		$1.dontdraw = false; /*16894*/
		$forall($1.options, function() {
			/*16905*/
			var _3 = $k[--$j]; /*16905*/
			$1[$k[--$j]] = _3; /*16905*/
		}); /*16905*/
		var _5 = new Map([
			["7", "24x24"],
			["9", "32x32"],
			["29", "16x48"]
		]); /*16932*/
		$1.version = $get(_5, $1['type']); /*16933*/
		var _8 = new Map([
			["7", "square"],
			["9", "square"],
			["29", "rectangle"]
		]); /*16938*/
		$1.format = $get(_8, $1['type']); /*16939*/
		if ($1.barcode.length < 45) { //no-else/*16944*/
			$k[$j++] = 'bwipp.mailmarkBadLength'; /*16943*/
			$k[$j++] = "Royal Mail Mailmark must contain at least 45 characters of Mailmark formatted data, including any required space padding"; /*16943*/
			$0.raiseerror(); /*16943*/
		} /*16943*/
		if ($ne($geti($1.barcode, 0, 4), "JGB ")) { //no-else/*16947*/
			$k[$j++] = 'bwipp.mailmarkBadIndicator'; /*16946*/
			$k[$j++] = "Royal Mail Mailmark must begin with JGB<space> identifier"; /*16946*/
			$0.raiseerror(); /*16946*/
		} /*16946*/
		$put($1.options, "dontdraw", true); /*16950*/
		$put($1.options, "version", $1.version); /*16951*/
		$put($1.options, "format", $1.format); /*16952*/
		$put($1.options, "mailmark", true); /*16953*/
		$k[$j++] = 'args'; /*16954*/
		$k[$j++] = $1.barcode; /*16954*/
		$k[$j++] = $1.options; /*16954*/
		$0.datamatrix(); /*16954*/
		var _M = $k[--$j]; /*16954*/
		$1[$k[--$j]] = _M; /*16954*/
		$put($1.args, "opt", $1.options); /*16956*/
		$k[$j++] = $1.args; /*16959*/
		if (!$1.dontdraw) { //no-else/*16959*/
			$0.renmatrix(); /*16959*/
		} /*16959*/
	};
	$0.qrcode = function() {
		var $1 = {}; /*16988*/
		$1.options = $k[--$j]; /*16990*/
		$1.barcode = $k[--$j]; /*16991*/
		$1.dontdraw = false; /*16993*/
		$1.format = "unset"; /*16994*/
		$1.version = "unset"; /*16995*/
		$1.eclevel = "unset"; /*16996*/
		$1.parse = false; /*16997*/
		$1.parsefnc = false; /*16998*/
		$1.mask = -1; /*16999*/
		$forall($1.options, function() {
			/*17010*/
			var _3 = $k[--$j]; /*17010*/
			$1[$k[--$j]] = _3; /*17010*/
		}); /*17010*/
		$1.mask = ~~$1.mask; /*17012*/
		if ($ne($1.version, "unset")) {
			/*17023*/
			if ($eq($1.format, "unset")) { //no-else/*17021*/
				$k[$j++] = "full"; /*17018*/
				if ($eq($geti($1.version, 0, 1), "M")) { //no-else/*17018*/
					$j--; /*17018*/
					$k[$j++] = "micro"; /*17018*/
				} /*17018*/
				if ($eq($geti($1.version, 0, 1), "R")) { //no-else/*17019*/
					$j--; /*17019*/
					$k[$j++] = "rmqr"; /*17019*/
				} /*17019*/
				$1.format = $k[--$j]; /*17020*/
			} /*17020*/
		} else {
			/*17023*/
			if ($eq($1.format, "unset")) { //no-else/*17023*/
				$1.format = "full"; /*17023*/
			} /*17023*/
		} /*17023*/
		$1.barlen = $1.barcode.length; /*17047*/
		$1.fn1 = -1; /*17050*/
		var _G = new Map([
			["FNC1", $1.fn1]
		]); /*17052*/
		$1.fncvals = _G; /*17053*/
		$1.msg = $a($1.barlen); /*17054*/
		$1.i = 0; /*17055*/
		$1.j = 0; /*17055*/
		for (;;) {
			/*17094*/
			if ($1.i == $1.barlen) { //no-else/*17056*/
				break; /*17056*/
			} /*17056*/
			$1.char = $get($1.barcode, $1.i); /*17057*/
			$1.i = $1.i + 1; /*17058*/
			if (($1.parsefnc && ($1.char == 94)) && ($1.i < $1.barlen)) { //no-else/*17091*/
				if ($get($1.barcode, $1.i) != 94) {
					/*17089*/
					if ($1.i >= ($1.barlen - 3)) { //no-else/*17063*/
						$k[$j++] = 'bwipp.truncatedFNC'; /*17062*/
						$k[$j++] = "Function character truncated"; /*17062*/
						$0.raiseerror(); /*17062*/
					} /*17062*/
					var _a = $geti($1.barcode, $1.i, 4); /*17064*/
					$k[$j++] = _a; /*17086*/
					if ($ne($geti(_a, 0, 3), "ECI")) {
						/*17085*/
						var _c = $k[--$j]; /*17066*/
						var _e = $get($1.fncvals, _c) !== undefined; /*17066*/
						$k[$j++] = _c; /*17070*/
						if (!_e) { //no-else/*17070*/
							var _f = $k[--$j]; /*17067*/
							var _g = $s(_f.length + 28); /*17067*/
							$puti(_g, 28, _f); /*17067*/
							$puti(_g, 0, "Unknown function character: "); /*17068*/
							$k[$j++] = 'bwipp.unknownFNC'; /*17069*/
							$k[$j++] = _g; /*17069*/
							$0.raiseerror(); /*17069*/
						} /*17069*/
						var _j = $get($1.fncvals, $k[--$j]); /*17071*/
						$1.i = $1.i + 4; /*17072*/
						$k[$j++] = _j; /*17072*/
					} else {
						/*17085*/
						$j--; /*17074*/
						if ($1.i >= ($1.barlen - 8)) { //no-else/*17077*/
							$k[$j++] = 'bwipp.truncatedECI'; /*17076*/
							$k[$j++] = "ECI truncated"; /*17076*/
							$0.raiseerror(); /*17076*/
						} /*17076*/
						var _p = $geti($1.barcode, $1.i + 3, 6); /*17078*/
						$k[$j++] = _p; /*17083*/
						$forall(_p, function() {
							/*17083*/
							var _q = $k[--$j]; /*17080*/
							if ((_q < 48) || (_q > 57)) { //no-else/*17082*/
								$k[$j++] = 'bwipp.invalidECI'; /*17081*/
								$k[$j++] = "ECI must be 000000 to 999999"; /*17081*/
								$0.raiseerror(); /*17081*/
							} /*17081*/
						}); /*17081*/
						var _r = $k[--$j]; /*17084*/
						$k[$j++] = 0; /*17084*/
						$forall(_r, function() {
							/*17084*/
							var _s = $k[--$j]; /*17084*/
							var _t = $k[--$j]; /*17084*/
							$k[$j++] = (_t - (_s - 48)) * 10; /*17084*/
						}); /*17084*/
						var _u = $k[--$j]; /*17084*/
						$1.i = $1.i + 9; /*17085*/
						$k[$j++] = (~~(_u / 10)) - 1000000; /*17085*/
					} /*17085*/
					$1.char = $k[--$j]; /*17087*/
				} else {
					/*17089*/
					$1.i = $1.i + 1; /*17089*/
				} /*17089*/
			} /*17089*/
			$put($1.msg, $1.j, $1.char); /*17092*/
			$1.j = $1.j + 1; /*17093*/
		} /*17093*/
		$1.msg = $geti($1.msg, 0, $1.j); /*17095*/
		$1.msglen = $1.msg.length; /*17096*/
		$1.fnc1first = false; /*17099*/
		if ($1.msglen > 0) { //no-else/*17106*/
			if ($get($1.msg, 0) == $1.fn1) { //no-else/*17105*/
				$1.fnc1first = true; /*17102*/
				$k[$j++] = Infinity; /*17103*/
				$forall($geti($1.msg, 1, $1.msglen - 1), function() {
					/*17103*/
					var _1D = $k[--$j]; /*17103*/
					$k[$j++] = _1D; /*17103*/
					if (_1D == 37) { //no-else/*17103*/
						var _1E = $k[--$j]; /*17103*/
						$k[$j++] = _1E; /*17103*/
						$k[$j++] = _1E; /*17103*/
					} /*17103*/
				}); /*17103*/
				$1.msg = $a(); /*17103*/
				$1.msglen = $1.msg.length; /*17104*/
			} /*17104*/
		} /*17104*/
		if ($eq($1.eclevel, "unset")) { //no-else/*17109*/
			$k[$j++] = 'eclevel'; /*17109*/
			if ($ne($1.format, "micro")) {
				/*17109*/
				$k[$j++] = "M"; /*17109*/
			} else {
				/*17109*/
				$k[$j++] = "L"; /*17109*/
			} /*17109*/
			var _1J = $k[--$j]; /*17109*/
			$1[$k[--$j]] = _1J; /*17109*/
		} /*17109*/
		var _1L = $a(['v1to9', 'v10to26', 'v27to40', 'vM1', 'vM2', 'vM3', 'vM4', 'vR7x43', 'vR7x59', 'vR7x77', 'vR7x99', 'vR7x139', 'vR9x43', 'vR9x59', 'vR9x77', 'vR9x99', 'vR9x139', 'vR11x27', 'vR11x43', 'vR11x59', 'vR11x77', 'vR11x99', 'vR11x139', 'vR13x27', 'vR13x43', 'vR13x59', 'vR13x77', 'vR13x99', 'vR13x139', 'vR15x43', 'vR15x59', 'vR15x77', 'vR15x99', 'vR15x139', 'vR17x43', 'vR17x59', 'vR17x77', 'vR17x99', 'vR17x139']); /*17120*/
		$k[$j++] = 0; /*17121*/
		for (var _1M = 0, _1N = _1L.length; _1M < _1N; _1M++) {
			/*17121*/
			var _1P = $k[--$j]; /*17121*/
			$1[$get(_1L, _1M)] = _1P; /*17121*/
			$k[$j++] = _1P + 1; /*17121*/
		} /*17121*/
		$j--; /*17121*/
		$1.N = 0; /*17127*/
		$1.A = 1; /*17127*/
		$1.B = 2; /*17127*/
		$1.K = 3; /*17127*/
		$1.E = 4; /*17127*/
		$k[$j++] = Infinity; /*17132*/
		$k[$j++] = Infinity; /*17131*/
		for (var _1Q = 48; _1Q <= 57; _1Q += 1) {
			/*17131*/
			$k[$j++] = _1Q; /*17131*/
		} /*17131*/
		var _1R = $a(); /*17131*/
		for (var _1S = 0, _1T = _1R.length; _1S < _1T; _1S++) {
			/*17132*/
			$k[$j++] = $get(_1R, _1S); /*17132*/
			$k[$j++] = -1; /*17132*/
		} /*17132*/
		$1.Nexcl = $d(); /*17133*/
		$k[$j++] = Infinity; /*17140*/
		$k[$j++] = Infinity; /*17139*/
		$k[$j++] = 32; /*17138*/
		$k[$j++] = 36; /*17138*/
		$k[$j++] = 37; /*17138*/
		$k[$j++] = 42; /*17138*/
		$k[$j++] = 43; /*17138*/
		$k[$j++] = 45; /*17138*/
		$k[$j++] = 46; /*17138*/
		$k[$j++] = 47; /*17138*/
		$k[$j++] = 58; /*17138*/
		for (var _1W = 65; _1W <= 90; _1W += 1) {
			/*17138*/
			$k[$j++] = _1W; /*17138*/
		} /*17138*/
		$k[$j++] = $1.fn1; /*17139*/
		var _1Y = $a(); /*17139*/
		for (var _1Z = 0, _1a = _1Y.length; _1Z < _1a; _1Z++) {
			/*17140*/
			$k[$j++] = $get(_1Y, _1Z); /*17140*/
			$k[$j++] = -1; /*17140*/
		} /*17140*/
		$1.Aexcl = $d(); /*17141*/
		$k[$j++] = Infinity; /*17150*/
		$k[$j++] = Infinity; /*17149*/
		for (var _1d = 0; _1d <= 31; _1d += 1) {
			/*17145*/
			$k[$j++] = _1d; /*17145*/
		} /*17145*/
		$k[$j++] = 33; /*17147*/
		$k[$j++] = 34; /*17147*/
		$k[$j++] = 35; /*17147*/
		$k[$j++] = 38; /*17147*/
		$k[$j++] = 39; /*17147*/
		$k[$j++] = 40; /*17147*/
		$k[$j++] = 41; /*17147*/
		$k[$j++] = 44; /*17147*/
		for (var _1e = 59; _1e <= 64; _1e += 1) {
			/*17147*/
			$k[$j++] = _1e; /*17147*/
		} /*17147*/
		for (var _1f = 91; _1f <= 127; _1f += 1) {
			/*17148*/
			$k[$j++] = _1f; /*17148*/
		} /*17148*/
		for (var _1g = 160; _1g <= 223; _1g += 1) {
			/*17149*/
			$k[$j++] = _1g; /*17149*/
		} /*17149*/
		var _1h = $a(); /*17149*/
		for (var _1i = 0, _1j = _1h.length; _1i < _1j; _1i++) {
			/*17150*/
			$k[$j++] = $get(_1h, _1i); /*17150*/
			$k[$j++] = -1; /*17150*/
		} /*17150*/
		$1.Bexcl = $d(); /*17151*/
		$k[$j++] = Infinity; /*17157*/
		$k[$j++] = Infinity; /*17156*/
		for (var _1m = 129; _1m <= 159; _1m += 1) {
			/*17155*/
			$k[$j++] = _1m; /*17155*/
		} /*17155*/
		for (var _1n = 224; _1n <= 235; _1n += 1) {
			/*17156*/
			$k[$j++] = _1n; /*17156*/
		} /*17156*/
		var _1o = $a(); /*17156*/
		for (var _1p = 0, _1q = _1o.length; _1p < _1q; _1p++) {
			/*17157*/
			$k[$j++] = $get(_1o, _1p); /*17157*/
			$k[$j++] = -1; /*17157*/
		} /*17157*/
		$1.Kexcl = $d(); /*17158*/
		$k[$j++] = Infinity; /*17170*/
		$k[$j++] = $a(["0001", "0010", "0100", "1000", "0111"]); /*17171*/
		$k[$j++] = $a(["0001", "0010", "0100", "1000", "0111"]); /*17171*/
		$k[$j++] = $a(["0001", "0010", "0100", "1000", "0111"]); /*17171*/
		$k[$j++] = $a(["", -1, -1, -1, -1]); /*17171*/
		$k[$j++] = $a(["0", "1", -1, -1, -1]); /*17171*/
		$k[$j++] = $a(["00", "01", "10", "11", -1]); /*17171*/
		$k[$j++] = $a(["000", "001", "010", "011", -1]); /*17171*/
		for (var _20 = 0, _21 = 32; _20 < _21; _20++) {
			/*17171*/
			$k[$j++] = $a(["001", "010", "011", "100", -1]); /*17170*/
		} /*17170*/
		$1.mids = $a(); /*17170*/
		$1.cclens = $a([$a([10, 9, 8, 8]), $a([12, 11, 16, 10]), $a([14, 13, 16, 12]), $a([3, -1, -1, -1]), $a([4, 3, -1, -1]), $a([5, 4, 4, 3]), $a([6, 5, 5, 4]), $a([4, 3, 3, 2]), $a([5, 5, 4, 3]), $a([6, 5, 5, 4]), $a([7, 6, 5, 5]), $a([7, 6, 6, 5]), $a([5, 5, 4, 3]), $a([6, 5, 5, 4]), $a([7, 6, 5, 5]), $a([7, 6, 6, 5]), $a([8, 7, 6, 6]), $a([4, 4, 3, 2]), $a([6, 5, 5, 4]), $a([7, 6, 5, 5]), $a([7, 6, 6, 5]), $a([8, 7, 6, 6]), $a([8, 7, 7, 6]), $a([5, 5, 4, 3]), $a([6, 6, 5, 5]), $a([7, 6, 6, 5]), $a([8, 7, 6, 6]), $a([8, 7, 7, 6]), $a([8, 8, 7, 7]), $a([7, 6, 6, 5]), $a([7, 7, 6, 5]), $a([8, 7, 7, 6]), $a([8, 7, 7, 6]), $a([9, 8, 7, 7]), $a([7, 6, 6, 5]), $a([8, 7, 6, 6]), $a([8, 7, 7, 6]), $a([8, 8, 7, 6]), $a([9, 8, 8, 7])]); /*17214*/
		$k[$j++] = Infinity; /*17225*/
		for (var _2i = 0, _2j = 3; _2i < _2j; _2i++) {
			/*17219*/
			$k[$j++] = 4; /*17218*/
		} /*17218*/
		$k[$j++] = 3; /*17226*/
		$k[$j++] = 5; /*17226*/
		$k[$j++] = 7; /*17226*/
		$k[$j++] = 9; /*17226*/
		for (var _2k = 0, _2l = 32; _2k < _2l; _2k++) {
			/*17226*/
			$k[$j++] = 3; /*17225*/
		} /*17225*/
		$1.termlens = $a(); /*17225*/
		$1.tobin = function() {
			var _2o = $s($k[--$j]); /*17231*/
			$k[$j++] = _2o; /*17231*/
			for (var _2q = 0, _2p = _2o.length - 1; _2q <= _2p; _2q += 1) {
				/*17231*/
				var _2r = $k[--$j]; /*17231*/
				$put(_2r, _2q, 48); /*17231*/
				$k[$j++] = _2r; /*17231*/
			} /*17231*/
			var _2s = $k[--$j]; /*17232*/
			var _2v = $cvrs($s(_2s.length), $k[--$j], 2); /*17232*/
			$puti(_2s, _2s.length - _2v.length, _2v); /*17232*/
			$k[$j++] = _2s; /*17232*/
		}; /*17233*/
		$1.charmap = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:"; /*17236*/
		$1.charvals = new Map; /*17237*/
		for (var _2w = 0; _2w <= 44; _2w += 1) {
			/*17238*/
			$put($1.charvals, $get($1.charmap, _2w), _2w); /*17238*/
		} /*17238*/
		$1.encA = function() {
			$1.in = $k[--$j]; /*17241*/
			if ($1.fnc1first) { //no-else/*17244*/
				$k[$j++] = Infinity; /*17243*/
				$forall($1.in, function() {
					/*17243*/
					var _33 = $k[--$j]; /*17243*/
					$k[$j++] = _33; /*17243*/
					if (_33 == $1.fn1) { //no-else/*17243*/
						$j--; /*17243*/
						$k[$j++] = 37; /*17243*/
					} /*17243*/
				}); /*17243*/
				$1.in = $a(); /*17243*/
			} /*17243*/
			$1.out = $s((~~(($1.in.length * 11) / 2)) + 1); /*17245*/
			$1.k = 0; /*17246*/
			$1.m = 0; /*17246*/
			for (;;) {
				/*17257*/
				if ($1.k == $1.in.length) { //no-else/*17247*/
					break; /*17247*/
				} /*17247*/
				if ($1.k < ($1.in.length - 1)) {
					/*17253*/
					$k[$j++] = ($get($1.charvals, $get($1.in, $1.k)) * 45) + $get($1.charvals, $get($1.in, $1.k + 1)); /*17249*/
					$k[$j++] = 11; /*17249*/
					$1.tobin(); /*17249*/
					$1.k = $1.k + 2; /*17250*/
				} else {
					/*17253*/
					$k[$j++] = $get($1.charvals, $get($1.in, $1.k)); /*17252*/
					$k[$j++] = 6; /*17252*/
					$1.tobin(); /*17252*/
					$1.k = $1.k + 1; /*17253*/
				} /*17253*/
				var _3T = $k[--$j]; /*17255*/
				$puti($1.out, $1.m, _3T); /*17255*/
				$1.m = _3T.length + $1.m; /*17256*/
			} /*17256*/
			$k[$j++] = $geti($1.out, 0, $1.m); /*17258*/
		}; /*17259*/
		$1.encN = function() {
			$1.in = $k[--$j]; /*17262*/
			$1.out = $s((~~(($1.in.length * 10) / 3)) + 1); /*17263*/
			$1.k = 0; /*17264*/
			$1.m = 0; /*17264*/
			for (;;) {
				/*17280*/
				if ($1.k == $1.in.length) { //no-else/*17265*/
					break; /*17265*/
				} /*17265*/
				if ($1.k < ($1.in.length - 2)) {
					/*17275*/
					$k[$j++] = 0; /*17267*/
					$forall($geti($1.in, $1.k, 3), function() {
						/*17267*/
						var _3k = $k[--$j]; /*17267*/
						var _3l = $k[--$j]; /*17267*/
						$k[$j++] = _3k + ((_3l * 10) - 48); /*17267*/
					}); /*17267*/
					$k[$j++] = 10; /*17267*/
					$1.tobin(); /*17267*/
					$1.k = $1.k + 3; /*17268*/
				} else {
					/*17275*/
					if ($1.k == ($1.in.length - 2)) {
						/*17275*/
						$k[$j++] = 0; /*17271*/
						$forall($geti($1.in, $1.k, 2), function() {
							/*17271*/
							var _3s = $k[--$j]; /*17271*/
							var _3t = $k[--$j]; /*17271*/
							$k[$j++] = _3s + ((_3t * 10) - 48); /*17271*/
						}); /*17271*/
						$k[$j++] = 7; /*17271*/
						$1.tobin(); /*17271*/
						$1.k = $1.k + 2; /*17272*/
					} else {
						/*17275*/
						$k[$j++] = 0; /*17274*/
						$forall($geti($1.in, $1.k, 1), function() {
							/*17274*/
							var _3y = $k[--$j]; /*17274*/
							var _3z = $k[--$j]; /*17274*/
							$k[$j++] = _3y + ((_3z * 10) - 48); /*17274*/
						}); /*17274*/
						$k[$j++] = 4; /*17274*/
						$1.tobin(); /*17274*/
						$1.k = $1.k + 1; /*17275*/
					} /*17275*/
				} /*17275*/
				var _41 = $k[--$j]; /*17278*/
				$puti($1.out, $1.m, _41); /*17278*/
				$1.m = _41.length + $1.m; /*17279*/
			} /*17279*/
			$k[$j++] = $geti($1.out, 0, $1.m); /*17281*/
		}; /*17282*/
		$1.encB = function() {
			$1.in = $k[--$j]; /*17285*/
			if ($1.fnc1first) { //no-else/*17288*/
				$k[$j++] = Infinity; /*17287*/
				$forall($1.in, function() {
					/*17287*/
					var _4B = $k[--$j]; /*17287*/
					$k[$j++] = _4B; /*17287*/
					if (_4B == $1.fn1) { //no-else/*17287*/
						$j--; /*17287*/
						$k[$j++] = 29; /*17287*/
					} /*17287*/
				}); /*17287*/
				$1.in = $a(); /*17287*/
			} /*17287*/
			$1.out = $s($1.in.length * 8); /*17289*/
			for (var _4I = 0, _4H = $1.in.length - 1; _4I <= _4H; _4I += 1) {
				/*17294*/
				$1.k = _4I; /*17291*/
				$k[$j++] = ~~$z($get($1.in, $1.k)); /*17292*/
				$k[$j++] = 8; /*17292*/
				$1.tobin(); /*17292*/
				$puti($1.out, $1.k * 8, $k[--$j]); /*17293*/
			} /*17293*/
			$k[$j++] = $1.out; /*17295*/
		}; /*17296*/
		$1.encK = function() {
			$1.in = $k[--$j]; /*17299*/
			$1.out = $s((~~($1.in.length / 2)) * 13); /*17300*/
			$1.k = 0; /*17301*/
			$1.m = 0; /*17301*/
			for (;;) {
				/*17309*/
				if ($1.k == $1.in.length) { //no-else/*17302*/
					break; /*17302*/
				} /*17302*/
				var _4b = ($get($1.in, $1.k) * 256) + $get($1.in, $1.k + 1); /*17304*/
				$k[$j++] = _4b; /*17304*/
				if (_4b < 57408) {
					/*17304*/
					$k[$j++] = 33088; /*17304*/
				} else {
					/*17304*/
					$k[$j++] = 49472; /*17304*/
				} /*17304*/
				var _4c = $k[--$j]; /*17304*/
				var _4e = $k[--$j] - _4c; /*17305*/
				$k[$j++] = ((_4e >>> 8) * 192) + (_4e & 255); /*17306*/
				$k[$j++] = 13; /*17306*/
				$1.tobin(); /*17306*/
				var _4f = $k[--$j]; /*17306*/
				$puti($1.out, $1.m, _4f); /*17306*/
				$1.m = _4f.length + $1.m; /*17307*/
				$1.k = $1.k + 2; /*17308*/
			} /*17308*/
			$k[$j++] = $1.out; /*17310*/
		}; /*17311*/
		$1.encE = function() {
			var _4n = (-$get($k[--$j], 0)) - 1000000; /*17315*/
			$k[$j++] = _4n; /*17321*/
			if (_4n <= 127) {
				/*17320*/
				$k[$j++] = 8; /*17316*/
				$1.tobin(); /*17316*/
			} else {
				/*17320*/
				var _4o = $k[--$j]; /*17317*/
				$k[$j++] = _4o; /*17321*/
				if (_4o <= 16383) {
					/*17320*/
					var _4p = $k[--$j]; /*17318*/
					$k[$j++] = _4p + 32768; /*17318*/
					$k[$j++] = 16; /*17318*/
					$1.tobin(); /*17318*/
				} else {
					/*17320*/
					var _4q = $k[--$j]; /*17320*/
					$k[$j++] = _4q + 12582912; /*17320*/
					$k[$j++] = 24; /*17320*/
					$1.tobin(); /*17320*/
				} /*17320*/
			} /*17320*/
		}; /*17322*/
		$1.encfuncs = $a(['encN', 'encA', 'encB', 'encK', 'encE']); /*17324*/
		$1.addtobits = function() {
			var _4s = $k[--$j]; /*17327*/
			$puti($1.bits, $1.j, _4s); /*17327*/
			$1.j = _4s.length + $1.j; /*17328*/
		}; /*17329*/
		$k[$j++] = Infinity; /*17331*/
		for (var _4x = 0, _4y = $1.msglen; _4x < _4y; _4x++) {
			/*17331*/
			$k[$j++] = 0; /*17331*/
		} /*17331*/
		$k[$j++] = 0; /*17331*/
		$1.numNs = $a(); /*17331*/
		$k[$j++] = Infinity; /*17332*/
		for (var _51 = 0, _52 = $1.msglen; _51 < _52; _51++) {
			/*17332*/
			$k[$j++] = 0; /*17332*/
		} /*17332*/
		$k[$j++] = 0; /*17332*/
		$1.numAs = $a(); /*17332*/
		$k[$j++] = Infinity; /*17333*/
		for (var _55 = 0, _56 = $1.msglen; _55 < _56; _55++) {
			/*17333*/
			$k[$j++] = 0; /*17333*/
		} /*17333*/
		$k[$j++] = 0; /*17333*/
		$1.numBs = $a(); /*17333*/
		$k[$j++] = Infinity; /*17334*/
		for (var _59 = 0, _5A = $1.msglen; _59 < _5A; _59++) {
			/*17334*/
			$k[$j++] = 0; /*17334*/
		} /*17334*/
		$k[$j++] = -1; /*17334*/
		$1.numKs = $a(); /*17334*/
		$k[$j++] = Infinity; /*17335*/
		for (var _5D = 0, _5E = $1.msglen; _5D < _5E; _5D++) {
			/*17335*/
			$k[$j++] = 0; /*17335*/
		} /*17335*/
		$k[$j++] = 9999; /*17335*/
		$1.nextNs = $a(); /*17335*/
		$k[$j++] = Infinity; /*17336*/
		for (var _5H = 0, _5I = $1.msglen; _5H < _5I; _5H++) {
			/*17336*/
			$k[$j++] = 0; /*17336*/
		} /*17336*/
		$k[$j++] = 9999; /*17336*/
		$1.nextBs = $a(); /*17336*/
		$k[$j++] = Infinity; /*17337*/
		for (var _5L = 0, _5M = $1.msglen; _5L < _5M; _5L++) {
			/*17337*/
			$k[$j++] = 0; /*17337*/
		} /*17337*/
		$k[$j++] = 9999; /*17337*/
		$1.nextAs = $a(); /*17337*/
		$k[$j++] = Infinity; /*17338*/
		for (var _5P = 0, _5Q = $1.msglen; _5P < _5Q; _5P++) {
			/*17338*/
			$k[$j++] = 0; /*17338*/
		} /*17338*/
		$k[$j++] = 9999; /*17338*/
		$1.nextKs = $a(); /*17338*/
		$1.isECI = $a($1.msglen); /*17339*/
		for (var _5V = $1.msglen - 1; _5V >= 0; _5V -= 1) {
			/*17368*/
			$1.i = _5V; /*17341*/
			$1.barchar = $get($1.msg, $1.i); /*17342*/
			var _5b = $get($1.Kexcl, $1.barchar) !== undefined; /*17343*/
			if (_5b) {
				/*17347*/
				$put($1.nextKs, $1.i, 0); /*17344*/
				$put($1.numKs, $1.i, $get($1.numKs, $1.i + 1) + 1); /*17345*/
			} else {
				/*17347*/
				$put($1.nextKs, $1.i, $get($1.nextKs, $1.i + 1) + 1); /*17347*/
			} /*17347*/
			var _5q = $get($1.Nexcl, $1.barchar) !== undefined; /*17349*/
			if (_5q) {
				/*17353*/
				$put($1.nextNs, $1.i, 0); /*17350*/
				$put($1.numNs, $1.i, $get($1.numNs, $1.i + 1) + 1); /*17351*/
			} else {
				/*17353*/
				$put($1.nextNs, $1.i, $get($1.nextNs, $1.i + 1) + 1); /*17353*/
			} /*17353*/
			var _65 = $get($1.Bexcl, $1.barchar) !== undefined; /*17355*/
			if (_65) {
				/*17359*/
				$put($1.nextBs, $1.i, 0); /*17356*/
				$put($1.numBs, $1.i, $get($1.numBs, $1.i + 1) + 1); /*17357*/
			} else {
				/*17359*/
				$put($1.nextBs, $1.i, $get($1.nextBs, $1.i + 1) + 1); /*17359*/
			} /*17359*/
			var _6K = $get($1.Aexcl, $1.barchar) !== undefined; /*17361*/
			if (_6K) {
				/*17365*/
				$put($1.nextAs, $1.i, 0); /*17362*/
				$put($1.numAs, $1.i, $get($1.numAs, $1.i + 1) + 1); /*17363*/
			} else {
				/*17365*/
				$put($1.nextAs, $1.i, $get($1.nextAs, $1.i + 1) + 1); /*17365*/
			} /*17365*/
			$put($1.isECI, $1.i, $1.barchar <= -1000000); /*17367*/
		} /*17367*/
		$k[$j++] = Infinity; /*17369*/
		var _6a = $1.numKs; /*17369*/
		for (var _6b = 0, _6c = _6a.length; _6b < _6c; _6b++) {
			/*17369*/
			$k[$j++] = ~~(($get(_6a, _6b) + 1) / 2); /*17369*/
		} /*17369*/
		$1.numKs = $a(); /*17369*/
		$1.KbeforeB = function() {
			var _6i = $get($k[--$j], $1.ver); /*17371*/
			$k[$j++] = $ge($1.numK, _6i) && ($get($1.nextBs, ($1.numK * 2) + $1.i) == 0); /*17371*/
		}; /*17371*/
		$1.KbeforeA = function() {
			var _6q = $get($k[--$j], $1.ver); /*17372*/
			$k[$j++] = $ge($1.numK, _6q) && ($get($1.nextAs, ($1.numK * 2) + $1.i) == 0); /*17372*/
		}; /*17372*/
		$1.KbeforeN = function() {
			var _6y = $get($k[--$j], $1.ver); /*17373*/
			$k[$j++] = $ge($1.numK, _6y) && ($get($1.nextNs, ($1.numK * 2) + $1.i) == 0); /*17373*/
		}; /*17373*/
		$1.KbeforeE = function() {
			var _76 = $get($k[--$j], $1.ver); /*17374*/
			$k[$j++] = $ge($1.numK, _76) && ((($1.numK * 2) + $1.i) == $1.msglen); /*17374*/
		}; /*17374*/
		$1.AbeforeK = function() {
			var _7D = $get($k[--$j], $1.ver); /*17375*/
			$k[$j++] = $ge($1.numA, _7D) && ($get($1.nextKs, $1.numA + $1.i) == 0); /*17375*/
		}; /*17375*/
		$1.AbeforeB = function() {
			var _7L = $get($k[--$j], $1.ver); /*17376*/
			$k[$j++] = $ge($1.numA, _7L) && ($get($1.nextBs, $1.numA + $1.i) == 0); /*17376*/
		}; /*17376*/
		$1.AbeforeN = function() {
			var _7T = $get($k[--$j], $1.ver); /*17377*/
			$k[$j++] = $ge($1.numA, _7T) && ($get($1.nextNs, $1.numA + $1.i) == 0); /*17377*/
		}; /*17377*/
		$1.AbeforeE = function() {
			var _7b = $get($k[--$j], $1.ver); /*17378*/
			$k[$j++] = $ge($1.numA, _7b) && (($1.numA + $1.i) == $1.msglen); /*17378*/
		}; /*17378*/
		$1.NbeforeK = function() {
			var _7i = $get($k[--$j], $1.ver); /*17379*/
			$k[$j++] = $ge($1.numN, _7i) && ($get($1.nextKs, $1.numN + $1.i) == 0); /*17379*/
		}; /*17379*/
		$1.NbeforeB = function() {
			var _7q = $get($k[--$j], $1.ver); /*17380*/
			$k[$j++] = $ge($1.numN, _7q) && ($get($1.nextBs, $1.numN + $1.i) == 0); /*17380*/
		}; /*17380*/
		$1.NbeforeA = function() {
			var _7y = $get($k[--$j], $1.ver); /*17381*/
			$k[$j++] = $ge($1.numN, _7y) && ($get($1.nextAs, $1.numN + $1.i) == 0); /*17381*/
		}; /*17381*/
		$1.NbeforeE = function() {
			var _86 = $get($k[--$j], $1.ver); /*17382*/
			$k[$j++] = $ge($1.numN, _86) && (($1.numN + $1.i) == $1.msglen); /*17382*/
		}; /*17382*/
		if ($ne($1.version, "unset")) {
			/*17413*/
			$k[$j++] = Infinity; /*17408*/
			for (var _8B = 0; _8B <= 9; _8B += 1) {
				/*17395*/
				$k[$j++] = $cvrs($s(2), _8B, 10); /*17395*/
				$k[$j++] = $1.v1to9; /*17395*/
			} /*17395*/
			for (var _8F = 10; _8F <= 26; _8F += 1) {
				/*17396*/
				$k[$j++] = $cvrs($s(2), _8F, 10); /*17396*/
				$k[$j++] = $1.v10to26; /*17396*/
			} /*17396*/
			for (var _8J = 27; _8J <= 40; _8J += 1) {
				/*17397*/
				$k[$j++] = $cvrs($s(2), _8J, 10); /*17397*/
				$k[$j++] = $1.v27to40; /*17397*/
			} /*17397*/
			$k[$j++] = "M1"; /*17408*/
			$k[$j++] = $1.vM1; /*17408*/
			$k[$j++] = "M2"; /*17408*/
			$k[$j++] = $1.vM2; /*17408*/
			$k[$j++] = "M3"; /*17408*/
			$k[$j++] = $1.vM3; /*17408*/
			$k[$j++] = "M4"; /*17408*/
			$k[$j++] = $1.vM4; /*17408*/
			$k[$j++] = "R7x43"; /*17408*/
			$k[$j++] = $1.vR7x43; /*17408*/
			$k[$j++] = "R7x59"; /*17408*/
			$k[$j++] = $1.vR7x59; /*17408*/
			$k[$j++] = "R7x77"; /*17408*/
			$k[$j++] = $1.vR7x77; /*17408*/
			$k[$j++] = "R7x99"; /*17408*/
			$k[$j++] = $1.vR7x99; /*17408*/
			$k[$j++] = "R7x139"; /*17408*/
			$k[$j++] = $1.vR7x139; /*17408*/
			$k[$j++] = "R9x43"; /*17408*/
			$k[$j++] = $1.vR9x43; /*17408*/
			$k[$j++] = "R9x59"; /*17408*/
			$k[$j++] = $1.vR9x59; /*17408*/
			$k[$j++] = "R9x77"; /*17408*/
			$k[$j++] = $1.vR9x77; /*17408*/
			$k[$j++] = "R9x99"; /*17408*/
			$k[$j++] = $1.vR9x99; /*17408*/
			$k[$j++] = "R9x139"; /*17408*/
			$k[$j++] = $1.vR9x139; /*17408*/
			$k[$j++] = "R11x27"; /*17408*/
			$k[$j++] = $1.vR11x27; /*17408*/
			$k[$j++] = "R11x43"; /*17408*/
			$k[$j++] = $1.vR11x43; /*17408*/
			$k[$j++] = "R11x59"; /*17408*/
			$k[$j++] = $1.vR11x59; /*17408*/
			$k[$j++] = "R11x77"; /*17408*/
			$k[$j++] = $1.vR11x77; /*17408*/
			$k[$j++] = "R11x99"; /*17408*/
			$k[$j++] = $1.vR11x99; /*17408*/
			$k[$j++] = "R11x139"; /*17408*/
			$k[$j++] = $1.vR11x139; /*17408*/
			$k[$j++] = "R13x27"; /*17408*/
			$k[$j++] = $1.vR13x27; /*17408*/
			$k[$j++] = "R13x43"; /*17408*/
			$k[$j++] = $1.vR13x43; /*17408*/
			$k[$j++] = "R13x59"; /*17408*/
			$k[$j++] = $1.vR13x59; /*17408*/
			$k[$j++] = "R13x77"; /*17408*/
			$k[$j++] = $1.vR13x77; /*17408*/
			$k[$j++] = "R13x99"; /*17408*/
			$k[$j++] = $1.vR13x99; /*17408*/
			$k[$j++] = "R13x139"; /*17408*/
			$k[$j++] = $1.vR13x139; /*17408*/
			$k[$j++] = "R15x43"; /*17408*/
			$k[$j++] = $1.vR15x43; /*17408*/
			$k[$j++] = "R15x59"; /*17408*/
			$k[$j++] = $1.vR15x59; /*17408*/
			$k[$j++] = "R15x77"; /*17408*/
			$k[$j++] = $1.vR15x77; /*17408*/
			$k[$j++] = "R15x99"; /*17408*/
			$k[$j++] = $1.vR15x99; /*17408*/
			$k[$j++] = "R15x139"; /*17408*/
			$k[$j++] = $1.vR15x139; /*17408*/
			$k[$j++] = "R17x43"; /*17408*/
			$k[$j++] = $1.vR17x43; /*17408*/
			$k[$j++] = "R17x59"; /*17408*/
			$k[$j++] = $1.vR17x59; /*17408*/
			$k[$j++] = "R17x77"; /*17408*/
			$k[$j++] = $1.vR17x77; /*17408*/
			$k[$j++] = "R17x99"; /*17408*/
			$k[$j++] = $1.vR17x99; /*17408*/
			$k[$j++] = "R17x139"; /*17408*/
			$k[$j++] = $1.vR17x139; /*17408*/
			var _8z = $get($d(), $1.version); /*17409*/
			$k[$j++] = 'verset'; /*17409*/
			$k[$j++] = _8z; /*17409*/
			$k[$j++] = Infinity; /*17409*/
			var _90 = $k[--$j]; /*17409*/
			var _91 = $k[--$j]; /*17409*/
			$k[$j++] = _90; /*17409*/
			$k[$j++] = _91; /*17409*/
			var _92 = $a(); /*17409*/
			$1[$k[--$j]] = _92; /*17409*/
		} else {
			/*17413*/
			if ($eq($1.format, "full")) { //no-else/*17412*/
				$1.verset = $a([$1.v1to9, $1.v10to26, $1.v27to40]); /*17412*/
			} /*17412*/
			if ($eq($1.format, "micro")) { //no-else/*17413*/
				$1.verset = $a([$1.vM1, $1.vM2, $1.vM3, $1.vM4]); /*17413*/
			} /*17413*/
		} /*17413*/
		$k[$j++] = Infinity; /*17418*/
		for (var _9F = 0, _9G = 39; _9F < _9G; _9F++) {
			/*17418*/
			$k[$j++] = -1; /*17418*/
		} /*17418*/
		$1.msgbits = $a(); /*17418*/
		$1.e = 10000; /*17419*/
		var _9I = $1.verset; /*17420*/
		for (var _9J = 0, _9K = _9I.length; _9J < _9K; _9J++) {
			/*17555*/
			$1.ver = $get(_9I, _9J); /*17421*/
			$1.mode = -1; /*17424*/
			$1.seq = $a([]); /*17424*/
			$1.i = 0; /*17424*/
			for (;;) {
				/*17525*/
				if ($1.i >= $1.msglen) { //no-else/*17425*/
					break; /*17425*/
				} /*17425*/
				$1.numK = $get($1.numKs, $1.i); /*17426*/
				$1.numB = $get($1.numBs, $1.i); /*17427*/
				$1.numA = $get($1.numAs, $1.i); /*17428*/
				$1.numN = $get($1.numNs, $1.i); /*17429*/
				$1.eci = $get($1.isECI, $1.i); /*17430*/
				if ($eq($1.ver, $1.vM1) && ($1.numA >= 1)) { //no-else/*17431*/
					$1.seq = -1; /*17431*/
					break; /*17431*/
				} /*17431*/
				if ($eq($1.ver, $1.vM1) && ($1.numB >= 1)) { //no-else/*17432*/
					$1.seq = -1; /*17432*/
					break; /*17432*/
				} /*17432*/
				if ($eq($1.ver, $1.vM1) && ($1.numK >= 1)) { //no-else/*17433*/
					$1.seq = -1; /*17433*/
					break; /*17433*/
				} /*17433*/
				if ($eq($1.ver, $1.vM1) && $1.eci) { //no-else/*17434*/
					$1.seq = -1; /*17434*/
					break; /*17434*/
				} /*17434*/
				if ($eq($1.ver, $1.vM2) && ($1.numB >= 1)) { //no-else/*17435*/
					$1.seq = -1; /*17435*/
					break; /*17435*/
				} /*17435*/
				if ($eq($1.ver, $1.vM2) && ($1.numK >= 1)) { //no-else/*17436*/
					$1.seq = -1; /*17436*/
					break; /*17436*/
				} /*17436*/
				if ($eq($1.ver, $1.vM2) && $1.eci) { //no-else/*17437*/
					$1.seq = -1; /*17437*/
					break; /*17437*/
				} /*17437*/
				if ($eq($1.ver, $1.vM3) && $1.eci) { //no-else/*17438*/
					$1.seq = -1; /*17438*/
					break; /*17438*/
				} /*17438*/
				if ($eq($1.ver, $1.vM4) && $1.eci) { //no-else/*17439*/
					$1.seq = -1; /*17439*/
					break; /*17439*/
				} /*17439*/
				if ($ge($1.ver, $1.vR7x43) && $1.eci) { //no-else/*17440*/
					$1.seq = -1; /*17440*/
					break; /*17440*/
				} /*17440*/
				for (;;) {
					/*17505*/
					if ($1.eci) { //no-else/*17444*/
						$k[$j++] = $1.E; /*17443*/
						break; /*17443*/
					} /*17443*/
					if ($ge($1.ver, $1.vR7x43)) { //no-else/*17447*/
						$k[$j++] = $1.B; /*17446*/
						break; /*17446*/
					} /*17446*/
					if ($1.mode == -1) { //no-else/*17466*/
						$k[$j++] = $a([1, 1, 1, $1.e, $1.e, 1, 1]); /*17449*/
						$1.KbeforeA(); /*17449*/
						if ($k[--$j]) { //no-else/*17449*/
							$k[$j++] = $1.K; /*17449*/
							break; /*17449*/
						} /*17449*/
						$k[$j++] = $a([1, 1, 1, $1.e, $1.e, 1, 1]); /*17450*/
						$1.KbeforeN(); /*17450*/
						if ($k[--$j]) { //no-else/*17450*/
							$k[$j++] = $1.K; /*17450*/
							break; /*17450*/
						} /*17450*/
						$k[$j++] = $a([5, 5, 6, $1.e, $1.e, 2, 3]); /*17451*/
						$1.KbeforeB(); /*17451*/
						if ($k[--$j]) { //no-else/*17451*/
							$k[$j++] = $1.K; /*17451*/
							break; /*17451*/
						} /*17451*/
						$k[$j++] = $a([1, 1, 1, $1.e, $1.e, 1, 1]); /*17452*/
						$1.KbeforeE(); /*17452*/
						if ($k[--$j]) { //no-else/*17452*/
							$k[$j++] = $1.K; /*17452*/
							break; /*17452*/
						} /*17452*/
						if ($1.numK >= 1) { //no-else/*17453*/
							$k[$j++] = $1.B; /*17453*/
							break; /*17453*/
						} /*17453*/
						$k[$j++] = $a([6, 7, 8, $1.e, $1.e, 3, 4]); /*17454*/
						$1.AbeforeB(); /*17454*/
						if ($k[--$j]) { //no-else/*17454*/
							$k[$j++] = $1.A; /*17454*/
							break; /*17454*/
						} /*17454*/
						$k[$j++] = $a([1, 1, 1, $1.e, 1, 1, 1]); /*17455*/
						$1.AbeforeN(); /*17455*/
						if ($k[--$j]) { //no-else/*17455*/
							$k[$j++] = $1.A; /*17455*/
							break; /*17455*/
						} /*17455*/
						$k[$j++] = $a([1, 1, 1, $1.e, 1, 1, 1]); /*17456*/
						$1.AbeforeE(); /*17456*/
						if ($k[--$j]) { //no-else/*17456*/
							$k[$j++] = $1.A; /*17456*/
							break; /*17456*/
						} /*17456*/
						if ($1.numA >= 1) { //no-else/*17459*/
							var _Aq = $ne($1.ver, $1.vM2) ? $1.B : $1.A; /*17458*/
							$k[$j++] = _Aq; /*17458*/
							break; /*17458*/
						} /*17458*/
						$k[$j++] = $a([4, 4, 5, $1.e, $1.e, 2, 3]); /*17460*/
						$1.NbeforeB(); /*17460*/
						if ($k[--$j]) { //no-else/*17460*/
							$k[$j++] = $1.N; /*17460*/
							break; /*17460*/
						} /*17460*/
						$k[$j++] = $a([1, 1, 1, $1.e, $1.e, 1, 1]); /*17461*/
						$1.NbeforeB(); /*17461*/
						if ($k[--$j]) { //no-else/*17461*/
							$k[$j++] = $1.B; /*17461*/
							break; /*17461*/
						} /*17461*/
						$k[$j++] = $a([7, 8, 9, $1.e, 3, 4, 5]); /*17462*/
						$1.NbeforeA(); /*17462*/
						if ($k[--$j]) { //no-else/*17462*/
							$k[$j++] = $1.N; /*17462*/
							break; /*17462*/
						} /*17462*/
						$k[$j++] = $a([1, 1, 1, $1.e, 1, 1, 1]); /*17463*/
						$1.NbeforeA(); /*17463*/
						if ($k[--$j]) { //no-else/*17463*/
							$k[$j++] = $1.A; /*17463*/
							break; /*17463*/
						} /*17463*/
						if ($1.numN >= 1) { //no-else/*17464*/
							$k[$j++] = $1.N; /*17464*/
							break; /*17464*/
						} /*17464*/
						$k[$j++] = $1.B; /*17465*/
						break; /*17465*/
					} /*17465*/
					if ($1.mode == $1.B) { //no-else/*17481*/
						$k[$j++] = $a([9, 12, 13, $1.e, $1.e, 4, 5]); /*17468*/
						$1.KbeforeB(); /*17468*/
						if ($k[--$j]) { //no-else/*17468*/
							$k[$j++] = $1.K; /*17468*/
							break; /*17468*/
						} /*17468*/
						$k[$j++] = $a([9, 10, 12, $1.e, $1.e, 4, 5]); /*17469*/
						$1.KbeforeA(); /*17469*/
						if ($k[--$j]) { //no-else/*17469*/
							$k[$j++] = $1.K; /*17469*/
							break; /*17469*/
						} /*17469*/
						$k[$j++] = $a([9, 10, 11, $1.e, $1.e, 5, 6]); /*17470*/
						$1.KbeforeN(); /*17470*/
						if ($k[--$j]) { //no-else/*17470*/
							$k[$j++] = $1.K; /*17470*/
							break; /*17470*/
						} /*17470*/
						$k[$j++] = $a([4, 5, 6, $1.e, $1.e, 2, 3]); /*17471*/
						$1.KbeforeE(); /*17471*/
						if ($k[--$j]) { //no-else/*17471*/
							$k[$j++] = $1.K; /*17471*/
							break; /*17471*/
						} /*17471*/
						$k[$j++] = $a([11, 12, 14, $1.e, $1.e, 5, 7]); /*17472*/
						$1.AbeforeK(); /*17472*/
						if ($k[--$j]) { //no-else/*17472*/
							$k[$j++] = $1.A; /*17472*/
							break; /*17472*/
						} /*17472*/
						$k[$j++] = $a([11, 15, 16, $1.e, $1.e, 6, 7]); /*17473*/
						$1.AbeforeB(); /*17473*/
						if ($k[--$j]) { //no-else/*17473*/
							$k[$j++] = $1.A; /*17473*/
							break; /*17473*/
						} /*17473*/
						$k[$j++] = $a([12, 13, 15, $1.e, $1.e, 6, 8]); /*17474*/
						$1.AbeforeN(); /*17474*/
						if ($k[--$j]) { //no-else/*17474*/
							$k[$j++] = $1.A; /*17474*/
							break; /*17474*/
						} /*17474*/
						$k[$j++] = $a([6, 7, 8, $1.e, $1.e, 3, 4]); /*17475*/
						$1.AbeforeE(); /*17475*/
						if ($k[--$j]) { //no-else/*17475*/
							$k[$j++] = $1.A; /*17475*/
							break; /*17475*/
						} /*17475*/
						$k[$j++] = $a([6, 7, 8, $1.e, $1.e, 3, 4]); /*17476*/
						$1.NbeforeK(); /*17476*/
						if ($k[--$j]) { //no-else/*17476*/
							$k[$j++] = $1.N; /*17476*/
							break; /*17476*/
						} /*17476*/
						$k[$j++] = $a([6, 8, 9, $1.e, $1.e, 3, 4]); /*17477*/
						$1.NbeforeB(); /*17477*/
						if ($k[--$j]) { //no-else/*17477*/
							$k[$j++] = $1.N; /*17477*/
							break; /*17477*/
						} /*17477*/
						$k[$j++] = $a([6, 7, 8, $1.e, $1.e, 3, 4]); /*17478*/
						$1.NbeforeA(); /*17478*/
						if ($k[--$j]) { //no-else/*17478*/
							$k[$j++] = $1.N; /*17478*/
							break; /*17478*/
						} /*17478*/
						$k[$j++] = $a([3, 4, 5, $1.e, $1.e, 2, 3]); /*17479*/
						$1.NbeforeE(); /*17479*/
						if ($k[--$j]) { //no-else/*17479*/
							$k[$j++] = $1.N; /*17479*/
							break; /*17479*/
						} /*17479*/
						$k[$j++] = $1.B; /*17480*/
						break; /*17480*/
					} /*17480*/
					if ($1.mode == $1.A) { //no-else/*17490*/
						if ($1.numK >= 1) { //no-else/*17483*/
							$k[$j++] = $1.K; /*17483*/
							break; /*17483*/
						} /*17483*/
						if ($1.numB >= 1) { //no-else/*17484*/
							$k[$j++] = $1.B; /*17484*/
							break; /*17484*/
						} /*17484*/
						$k[$j++] = $a([13, 15, 17, $1.e, 5, 7, 9]); /*17485*/
						$1.NbeforeA(); /*17485*/
						if ($k[--$j]) { //no-else/*17485*/
							$k[$j++] = $1.N; /*17485*/
							break; /*17485*/
						} /*17485*/
						$k[$j++] = $a([13, 17, 18, $1.e, $1.e, 7, 9]); /*17486*/
						$1.NbeforeB(); /*17486*/
						if ($k[--$j]) { //no-else/*17486*/
							$k[$j++] = $1.N; /*17486*/
							break; /*17486*/
						} /*17486*/
						$k[$j++] = $a([7, 8, 9, $1.e, 3, 4, 5]); /*17487*/
						$1.NbeforeE(); /*17487*/
						if ($k[--$j]) { //no-else/*17487*/
							$k[$j++] = $1.N; /*17487*/
							break; /*17487*/
						} /*17487*/
						if (($1.numA >= 1) || ($1.numN >= 1)) { //no-else/*17488*/
							$k[$j++] = $1.A; /*17488*/
							break; /*17488*/
						} /*17488*/
						$k[$j++] = $1.B; /*17489*/
						break; /*17489*/
					} /*17489*/
					if ($1.mode == $1.N) { //no-else/*17497*/
						if ($1.numK >= 1) { //no-else/*17492*/
							$k[$j++] = $1.K; /*17492*/
							break; /*17492*/
						} /*17492*/
						if ($1.numB >= 1) { //no-else/*17493*/
							$k[$j++] = $1.B; /*17493*/
							break; /*17493*/
						} /*17493*/
						if ($1.numA >= 1) { //no-else/*17494*/
							$k[$j++] = $1.A; /*17494*/
							break; /*17494*/
						} /*17494*/
						if ($1.numN >= 1) { //no-else/*17495*/
							$k[$j++] = $1.N; /*17495*/
							break; /*17495*/
						} /*17495*/
						$k[$j++] = $1.B; /*17496*/
						break; /*17496*/
					} /*17496*/
					if ($1.mode == $1.K) { //no-else/*17504*/
						if ($1.numB >= 1) { //no-else/*17499*/
							$k[$j++] = $1.B; /*17499*/
							break; /*17499*/
						} /*17499*/
						if ($1.numA >= 1) { //no-else/*17500*/
							$k[$j++] = $1.A; /*17500*/
							break; /*17500*/
						} /*17500*/
						if ($1.numN >= 1) { //no-else/*17501*/
							$k[$j++] = $1.N; /*17501*/
							break; /*17501*/
						} /*17501*/
						if ($1.numK >= 1) { //no-else/*17502*/
							$k[$j++] = $1.K; /*17502*/
							break; /*17502*/
						} /*17502*/
						$k[$j++] = $1.B; /*17503*/
						break; /*17503*/
					} /*17503*/
				} /*17503*/
				var _Cw = $k[--$j]; /*17506*/
				$k[$j++] = _Cw; /*17506*/
				if ((_Cw == $1.K) && $1.fnc1first) { //no-else/*17506*/
					$j--; /*17506*/
					$k[$j++] = $1.B; /*17506*/
				} /*17506*/
				var _D0 = $k[--$j]; /*17507*/
				$k[$j++] = _D0; /*17523*/
				if (_D0 == $1.mode) {
					/*17522*/
					$j--; /*17508*/
					var _D6 = ($1.mode == $1.K) ? 2 : 1; /*17509*/
					$1.dat = $geti($1.msg, $1.i, _D6); /*17509*/
					$k[$j++] = Infinity; /*17512*/
					$aload($1.seq); /*17511*/
					$k[$j++] = Infinity; /*17512*/
					var _D9 = $k[--$j]; /*17512*/
					var _DA = $k[--$j]; /*17512*/
					$k[$j++] = _D9; /*17512*/
					$aload(_DA); /*17512*/
					$aload($1.dat); /*17512*/
					var _DC = $a(); /*17512*/
					$k[$j++] = _DC; /*17512*/
					$1.seq = $a(); /*17512*/
				} else {
					/*17522*/
					$1.mode = $k[--$j]; /*17515*/
					if ($1.mode == $1.K) { //no-else/*17516*/
						$k[$j++] = $1.K; /*17516*/
						$k[$j++] = $geti($1.msg, $1.i, $1.numK * 2); /*17516*/
					} /*17516*/
					if ($1.mode == $1.B) { //no-else/*17517*/
						$k[$j++] = $1.B; /*17517*/
						$k[$j++] = $geti($1.msg, $1.i, $1.numB); /*17517*/
					} /*17517*/
					if ($1.mode == $1.A) { //no-else/*17518*/
						$k[$j++] = $1.A; /*17518*/
						$k[$j++] = $geti($1.msg, $1.i, $1.numA); /*17518*/
					} /*17518*/
					if ($1.mode == $1.N) { //no-else/*17519*/
						$k[$j++] = $1.N; /*17519*/
						$k[$j++] = $geti($1.msg, $1.i, $1.numN); /*17519*/
					} /*17519*/
					if ($1.mode == $1.E) { //no-else/*17520*/
						$1.mode = -1; /*17520*/
						$k[$j++] = $1.E; /*17520*/
						$k[$j++] = $geti($1.msg, $1.i, 1); /*17520*/
					} /*17520*/
					$1.dat = $k[--$j]; /*17521*/
					$1.sw = $k[--$j]; /*17521*/
					$k[$j++] = Infinity; /*17522*/
					$aload($1.seq); /*17522*/
					$k[$j++] = $1.sw; /*17522*/
					$k[$j++] = $1.dat; /*17522*/
					$1.seq = $a(); /*17522*/
				} /*17522*/
				$1.i = $1.i + $1.dat.length; /*17524*/
			} /*17524*/
			for (;;) {
				/*17554*/
				if ($1.seq == -1) { //no-else/*17529*/
					break; /*17529*/
				} /*17529*/
				$1.bits = $s(23648); /*17530*/
				$1.j = 0; /*17531*/
				if ($1.fnc1first) { //no-else/*17534*/
					if ($lt($1.ver, $1.vR7x43)) {
						/*17533*/
						$k[$j++] = "0101"; /*17533*/
					} else {
						/*17533*/
						$k[$j++] = "101"; /*17533*/
					} /*17533*/
					$1.addtobits(); /*17533*/
				} /*17533*/
				$1.abort = false; /*17535*/
				for (var _E2 = 0, _E1 = $1.seq.length - 1; _E2 <= _E1; _E2 += 2) {
					/*17549*/
					$1.i = _E2; /*17537*/
					$1.mode = $get($1.seq, $1.i); /*17538*/
					$k[$j++] = $get($get($1.mids, $1.ver), $1.mode); /*17539*/
					$1.addtobits(); /*17539*/
					$1.chars = $get($1.seq, $1.i + 1); /*17540*/
					if ($1.mode != $1.E) { //no-else/*17547*/
						$1.cclen = $get($get($1.cclens, $1.ver), $1.mode); /*17542*/
						if ($1.chars.length >= (~~Math.pow(2, $1.cclen))) { //no-else/*17545*/
							$1.abort = true; /*17544*/
							break; /*17544*/
						} /*17544*/
						$k[$j++] = $1.chars.length; /*17546*/
						if ($1.mode == $1.K) { //no-else/*17546*/
							var _EQ = $k[--$j]; /*17546*/
							$k[$j++] = ~~(_EQ / 2); /*17546*/
						} /*17546*/
						$k[$j++] = $1.cclen; /*17546*/
						$1.tobin(); /*17546*/
						$1.addtobits(); /*17546*/
					} /*17546*/
					$k[$j++] = $1.chars; /*17548*/
					if ($1[$get($1.encfuncs, $1.mode)]() === true) {
						break;
					} /*17548*/
					$1.addtobits(); /*17548*/
				} /*17548*/
				if ($1.abort) { //no-else/*17550*/
					break; /*17550*/
				} /*17550*/
				$1.bits = $geti($1.bits, 0, $1.j); /*17551*/
				$put($1.msgbits, $1.ver, $1.bits); /*17552*/
				break; /*17553*/
			} /*17553*/
		} /*17553*/
		$1.metrics = $a([$a(["micro", "M1", $1.vM1, 11, 11, 98, 99, 36, $a([2, 99, 99, 99]), $a([1, 0, -1, -1, -1, -1, -1, -1])]), $a(["micro", "M2", $1.vM2, 13, 13, 98, 99, 80, $a([5, 6, 99, 99]), $a([1, 0, 1, 0, -1, -1, -1, -1])]), $a(["micro", "M3", $1.vM3, 15, 15, 98, 99, 132, $a([6, 8, 99, 99]), $a([1, 0, 1, 0, -1, -1, -1, -1])]), $a(["micro", "M4", $1.vM4, 17, 17, 98, 99, 192, $a([8, 10, 14, 99]), $a([1, 0, 1, 0, 1, 0, -1, -1])]), $a(["full", "1", $1.v1to9, 21, 21, 98, 99, 208, $a([7, 10, 13, 17]), $a([1, 0, 1, 0, 1, 0, 1, 0])]), $a(["full", "2", $1.v1to9, 25, 25, 18, 99, 359, $a([10, 16, 22, 28]), $a([1, 0, 1, 0, 1, 0, 1, 0])]), $a(["full", "3", $1.v1to9, 29, 29, 22, 99, 567, $a([15, 26, 36, 44]), $a([1, 0, 1, 0, 2, 0, 2, 0])]), $a(["full", "4", $1.v1to9, 33, 33, 26, 99, 807, $a([20, 36, 52, 64]), $a([1, 0, 2, 0, 2, 0, 4, 0])]), $a(["full", "5", $1.v1to9, 37, 37, 30, 99, 1079, $a([26, 48, 72, 88]), $a([1, 0, 2, 0, 2, 2, 2, 2])]), $a(["full", "6", $1.v1to9, 41, 41, 34, 99, 1383, $a([36, 64, 96, 112]), $a([2, 0, 4, 0, 4, 0, 4, 0])]), $a(["full", "7", $1.v1to9, 45, 45, 22, 38, 1568, $a([40, 72, 108, 130]), $a([2, 0, 4, 0, 2, 4, 4, 1])]), $a(["full", "8", $1.v1to9, 49, 49, 24, 42, 1936, $a([48, 88, 132, 156]), $a([2, 0, 2, 2, 4, 2, 4, 2])]), $a(["full", "9", $1.v1to9, 53, 53, 26, 46, 2336, $a([60, 110, 160, 192]), $a([2, 0, 3, 2, 4, 4, 4, 4])]), $a(["full", "10", $1.v10to26, 57, 57, 28, 50, 2768, $a([72, 130, 192, 224]), $a([2, 2, 4, 1, 6, 2, 6, 2])]), $a(["full", "11", $1.v10to26, 61, 61, 30, 54, 3232, $a([80, 150, 224, 264]), $a([4, 0, 1, 4, 4, 4, 3, 8])]), $a(["full", "12", $1.v10to26, 65, 65, 32, 58, 3728, $a([96, 176, 260, 308]), $a([2, 2, 6, 2, 4, 6, 7, 4])]), $a(["full", "13", $1.v10to26, 69, 69, 34, 62, 4256, $a([104, 198, 288, 352]), $a([4, 0, 8, 1, 8, 4, 12, 4])]), $a(["full", "14", $1.v10to26, 73, 73, 26, 46, 4651, $a([120, 216, 320, 384]), $a([3, 1, 4, 5, 11, 5, 11, 5])]), $a(["full", "15", $1.v10to26, 77, 77, 26, 48, 5243, $a([132, 240, 360, 432]), $a([5, 1, 5, 5, 5, 7, 11, 7])]), $a(["full", "16", $1.v10to26, 81, 81, 26, 50, 5867, $a([144, 280, 408, 480]), $a([5, 1, 7, 3, 15, 2, 3, 13])]), $a(["full", "17", $1.v10to26, 85, 85, 30, 54, 6523, $a([168, 308, 448, 532]), $a([1, 5, 10, 1, 1, 15, 2, 17])]), $a(["full", "18", $1.v10to26, 89, 89, 30, 56, 7211, $a([180, 338, 504, 588]), $a([5, 1, 9, 4, 17, 1, 2, 19])]), $a(["full", "19", $1.v10to26, 93, 93, 30, 58, 7931, $a([196, 364, 546, 650]), $a([3, 4, 3, 11, 17, 4, 9, 16])]), $a(["full", "20", $1.v10to26, 97, 97, 34, 62, 8683, $a([224, 416, 600, 700]), $a([3, 5, 3, 13, 15, 5, 15, 10])]), $a(["full", "21", $1.v10to26, 101, 101, 28, 50, 9252, $a([224, 442, 644, 750]), $a([4, 4, 17, 0, 17, 6, 19, 6])]), $a(["full", "22", $1.v10to26, 105, 105, 26, 50, 10068, $a([252, 476, 690, 816]), $a([2, 7, 17, 0, 7, 16, 34, 0])]), $a(["full", "23", $1.v10to26, 109, 109, 30, 54, 10916, $a([270, 504, 750, 900]), $a([4, 5, 4, 14, 11, 14, 16, 14])]), $a(["full", "24", $1.v10to26, 113, 113, 28, 54, 11796, $a([300, 560, 810, 960]), $a([6, 4, 6, 14, 11, 16, 30, 2])]), $a(["full", "25", $1.v10to26, 117, 117, 32, 58, 12708, $a([312, 588, 870, 1050]), $a([8, 4, 8, 13, 7, 22, 22, 13])]), $a(["full", "26", $1.v10to26, 121, 121, 30, 58, 13652, $a([336, 644, 952, 1110]), $a([10, 2, 19, 4, 28, 6, 33, 4])]), $a(["full", "27", $1.v27to40, 125, 125, 34, 62, 14628, $a([360, 700, 1020, 1200]), $a([8, 4, 22, 3, 8, 26, 12, 28])]), $a(["full", "28", $1.v27to40, 129, 129, 26, 50, 15371, $a([390, 728, 1050, 1260]), $a([3, 10, 3, 23, 4, 31, 11, 31])]), $a(["full", "29", $1.v27to40, 133, 133, 30, 54, 16411, $a([420, 784, 1140, 1350]), $a([7, 7, 21, 7, 1, 37, 19, 26])]), $a(["full", "30", $1.v27to40, 137, 137, 26, 52, 17483, $a([450, 812, 1200, 1440]), $a([5, 10, 19, 10, 15, 25, 23, 25])]), $a(["full", "31", $1.v27to40, 141, 141, 30, 56, 18587, $a([480, 868, 1290, 1530]), $a([13, 3, 2, 29, 42, 1, 23, 28])]), $a(["full", "32", $1.v27to40, 145, 145, 34, 60, 19723, $a([510, 924, 1350, 1620]), $a([17, 0, 10, 23, 10, 35, 19, 35])]), $a(["full", "33", $1.v27to40, 149, 149, 30, 58, 20891, $a([540, 980, 1440, 1710]), $a([17, 1, 14, 21, 29, 19, 11, 46])]), $a(["full", "34", $1.v27to40, 153, 153, 34, 62, 22091, $a([570, 1036, 1530, 1800]), $a([13, 6, 14, 23, 44, 7, 59, 1])]), $a(["full", "35", $1.v27to40, 157, 157, 30, 54, 23008, $a([570, 1064, 1590, 1890]), $a([12, 7, 12, 26, 39, 14, 22, 41])]), $a(["full", "36", $1.v27to40, 161, 161, 24, 50, 24272, $a([600, 1120, 1680, 1980]), $a([6, 14, 6, 34, 46, 10, 2, 64])]), $a(["full", "37", $1.v27to40, 165, 165, 28, 54, 25568, $a([630, 1204, 1770, 2100]), $a([17, 4, 29, 14, 49, 10, 24, 46])]), $a(["full", "38", $1.v27to40, 169, 169, 32, 58, 26896, $a([660, 1260, 1860, 2220]), $a([4, 18, 13, 32, 48, 14, 42, 32])]), $a(["full", "39", $1.v27to40, 173, 173, 26, 54, 28256, $a([720, 1316, 1950, 2310]), $a([20, 4, 40, 7, 43, 22, 10, 67])]), $a(["full", "40", $1.v27to40, 177, 177, 30, 58, 29648, $a([750, 1372, 2040, 2430]), $a([19, 6, 18, 31, 34, 34, 20, 61])]), $a(["rmqr", "R7x43", $1.vR7x43, 7, 43, 22, 99, 104, $a([99, 7, 99, 10]), $a([-1, -1, 1, 0, -1, -1, 1, 0])]), $a(["rmqr", "R7x59", $1.vR7x59, 7, 59, 20, 40, 171, $a([99, 9, 99, 14]), $a([-1, -1, 1, 0, -1, -1, 1, 0])]), $a(["rmqr", "R7x77", $1.vR7x77, 7, 77, 26, 52, 261, $a([99, 12, 99, 22]), $a([-1, -1, 1, 0, -1, -1, 1, 0])]), $a(["rmqr", "R7x99", $1.vR7x99, 7, 99, 24, 50, 358, $a([99, 16, 99, 30]), $a([-1, -1, 1, 0, -1, -1, 1, 0])]), $a(["rmqr", "R7x139", $1.vR7x139, 7, 139, 28, 56, 545, $a([99, 24, 99, 44]), $a([-1, -1, 1, 0, -1, -1, 2, 0])]), $a(["rmqr", "R9x43", $1.vR9x43, 9, 43, 22, 99, 170, $a([99, 9, 99, 14]), $a([-1, -1, 1, 0, -1, -1, 1, 0])]), $a(["rmqr", "R9x59", $1.vR9x59, 9, 59, 20, 40, 267, $a([99, 12, 99, 22]), $a([-1, -1, 1, 0, -1, -1, 1, 0])]), $a(["rmqr", "R9x77", $1.vR9x77, 9, 77, 26, 52, 393, $a([99, 18, 99, 32]), $a([-1, -1, 1, 0, -1, -1, 1, 1])]), $a(["rmqr", "R9x99", $1.vR9x99, 9, 99, 24, 50, 532, $a([99, 24, 99, 44]), $a([-1, -1, 1, 0, -1, -1, 2, 0])]), $a(["rmqr", "R9x139", $1.vR9x139, 9, 139, 28, 56, 797, $a([99, 36, 99, 66]), $a([-1, -1, 1, 1, -1, -1, 3, 0])]), $a(["rmqr", "R11x27", $1.vR11x27, 11, 27, 98, 99, 122, $a([99, 8, 99, 10]), $a([-1, -1, 1, 0, -1, -1, 1, 0])]), $a(["rmqr", "R11x43", $1.vR11x43, 11, 43, 22, 99, 249, $a([99, 12, 99, 20]), $a([-1, -1, 1, 0, -1, -1, 1, 0])]), $a(["rmqr", "R11x59", $1.vR11x59, 11, 59, 20, 40, 376, $a([99, 16, 99, 32]), $a([-1, -1, 1, 0, -1, -1, 1, 1])]), $a(["rmqr", "R11x77", $1.vR11x77, 11, 77, 26, 52, 538, $a([99, 24, 99, 44]), $a([-1, -1, 1, 0, -1, -1, 1, 1])]), $a(["rmqr", "R11x99", $1.vR11x99, 11, 99, 24, 50, 719, $a([99, 32, 99, 60]), $a([-1, -1, 1, 1, -1, -1, 1, 1])]), $a(["rmqr", "R11x139", $1.vR11x139, 11, 139, 28, 56, 1062, $a([99, 48, 99, 90]), $a([-1, -1, 2, 0, -1, -1, 3, 0])]), $a(["rmqr", "R13x27", $1.vR13x27, 13, 27, 98, 99, 172, $a([99, 9, 99, 14]), $a([-1, -1, 1, 0, -1, -1, 1, 0])]), $a(["rmqr", "R13x43", $1.vR13x43, 13, 43, 22, 99, 329, $a([99, 14, 99, 28]), $a([-1, -1, 1, 0, -1, -1, 1, 0])]), $a(["rmqr", "R13x59", $1.vR13x59, 13, 59, 20, 40, 486, $a([99, 22, 99, 40]), $a([-1, -1, 1, 0, -1, -1, 2, 0])]), $a(["rmqr", "R13x77", $1.vR13x77, 13, 77, 26, 52, 684, $a([99, 32, 99, 56]), $a([-1, -1, 1, 1, -1, -1, 1, 1])]), $a(["rmqr", "R13x99", $1.vR13x99, 13, 99, 24, 50, 907, $a([99, 40, 99, 78]), $a([-1, -1, 1, 1, -1, -1, 1, 2])]), $a(["rmqr", "R13x139", $1.vR13x139, 13, 139, 28, 56, 1328, $a([99, 60, 99, 112]), $a([-1, -1, 2, 1, -1, -1, 2, 2])]), $a(["rmqr", "R15x43", $1.vR15x43, 15, 43, 22, 99, 409, $a([99, 18, 99, 36]), $a([-1, -1, 1, 0, -1, -1, 1, 1])]), $a(["rmqr", "R15x59", $1.vR15x59, 15, 59, 20, 40, 596, $a([99, 26, 99, 48]), $a([-1, -1, 1, 0, -1, -1, 2, 0])]), $a(["rmqr", "R15x77", $1.vR15x77, 15, 77, 26, 52, 830, $a([99, 36, 99, 72]), $a([-1, -1, 1, 1, -1, -1, 2, 1])]), $a(["rmqr", "R15x99", $1.vR15x99, 15, 99, 24, 50, 1095, $a([99, 48, 99, 88]), $a([-1, -1, 2, 0, -1, -1, 4, 0])]), $a(["rmqr", "R15x139", $1.vR15x139, 15, 139, 28, 56, 1594, $a([99, 72, 99, 130]), $a([-1, -1, 2, 1, -1, -1, 1, 4])]), $a(["rmqr", "R17x43", $1.vR17x43, 17, 43, 22, 99, 489, $a([99, 22, 99, 40]), $a([-1, -1, 1, 0, -1, -1, 1, 1])]), $a(["rmqr", "R17x59", $1.vR17x59, 17, 59, 20, 40, 706, $a([99, 32, 99, 60]), $a([-1, -1, 2, 0, -1, -1, 2, 0])]), $a(["rmqr", "R17x77", $1.vR17x77, 17, 77, 26, 52, 976, $a([99, 44, 99, 84]), $a([-1, -1, 2, 0, -1, -1, 1, 2])]), $a(["rmqr", "R17x99", $1.vR17x99, 17, 99, 24, 50, 1283, $a([99, 60, 99, 104]), $a([-1, -1, 2, 1, -1, -1, 4, 0])]), $a(["rmqr", "R17x139", $1.vR17x139, 17, 139, 28, 56, 1860, $a([99, 80, 99, 156]), $a([-1, -1, 4, 0, -1, -1, 2, 4])])]); /*17637*/
		$k[$j++] = 'eclval'; /*17638*/
		$search("LMQH", $1.eclevel); /*17638*/
		$j--; /*17638*/
		var _Ja = $k[--$j]; /*17638*/
		var _Jb = $k[--$j]; /*17638*/
		var _Jc = $k[--$j]; /*17638*/
		$1[$k[--$j]] = _Ja.length; /*17638*/
		for (var _Jg = 0, _Jf = $1.metrics.length - 1; _Jg <= _Jf; _Jg += 1) {
			/*17677*/
			$1.i = _Jg; /*17640*/
			$1.m = $get($1.metrics, $1.i); /*17641*/
			$1.frmt = $get($1.m, 0); /*17642*/
			$1.vers = $get($1.m, 1); /*17643*/
			$1.vergrp = $get($1.m, 2); /*17644*/
			$1.verind = $1.i - 44; /*17645*/
			$1.rows = $get($1.m, 3); /*17646*/
			$1.cols = $get($1.m, 4); /*17647*/
			$1.asp2 = $get($1.m, 5); /*17648*/
			$1.asp3 = $get($1.m, 6); /*17649*/
			$1.nmod = $get($1.m, 7); /*17650*/
			$1.ncws = ~~($1.nmod / 8); /*17651*/
			$1.rbit = $1.nmod % 8; /*17652*/
			$1.lc4b = false; /*17653*/
			if ($eq($1.vers, "M1") || $eq($1.vers, "M3")) { //no-else/*17658*/
				$1.ncws = $1.ncws + 1; /*17655*/
				$1.rbit = 0; /*17656*/
				$1.lc4b = true; /*17657*/
			} /*17657*/
			$1.ecws = $get($get($1.m, 8), $1.eclval); /*17659*/
			$1.dcws = $1.ncws - $1.ecws; /*17660*/
			var _KE = $1.lc4b ? 4 : 0; /*17661*/
			$1.dmod = ($1.dcws * 8) - _KE; /*17661*/
			$1.ecb1 = $get($get($1.m, 9), $1.eclval * 2); /*17662*/
			$1.ecb2 = $get($get($1.m, 9), ($1.eclval * 2) + 1); /*17663*/
			$1.okay = true; /*17664*/
			if ($ne($1.format, $1.frmt)) { //no-else/*17665*/
				$1.okay = false; /*17665*/
			} /*17665*/
			if ($eq($1.frmt, "micro") && $1.fnc1first) { //no-else/*17666*/
				$1.okay = false; /*17666*/
			} /*17666*/
			if ($ne($1.version, "unset") && $ne($1.version, $1.vers)) { //no-else/*17667*/
				$1.okay = false; /*17667*/
			} /*17667*/
			if (($1.ecb1 == -1) || ($1.ecb2 == -1)) { //no-else/*17668*/
				$1.okay = false; /*17668*/
			} /*17668*/
			$1.verbits = $get($1.msgbits, $1.vergrp); /*17669*/
			if ($1.verbits == -1) {
				/*17673*/
				$1.okay = false; /*17671*/
			} else {
				/*17673*/
				if ($1.verbits.length > $1.dmod) { //no-else/*17673*/
					$1.okay = false; /*17673*/
				} /*17673*/
			} /*17673*/
			$1.term = $geti("000000000", 0, $get($1.termlens, $1.vergrp)); /*17675*/
			if ($1.okay) { //no-else/*17676*/
				break; /*17676*/
			} /*17676*/
		} /*17676*/
		if (!$1.okay) { //no-else/*17681*/
			$k[$j++] = 'bwipp.qrcodeNoValidSymbol'; /*17680*/
			$k[$j++] = "No valid symbol available"; /*17680*/
			$0.raiseerror(); /*17680*/
		} /*17680*/
		$1.format = $1.frmt; /*17683*/
		$1.version = $1.vers; /*17684*/
		$1.msgbits = $1.verbits; /*17685*/
		$1.dcpb = ~~($1.dcws / ($1.ecb1 + $1.ecb2)); /*17686*/
		$1.ecpb = (~~($1.ncws / ($1.ecb1 + $1.ecb2))) - $1.dcpb; /*17687*/
		var _Ks = $1.term; /*17690*/
		var _Kt = $1.dmod; /*17690*/
		var _Ku = $1.msgbits; /*17690*/
		var _Kv = $1.term; /*17690*/
		var _Kw = _Kv.length; /*17690*/
		var _Kx = _Kt - _Ku.length; /*17690*/
		if ((_Kt - _Ku.length) > _Kv.length) { //no-else/*17690*/
			var _ = _Kw; /*17690*/
			_Kw = _Kx; /*17690*/
			_Kx = _; /*17690*/
		} /*17690*/
		$1.term = $geti(_Ks, 0, _Kx); /*17690*/
		var _L1 = $s($1.msgbits.length + $1.term.length); /*17691*/
		$puti(_L1, 0, $1.msgbits); /*17692*/
		$puti(_L1, $1.msgbits.length, $1.term); /*17693*/
		$1.msgbits = _L1; /*17694*/
		$1.pad = $s($1.dmod); /*17697*/
		for (var _L9 = 0, _L8 = $1.pad.length - 1; _L9 <= _L8; _L9 += 1) {
			/*17698*/
			$put($1.pad, _L9, 48); /*17698*/
		} /*17698*/
		$puti($1.pad, 0, $1.msgbits); /*17699*/
		$1.padstrs = $a(["11101100", "00010001"]); /*17700*/
		$1.padnum = 0; /*17701*/
		var _LH = $1.lc4b ? 5 : 1; /*17702*/
		for (var _LJ = ~~(Math.ceil($1.msgbits.length / 8) * 8), _LI = $1.dmod - _LH; _LJ <= _LI; _LJ += 8) {
			/*17705*/
			$puti($1.pad, _LJ, $get($1.padstrs, $1.padnum)); /*17703*/
			$1.padnum = ($1.padnum + 1) % 2; /*17704*/
		} /*17704*/
		$1.cws = $a($1.dcws); /*17708*/
		for (var _LT = 0, _LS = $1.cws.length - 1; _LT <= _LS; _LT += 1) {
			/*17720*/
			$1.c = _LT; /*17710*/
			$1.bpcw = 8; /*17711*/
			if ($1.lc4b && ($1.c == ($1.cws.length - 1))) { //no-else/*17712*/
				$1.bpcw = 4; /*17712*/
			} /*17712*/
			$1.cwb = $geti($1.pad, $1.c * 8, $1.bpcw); /*17713*/
			$1.cw = 0; /*17714*/
			for (var _Ld = 0, _Lc = $1.bpcw - 1; _Ld <= _Lc; _Ld += 1) {
				/*17718*/
				$1.i = _Ld; /*17716*/
				$1.cw = $1.cw + ((~~(Math.pow(2, ($1.bpcw - $1.i) - 1))) * ($get($1.cwb, $1.i) - 48)); /*17717*/
			} /*17717*/
			$put($1.cws, $1.c, $1.cw); /*17719*/
		} /*17719*/
		if ($1.lc4b) { //no-else/*17723*/
			var _Lo = $1.cws; /*17723*/
			var _Lp = $1.cws; /*17723*/
			$put(_Lo, _Lp.length - 1, $get(_Lo, _Lp.length - 1) << 4); /*17723*/
		} /*17723*/
		$k[$j++] = Infinity; /*17726*/
		$k[$j++] = 1; /*17726*/
		for (var _Lr = 0, _Ls = 255; _Lr < _Ls; _Lr++) {
			/*17726*/
			var _Lt = $k[--$j]; /*17726*/
			var _Lu = _Lt * 2; /*17726*/
			$k[$j++] = _Lt; /*17726*/
			$k[$j++] = _Lu; /*17726*/
			if (_Lu >= 256) { //no-else/*17726*/
				var _Lv = $k[--$j]; /*17726*/
				$k[$j++] = _Lv ^ 285; /*17726*/
			} /*17726*/
		} /*17726*/
		$1.rsalog = $a(); /*17726*/
		$1.rslog = $a(256); /*17727*/
		for (var _Ly = 1; _Ly <= 255; _Ly += 1) {
			/*17728*/
			$put($1.rslog, $get($1.rsalog, _Ly), _Ly); /*17728*/
		} /*17728*/
		$1.rsprod = function() {
			var _M2 = $k[--$j]; /*17732*/
			var _M3 = $k[--$j]; /*17732*/
			$k[$j++] = _M3; /*17736*/
			$k[$j++] = _M2; /*17736*/
			if ((_M2 != 0) && (_M3 != 0)) {
				/*17735*/
				var _M6 = $get($1.rslog, $k[--$j]); /*17733*/
				var _MB = $get($1.rsalog, (_M6 + $get($1.rslog, $k[--$j])) % 255); /*17733*/
				$k[$j++] = _MB; /*17733*/
			} else {
				/*17735*/
				$j -= 2; /*17735*/
				$k[$j++] = 0; /*17735*/
			} /*17735*/
		}; /*17737*/
		$k[$j++] = Infinity; /*17740*/
		$k[$j++] = 1; /*17740*/
		for (var _MD = 0, _ME = $1.ecpb; _MD < _ME; _MD++) {
			/*17740*/
			$k[$j++] = 0; /*17740*/
		} /*17740*/
		$1.coeffs = $a(); /*17740*/
		for (var _MI = 0, _MH = $1.ecpb - 1; _MI <= _MH; _MI += 1) {
			/*17749*/
			$1.i = _MI; /*17742*/
			$put($1.coeffs, $1.i + 1, $get($1.coeffs, $1.i)); /*17743*/
			for (var _MP = $1.i; _MP >= 1; _MP -= 1) {
				/*17747*/
				$1.j = _MP; /*17745*/
				$k[$j++] = $1.coeffs; /*17746*/
				$k[$j++] = $1.j; /*17746*/
				$k[$j++] = $get($1.coeffs, $1.j - 1); /*17746*/
				$k[$j++] = $get($1.coeffs, $1.j); /*17746*/
				$k[$j++] = $get($1.rsalog, $1.i); /*17746*/
				$1.rsprod(); /*17746*/
				var _Mb = $k[--$j]; /*17746*/
				var _Mc = $k[--$j]; /*17746*/
				var _Md = $k[--$j]; /*17746*/
				$put($k[--$j], _Md, $xo(_Mc, _Mb)); /*17746*/
			} /*17746*/
			$k[$j++] = $1.coeffs; /*17748*/
			$k[$j++] = 0; /*17748*/
			$k[$j++] = $get($1.coeffs, 0); /*17748*/
			$k[$j++] = $get($1.rsalog, $1.i); /*17748*/
			$1.rsprod(); /*17748*/
			var _Ml = $k[--$j]; /*17748*/
			var _Mm = $k[--$j]; /*17748*/
			$put($k[--$j], _Mm, _Ml); /*17748*/
		} /*17748*/
		$1.coeffs = $geti($1.coeffs, 0, $1.coeffs.length - 1); /*17750*/
		$1.rscodes = function() {
			$1.rscws = $k[--$j]; /*17754*/
			$1.rsnd = $1.rscws.length; /*17755*/
			$k[$j++] = Infinity; /*17756*/
			$forall($1.rscws); /*17756*/
			for (var _Mv = 0, _Mw = $1.ecpb; _Mv < _Mw; _Mv++) {
				/*17756*/
				$k[$j++] = 0; /*17756*/
			} /*17756*/
			$1.rscws = $a(); /*17756*/
			for (var _N0 = 0, _Mz = $1.rsnd - 1; _N0 <= _Mz; _N0 += 1) {
				/*17764*/
				$1.m = _N0; /*17758*/
				$1.k = $get($1.rscws, $1.m); /*17759*/
				for (var _N6 = 0, _N5 = $1.ecpb - 1; _N6 <= _N5; _N6 += 1) {
					/*17763*/
					$1.j = _N6; /*17761*/
					$k[$j++] = $1.rscws; /*17762*/
					$k[$j++] = ($1.m + $1.j) + 1; /*17762*/
					$k[$j++] = $get($1.coeffs, ($1.ecpb - $1.j) - 1); /*17762*/
					$k[$j++] = $1.k; /*17762*/
					$1.rsprod(); /*17762*/
					var _NJ = $k[--$j]; /*17762*/
					var _NK = $k[--$j]; /*17762*/
					$put($k[--$j], _NK, $xo(_NJ, $get($1.rscws, ($1.m + $1.j) + 1))); /*17762*/
				} /*17762*/
			} /*17762*/
			$k[$j++] = $geti($1.rscws, $1.rsnd, $1.ecpb); /*17765*/
		}; /*17766*/
		$1.dcwsb = $a($1.ecb1 + $1.ecb2); /*17769*/
		$1.ecwsb = $a($1.ecb1 + $1.ecb2); /*17770*/
		for (var _NY = 0, _NX = $1.ecb1 - 1; _NY <= _NX; _NY += 1) {
			/*17775*/
			$1.i = _NY; /*17772*/
			$put($1.dcwsb, $1.i, $geti($1.cws, $1.i * $1.dcpb, $1.dcpb)); /*17773*/
			$k[$j++] = $1.ecwsb; /*17774*/
			$k[$j++] = $1.i; /*17774*/
			$k[$j++] = $get($1.dcwsb, $1.i); /*17774*/
			$1.rscodes(); /*17774*/
			var _Nl = $k[--$j]; /*17774*/
			var _Nm = $k[--$j]; /*17774*/
			$put($k[--$j], _Nm, _Nl); /*17774*/
		} /*17774*/
		for (var _Nq = 0, _Np = $1.ecb2 - 1; _Nq <= _Np; _Nq += 1) {
			/*17780*/
			$1.i = _Nq; /*17777*/
			$put($1.dcwsb, $1.ecb1 + $1.i, $geti($1.cws, ($1.ecb1 * $1.dcpb) + ($1.i * ($1.dcpb + 1)), $1.dcpb + 1)); /*17778*/
			$k[$j++] = $1.ecwsb; /*17779*/
			$k[$j++] = $1.ecb1 + $1.i; /*17779*/
			$k[$j++] = $get($1.dcwsb, $1.ecb1 + $1.i); /*17779*/
			$1.rscodes(); /*17779*/
			var _O8 = $k[--$j]; /*17779*/
			var _O9 = $k[--$j]; /*17779*/
			$put($k[--$j], _O9, _O8); /*17779*/
		} /*17779*/
		$1.cws = $a($1.ncws); /*17783*/
		$1.cw = 0; /*17784*/
		for (var _OF = 0, _OE = $1.dcpb; _OF <= _OE; _OF += 1) {
			/*17794*/
			$1.i = _OF; /*17786*/
			for (var _OJ = 0, _OI = ($1.ecb1 + $1.ecb2) - 1; _OJ <= _OI; _OJ += 1) {
				/*17793*/
				$1.j = _OJ; /*17788*/
				if ($1.i < $get($1.dcwsb, $1.j).length) { //no-else/*17792*/
					$put($1.cws, $1.cw, $get($get($1.dcwsb, $1.j), $1.i)); /*17790*/
					$1.cw = $1.cw + 1; /*17791*/
				} /*17791*/
			} /*17791*/
		} /*17791*/
		for (var _OY = 0, _OX = $1.ecpb - 1; _OY <= _OX; _OY += 1) {
			/*17802*/
			$1.i = _OY; /*17796*/
			for (var _Oc = 0, _Ob = ($1.ecb1 + $1.ecb2) - 1; _Oc <= _Ob; _Oc += 1) {
				/*17801*/
				$1.j = _Oc; /*17798*/
				$put($1.cws, $1.cw, $get($get($1.ecwsb, $1.j), $1.i)); /*17799*/
				$1.cw = $1.cw + 1; /*17800*/
			} /*17800*/
		} /*17800*/
		if ($1.rbit > 0) { //no-else/*17810*/
			$1.pad = $a($1.cws.length + 1); /*17806*/
			$puti($1.pad, 0, $1.cws); /*17807*/
			$put($1.pad, $1.pad.length - 1, 0); /*17808*/
			$1.cws = $1.pad; /*17809*/
		} /*17809*/
		if ($1.lc4b) { //no-else/*17821*/
			var _Ou = $1.cws; /*17814*/
			var _Ov = $1.dcws; /*17814*/
			$put(_Ou, _Ov - 1, $get(_Ou, _Ov - 1) >>> 4); /*17814*/
			for (var _P0 = $1.dcws - 1, _Oz = $1.ncws - 2; _P0 <= _Oz; _P0 += 1) {
				/*17819*/
				$1.i = _P0; /*17816*/
				$put($1.cws, $1.i, ($get($1.cws, $1.i) & 15) << 4); /*17817*/
				$put($1.cws, $1.i, (($get($1.cws, $1.i + 1) >>> 4) & 15) | $get($1.cws, $1.i)); /*17818*/
			} /*17818*/
			$put($1.cws, $1.ncws - 1, ($get($1.cws, $1.ncws - 1) & 15) << 4); /*17820*/
		} /*17820*/
		$k[$j++] = Infinity; /*17824*/
		for (var _PL = 0, _PM = $1.rows * $1.cols; _PL < _PM; _PL++) {
			/*17824*/
			$k[$j++] = -1; /*17824*/
		} /*17824*/
		$1.pixs = $a(); /*17824*/
		$1.qmv = function() {
			var _PP = $k[--$j]; /*17825*/
			var _PQ = $k[--$j]; /*17825*/
			$k[$j++] = _PQ + (_PP * $1.cols); /*17825*/
		}; /*17825*/
		if ($eq($1.format, "full")) { //no-else/*17834*/
			for (var _PU = 8, _PT = $1.cols - 9; _PU <= _PT; _PU += 1) {
				/*17833*/
				$1.i = _PU; /*17830*/
				$k[$j++] = $1.pixs; /*17831*/
				$k[$j++] = $1.i; /*17831*/
				$k[$j++] = 6; /*17831*/
				$1.qmv(); /*17831*/
				var _PY = $k[--$j]; /*17831*/
				$put($k[--$j], _PY, ($1.i + 1) % 2); /*17831*/
				$k[$j++] = $1.pixs; /*17832*/
				$k[$j++] = 6; /*17832*/
				$k[$j++] = $1.i; /*17832*/
				$1.qmv(); /*17832*/
				var _Pd = $k[--$j]; /*17832*/
				$put($k[--$j], _Pd, ($1.i + 1) % 2); /*17832*/
			} /*17832*/
		} /*17832*/
		if ($eq($1.format, "micro")) { //no-else/*17841*/
			for (var _Pi = 8, _Ph = $1.cols - 1; _Pi <= _Ph; _Pi += 1) {
				/*17840*/
				$1.i = _Pi; /*17837*/
				$k[$j++] = $1.pixs; /*17838*/
				$k[$j++] = $1.i; /*17838*/
				$k[$j++] = 0; /*17838*/
				$1.qmv(); /*17838*/
				var _Pm = $k[--$j]; /*17838*/
				$put($k[--$j], _Pm, ($1.i + 1) % 2); /*17838*/
				$k[$j++] = $1.pixs; /*17839*/
				$k[$j++] = 0; /*17839*/
				$k[$j++] = $1.i; /*17839*/
				$1.qmv(); /*17839*/
				var _Pr = $k[--$j]; /*17839*/
				$put($k[--$j], _Pr, ($1.i + 1) % 2); /*17839*/
			} /*17839*/
		} /*17839*/
		if ($eq($1.format, "rmqr")) { //no-else/*17860*/
			for (var _Pw = 3, _Pv = $1.cols - 4; _Pw <= _Pv; _Pw += 1) {
				/*17847*/
				$1.i = _Pw; /*17844*/
				$k[$j++] = $1.pixs; /*17845*/
				$k[$j++] = $1.i; /*17845*/
				$k[$j++] = 0; /*17845*/
				$1.qmv(); /*17845*/
				var _Q0 = $k[--$j]; /*17845*/
				$put($k[--$j], _Q0, ($1.i + 1) % 2); /*17845*/
				$k[$j++] = $1.pixs; /*17846*/
				$k[$j++] = $1.i; /*17846*/
				$k[$j++] = $1.rows - 1; /*17846*/
				$1.qmv(); /*17846*/
				var _Q6 = $k[--$j]; /*17846*/
				$put($k[--$j], _Q6, ($1.i + 1) % 2); /*17846*/
			} /*17846*/
			for (var _QA = 3, _Q9 = $1.rows - 4; _QA <= _Q9; _QA += 1) {
				/*17852*/
				$1.i = _QA; /*17849*/
				$k[$j++] = $1.pixs; /*17850*/
				$k[$j++] = 0; /*17850*/
				$k[$j++] = $1.i; /*17850*/
				$1.qmv(); /*17850*/
				var _QE = $k[--$j]; /*17850*/
				$put($k[--$j], _QE, ($1.i + 1) % 2); /*17850*/
				$k[$j++] = $1.pixs; /*17851*/
				$k[$j++] = $1.cols - 1; /*17851*/
				$k[$j++] = $1.i; /*17851*/
				$1.qmv(); /*17851*/
				var _QK = $k[--$j]; /*17851*/
				$put($k[--$j], _QK, ($1.i + 1) % 2); /*17851*/
			} /*17851*/
			for (var _QR = $1.asp2 - 1, _QS = $1.asp3 - $1.asp2, _QQ = $1.cols - 13; _QS < 0 ? _QR >= _QQ : _QR <= _QQ; _QR += _QS) {
				/*17859*/
				$1.i = _QR; /*17854*/
				for (var _QV = 3, _QU = $1.rows - 4; _QV <= _QU; _QV += 1) {
					/*17858*/
					$1.j = _QV; /*17856*/
					$k[$j++] = $1.pixs; /*17857*/
					$k[$j++] = $1.i; /*17857*/
					$k[$j++] = $1.j; /*17857*/
					$1.qmv(); /*17857*/
					var _Qa = $k[--$j]; /*17857*/
					$put($k[--$j], _Qa, ($1.j + 1) % 2); /*17857*/
				} /*17857*/
			} /*17857*/
		} /*17857*/
		$1.fpat = $a([$a([1, 1, 1, 1, 1, 1, 1, 0]), $a([1, 0, 0, 0, 0, 0, 1, 0]), $a([1, 0, 1, 1, 1, 0, 1, 0]), $a([1, 0, 1, 1, 1, 0, 1, 0]), $a([1, 0, 1, 1, 1, 0, 1, 0]), $a([1, 0, 0, 0, 0, 0, 1, 0]), $a([1, 1, 1, 1, 1, 1, 1, 0]), $a([0, 0, 0, 0, 0, 0, 0, 0])]); /*17872*/
		$1.fsubpat = $a([$a([1, 1, 1, 1, 1, 9, 9, 9]), $a([1, 0, 0, 0, 1, 9, 9, 9]), $a([1, 0, 1, 0, 1, 9, 9, 9]), $a([1, 0, 0, 0, 1, 9, 9, 9]), $a([1, 1, 1, 1, 1, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9])]); /*17882*/
		$1.fcorpat = $a([$a([1, 1, 1, 9, 9, 9, 9, 9]), $a([1, 0, 9, 9, 9, 9, 9, 9]), $a([1, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9])]); /*17892*/
		$1.fnullpat = $a([$a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9])]); /*17902*/
		var _RR = new Map([
			["full", $a([$1.fpat, $1.fpat, $1.fpat, $1.fnullpat])],
			["micro", $a([$1.fpat, $1.fnullpat, $1.fnullpat, $1.fnullpat])],
			["rmqr", $a([$1.fpat, $1.fcorpat, $1.fcorpat, $1.fsubpat])]
		]); /*17907*/
		$1.fpats = $get(_RR, $1.format); /*17908*/
		for (var _RU = 0; _RU <= 7; _RU += 1) {
			/*17922*/
			$1.y = _RU; /*17910*/
			for (var _RV = 0; _RV <= 7; _RV += 1) {
				/*17921*/
				$1.x = _RV; /*17912*/
				$1.fpb0 = $get($get($get($1.fpats, 0), $1.y), $1.x); /*17913*/
				$1.fpb1 = $get($get($get($1.fpats, 1), $1.y), $1.x); /*17914*/
				$1.fpb2 = $get($get($get($1.fpats, 2), $1.y), $1.x); /*17915*/
				$1.fpb3 = $get($get($get($1.fpats, 3), $1.y), $1.x); /*17916*/
				if (($1.fpb0 != 9) && ($1.y < $1.rows)) { //no-else/*17917*/
					$k[$j++] = $1.pixs; /*17917*/
					$k[$j++] = $1.x; /*17917*/
					$k[$j++] = $1.y; /*17917*/
					$1.qmv(); /*17917*/
					var _S1 = $k[--$j]; /*17917*/
					$put($k[--$j], _S1, $1.fpb0); /*17917*/
				} /*17917*/
				if ($1.fpb1 != 9) { //no-else/*17918*/
					$k[$j++] = $1.pixs; /*17918*/
					$k[$j++] = ($1.cols - $1.x) - 1; /*17918*/
					$k[$j++] = $1.y; /*17918*/
					$1.qmv(); /*17918*/
					var _S9 = $k[--$j]; /*17918*/
					$put($k[--$j], _S9, $1.fpb1); /*17918*/
				} /*17918*/
				if ($1.fpb2 != 9) { //no-else/*17919*/
					$k[$j++] = $1.pixs; /*17919*/
					$k[$j++] = $1.x; /*17919*/
					$k[$j++] = ($1.rows - $1.y) - 1; /*17919*/
					$1.qmv(); /*17919*/
					var _SH = $k[--$j]; /*17919*/
					$put($k[--$j], _SH, $1.fpb2); /*17919*/
				} /*17919*/
				if ($1.fpb3 != 9) { //no-else/*17920*/
					$k[$j++] = $1.pixs; /*17920*/
					$k[$j++] = ($1.cols - $1.x) - 1; /*17920*/
					$k[$j++] = ($1.rows - $1.y) - 1; /*17920*/
					$1.qmv(); /*17920*/
					var _SQ = $k[--$j]; /*17920*/
					$put($k[--$j], _SQ, $1.fpb3); /*17920*/
				} /*17920*/
			} /*17920*/
		} /*17920*/
		$1.putalgnpat = function() {
			$1.py = $k[--$j]; /*17926*/
			$1.px = $k[--$j]; /*17927*/
			for (var _SU = 0; _SU <= 4; _SU += 1) {
				/*17937*/
				$1.pb = _SU; /*17929*/
				for (var _SV = 0; _SV <= 4; _SV += 1) {
					/*17936*/
					$1.pa = _SV; /*17931*/
					$1.algnb = $get($get($1.algnpat, $1.pb), $1.pa); /*17932*/
					if ($1.algnb != 9) { //no-else/*17935*/
						$k[$j++] = $1.pixs; /*17934*/
						$k[$j++] = $1.px + $1.pa; /*17934*/
						$k[$j++] = $1.py + $1.pb; /*17934*/
						$1.qmv(); /*17934*/
						var _Si = $k[--$j]; /*17934*/
						$put($k[--$j], _Si, $1.algnb); /*17934*/
					} /*17934*/
				} /*17934*/
			} /*17934*/
		}; /*17938*/
		if ($eq($1.format, "full")) { //no-else/*17959*/
			$1.algnpat = $a([$a([1, 1, 1, 1, 1]), $a([1, 0, 0, 0, 1]), $a([1, 0, 1, 0, 1]), $a([1, 0, 0, 0, 1]), $a([1, 1, 1, 1, 1])]); /*17946*/
			for (var _Sw = $1.asp2 - 2, _Sx = $1.asp3 - $1.asp2, _Sv = $1.cols - 13; _Sx < 0 ? _Sw >= _Sv : _Sw <= _Sv; _Sw += _Sx) {
				/*17951*/
				$1.i = _Sw; /*17948*/
				$k[$j++] = $1.i; /*17949*/
				$k[$j++] = 4; /*17949*/
				$1.putalgnpat(); /*17949*/
				$k[$j++] = 4; /*17950*/
				$k[$j++] = $1.i; /*17950*/
				$1.putalgnpat(); /*17950*/
			} /*17950*/
			for (var _T5 = $1.asp2 - 2, _T6 = $1.asp3 - $1.asp2, _T4 = $1.cols - 9; _T6 < 0 ? _T5 >= _T4 : _T5 <= _T4; _T5 += _T6) {
				/*17958*/
				$1.x = _T5; /*17953*/
				for (var _TC = $1.asp2 - 2, _TD = $1.asp3 - $1.asp2, _TB = $1.rows - 9; _TD < 0 ? _TC >= _TB : _TC <= _TB; _TC += _TD) {
					/*17957*/
					$1.y = _TC; /*17955*/
					$k[$j++] = $1.x; /*17956*/
					$k[$j++] = $1.y; /*17956*/
					$1.putalgnpat(); /*17956*/
				} /*17956*/
			} /*17956*/
		} /*17956*/
		if ($eq($1.format, "rmqr")) { //no-else/*17973*/
			$1.algnpat = $a([$a([1, 1, 1, 9, 9]), $a([1, 0, 1, 9, 9]), $a([1, 1, 1, 9, 9]), $a([9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9])]); /*17967*/
			for (var _TS = $1.asp2 - 2, _TT = $1.asp3 - $1.asp2, _TR = $1.cols - 13; _TT < 0 ? _TS >= _TR : _TS <= _TR; _TS += _TT) {
				/*17972*/
				$1.i = _TS; /*17969*/
				$k[$j++] = $1.i; /*17970*/
				$k[$j++] = 0; /*17970*/
				$1.putalgnpat(); /*17970*/
				$k[$j++] = $1.i; /*17971*/
				$k[$j++] = $1.rows - 3; /*17971*/
				$1.putalgnpat(); /*17971*/
			} /*17971*/
		} /*17971*/
		var _WU = new Map([
			["full", $a([$a([$a([0, 8]), $a([8, $1.cols - 1])]), $a([$a([1, 8]), $a([8, $1.cols - 2])]), $a([$a([2, 8]), $a([8, $1.cols - 3])]), $a([$a([3, 8]), $a([8, $1.cols - 4])]), $a([$a([4, 8]), $a([8, $1.cols - 5])]), $a([$a([5, 8]), $a([8, $1.cols - 6])]), $a([$a([7, 8]), $a([8, $1.cols - 7])]), $a([$a([8, 8]), $a([$1.cols - 8, 8])]), $a([$a([8, 7]), $a([$1.cols - 7, 8])]), $a([$a([8, 5]), $a([$1.cols - 6, 8])]), $a([$a([8, 4]), $a([$1.cols - 5, 8])]), $a([$a([8, 3]), $a([$1.cols - 4, 8])]), $a([$a([8, 2]), $a([$1.cols - 3, 8])]), $a([$a([8, 1]), $a([$1.cols - 2, 8])]), $a([$a([8, 0]), $a([$1.cols - 1, 8])])])],
			["micro", $a([$a([$a([1, 8])]), $a([$a([2, 8])]), $a([$a([3, 8])]), $a([$a([4, 8])]), $a([$a([5, 8])]), $a([$a([6, 8])]), $a([$a([7, 8])]), $a([$a([8, 8])]), $a([$a([8, 7])]), $a([$a([8, 6])]), $a([$a([8, 5])]), $a([$a([8, 4])]), $a([$a([8, 3])]), $a([$a([8, 2])]), $a([$a([8, 1])])])],
			["rmqr", $a([$a([$a([11, 3]), $a([$1.cols - 3, $1.rows - 6])]), $a([$a([11, 2]), $a([$1.cols - 4, $1.rows - 6])]), $a([$a([11, 1]), $a([$1.cols - 5, $1.rows - 6])]), $a([$a([10, 5]), $a([$1.cols - 6, $1.rows - 2])]), $a([$a([10, 4]), $a([$1.cols - 6, $1.rows - 3])]), $a([$a([10, 3]), $a([$1.cols - 6, $1.rows - 4])]), $a([$a([10, 2]), $a([$1.cols - 6, $1.rows - 5])]), $a([$a([10, 1]), $a([$1.cols - 6, $1.rows - 6])]), $a([$a([9, 5]), $a([$1.cols - 7, $1.rows - 2])]), $a([$a([9, 4]), $a([$1.cols - 7, $1.rows - 3])]), $a([$a([9, 3]), $a([$1.cols - 7, $1.rows - 4])]), $a([$a([9, 2]), $a([$1.cols - 7, $1.rows - 5])]), $a([$a([9, 1]), $a([$1.cols - 7, $1.rows - 6])]), $a([$a([8, 5]), $a([$1.cols - 8, $1.rows - 2])]), $a([$a([8, 4]), $a([$1.cols - 8, $1.rows - 3])]), $a([$a([8, 3]), $a([$1.cols - 8, $1.rows - 4])]), $a([$a([8, 2]), $a([$1.cols - 8, $1.rows - 5])]), $a([$a([8, 1]), $a([$1.cols - 8, $1.rows - 6])])])]
		]); /*17995*/
		$1.formatmap = $get(_WU, $1.format); /*17997*/
		$forall($1.formatmap, function() {
			/*18000*/
			$forall($k[--$j], function() {
				/*17999*/
				$forall($k[--$j]); /*17999*/
				$1.qmv(); /*17999*/
				$put($1.pixs, $k[--$j], 1); /*17999*/
			}); /*17999*/
		}); /*17999*/
		if ($eq($1.format, "full") && ($1.cols >= 45)) {
			/*18016*/
			$1.versionmap = $a([$a([$a([$1.cols - 9, 5]), $a([5, $1.cols - 9])]), $a([$a([$1.cols - 10, 5]), $a([5, $1.cols - 10])]), $a([$a([$1.cols - 11, 5]), $a([5, $1.cols - 11])]), $a([$a([$1.cols - 9, 4]), $a([4, $1.cols - 9])]), $a([$a([$1.cols - 10, 4]), $a([4, $1.cols - 10])]), $a([$a([$1.cols - 11, 4]), $a([4, $1.cols - 11])]), $a([$a([$1.cols - 9, 3]), $a([3, $1.cols - 9])]), $a([$a([$1.cols - 10, 3]), $a([3, $1.cols - 10])]), $a([$a([$1.cols - 11, 3]), $a([3, $1.cols - 11])]), $a([$a([$1.cols - 9, 2]), $a([2, $1.cols - 9])]), $a([$a([$1.cols - 10, 2]), $a([2, $1.cols - 10])]), $a([$a([$1.cols - 11, 2]), $a([2, $1.cols - 11])]), $a([$a([$1.cols - 9, 1]), $a([1, $1.cols - 9])]), $a([$a([$1.cols - 10, 1]), $a([1, $1.cols - 10])]), $a([$a([$1.cols - 11, 1]), $a([1, $1.cols - 11])]), $a([$a([$1.cols - 9, 0]), $a([0, $1.cols - 9])]), $a([$a([$1.cols - 10, 0]), $a([0, $1.cols - 10])]), $a([$a([$1.cols - 11, 0]), $a([0, $1.cols - 11])])]); /*18014*/
		} else {
			/*18016*/
			$1.versionmap = $a([]); /*18016*/
		} /*18016*/
		var _Y8 = $1.versionmap; /*18018*/
		for (var _Y9 = 0, _YA = _Y8.length; _Y9 < _YA; _Y9++) {
			/*18020*/
			$forall($get(_Y8, _Y9), function() {
				/*18019*/
				$forall($k[--$j]); /*18019*/
				$1.qmv(); /*18019*/
				$put($1.pixs, $k[--$j], 0); /*18019*/
			}); /*18019*/
		} /*18019*/
		if ($eq($1.format, "full")) { //no-else/*18025*/
			$k[$j++] = $1.pixs; /*18024*/
			$k[$j++] = 8; /*18024*/
			$k[$j++] = $1.rows - 8; /*18024*/
			$1.qmv(); /*18024*/
			var _YI = $k[--$j]; /*18024*/
			$put($k[--$j], _YI, 0); /*18024*/
		} /*18024*/
		var _Yb = $a([function() {
			var _YK = $k[--$j]; /*18030*/
			var _YL = $k[--$j]; /*18030*/
			$k[$j++] = (_YL + _YK) % 2; /*18030*/
		}, function() {
			var _YM = $k[--$j]; /*18031*/
			var _YN = $k[--$j]; /*18031*/
			$k[$j++] = _YM % 2; /*18031*/
		}, function() {
			$j--; /*18032*/
			var _YO = $k[--$j]; /*18032*/
			$k[$j++] = _YO % 3; /*18032*/
		}, function() {
			var _YP = $k[--$j]; /*18033*/
			var _YQ = $k[--$j]; /*18033*/
			$k[$j++] = (_YQ + _YP) % 3; /*18033*/
		}, function() {
			var _YR = $k[--$j]; /*18034*/
			var _YS = $k[--$j]; /*18034*/
			$k[$j++] = ((~~(_YR / 2)) + (~~(_YS / 3))) % 2; /*18034*/
		}, function() {
			var _YT = $k[--$j]; /*18035*/
			var _YV = $k[--$j] * _YT; /*18035*/
			$k[$j++] = (_YV % 2) + (_YV % 3); /*18035*/
		}, function() {
			var _YW = $k[--$j]; /*18036*/
			var _YY = $k[--$j] * _YW; /*18036*/
			$k[$j++] = ((_YY % 2) + (_YY % 3)) % 2; /*18036*/
		}, function() {
			var _YZ = $k[--$j]; /*18037*/
			var _Ya = $k[--$j]; /*18037*/
			$k[$j++] = (((_Ya * _YZ) % 3) + ((_Ya + _YZ) % 2)) % 2; /*18037*/
		}]); /*18037*/
		var _Yl = $a([function() {
			var _Yc = $k[--$j]; /*18040*/
			var _Yd = $k[--$j]; /*18040*/
			$k[$j++] = _Yc % 2; /*18040*/
		}, function() {
			var _Ye = $k[--$j]; /*18041*/
			var _Yf = $k[--$j]; /*18041*/
			$k[$j++] = ((~~(_Ye / 2)) + (~~(_Yf / 3))) % 2; /*18041*/
		}, function() {
			var _Yg = $k[--$j]; /*18042*/
			var _Yi = $k[--$j] * _Yg; /*18042*/
			$k[$j++] = ((_Yi % 2) + (_Yi % 3)) % 2; /*18042*/
		}, function() {
			var _Yj = $k[--$j]; /*18043*/
			var _Yk = $k[--$j]; /*18043*/
			$k[$j++] = (((_Yk * _Yj) % 3) + ((_Yk + _Yj) % 2)) % 2; /*18043*/
		}]); /*18043*/
		var _Yo = $a([function() {
			var _Ym = $k[--$j]; /*18046*/
			var _Yn = $k[--$j]; /*18046*/
			$k[$j++] = ((~~(_Ym / 2)) + (~~(_Yn / 3))) % 2; /*18046*/
		}]); /*18046*/
		var _Yp = new Map([
			["full", _Yb],
			["micro", _Yl],
			["rmqr", _Yo]
		]); /*18046*/
		$1.maskfuncs = $get(_Yp, $1.format); /*18048*/
		if ($1.mask != -1) { //no-else/*18052*/
			$1.maskfuncs = $a([$get($1.maskfuncs, $1.mask - 1)]); /*18050*/
			$1.bestmaskval = $1.mask - 1; /*18051*/
		} /*18051*/
		$1.masks = $a($1.maskfuncs.length); /*18053*/
		for (var _Z2 = 0, _Z1 = $1.masks.length - 1; _Z2 <= _Z1; _Z2 += 1) {
			/*18067*/
			$1.m = _Z2; /*18055*/
			$1.mask = $a($1.rows * $1.cols); /*18056*/
			for (var _Z8 = 0, _Z7 = $1.rows - 1; _Z8 <= _Z7; _Z8 += 1) {
				/*18065*/
				$1.j = _Z8; /*18058*/
				for (var _ZB = 0, _ZA = $1.cols - 1; _ZB <= _ZA; _ZB += 1) {
					/*18064*/
					$1.i = _ZB; /*18060*/
					$k[$j++] = $1.i; /*18061*/
					$k[$j++] = $1.j; /*18061*/
					if ($get($1.maskfuncs, $1.m)() === true) {
						break;
					} /*18061*/
					var _ZH = $k[--$j]; /*18061*/
					$k[$j++] = _ZH == 0; /*18062*/
					$k[$j++] = $1.pixs; /*18062*/
					$k[$j++] = $1.i; /*18062*/
					$k[$j++] = $1.j; /*18062*/
					$1.qmv(); /*18062*/
					var _ZL = $k[--$j]; /*18062*/
					var _ZN = $get($k[--$j], _ZL); /*18062*/
					var _ZP = ($k[--$j] && (_ZN == -1)) ? 1 : 0; /*18062*/
					$k[$j++] = _ZP; /*18063*/
					$k[$j++] = $1.mask; /*18063*/
					$k[$j++] = $1.i; /*18063*/
					$k[$j++] = $1.j; /*18063*/
					$1.qmv(); /*18063*/
					var _ZT = $k[--$j]; /*18063*/
					var _ZU = $k[--$j]; /*18063*/
					$put(_ZU, _ZT, $k[--$j]); /*18063*/
				} /*18063*/
			} /*18063*/
			$put($1.masks, $1.m, $1.mask); /*18066*/
		} /*18066*/
		var _Zb = $ne($1.format, "rmqr") ? 1 : 2; /*18070*/
		$1.posx = $1.cols - _Zb; /*18070*/
		$1.posy = $1.rows - 1; /*18071*/
		$1.dir = -1; /*18072*/
		$1.col = 1; /*18073*/
		$1.num = 0; /*18074*/
		for (;;) {
			/*18097*/
			if ($1.posx < 0) { //no-else/*18076*/
				break; /*18076*/
			} /*18076*/
			$k[$j++] = $1.pixs; /*18077*/
			$k[$j++] = $1.posx; /*18077*/
			$k[$j++] = $1.posy; /*18077*/
			$1.qmv(); /*18077*/
			var _Zh = $k[--$j]; /*18077*/
			if ($get($k[--$j], _Zh) == -1) { //no-else/*18081*/
				var _Zm = $get($1.cws, ~~($1.num / 8)); /*18078*/
				var _Zo = -(7 - ($1.num % 8)); /*18078*/
				$k[$j++] = ((_Zo < 0 ? _Zm >>> -_Zo : _Zm << _Zo)) & 1; /*18079*/
				$k[$j++] = $1.pixs; /*18079*/
				$k[$j++] = $1.posx; /*18079*/
				$k[$j++] = $1.posy; /*18079*/
				$1.qmv(); /*18079*/
				var _Zs = $k[--$j]; /*18079*/
				var _Zt = $k[--$j]; /*18079*/
				$put(_Zt, _Zs, $k[--$j]); /*18079*/
				$1.num = $1.num + 1; /*18080*/
			} /*18080*/
			if ($1.col == 1) {
				/*18094*/
				$1.col = 0; /*18083*/
				$1.posx = $1.posx - 1; /*18084*/
			} else {
				/*18094*/
				$1.col = 1; /*18086*/
				$1.posx = $1.posx + 1; /*18087*/
				$1.posy = $1.posy + $1.dir; /*18088*/
				if (($1.posy < 0) || ($1.posy >= $1.rows)) { //no-else/*18095*/
					$1.dir = $1.dir * -1; /*18090*/
					$1.posy = $1.posy + $1.dir; /*18091*/
					$1.posx = $1.posx - 2; /*18092*/
					if ($eq($1.format, "full") && ($1.posx == 6)) { //no-else/*18094*/
						$1.posx = $1.posx - 1; /*18094*/
					} /*18094*/
				} /*18094*/
			} /*18094*/
		} /*18094*/
		$1.evalfulln1n3 = function() {
			$1.scrle = $k[--$j]; /*18101*/
			$k[$j++] = 'scr1'; /*18103*/
			$k[$j++] = 0; /*18103*/
			$forall($1.scrle, function() {
				/*18103*/
				var _aD = $k[--$j]; /*18103*/
				$k[$j++] = _aD; /*18103*/
				if (_aD >= 5) { //no-else/*18103*/
					var _aE = $k[--$j]; /*18103*/
					var _aG = ($k[--$j] + _aE) - 2; /*18103*/
					$k[$j++] = _aG; /*18103*/
					$k[$j++] = _aG; /*18103*/
				} /*18103*/
				$j--; /*18103*/
			}); /*18103*/
			var _aH = $k[--$j]; /*18103*/
			$1[$k[--$j]] = _aH; /*18103*/
			$1.scr3 = 0; /*18105*/
			for (var _aL = 3, _aK = $1.scrle.length - 3; _aL <= _aK; _aL += 2) {
				/*18120*/
				$1.j = _aL; /*18107*/
				if (($get($1.scrle, $1.j) % 3) == 0) { //no-else/*18119*/
					$1.fact = ~~($get($1.scrle, $1.j) / 3); /*18109*/
					$forall($geti($1.scrle, $1.j - 2, 5), function() {
						/*18110*/
						var _aW = $k[--$j]; /*18110*/
						$k[$j++] = _aW == $1.fact; /*18110*/
					}); /*18110*/
					var _aX = $k[--$j]; /*18110*/
					var _aY = $k[--$j]; /*18110*/
					var _aZ = $k[--$j]; /*18110*/
					var _aa = $k[--$j]; /*18110*/
					if ($k[--$j] && (_aa && (_aY && _aX))) { //no-else/*18118*/
						if (($1.j == 3) || (($1.j + 4) >= $1.scrle.length)) {
							/*18115*/
							$1.scr3 = $1.scr3 + 40; /*18112*/
						} else {
							/*18115*/
							if (($get($1.scrle, $1.j - 3) >= 4) || ($get($1.scrle, $1.j + 3) >= 4)) { //no-else/*18116*/
								$1.scr3 = $1.scr3 + 40; /*18115*/
							} /*18115*/
						} /*18115*/
					} /*18115*/
				} /*18115*/
			} /*18115*/
			$k[$j++] = $1.scr1; /*18121*/
			$k[$j++] = $1.scr3; /*18121*/
		}; /*18122*/
		$1.evalfull = function() {
			$1.sym = $k[--$j]; /*18126*/
			$1.n1 = 0; /*18128*/
			$1.n2 = 0; /*18128*/
			$1.n3 = 0; /*18128*/
			$1.rle = $a($1.cols + 1); /*18129*/
			$1.lastpairs = $a($1.cols); /*18130*/
			$1.thispairs = $a($1.cols); /*18131*/
			$1.colsadd1 = $1.cols + 1; /*18132*/
			for (var _az = 0, _ay = $1.cols - 1; _az <= _ay; _az += 1) {
				/*18171*/
				$1.i = _az; /*18134*/
				$k[$j++] = Infinity; /*18137*/
				var _b1 = $1.cols; /*18138*/
				$k[$j++] = 0; /*18140*/
				$k[$j++] = 0; /*18140*/
				for (var _b3 = $1.i, _b4 = _b1, _b2 = (_b1 * _b1) - 1; _b4 < 0 ? _b3 >= _b2 : _b3 <= _b2; _b3 += _b4) {
					/*18140*/
					var _b6 = $get($1.sym, _b3); /*18139*/
					var _b7 = $k[--$j]; /*18139*/
					$k[$j++] = _b6; /*18139*/
					if ($eq(_b7, _b6)) {
						/*18139*/
						var _b8 = $k[--$j]; /*18139*/
						var _b9 = $k[--$j]; /*18139*/
						$k[$j++] = _b9 + 1; /*18139*/
						$k[$j++] = _b8; /*18139*/
					} else {
						/*18139*/
						var _bA = $k[--$j]; /*18139*/
						$k[$j++] = 1; /*18139*/
						$k[$j++] = _bA; /*18139*/
					} /*18139*/
				} /*18139*/
				$j--; /*18141*/
				var _bC = $counttomark() + 2; /*18142*/
				$astore($geti($1.rle, 0, _bC - 2)); /*18142*/
				$1.evalfulln1n3(); /*18143*/
				$1.n3 = $k[--$j] + $1.n3; /*18143*/
				$1.n1 = $k[--$j] + $1.n1; /*18143*/
				$j--; /*18144*/
				$1.symrow = $geti($1.sym, $1.i * $1.cols, $1.cols); /*18147*/
				$k[$j++] = Infinity; /*18148*/
				$k[$j++] = 0; /*18151*/
				$k[$j++] = 0; /*18151*/
				$forall($1.symrow, function() {
					/*18151*/
					var _bO = $k[--$j]; /*18150*/
					var _bP = $k[--$j]; /*18150*/
					$k[$j++] = _bO; /*18150*/
					if ($eq(_bP, _bO)) {
						/*18150*/
						var _bQ = $k[--$j]; /*18150*/
						var _bR = $k[--$j]; /*18150*/
						$k[$j++] = _bR + 1; /*18150*/
						$k[$j++] = _bQ; /*18150*/
					} else {
						/*18150*/
						var _bS = $k[--$j]; /*18150*/
						$k[$j++] = 1; /*18150*/
						$k[$j++] = _bS; /*18150*/
					} /*18150*/
				}); /*18150*/
				$j--; /*18152*/
				var _bU = $counttomark() + 2; /*18153*/
				$astore($geti($1.rle, 0, _bU - 2)); /*18153*/
				$1.evalfulln1n3(); /*18154*/
				$1.n3 = $k[--$j] + $1.n3; /*18154*/
				$1.n1 = $k[--$j] + $1.n1; /*18154*/
				$j--; /*18155*/
				var _ba = $1.thispairs; /*18158*/
				$1.thispairs = $1.lastpairs; /*18158*/
				$1.lastpairs = _ba; /*18158*/
				var _be = ($get($1.symrow, 0) == 1) ? 0 : 1; /*18159*/
				$k[$j++] = _be; /*18160*/
				$forall($1.symrow, function() {
					/*18160*/
					var _bg = $k[--$j]; /*18160*/
					var _bh = $k[--$j]; /*18160*/
					$k[$j++] = _bh + _bg; /*18160*/
					$k[$j++] = _bg; /*18160*/
				}); /*18160*/
				$j--; /*18161*/
				$astore($1.thispairs); /*18162*/
				$j--; /*18162*/
				if ($1.i > 0) { //no-else/*18169*/
					$k[$j++] = Infinity; /*18164*/
					$aload($1.lastpairs); /*18165*/
					$aload($1.thispairs); /*18165*/
					$k[$j++] = $1.n2; /*18166*/
					for (var _bo = 0, _bp = $1.cols; _bo < _bp; _bo++) {
						/*18166*/
						var _bq = $k[--$j]; /*18166*/
						var _br = $k[--$j]; /*18166*/
						$k[$j++] = _bq; /*18166*/
						$k[$j++] = _br; /*18166*/
						var _bt = $k[$j - 1 - $1.colsadd1]; /*18166*/
						if ((($k[--$j] + _bt) & 3) == 0) { //no-else/*18166*/
							var _bv = $k[--$j]; /*18166*/
							$k[$j++] = _bv + 3; /*18166*/
						} /*18166*/
					} /*18166*/
					$1.n2 = $k[--$j]; /*18167*/
					$cleartomark(); /*18168*/
				} /*18168*/
			} /*18168*/
			$k[$j++] = 'dark'; /*18174*/
			$k[$j++] = 0; /*18174*/
			$forall($1.sym, function() {
				/*18174*/
				var _by = $k[--$j]; /*18174*/
				var _bz = $k[--$j]; /*18174*/
				$k[$j++] = _bz + _by; /*18174*/
			}); /*18174*/
			var _c0 = $k[--$j]; /*18174*/
			$1[$k[--$j]] = _c0; /*18174*/
			var _c3 = $1.cols; /*18175*/
			$1.n4 = (~~((Math.abs((($1.dark * 100) / (_c3 * _c3)) - 50)) / 5)) * 10; /*18175*/
			$k[$j++] = (($1.n1 + $1.n2) + $1.n3) + $1.n4; /*18177*/
		}; /*18178*/
		$1.evalmicro = function() {
			$1.sym = $k[--$j]; /*18182*/
			$1.dkrhs = 0; /*18183*/
			$1.dkbot = 0; /*18183*/
			for (var _cB = 1, _cA = $1.cols - 1; _cB <= _cA; _cB += 1) {
				/*18188*/
				$1.i = _cB; /*18185*/
				$k[$j++] = 'dkrhs'; /*18186*/
				$k[$j++] = $1.dkrhs; /*18186*/
				$k[$j++] = $1.sym; /*18186*/
				$k[$j++] = $1.cols - 1; /*18186*/
				$k[$j++] = $1.i; /*18186*/
				$1.qmv(); /*18186*/
				var _cG = $k[--$j]; /*18186*/
				var _cI = $get($k[--$j], _cG); /*18186*/
				var _cJ = $k[--$j]; /*18186*/
				$1[$k[--$j]] = _cJ + _cI; /*18186*/
				$k[$j++] = 'dkbot'; /*18187*/
				$k[$j++] = $1.dkbot; /*18187*/
				$k[$j++] = $1.sym; /*18187*/
				$k[$j++] = $1.i; /*18187*/
				$k[$j++] = $1.cols - 1; /*18187*/
				$1.qmv(); /*18187*/
				var _cP = $k[--$j]; /*18187*/
				var _cR = $get($k[--$j], _cP); /*18187*/
				var _cS = $k[--$j]; /*18187*/
				$1[$k[--$j]] = _cS + _cR; /*18187*/
			} /*18187*/
			if ($1.dkrhs <= $1.dkbot) {
				/*18192*/
				$k[$j++] = -(($1.dkrhs * 16) + $1.dkbot); /*18190*/
			} else {
				/*18192*/
				$k[$j++] = -(($1.dkbot * 16) + $1.dkrhs); /*18192*/
			} /*18192*/
		}; /*18194*/
		$1.bestscore = 999999999; /*18197*/
		for (var _cc = 0, _cb = $1.masks.length - 1; _cc <= _cb; _cc += 1) {
			/*18219*/
			$1.m = _cc; /*18199*/
			$1.masksym = $a($1.rows * $1.cols); /*18200*/
			for (var _cj = 0, _ci = ($1.rows * $1.cols) - 1; _cj <= _ci; _cj += 1) {
				/*18204*/
				$1.i = _cj; /*18202*/
				$put($1.masksym, $1.i, $xo($get($1.pixs, $1.i), $get($get($1.masks, $1.m), $1.i))); /*18203*/
			} /*18203*/
			if ($1.masks.length != 1) {
				/*18217*/
				if ($eq($1.format, "full")) {
					/*18209*/
					$k[$j++] = $1.masksym; /*18207*/
					$1.evalfull(); /*18207*/
					$1.score = $k[--$j]; /*18207*/
				} else {
					/*18209*/
					$k[$j++] = $1.masksym; /*18209*/
					$1.evalmicro(); /*18209*/
					$1.score = $k[--$j]; /*18209*/
				} /*18209*/
				if ($1.score < $1.bestscore) { //no-else/*18215*/
					$1.bestsym = $1.masksym; /*18212*/
					$1.bestmaskval = $1.m; /*18213*/
					$1.bestscore = $1.score; /*18214*/
				} /*18214*/
			} else {
				/*18217*/
				$1.bestsym = $1.masksym; /*18217*/
			} /*18217*/
		} /*18217*/
		$1.pixs = $1.bestsym; /*18220*/
		if ($eq($1.format, "full")) { //no-else/*18225*/
			$k[$j++] = $1.pixs; /*18224*/
			$k[$j++] = 8; /*18224*/
			$k[$j++] = $1.cols - 8; /*18224*/
			$1.qmv(); /*18224*/
			var _dA = $k[--$j]; /*18224*/
			$put($k[--$j], _dA, 1); /*18224*/
		} /*18224*/
		if ($eq($1.format, "full")) { //no-else/*18243*/
			$1.fmtvals = $a([21522, 20773, 24188, 23371, 17913, 16590, 20375, 19104, 30660, 29427, 32170, 30877, 26159, 25368, 27713, 26998, 5769, 5054, 7399, 6608, 1890, 597, 3340, 2107, 13663, 12392, 16177, 14854, 9396, 8579, 11994, 11245]); /*18234*/
			$k[$j++] = 'ecid'; /*18235*/
			$search("MLHQ", $1.eclevel); /*18235*/
			$j--; /*18235*/
			var _dF = $k[--$j]; /*18235*/
			var _dG = $k[--$j]; /*18235*/
			var _dH = $k[--$j]; /*18235*/
			$1[$k[--$j]] = _dF.length; /*18235*/
			$1.fmtval = $get($1.fmtvals, ($1.ecid << 3) + $1.bestmaskval); /*18236*/
			for (var _dP = 0, _dO = $1.formatmap.length - 1; _dP <= _dO; _dP += 1) {
				/*18242*/
				$1.i = _dP; /*18238*/
				$forall($get($1.formatmap, $1.i), function() {
					/*18241*/
					var _dU = $k[--$j]; /*18240*/
					$k[$j++] = $1.pixs; /*18240*/
					$aload(_dU); /*18240*/
					$1.qmv(); /*18240*/
					var _dV = $1.fmtval; /*18240*/
					var _dX = -(14 - $1.i); /*18240*/
					var _dY = $k[--$j]; /*18240*/
					$put($k[--$j], _dY, ((_dX < 0 ? _dV >>> -_dX : _dV << _dX)) & 1); /*18240*/
				}); /*18240*/
			} /*18240*/
		} /*18240*/
		if ($eq($1.format, "micro")) { //no-else/*18257*/
			$1.fmtvals = $a([17477, 16754, 20011, 19228, 21934, 20633, 24512, 23287, 26515, 25252, 28157, 26826, 30328, 29519, 31766, 31009, 1758, 1001, 3248, 2439, 5941, 4610, 7515, 6252, 9480, 8255, 12134, 10833, 13539, 12756, 16013, 15290]); /*18250*/
			$1.symid = $get($get($a([$a([0]), $a([1, 2]), $a([3, 4]), $a([5, 6, 7])]), ~~(($1.cols - 11) / 2)), $1.eclval); /*18251*/
			$1.fmtval = $get($1.fmtvals, ($1.symid << 2) + $1.bestmaskval); /*18252*/
			for (var _dr = 0, _dq = $1.formatmap.length - 1; _dr <= _dq; _dr += 1) {
				/*18256*/
				$1.i = _dr; /*18254*/
				$k[$j++] = $1.pixs; /*18255*/
				$aload($get($get($1.formatmap, $1.i), 0)); /*18255*/
				$1.qmv(); /*18255*/
				var _dx = $1.fmtval; /*18255*/
				var _dz = -(14 - $1.i); /*18255*/
				var _e0 = $k[--$j]; /*18255*/
				$put($k[--$j], _e0, ((_dz < 0 ? _dx >>> -_dz : _dx << _dz)) & 1); /*18255*/
			} /*18255*/
		} /*18255*/
		if ($eq($1.format, "rmqr")) { //no-else/*18287*/
			$1.fmtvals1 = $a([129714, 124311, 121821, 115960, 112748, 108361, 104707, 99878, 98062, 90155, 89697, 82244, 81360, 74485, 72895, 66458, 61898, 61167, 53413, 53120, 45844, 44081, 37499, 36190, 29814, 27475, 21785, 19004, 13992, 10637, 6087, 2274, 258919, 257090, 250376, 249133, 242105, 241308, 233686, 233459, 227035, 223742, 219060, 215185, 209925, 207648, 202090, 199247, 194591, 190266, 186736, 181845, 178881, 173540, 170926, 165003, 163235, 156294, 154828, 148457, 147325, 139352, 138770, 131383]); /*18268*/
			$1.fmtvals2 = $a([133755, 136542, 142100, 144433, 149669, 153472, 158154, 161519, 167879, 168162, 175784, 176525, 183577, 184892, 191606, 193363, 196867, 204326, 204908, 212809, 213981, 220408, 221874, 228759, 230591, 236442, 239056, 244469, 247393, 252228, 255758, 260139, 942, 7307, 8897, 15844, 16752, 24149, 24607, 32570, 34322, 39223, 42877, 47192, 50380, 56297, 58787, 64134, 67798, 71667, 76217, 79516, 84488, 87341, 93031, 95298, 101738, 102991, 109573, 111392, 118708, 118929, 126683, 127486]); /*18278*/
			$k[$j++] = 'fmtvalu'; /*18279*/
			$search("MH", $1.eclevel); /*18279*/
			$j--; /*18279*/
			var _e6 = $k[--$j]; /*18279*/
			var _e7 = $k[--$j]; /*18279*/
			var _e8 = $k[--$j]; /*18279*/
			$1[$k[--$j]] = (_e6.length << 5) + $1.verind; /*18279*/
			$1.fmtval1 = $get($1.fmtvals1, $1.fmtvalu); /*18280*/
			$1.fmtval2 = $get($1.fmtvals2, $1.fmtvalu); /*18281*/
			for (var _eJ = 0, _eI = $1.formatmap.length - 1; _eJ <= _eI; _eJ += 1) {
				/*18286*/
				$1.i = _eJ; /*18283*/
				$k[$j++] = $1.pixs; /*18284*/
				$aload($get($get($1.formatmap, $1.i), 0)); /*18284*/
				$1.qmv(); /*18284*/
				var _eP = $1.fmtval1; /*18284*/
				var _eR = -(17 - $1.i); /*18284*/
				var _eS = $k[--$j]; /*18284*/
				$put($k[--$j], _eS, ((_eR < 0 ? _eP >>> -_eR : _eP << _eR)) & 1); /*18284*/
				$k[$j++] = $1.pixs; /*18285*/
				$aload($get($get($1.formatmap, $1.i), 1)); /*18285*/
				$1.qmv(); /*18285*/
				var _eZ = $1.fmtval2; /*18285*/
				var _eb = -(17 - $1.i); /*18285*/
				var _ec = $k[--$j]; /*18285*/
				$put($k[--$j], _ec, ((_eb < 0 ? _eZ >>> -_eb : _eZ << _eb)) & 1); /*18285*/
			} /*18285*/
		} /*18285*/
		if ($eq($1.format, "full") && ($1.cols >= 45)) { //no-else/*18305*/
			$1.vervals = $a([31892, 34236, 39577, 42195, 48118, 51042, 55367, 58893, 63784, 68472, 70749, 76311, 79154, 84390, 87683, 92361, 96236, 102084, 102881, 110507, 110734, 117786, 119615, 126325, 127568, 133589, 136957, 141498, 145311, 150283, 152622, 158308, 161089, 167017]); /*18297*/
			$1.verval = $get($1.vervals, (~~(($1.cols - 17) / 4)) - 7); /*18298*/
			for (var _em = 0, _el = $1.versionmap.length - 1; _em <= _el; _em += 1) {
				/*18304*/
				$1.i = _em; /*18300*/
				$forall($get($1.versionmap, $1.i), function() {
					/*18303*/
					var _er = $k[--$j]; /*18302*/
					$k[$j++] = $1.pixs; /*18302*/
					$forall(_er); /*18302*/
					$1.qmv(); /*18302*/
					var _es = $1.verval; /*18302*/
					var _eu = -(17 - $1.i); /*18302*/
					var _ev = $k[--$j]; /*18302*/
					$put($k[--$j], _ev, ((_eu < 0 ? _es >>> -_eu : _es << _eu)) & 1); /*18302*/
				}); /*18302*/
			} /*18302*/
		} /*18302*/
		var _f3 = new Map([
			["ren", $0.renmatrix],
			["pixs", $1.pixs],
			["pixx", $1.cols],
			["pixy", $1.rows],
			["height", ($1.rows * 2) / 72],
			["width", ($1.cols * 2) / 72],
			["opt", $1.options]
		]); /*18315*/
		$k[$j++] = _f3; /*18318*/
		if (!$1.dontdraw) { //no-else/*18318*/
			$0.renmatrix(); /*18318*/
		} /*18318*/
	};
	$0.microqrcode = function() {
		var $1 = {}; /*18499*/
		$1.options = $k[--$j]; /*18501*/
		$1.barcode = $k[--$j]; /*18502*/
		$1.dontdraw = false; /*18504*/
		$forall($1.options, function() {
			/*18515*/
			var _3 = $k[--$j]; /*18515*/
			$1[$k[--$j]] = _3; /*18515*/
		}); /*18515*/
		$put($1.options, "dontdraw", true); /*18518*/
		$put($1.options, "format", "micro"); /*18519*/
		$k[$j++] = 'args'; /*18521*/
		$k[$j++] = $1.barcode; /*18521*/
		$k[$j++] = $1.options; /*18521*/
		$0.qrcode(); /*18521*/
		var _9 = $k[--$j]; /*18521*/
		$1[$k[--$j]] = _9; /*18521*/
		$put($1.args, "opt", $1.options); /*18523*/
		$k[$j++] = $1.args; /*18526*/
		if (!$1.dontdraw) { //no-else/*18526*/
			$0.renmatrix(); /*18526*/
		} /*18526*/
	};
	$0.rectangularmicroqrcode = function() {
		var $1 = {}; /*18556*/
		$1.options = $k[--$j]; /*18558*/
		$1.barcode = $k[--$j]; /*18559*/
		$1.dontdraw = false; /*18561*/
		$forall($1.options, function() {
			/*18572*/
			var _3 = $k[--$j]; /*18572*/
			$1[$k[--$j]] = _3; /*18572*/
		}); /*18572*/
		$put($1.options, "dontdraw", true); /*18575*/
		$put($1.options, "format", "rmqr"); /*18576*/
		$k[$j++] = 'args'; /*18578*/
		$k[$j++] = $1.barcode; /*18578*/
		$k[$j++] = $1.options; /*18578*/
		$0.qrcode(); /*18578*/
		var _9 = $k[--$j]; /*18578*/
		$1[$k[--$j]] = _9; /*18578*/
		$put($1.args, "opt", $1.options); /*18580*/
		$k[$j++] = $1.args; /*18583*/
		if (!$1.dontdraw) { //no-else/*18583*/
			$0.renmatrix(); /*18583*/
		} /*18583*/
	};
	$0.maxicode = function() {
		var $1 = {}; /*18612*/
		$1.options = $k[--$j]; /*18614*/
		$1.barcode = $k[--$j]; /*18615*/
		$1.dontdraw = false; /*18617*/
		$1.mode = -1; /*18618*/
		$1.sam = -1; /*18619*/
		$1.parse = false; /*18620*/
		$1.parsefnc = false; /*18621*/
		$forall($1.options, function() {
			/*18632*/
			var _3 = $k[--$j]; /*18632*/
			$1[$k[--$j]] = _3; /*18632*/
		}); /*18632*/
		$1.mode = ~~$1.mode; /*18634*/
		$1.sam = ~~$1.sam; /*18635*/
		$1.barlen = $1.barcode.length; /*18657*/
		if (($1.mode == 2) || ($1.mode == 3)) { //no-else/*18683*/
			if ($eq($geti($1.barcode, 0, 7), "\x5b\x29\x3e\x1e\x30\x31\x1d")) {
				/*18667*/
				$1.fid = $geti($1.barcode, 0, 9); /*18664*/
				$1.barcode = $geti($1.barcode, 9, $1.barlen - 9); /*18665*/
			} else {
				/*18667*/
				$1.fid = ""; /*18667*/
			} /*18667*/
			$search($1.barcode, "\x1d"); /*18671*/
			$j--; /*18671*/
			$1.pcode = $k[--$j]; /*18671*/
			$j--; /*18672*/
			$search($k[--$j], "\x1d"); /*18672*/
			$j--; /*18672*/
			$1.ccode = $k[--$j]; /*18672*/
			$j--; /*18673*/
			$search($k[--$j], "\x1d"); /*18673*/
			$j--; /*18673*/
			$1.scode = $k[--$j]; /*18673*/
			$j--; /*18674*/
			$1.barcode = $k[--$j]; /*18674*/
			var _Q = $s($1.barcode.length + $1.fid.length); /*18677*/
			$puti(_Q, 0, $1.fid); /*18678*/
			$puti(_Q, $1.fid.length, $1.barcode); /*18679*/
			$1.barcode = _Q; /*18680*/
			$1.barlen = $1.barcode.length; /*18681*/
		} /*18681*/
		$1.fn1 = -1; /*18686*/
		var _V = new Map([]); /*18689*/
		$1.fncvals = _V; /*18689*/
		$1.msg = $a($1.barlen); /*18690*/
		$1.i = 0; /*18691*/
		$1.j = 0; /*18691*/
		for (;;) {
			/*18730*/
			if ($1.i == $1.barlen) { //no-else/*18692*/
				break; /*18692*/
			} /*18692*/
			$1.char = $get($1.barcode, $1.i); /*18693*/
			$1.i = $1.i + 1; /*18694*/
			if (($1.parsefnc && ($1.char == 94)) && ($1.i < $1.barlen)) { //no-else/*18727*/
				if ($get($1.barcode, $1.i) != 94) {
					/*18725*/
					if ($1.i >= ($1.barlen - 3)) { //no-else/*18699*/
						$k[$j++] = 'bwipp.truncatedFNC'; /*18698*/
						$k[$j++] = "Function character truncated"; /*18698*/
						$0.raiseerror(); /*18698*/
					} /*18698*/
					var _p = $geti($1.barcode, $1.i, 4); /*18700*/
					$k[$j++] = _p; /*18722*/
					if ($ne($geti(_p, 0, 3), "ECI")) {
						/*18721*/
						var _r = $k[--$j]; /*18702*/
						var _t = $get($1.fncvals, _r) !== undefined; /*18702*/
						$k[$j++] = _r; /*18706*/
						if (!_t) { //no-else/*18706*/
							var _u = $k[--$j]; /*18703*/
							var _v = $s(_u.length + 28); /*18703*/
							$puti(_v, 28, _u); /*18703*/
							$puti(_v, 0, "Unknown function character: "); /*18704*/
							$k[$j++] = 'bwipp.unknownFNC'; /*18705*/
							$k[$j++] = _v; /*18705*/
							$0.raiseerror(); /*18705*/
						} /*18705*/
						var _y = $get($1.fncvals, $k[--$j]); /*18707*/
						$1.i = $1.i + 4; /*18708*/
						$k[$j++] = _y; /*18708*/
					} else {
						/*18721*/
						$j--; /*18710*/
						if ($1.i >= ($1.barlen - 8)) { //no-else/*18713*/
							$k[$j++] = 'bwipp.truncatedECI'; /*18712*/
							$k[$j++] = "ECI truncated"; /*18712*/
							$0.raiseerror(); /*18712*/
						} /*18712*/
						var _14 = $geti($1.barcode, $1.i + 3, 6); /*18714*/
						$k[$j++] = _14; /*18719*/
						$forall(_14, function() {
							/*18719*/
							var _15 = $k[--$j]; /*18716*/
							if ((_15 < 48) || (_15 > 57)) { //no-else/*18718*/
								$k[$j++] = 'bwipp.invalidECI'; /*18717*/
								$k[$j++] = "ECI must be 000000 to 999999"; /*18717*/
								$0.raiseerror(); /*18717*/
							} /*18717*/
						}); /*18717*/
						var _16 = $k[--$j]; /*18720*/
						$k[$j++] = 0; /*18720*/
						$forall(_16, function() {
							/*18720*/
							var _17 = $k[--$j]; /*18720*/
							var _18 = $k[--$j]; /*18720*/
							$k[$j++] = (_18 - (_17 - 48)) * 10; /*18720*/
						}); /*18720*/
						var _19 = $k[--$j]; /*18720*/
						$1.i = $1.i + 9; /*18721*/
						$k[$j++] = (~~(_19 / 10)) - 1000000; /*18721*/
					} /*18721*/
					$1.char = $k[--$j]; /*18723*/
				} else {
					/*18725*/
					$1.i = $1.i + 1; /*18725*/
				} /*18725*/
			} /*18725*/
			$put($1.msg, $1.j, $1.char); /*18728*/
			$1.j = $1.j + 1; /*18729*/
		} /*18729*/
		$1.msg = $geti($1.msg, 0, $1.j); /*18731*/
		$1.msglen = $1.msg.length; /*18732*/
		$1.eci = -1; /*18735*/
		$1.pad = -2; /*18735*/
		$1.ns = -3; /*18735*/
		$1.la = -4; /*18736*/
		$1.lb = -5; /*18736*/
		$1.sa = -6; /*18737*/
		$1.sb = -7; /*18737*/
		$1.sc = -8; /*18737*/
		$1.sd = -9; /*18737*/
		$1.se = -10; /*18737*/
		$1.sa2 = -11; /*18738*/
		$1.sa3 = -12; /*18738*/
		$1.lkc = -13; /*18739*/
		$1.lkd = -14; /*18739*/
		$1.lke = -15; /*18739*/
		$1.pd2 = -16; /*18740*/
		$1.pd3 = -17; /*18740*/
		$1.charmaps = $a([$a([13, "`", 192, 224, 0]), $a(["A", "a", 193, 225, 1]), $a(["B", "b", 194, 226, 2]), $a(["C", "c", 195, 227, 3]), $a(["D", "d", 196, 228, 4]), $a(["E", "e", 197, 229, 5]), $a(["F", "f", 198, 230, 6]), $a(["G", "g", 199, 231, 7]), $a(["H", "h", 200, 232, 8]), $a(["I", "i", 201, 233, 9]), $a(["J", "j", 202, 234, 10]), $a(["K", "k", 203, 235, 11]), $a(["L", "l", 204, 236, 12]), $a(["M", "m", 205, 237, 13]), $a(["N", "n", 206, 238, 14]), $a(["O", "o", 207, 239, 15]), $a(["P", "p", 208, 240, 16]), $a(["Q", "q", 209, 241, 17]), $a(["R", "r", 210, 242, 18]), $a(["S", "s", 211, 243, 19]), $a(["T", "t", 212, 244, 20]), $a(["U", "u", 213, 245, 21]), $a(["V", "v", 214, 246, 22]), $a(["W", "w", 215, 247, 23]), $a(["X", "x", 216, 248, 24]), $a(["Y", "y", 217, 249, 25]), $a(["Z", "z", 218, 250, 26]), $a([$1.eci, $1.eci, $1.eci, $1.eci, $1.eci]), $a([28, 28, 28, 28, $1.pad]), $a([29, 29, 29, 29, $1.pad]), $a([30, 30, 30, 30, 27]), $a([$1.ns, $1.ns, $1.ns, $1.ns, $1.ns]), $a([" ", "{", 219, 251, 28]), $a([$1.pad, $1.pad, 220, 252, 29]), $a(["\"", "}", 221, 253, 30]), $a(["#", "~", 222, 254, 31]), $a(["$", 127, 223, 255, 159]), $a(["%", ";", 170, 161, 160]), $a(["&", "<", 172, 168, 162]), $a(["'", "=", 177, 171, 163]), $a([40, ">", 178, 175, 164]), $a([41, "?", 179, 176, 165]), $a(["*", "[", 181, 180, 166]), $a(["+", 92, 185, 183, 167]), $a([",", "]", 186, 184, 169]), $a(["-", "^", 188, 187, 173]), $a([".", "_", 189, 191, 174]), $a(["/", " ", 190, 138, 182]), $a(["0", ",", 128, 139, 149]), $a(["1", ".", 129, 140, 150]), $a(["2", "/", 130, 141, 151]), $a(["3", ":", 131, 142, 152]), $a(["4", "@", 132, 143, 153]), $a(["5", "!", 133, 144, 154]), $a(["6", "|", 134, 145, 155]), $a(["7", $1.pd2, 135, 146, 156]), $a(["8", $1.sa2, 136, 147, 157]), $a(["9", $1.sa3, 137, 148, 158]), $a([":", $1.pd3, $1.la, $1.la, $1.la]), $a([$1.sb, $1.sa, " ", " ", " "]), $a([$1.sc, $1.sc, $1.lkc, $1.sc, $1.sc]), $a([$1.sd, $1.sd, $1.sd, $1.lkd, $1.sd]), $a([$1.se, $1.se, $1.se, $1.se, $1.lke]), $a([$1.lb, $1.la, $1.lb, $1.lb, $1.lb])]); /*18809*/
		$1.charvals = $a([new Map, new Map, new Map, new Map, new Map]); /*18812*/
		for (var _38 = 0, _37 = $1.charmaps.length - 1; _38 <= _37; _38 += 1) {
			/*18821*/
			$1.i = _38; /*18814*/
			$1.encs = $get($1.charmaps, $1.i); /*18815*/
			for (var _3C = 0; _3C <= 4; _3C += 1) {
				/*18820*/
				$1.j = _3C; /*18817*/
				var _3F = $get($1.encs, $1.j); /*18818*/
				$k[$j++] = _3F; /*18818*/
				if ($eq($type(_3F), 'stringtype')) { //no-else/*18818*/
					var _3I = $get($k[--$j], 0); /*18818*/
					$k[$j++] = _3I; /*18818*/
				} /*18818*/
				$put($get($1.charvals, $1.j), $k[--$j], $1.i); /*18819*/
			} /*18819*/
		} /*18819*/
		$1.seta = $get($1.charvals, 0); /*18822*/
		$1.setb = $get($1.charvals, 1); /*18823*/
		$1.setc = $get($1.charvals, 2); /*18824*/
		$1.setd = $get($1.charvals, 3); /*18825*/
		$1.sete = $get($1.charvals, 4); /*18826*/
		$k[$j++] = Infinity; /*18829*/
		for (var _3Z = 0, _3a = $1.msglen + 1; _3Z < _3a; _3Z++) {
			/*18829*/
			$k[$j++] = 0; /*18829*/
		} /*18829*/
		$1.nseq = $a(); /*18829*/
		for (var _3d = $1.msglen - 1; _3d >= 0; _3d -= 1) {
			/*18837*/
			$1.i = _3d; /*18831*/
			var _3g = $get($1.msg, $1.i); /*18832*/
			if ((_3g >= 48) && (_3g <= 57)) {
				/*18835*/
				$put($1.nseq, $1.i, $get($1.nseq, $1.i + 1) + 1); /*18833*/
			} else {
				/*18835*/
				$put($1.nseq, $1.i, 0); /*18835*/
			} /*18835*/
		} /*18835*/
		$1.nseq = $geti($1.nseq, 0, $1.msglen); /*18838*/
		$1.prefixinset = function() {
			$k[$j++] = 0; /*18845*/
			for (;;) {
				/*18845*/
				var _3r = $k[--$j]; /*18843*/
				var _3s = $k[--$j]; /*18843*/
				$k[$j++] = _3s; /*18843*/
				$k[$j++] = _3r; /*18843*/
				if (_3r >= _3s.length) { //no-else/*18843*/
					break; /*18843*/
				} /*18843*/
				var _3t = $k[--$j]; /*18844*/
				var _3u = $k[--$j]; /*18844*/
				var _3w = $k[--$j]; /*18844*/
				var _3x = $get(_3w, $get(_3u, _3t)) !== undefined; /*18844*/
				$k[$j++] = _3w; /*18844*/
				$k[$j++] = _3u; /*18844*/
				$k[$j++] = _3t; /*18844*/
				if (_3x) {
					/*18844*/
					var _3y = $k[--$j]; /*18844*/
					$k[$j++] = _3y + 1; /*18844*/
				} else {
					/*18844*/
					break; /*18844*/
				} /*18844*/
			} /*18844*/
			var _3z = $k[--$j]; /*18846*/
			var _40 = $k[--$j]; /*18846*/
			var _41 = $k[--$j]; /*18846*/
			$k[$j++] = _3z; /*18846*/
		}; /*18847*/
		$1.enc = function() {
			var _42 = $k[--$j]; /*18850*/
			$put($1.out, $1.j, $get(_42, $k[--$j])); /*18850*/
			$1.j = $1.j + 1; /*18851*/
		}; /*18852*/
		$1.out = $a(144); /*18854*/
		$1.i = 0; /*18855*/
		$1.j = 0; /*18855*/
		$1.cset = "seta"; /*18855*/
		for (;;) {
			/*19007*/
			if ($1.i == $1.msglen) { //no-else/*18864*/
				if ($ne($1.cset, "seta") && $ne($1.cset, "setb")) { //no-else/*18862*/
					$k[$j++] = $1.la; /*18860*/
					$k[$j++] = $1[$1.cset]; /*18860*/
					$1.enc(); /*18860*/
					$1.cset = "seta"; /*18861*/
				} /*18861*/
				break; /*18863*/
			} /*18863*/
			for (;;) {
				/*19006*/
				if ($get($1.msg, $1.i) <= -1000000) { //no-else/*18893*/
					$k[$j++] = $1.eci; /*18868*/
					$k[$j++] = $1[$1.cset]; /*18868*/
					$1.enc(); /*18868*/
					var _4P = (-$get($1.msg, $1.i)) - 1000000; /*18870*/
					$k[$j++] = _4P; /*18888*/
					if (_4P <= 31) {
						/*18887*/
						var _4Q = $k[--$j]; /*18871*/
						$k[$j++] = _4Q & 63; /*18872*/
						$astore($a(1)); /*18872*/
					} else {
						/*18887*/
						var _4S = $k[--$j]; /*18873*/
						$k[$j++] = _4S; /*18888*/
						if (_4S <= 1023) {
							/*18887*/
							var _4T = $k[--$j]; /*18874*/
							$k[$j++] = ((_4T >>> 6) & 31) | 32; /*18876*/
							$k[$j++] = _4T & 63; /*18876*/
							$astore($a(2)); /*18876*/
						} else {
							/*18887*/
							var _4V = $k[--$j]; /*18877*/
							$k[$j++] = _4V; /*18888*/
							if (_4V <= 32767) {
								/*18887*/
								var _4W = $k[--$j]; /*18878*/
								$k[$j++] = ((_4W >>> 12) & 47) | 48; /*18881*/
								$k[$j++] = (_4W >>> 6) & 63; /*18881*/
								$k[$j++] = _4W & 63; /*18881*/
								$astore($a(3)); /*18881*/
							} else {
								/*18887*/
								var _4Y = $k[--$j]; /*18883*/
								$k[$j++] = ((_4Y >>> 18) & 55) | 56; /*18887*/
								$k[$j++] = (_4Y >>> 12) & 63; /*18887*/
								$k[$j++] = (_4Y >>> 6) & 63; /*18887*/
								$k[$j++] = _4Y & 63; /*18887*/
								$astore($a(4)); /*18887*/
							} /*18887*/
						} /*18887*/
					} /*18887*/
					var _4a = $k[--$j]; /*18889*/
					$puti($1.out, $1.j, _4a); /*18889*/
					$1.j = _4a.length + $1.j; /*18890*/
					$1.i = $1.i + 1; /*18891*/
					break; /*18892*/
				} /*18892*/
				if ($get($1.nseq, $1.i) >= 9) { //no-else/*18904*/
					$k[$j++] = 0; /*18897*/
					$forall($geti($1.msg, $1.i, 9), function() {
						/*18897*/
						var _4l = $k[--$j]; /*18897*/
						var _4m = $k[--$j]; /*18897*/
						$k[$j++] = (_4m + (_4l - 48)) * 10; /*18897*/
					}); /*18897*/
					var _4n = $k[--$j]; /*18897*/
					$k[$j++] = ~~(_4n / 10); /*18898*/
					for (var _4o = 0, _4p = 4; _4o < _4p; _4o++) {
						/*18898*/
						var _4q = $k[--$j]; /*18898*/
						$k[$j++] = _4q & 63; /*18898*/
						$k[$j++] = _4q >>> 6; /*18898*/
					} /*18898*/
					$k[$j++] = $get($1[$1.cset], $1.ns); /*18899*/
					for (var _4v = 0; _4v <= 10; _4v += 2) {
						/*18899*/
						var _4w = $k[$j - 1 - _4v]; /*18899*/
						$k[$j++] = _4w; /*18899*/
					} /*18899*/
					$astore($a(6)); /*18899*/
					var _4y = $k[--$j]; /*18899*/
					var _4z = $k[--$j]; /*18899*/
					var _50 = $k[--$j]; /*18899*/
					var _51 = $k[--$j]; /*18899*/
					var _52 = $k[--$j]; /*18899*/
					var _53 = $k[--$j]; /*18899*/
					var _54 = $k[--$j]; /*18899*/
					$k[$j++] = _4y; /*18899*/
					$k[$j++] = _54; /*18899*/
					$k[$j++] = _53; /*18899*/
					$k[$j++] = _52; /*18899*/
					$k[$j++] = _51; /*18899*/
					$k[$j++] = _50; /*18899*/
					$k[$j++] = _4z; /*18899*/
					for (var _55 = 0, _56 = 6; _55 < _56; _55++) {
						/*18899*/
						$j--; /*18899*/
					} /*18899*/
					$puti($1.out, $1.j, $k[--$j]); /*18900*/
					$1.i = $1.i + 9; /*18901*/
					$1.j = $1.j + 6; /*18902*/
					break; /*18903*/
				} /*18903*/
				$1.char1 = $get($1.msg, $1.i); /*18907*/
				$k[$j++] = 'char2'; /*18908*/
				if (($1.i + 1) < $1.msglen) {
					/*18908*/
					$k[$j++] = $get($1.msg, $1.i + 1); /*18908*/
				} else {
					/*18908*/
					$k[$j++] = -99; /*18908*/
				} /*18908*/
				var _5K = $k[--$j]; /*18908*/
				$1[$k[--$j]] = _5K; /*18908*/
				$k[$j++] = 'char3'; /*18909*/
				if (($1.i + 2) < $1.msglen) {
					/*18909*/
					$k[$j++] = $get($1.msg, $1.i + 2); /*18909*/
				} else {
					/*18909*/
					$k[$j++] = -99; /*18909*/
				} /*18909*/
				var _5R = $k[--$j]; /*18909*/
				$1[$k[--$j]] = _5R; /*18909*/
				var _5W = $get($1[$1.cset], $1.char1) !== undefined; /*18912*/
				if (_5W) { //no-else/*18916*/
					$k[$j++] = $1.char1; /*18913*/
					$k[$j++] = $1[$1.cset]; /*18913*/
					$1.enc(); /*18913*/
					$1.i = $1.i + 1; /*18914*/
					break; /*18915*/
				} /*18915*/
				var _5e = $get($1.setb, $1.char1) !== undefined; /*18919*/
				if ($eq($1.cset, "seta") && _5e) { //no-else/*18929*/
					var _5h = $get($1.setb, $1.char2) !== undefined; /*18920*/
					if (_5h) {
						/*18926*/
						$k[$j++] = $1.lb; /*18921*/
						$k[$j++] = $1.seta; /*18921*/
						$1.enc(); /*18921*/
						$1.cset = "setb"; /*18922*/
					} else {
						/*18926*/
						$k[$j++] = $1.sb; /*18924*/
						$k[$j++] = $1.seta; /*18924*/
						$1.enc(); /*18924*/
						$k[$j++] = $1.char1; /*18925*/
						$k[$j++] = $1.setb; /*18925*/
						$1.enc(); /*18925*/
						$1.i = $1.i + 1; /*18926*/
					} /*18926*/
					break; /*18928*/
				} /*18928*/
				var _5s = $get($1.seta, $1.char1) !== undefined; /*18932*/
				if ($eq($1.cset, "setb") && _5s) { //no-else/*18957*/
					var _5t = $1.seta; /*18933*/
					var _5u = $1.msg; /*18933*/
					var _5v = $1.i; /*18933*/
					var _5w = $1.msglen; /*18933*/
					var _5x = $1.i; /*18933*/
					var _5y = _5w - _5x; /*18933*/
					var _5z = 4; /*18933*/
					if (4 > (_5w - _5x)) { //no-else/*18933*/
						var _ = _5y; /*18933*/
						_5y = _5z; /*18933*/
						_5z = _; /*18933*/
					} /*18933*/
					$k[$j++] = 'p'; /*18933*/
					$k[$j++] = _5t; /*18933*/
					$k[$j++] = $geti(_5u, _5v, _5z); /*18933*/
					$1.prefixinset(); /*18933*/
					var _61 = $k[--$j]; /*18933*/
					$1[$k[--$j]] = _61; /*18933*/
					if ($1.p == 1) { //no-else/*18938*/
						$k[$j++] = $1.sa; /*18935*/
						$k[$j++] = $1.setb; /*18935*/
						$1.enc(); /*18935*/
						$k[$j++] = $1.char1; /*18936*/
						$k[$j++] = $1.seta; /*18936*/
						$1.enc(); /*18936*/
						$1.i = $1.i + 1; /*18937*/
					} /*18937*/
					if ($1.p == 2) { //no-else/*18944*/
						$k[$j++] = $1.sa2; /*18940*/
						$k[$j++] = $1.setb; /*18940*/
						$1.enc(); /*18940*/
						$k[$j++] = $1.char1; /*18941*/
						$k[$j++] = $1.seta; /*18941*/
						$1.enc(); /*18941*/
						$k[$j++] = $1.char2; /*18942*/
						$k[$j++] = $1.seta; /*18942*/
						$1.enc(); /*18942*/
						$1.i = $1.i + 2; /*18943*/
					} /*18943*/
					if ($1.p == 3) { //no-else/*18951*/
						$k[$j++] = $1.sa3; /*18946*/
						$k[$j++] = $1.setb; /*18946*/
						$1.enc(); /*18946*/
						$k[$j++] = $1.char1; /*18947*/
						$k[$j++] = $1.seta; /*18947*/
						$1.enc(); /*18947*/
						$k[$j++] = $1.char2; /*18948*/
						$k[$j++] = $1.seta; /*18948*/
						$1.enc(); /*18948*/
						$k[$j++] = $1.char3; /*18949*/
						$k[$j++] = $1.seta; /*18949*/
						$1.enc(); /*18949*/
						$1.i = $1.i + 3; /*18950*/
					} /*18950*/
					if ($1.p >= 4) { //no-else/*18955*/
						$k[$j++] = $1.la; /*18953*/
						$k[$j++] = $1.setb; /*18953*/
						$1.enc(); /*18953*/
						$1.cset = "seta"; /*18954*/
					} /*18954*/
					break; /*18956*/
				} /*18956*/
				var _6W = $get($1.seta, $1.char1) !== undefined; /*18960*/
				if (_6W) { //no-else/*18964*/
					$k[$j++] = $1.la; /*18961*/
					$k[$j++] = $1[$1.cset]; /*18961*/
					$1.enc(); /*18961*/
					$1.cset = "seta"; /*18962*/
					break; /*18963*/
				} /*18963*/
				var _6c = $get($1.setb, $1.char1) !== undefined; /*18965*/
				if (_6c) { //no-else/*18969*/
					$k[$j++] = $1.lb; /*18966*/
					$k[$j++] = $1[$1.cset]; /*18966*/
					$1.enc(); /*18966*/
					$1.cset = "setb"; /*18967*/
					break; /*18968*/
				} /*18968*/
				var _6i = $get($1.setc, $1.char1) !== undefined; /*18972*/
				if (_6i) { //no-else/*18972*/
					$1.setx = "setc"; /*18972*/
					$1.sx = $1.sc; /*18972*/
					$1.lkx = $1.lkc; /*18972*/
				} /*18972*/
				var _6n = $get($1.setd, $1.char1) !== undefined; /*18973*/
				if (_6n) { //no-else/*18973*/
					$1.setx = "setd"; /*18973*/
					$1.sx = $1.sd; /*18973*/
					$1.lkx = $1.lkd; /*18973*/
				} /*18973*/
				var _6s = $get($1.sete, $1.char1) !== undefined; /*18974*/
				if (_6s) { //no-else/*18974*/
					$1.setx = "sete"; /*18974*/
					$1.sx = $1.se; /*18974*/
					$1.lkx = $1.lke; /*18974*/
				} /*18974*/
				var _6w = $1[$1.setx]; /*18977*/
				var _6x = $1.msg; /*18977*/
				var _6y = $1.i; /*18977*/
				var _6z = $1.msglen; /*18977*/
				var _70 = $1.i; /*18977*/
				var _71 = _6z - _70; /*18977*/
				var _72 = 4; /*18977*/
				if (4 > (_6z - _70)) { //no-else/*18977*/
					var _ = _71; /*18977*/
					_71 = _72; /*18977*/
					_72 = _; /*18977*/
				} /*18977*/
				$k[$j++] = 'p'; /*18977*/
				$k[$j++] = _6w; /*18977*/
				$k[$j++] = $geti(_6x, _6y, _72); /*18977*/
				$1.prefixinset(); /*18977*/
				var _74 = $k[--$j]; /*18977*/
				$1[$k[--$j]] = _74; /*18977*/
				if ($1.p == 1) { //no-else/*18982*/
					$k[$j++] = $1.sx; /*18979*/
					$k[$j++] = $1[$1.cset]; /*18979*/
					$1.enc(); /*18979*/
					$k[$j++] = $1.char1; /*18980*/
					$k[$j++] = $1[$1.setx]; /*18980*/
					$1.enc(); /*18980*/
					$1.i = $1.i + 1; /*18981*/
				} /*18981*/
				if ($1.p == 2) { //no-else/*18989*/
					$k[$j++] = $1.sx; /*18984*/
					$k[$j++] = $1[$1.cset]; /*18984*/
					$1.enc(); /*18984*/
					$k[$j++] = $1.char1; /*18985*/
					$k[$j++] = $1[$1.setx]; /*18985*/
					$1.enc(); /*18985*/
					$k[$j++] = $1.sx; /*18986*/
					$k[$j++] = $1[$1.cset]; /*18986*/
					$1.enc(); /*18986*/
					$k[$j++] = $1.char2; /*18987*/
					$k[$j++] = $1[$1.setx]; /*18987*/
					$1.enc(); /*18987*/
					$1.i = $1.i + 2; /*18988*/
				} /*18988*/
				if ($1.p == 3) { //no-else/*18998*/
					$k[$j++] = $1.sx; /*18991*/
					$k[$j++] = $1[$1.cset]; /*18991*/
					$1.enc(); /*18991*/
					$k[$j++] = $1.char1; /*18992*/
					$k[$j++] = $1[$1.setx]; /*18992*/
					$1.enc(); /*18992*/
					$k[$j++] = $1.sx; /*18993*/
					$k[$j++] = $1[$1.cset]; /*18993*/
					$1.enc(); /*18993*/
					$k[$j++] = $1.char2; /*18994*/
					$k[$j++] = $1[$1.setx]; /*18994*/
					$1.enc(); /*18994*/
					$k[$j++] = $1.sx; /*18995*/
					$k[$j++] = $1[$1.cset]; /*18995*/
					$1.enc(); /*18995*/
					$k[$j++] = $1.char3; /*18996*/
					$k[$j++] = $1[$1.setx]; /*18996*/
					$1.enc(); /*18996*/
					$1.i = $1.i + 3; /*18997*/
				} /*18997*/
				if ($1.p >= 4) { //no-else/*19003*/
					$k[$j++] = $1.sx; /*19000*/
					$k[$j++] = $1[$1.cset]; /*19000*/
					$1.enc(); /*19000*/
					$k[$j++] = $1.lkx; /*19001*/
					$k[$j++] = $1[$1.setx]; /*19001*/
					$1.enc(); /*19001*/
					$1.cset = $1.setx; /*19002*/
				} /*19002*/
				break; /*19005*/
			} /*19005*/
		} /*19005*/
		$1.encmsg = $geti($1.out, 0, $1.j); /*19008*/
		$1.padval = $get($1[$1.cset], $1.pad); /*19009*/
		$1.sami = $a([]); /*19012*/
		if ($1.sam != -1) { //no-else/*19017*/
			$1.sami = $a(2); /*19014*/
			$put($1.sami, 0, $get($1.seta, $1.pad)); /*19015*/
			$put($1.sami, 1, (((~~($1.sam / 10)) - 1) * 8) + (($1.sam % 10) - 1)); /*19016*/
		} /*19016*/
		$k[$j++] = Infinity; /*19018*/
		$aload($1.sami); /*19018*/
		$aload($1.encmsg); /*19018*/
		$1.encmsg = $a(); /*19018*/
		if (($1.mode == 2) || ($1.mode == 3)) { //no-else/*19073*/
			var _8H = $strcpy($s(4), "0000"); /*19024*/
			var _8K = $cvrs($s(4), ~~$1.mode, 2); /*19024*/
			$puti(_8H, 4 - _8K.length, _8K); /*19024*/
			$1.mdb = _8H; /*19024*/
			var _8M = $strcpy($s(10), "0000000000"); /*19025*/
			var _8P = $cvrs($s(10), ~~$z($1.ccode), 2); /*19025*/
			$puti(_8M, 10 - _8P.length, _8P); /*19025*/
			$1.ccb = _8M; /*19025*/
			var _8R = $strcpy($s(10), "0000000000"); /*19026*/
			var _8U = $cvrs($s(10), ~~$z($1.scode), 2); /*19026*/
			$puti(_8R, 10 - _8U.length, _8U); /*19026*/
			$1.scb = _8R; /*19026*/
			$1.pcb = $strcpy($s(36), "000000000000000000000000000000000000"); /*19027*/
			if ($1.mode == 2) {
				/*19040*/
				var _8b = $cvrs($s(6), $1.pcode.length, 2); /*19030*/
				$puti($1.pcb, 6 - _8b.length, _8b); /*19030*/
				var _8f = $cvrs($s(30), ~~$z($1.pcode), 2); /*19031*/
				$puti($1.pcb, 36 - _8f.length, _8f); /*19031*/
			} else {
				/*19040*/
				$k[$j++] = Infinity; /*19036*/
				var _8h = $strcpy($s(6), "      "); /*19035*/
				$k[$j++] = _8h; /*19035*/
				$k[$j++] = _8h; /*19035*/
				$k[$j++] = 0; /*19035*/
				if ($1.pcode.length > 6) {
					/*19035*/
					$k[$j++] = $geti($1.pcode, 0, 6); /*19035*/
				} else {
					/*19035*/
					$k[$j++] = $1.pcode; /*19035*/
				} /*19035*/
				var _8m = $k[--$j]; /*19035*/
				var _8n = $k[--$j]; /*19035*/
				$puti($k[--$j], _8n, _8m); /*19035*/
				$forall($k[--$j], function() {
					/*19036*/
					var _8s = $get($1.seta, $k[--$j]); /*19036*/
					$k[$j++] = _8s; /*19036*/
				}); /*19036*/
				$1.pccw = $a(); /*19036*/
				for (var _8u = 0; _8u <= 5; _8u += 1) {
					/*19041*/
					$1.i = _8u; /*19039*/
					var _90 = $cvrs($s(6), $get($1.pccw, $1.i), 2); /*19040*/
					$puti($1.pcb, ((6 * $1.i) + 6) - _90.length, _90); /*19040*/
				} /*19040*/
			} /*19040*/
			$1.scm = $s(60); /*19045*/
			$puti($1.scm, 2, $1.mdb); /*19046*/
			$puti($1.scm, 38, $geti($1.pcb, 0, 4)); /*19047*/
			$puti($1.scm, 30, $geti($1.pcb, 4, 6)); /*19048*/
			$puti($1.scm, 24, $geti($1.pcb, 10, 6)); /*19049*/
			$puti($1.scm, 18, $geti($1.pcb, 16, 6)); /*19050*/
			$puti($1.scm, 12, $geti($1.pcb, 22, 6)); /*19051*/
			$puti($1.scm, 6, $geti($1.pcb, 28, 6)); /*19052*/
			$puti($1.scm, 0, $geti($1.pcb, 34, 2)); /*19053*/
			$puti($1.scm, 52, $geti($1.ccb, 0, 2)); /*19054*/
			$puti($1.scm, 42, $geti($1.ccb, 2, 6)); /*19055*/
			$puti($1.scm, 36, $geti($1.ccb, 8, 2)); /*19056*/
			$puti($1.scm, 54, $geti($1.scb, 0, 6)); /*19057*/
			$puti($1.scm, 48, $geti($1.scb, 6, 4)); /*19058*/
			$1.pri = $a([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]); /*19061*/
			for (var _9g = 0; _9g <= 59; _9g += 1) {
				/*19067*/
				$1.i = _9g; /*19063*/
				$1.ps = ~~($1.i / 6); /*19064*/
				$1.ep = (~~(Math.pow(2, 5 - ($1.i % 6)))) * ($get($1.scm, $1.i) - 48); /*19065*/
				$put($1.pri, $1.ps, $get($1.pri, $1.ps) + $1.ep); /*19066*/
			} /*19066*/
			$k[$j++] = Infinity; /*19070*/
			for (var _9s = 0, _9t = 84; _9s < _9t; _9s++) {
				/*19070*/
				$k[$j++] = $1.padval; /*19070*/
			} /*19070*/
			$1.sec = $a(); /*19070*/
			$puti($1.sec, 0, $1.encmsg); /*19071*/
		} /*19071*/
		if (((($1.mode == 4) || ($1.mode == 5)) || ($1.mode == 6)) || ($1.mode == -1)) { //no-else/*19092*/
			if ($1.mode == -1) { //no-else/*19081*/
				var _A4 = ($1.encmsg.length <= 77) ? 5 : 4; /*19080*/
				$1.mode = _A4; /*19080*/
			} /*19080*/
			$k[$j++] = Infinity; /*19084*/
			var _A6 = ($1.mode == 5) ? 78 : 94; /*19084*/
			for (var _A7 = 0, _A8 = _A6; _A7 < _A8; _A7++) {
				/*19084*/
				$k[$j++] = $1.padval; /*19084*/
			} /*19084*/
			$1.cws = $a(); /*19084*/
			$put($1.cws, 0, $1.mode); /*19085*/
			$puti($1.cws, 1, $1.encmsg); /*19086*/
			$1.pri = $geti($1.cws, 0, 10); /*19089*/
			$1.sec = $geti($1.cws, 10, $1.cws.length - 10); /*19090*/
		} /*19090*/
		$k[$j++] = Infinity; /*19095*/
		$k[$j++] = 1; /*19095*/
		for (var _AK = 0, _AL = 63; _AK < _AL; _AK++) {
			/*19095*/
			var _AM = $k[--$j]; /*19095*/
			var _AN = _AM * 2; /*19095*/
			$k[$j++] = _AM; /*19095*/
			$k[$j++] = _AN; /*19095*/
			if (_AN >= 64) { //no-else/*19095*/
				var _AO = $k[--$j]; /*19095*/
				$k[$j++] = _AO ^ 67; /*19095*/
			} /*19095*/
		} /*19095*/
		$1.rsalog = $a(); /*19095*/
		$1.rslog = $a(64); /*19096*/
		for (var _AR = 1; _AR <= 63; _AR += 1) {
			/*19097*/
			$put($1.rslog, $get($1.rsalog, _AR), _AR); /*19097*/
		} /*19097*/
		$1.rsprod = function() {
			var _AV = $k[--$j]; /*19101*/
			var _AW = $k[--$j]; /*19101*/
			$k[$j++] = _AW; /*19105*/
			$k[$j++] = _AV; /*19105*/
			if ((_AV != 0) && (_AW != 0)) {
				/*19104*/
				var _AZ = $get($1.rslog, $k[--$j]); /*19102*/
				var _Ae = $get($1.rsalog, (_AZ + $get($1.rslog, $k[--$j])) % 63); /*19102*/
				$k[$j++] = _Ae; /*19102*/
			} else {
				/*19104*/
				$j -= 2; /*19104*/
				$k[$j++] = 0; /*19104*/
			} /*19104*/
		}; /*19106*/
		$1.rscodes = function() {
			$1.rsnum = $k[--$j]; /*19111*/
			$1.cwb = $k[--$j]; /*19112*/
			$k[$j++] = Infinity; /*19115*/
			$k[$j++] = 1; /*19115*/
			for (var _Ai = 0, _Aj = $1.rsnum; _Ai < _Aj; _Ai++) {
				/*19115*/
				$k[$j++] = 0; /*19115*/
			} /*19115*/
			$1.coeffs = $a(); /*19115*/
			for (var _An = 1, _Am = $1.rsnum; _An <= _Am; _An += 1) {
				/*19124*/
				$1.i = _An; /*19117*/
				$put($1.coeffs, $1.i, $get($1.coeffs, $1.i - 1)); /*19118*/
				for (var _Au = $1.i - 1; _Au >= 1; _Au -= 1) {
					/*19122*/
					$1.j = _Au; /*19120*/
					$k[$j++] = $1.coeffs; /*19121*/
					$k[$j++] = $1.j; /*19121*/
					$k[$j++] = $get($1.coeffs, $1.j - 1); /*19121*/
					$k[$j++] = $get($1.coeffs, $1.j); /*19121*/
					$k[$j++] = $get($1.rsalog, $1.i); /*19121*/
					$1.rsprod(); /*19121*/
					var _B6 = $k[--$j]; /*19121*/
					var _B7 = $k[--$j]; /*19121*/
					var _B8 = $k[--$j]; /*19121*/
					$put($k[--$j], _B8, $xo(_B7, _B6)); /*19121*/
				} /*19121*/
				$k[$j++] = $1.coeffs; /*19123*/
				$k[$j++] = 0; /*19123*/
				$k[$j++] = $get($1.coeffs, 0); /*19123*/
				$k[$j++] = $get($1.rsalog, $1.i); /*19123*/
				$1.rsprod(); /*19123*/
				var _BG = $k[--$j]; /*19123*/
				var _BH = $k[--$j]; /*19123*/
				$put($k[--$j], _BH, _BG); /*19123*/
			} /*19123*/
			$1.coeffs = $geti($1.coeffs, 0, $1.coeffs.length - 1); /*19125*/
			$k[$j++] = Infinity; /*19128*/
			for (var _BN = 0, _BO = $1.rsnum; _BN < _BO; _BN++) {
				/*19128*/
				$k[$j++] = 0; /*19128*/
			} /*19128*/
			$1.ecb = $a(); /*19128*/
			for (var _BS = 0, _BR = $1.cwb.length - 1; _BS <= _BR; _BS += 1) {
				/*19137*/
				$1.t = $xo($get($1.cwb, _BS), $get($1.ecb, 0)); /*19130*/
				for (var _BY = $1.ecb.length - 1; _BY >= 0; _BY -= 1) {
					/*19136*/
					$1.i = _BY; /*19132*/
					$1.p = ($1.ecb.length - $1.i) - 1; /*19133*/
					$k[$j++] = $1.ecb; /*19134*/
					$k[$j++] = $1.p; /*19134*/
					$k[$j++] = $1.t; /*19134*/
					$k[$j++] = $get($1.coeffs, $1.i); /*19134*/
					$1.rsprod(); /*19134*/
					var _Bh = $k[--$j]; /*19134*/
					var _Bi = $k[--$j]; /*19134*/
					$put($k[--$j], _Bi, _Bh); /*19134*/
					if ($1.i > 0) { //no-else/*19135*/
						$put($1.ecb, $1.p, $xo($get($1.ecb, $1.p + 1), $get($1.ecb, $1.p))); /*19135*/
					} /*19135*/
				} /*19135*/
			} /*19135*/
			$k[$j++] = $1.ecb; /*19139*/
		}; /*19141*/
		$k[$j++] = Infinity; /*19144*/
		for (var _Bw = 0, _Bv = $1.sec.length - 1; _Bw <= _Bv; _Bw += 2) {
			/*19144*/
			$k[$j++] = $get($1.sec, _Bw); /*19144*/
		} /*19144*/
		$1.seco = $a(); /*19144*/
		$k[$j++] = Infinity; /*19145*/
		for (var _C2 = 1, _C1 = $1.sec.length - 1; _C2 <= _C1; _C2 += 2) {
			/*19145*/
			$k[$j++] = $get($1.sec, _C2); /*19145*/
		} /*19145*/
		$1.sece = $a(); /*19145*/
		var _C7 = ($1.sec.length == 84) ? 20 : 28; /*19148*/
		$1.scodes = _C7; /*19148*/
		$k[$j++] = 'secochk'; /*19149*/
		$k[$j++] = $1.seco; /*19149*/
		$k[$j++] = $1.scodes; /*19149*/
		$1.rscodes(); /*19149*/
		var _CA = $k[--$j]; /*19149*/
		$1[$k[--$j]] = _CA; /*19149*/
		$k[$j++] = 'secechk'; /*19150*/
		$k[$j++] = $1.sece; /*19150*/
		$k[$j++] = $1.scodes; /*19150*/
		$1.rscodes(); /*19150*/
		var _CE = $k[--$j]; /*19150*/
		$1[$k[--$j]] = _CE; /*19150*/
		$k[$j++] = Infinity; /*19153*/
		for (var _CI = 0, _CH = $1.scodes - 1; _CI <= _CH; _CI += 1) {
			/*19153*/
			$k[$j++] = $get($1.secochk, _CI); /*19153*/
			$k[$j++] = $get($1.secechk, _CI); /*19153*/
		} /*19153*/
		$1.secchk = $a(); /*19153*/
		$k[$j++] = Infinity; /*19160*/
		$aload($1.pri); /*19157*/
		$k[$j++] = $1.pri; /*19158*/
		$k[$j++] = 10; /*19158*/
		$1.rscodes(); /*19158*/
		$aload($k[--$j]); /*19158*/
		$aload($1.sec); /*19159*/
		$aload($1.secchk); /*19160*/
		$1.codewords = $a(); /*19160*/
		$k[$j++] = Infinity; /*19164*/
		for (var _CU = 0, _CV = 864; _CU < _CV; _CU++) {
			/*19164*/
			$k[$j++] = 0; /*19164*/
		} /*19164*/
		$1.mods = $a(); /*19164*/
		for (var _CX = 0; _CX <= 143; _CX += 1) {
			/*19169*/
			$1.i = _CX; /*19166*/
			$k[$j++] = Infinity; /*19167*/
			var _Cc = $cvrs($s(6), $get($1.codewords, $1.i), 2); /*19167*/
			for (var _Cd = 0, _Ce = _Cc.length; _Cd < _Ce; _Cd++) {
				/*19167*/
				$k[$j++] = $get(_Cc, _Cd) - 48; /*19167*/
			} /*19167*/
			$1.cw = $a(); /*19167*/
			$puti($1.mods, (6 * $1.i) + (6 - $1.cw.length), $1.cw); /*19168*/
		} /*19168*/
		$1.modmap = $a([469, 529, 286, 316, 347, 346, 673, 672, 703, 702, 647, 676, 283, 282, 313, 312, 370, 610, 618, 379, 378, 409, 408, 439, 705, 704, 559, 589, 588, 619, 458, 518, 640, 701, 675, 674, 285, 284, 315, 314, 310, 340, 531, 289, 288, 319, 349, 348, 456, 486, 517, 516, 471, 470, 369, 368, 399, 398, 429, 428, 549, 548, 579, 578, 609, 608, 649, 648, 679, 678, 709, 708, 639, 638, 669, 668, 699, 698, 279, 278, 309, 308, 339, 338, 381, 380, 411, 410, 441, 440, 561, 560, 591, 590, 621, 620, 547, 546, 577, 576, 607, 606, 367, 366, 397, 396, 427, 426, 291, 290, 321, 320, 351, 350, 651, 650, 681, 680, 711, 710, 1, 0, 31, 30, 61, 60, 3, 2, 33, 32, 63, 62, 5, 4, 35, 34, 65, 64, 7, 6, 37, 36, 67, 66, 9, 8, 39, 38, 69, 68, 11, 10, 41, 40, 71, 70, 13, 12, 43, 42, 73, 72, 15, 14, 45, 44, 75, 74, 17, 16, 47, 46, 77, 76, 19, 18, 49, 48, 79, 78, 21, 20, 51, 50, 81, 80, 23, 22, 53, 52, 83, 82, 25, 24, 55, 54, 85, 84, 27, 26, 57, 56, 87, 86, 117, 116, 147, 146, 177, 176, 115, 114, 145, 144, 175, 174, 113, 112, 143, 142, 173, 172, 111, 110, 141, 140, 171, 170, 109, 108, 139, 138, 169, 168, 107, 106, 137, 136, 167, 166, 105, 104, 135, 134, 165, 164, 103, 102, 133, 132, 163, 162, 101, 100, 131, 130, 161, 160, 99, 98, 129, 128, 159, 158, 97, 96, 127, 126, 157, 156, 95, 94, 125, 124, 155, 154, 93, 92, 123, 122, 153, 152, 91, 90, 121, 120, 151, 150, 181, 180, 211, 210, 241, 240, 183, 182, 213, 212, 243, 242, 185, 184, 215, 214, 245, 244, 187, 186, 217, 216, 247, 246, 189, 188, 219, 218, 249, 248, 191, 190, 221, 220, 251, 250, 193, 192, 223, 222, 253, 252, 195, 194, 225, 224, 255, 254, 197, 196, 227, 226, 257, 256, 199, 198, 229, 228, 259, 258, 201, 200, 231, 230, 261, 260, 203, 202, 233, 232, 263, 262, 205, 204, 235, 234, 265, 264, 207, 206, 237, 236, 267, 266, 297, 296, 327, 326, 357, 356, 295, 294, 325, 324, 355, 354, 293, 292, 323, 322, 353, 352, 277, 276, 307, 306, 337, 336, 275, 274, 305, 304, 335, 334, 273, 272, 303, 302, 333, 332, 271, 270, 301, 300, 331, 330, 361, 360, 391, 390, 421, 420, 363, 362, 393, 392, 423, 422, 365, 364, 395, 394, 425, 424, 383, 382, 413, 412, 443, 442, 385, 384, 415, 414, 445, 444, 387, 386, 417, 416, 447, 446, 477, 476, 507, 506, 537, 536, 475, 474, 505, 504, 535, 534, 473, 472, 503, 502, 533, 532, 455, 454, 485, 484, 515, 514, 453, 452, 483, 482, 513, 512, 451, 450, 481, 480, 511, 510, 541, 540, 571, 570, 601, 600, 543, 542, 573, 572, 603, 602, 545, 544, 575, 574, 605, 604, 563, 562, 593, 592, 623, 622, 565, 564, 595, 594, 625, 624, 567, 566, 597, 596, 627, 626, 657, 656, 687, 686, 717, 716, 655, 654, 685, 684, 715, 714, 653, 652, 683, 682, 713, 712, 637, 636, 667, 666, 697, 696, 635, 634, 665, 664, 695, 694, 633, 632, 663, 662, 693, 692, 631, 630, 661, 660, 691, 690, 721, 720, 751, 750, 781, 780, 723, 722, 753, 752, 783, 782, 725, 724, 755, 754, 785, 784, 727, 726, 757, 756, 787, 786, 729, 728, 759, 758, 789, 788, 731, 730, 761, 760, 791, 790, 733, 732, 763, 762, 793, 792, 735, 734, 765, 764, 795, 794, 737, 736, 767, 766, 797, 796, 739, 738, 769, 768, 799, 798, 741, 740, 771, 770, 801, 800, 743, 742, 773, 772, 803, 802, 745, 744, 775, 774, 805, 804, 747, 746, 777, 776, 807, 806, 837, 836, 867, 866, 897, 896, 835, 834, 865, 864, 895, 894, 833, 832, 863, 862, 893, 892, 831, 830, 861, 860, 891, 890, 829, 828, 859, 858, 889, 888, 827, 826, 857, 856, 887, 886, 825, 824, 855, 854, 885, 884, 823, 822, 853, 852, 883, 882, 821, 820, 851, 850, 881, 880, 819, 818, 849, 848, 879, 878, 817, 816, 847, 846, 877, 876, 815, 814, 845, 844, 875, 874, 813, 812, 843, 842, 873, 872, 811, 810, 841, 840, 871, 870, 901, 900, 931, 930, 961, 960, 903, 902, 933, 932, 963, 962, 905, 904, 935, 934, 965, 964, 907, 906, 937, 936, 967, 966, 909, 908, 939, 938, 969, 968, 911, 910, 941, 940, 971, 970, 913, 912, 943, 942, 973, 972, 915, 914, 945, 944, 975, 974, 917, 916, 947, 946, 977, 976, 919, 918, 949, 948, 979, 978, 921, 920, 951, 950, 981, 980, 923, 922, 953, 952, 983, 982, 925, 924, 955, 954, 985, 984, 927, 926, 957, 956, 987, 986, 58, 89, 88, 118, 149, 148, 178, 209, 208, 238, 269, 268, 298, 329, 328, 358, 389, 388, 418, 449, 448, 478, 509, 508, 538, 569, 568, 598, 629, 628, 658, 689, 688, 718, 749, 748, 778, 809, 808, 838, 869, 868, 898, 929, 928, 958, 989, 988]); /*19217*/
		$1.pixs = $a(864); /*19220*/
		$1.j = 0; /*19221*/
		for (var _Cp = 0, _Co = $1.mods.length - 1; _Cp <= _Co; _Cp += 1) {
			/*19228*/
			$1.i = _Cp; /*19223*/
			if ($get($1.mods, $1.i) == 1) { //no-else/*19227*/
				$put($1.pixs, $1.j, $get($1.modmap, $1.i)); /*19225*/
				$1.j = $1.j + 1; /*19226*/
			} /*19226*/
		} /*19226*/
		$k[$j++] = Infinity; /*19229*/
		$forall($geti($1.pixs, 0, $1.j)); /*19229*/
		$k[$j++] = 28; /*19229*/
		$k[$j++] = 29; /*19229*/
		$k[$j++] = 280; /*19229*/
		$k[$j++] = 281; /*19229*/
		$k[$j++] = 311; /*19229*/
		$k[$j++] = 457; /*19229*/
		$k[$j++] = 488; /*19229*/
		$k[$j++] = 500; /*19229*/
		$k[$j++] = 530; /*19229*/
		$k[$j++] = 670; /*19229*/
		$k[$j++] = 700; /*19229*/
		$k[$j++] = 677; /*19229*/
		$k[$j++] = 707; /*19229*/
		$1.pixs = $a(); /*19229*/
		var _D5 = new Map([
			["ren", $0.renmaximatrix],
			["pixs", $1.pixs],
			["opt", $1.options]
		]); /*19235*/
		$k[$j++] = _D5; /*19238*/
		if (!$1.dontdraw) { //no-else/*19238*/
			$0.renmaximatrix(); /*19238*/
		} /*19238*/
	};
	$0.azteccode = function() {
		var $1 = {}; /*19267*/
		$1.options = $k[--$j]; /*19269*/
		$1.barcode = $k[--$j]; /*19270*/
		$1.dontdraw = false; /*19272*/
		$1.format = "unset"; /*19273*/
		$1.readerinit = false; /*19274*/
		$1.layers = -1; /*19275*/
		$1.eclevel = 23; /*19276*/
		$1.ecaddchars = 3; /*19277*/
		$1.raw = false; /*19278*/
		$1.parse = false; /*19279*/
		$1.parsefnc = false; /*19280*/
		$forall($1.options, function() {
			/*19291*/
			var _3 = $k[--$j]; /*19291*/
			$1[$k[--$j]] = _3; /*19291*/
		}); /*19291*/
		$1.layers = ~~$1.layers; /*19293*/
		$1.eclevel = +$1.eclevel; /*19294*/
		$1.ecaddchars = ~~$1.ecaddchars; /*19295*/
		$1.barlen = $1.barcode.length; /*19318*/
		$1.fn1 = -1; /*19321*/
		var _A = new Map([
			["FNC1", $1.fn1]
		]); /*19323*/
		$1.fncvals = _A; /*19324*/
		$1.msg = $a($1.barlen); /*19325*/
		$1.i = 0; /*19326*/
		$1.j = 0; /*19326*/
		for (;;) {
			/*19365*/
			if ($1.i == $1.barlen) { //no-else/*19327*/
				break; /*19327*/
			} /*19327*/
			$1.char = $get($1.barcode, $1.i); /*19328*/
			$1.i = $1.i + 1; /*19329*/
			if (($1.parsefnc && ($1.char == 94)) && ($1.i < $1.barlen)) { //no-else/*19362*/
				if ($get($1.barcode, $1.i) != 94) {
					/*19360*/
					if ($1.i >= ($1.barlen - 3)) { //no-else/*19334*/
						$k[$j++] = 'bwipp.truncatedFNC'; /*19333*/
						$k[$j++] = "Function character truncated"; /*19333*/
						$0.raiseerror(); /*19333*/
					} /*19333*/
					var _U = $geti($1.barcode, $1.i, 4); /*19335*/
					$k[$j++] = _U; /*19357*/
					if ($ne($geti(_U, 0, 3), "ECI")) {
						/*19356*/
						var _W = $k[--$j]; /*19337*/
						var _Y = $get($1.fncvals, _W) !== undefined; /*19337*/
						$k[$j++] = _W; /*19341*/
						if (!_Y) { //no-else/*19341*/
							var _Z = $k[--$j]; /*19338*/
							var _a = $s(_Z.length + 28); /*19338*/
							$puti(_a, 28, _Z); /*19338*/
							$puti(_a, 0, "Unknown function character: "); /*19339*/
							$k[$j++] = 'bwipp.unknownFNC'; /*19340*/
							$k[$j++] = _a; /*19340*/
							$0.raiseerror(); /*19340*/
						} /*19340*/
						var _d = $get($1.fncvals, $k[--$j]); /*19342*/
						$1.i = $1.i + 4; /*19343*/
						$k[$j++] = _d; /*19343*/
					} else {
						/*19356*/
						$j--; /*19345*/
						if ($1.i >= ($1.barlen - 8)) { //no-else/*19348*/
							$k[$j++] = 'bwipp.truncatedECI'; /*19347*/
							$k[$j++] = "ECI truncated"; /*19347*/
							$0.raiseerror(); /*19347*/
						} /*19347*/
						var _j = $geti($1.barcode, $1.i + 3, 6); /*19349*/
						$k[$j++] = _j; /*19354*/
						$forall(_j, function() {
							/*19354*/
							var _k = $k[--$j]; /*19351*/
							if ((_k < 48) || (_k > 57)) { //no-else/*19353*/
								$k[$j++] = 'bwipp.invalidECI'; /*19352*/
								$k[$j++] = "ECI must be 000000 to 999999"; /*19352*/
								$0.raiseerror(); /*19352*/
							} /*19352*/
						}); /*19352*/
						var _l = $k[--$j]; /*19355*/
						$k[$j++] = 0; /*19355*/
						$forall(_l, function() {
							/*19355*/
							var _m = $k[--$j]; /*19355*/
							var _n = $k[--$j]; /*19355*/
							$k[$j++] = (_n - (_m - 48)) * 10; /*19355*/
						}); /*19355*/
						var _o = $k[--$j]; /*19355*/
						$1.i = $1.i + 9; /*19356*/
						$k[$j++] = (~~(_o / 10)) - 1000000; /*19356*/
					} /*19356*/
					$1.char = $k[--$j]; /*19358*/
				} else {
					/*19360*/
					$1.i = $1.i + 1; /*19360*/
				} /*19360*/
			} /*19360*/
			$put($1.msg, $1.j, $1.char); /*19363*/
			$1.j = $1.j + 1; /*19364*/
		} /*19364*/
		$1.msg = $geti($1.msg, 0, $1.j); /*19366*/
		$1.msglen = $1.msg.length; /*19367*/
		$1.msgbits = ""; /*19370*/
		if ($ne($1.format, "rune") && $1.raw) { //no-else/*19371*/
			$1.msgbits = $1.barcode; /*19371*/
		} /*19371*/
		if ($ne($1.format, "rune") && (!$1.raw)) { //no-else/*19710*/
			$1.U = 0; /*19375*/
			$1.L = 1; /*19375*/
			$1.M = 2; /*19375*/
			$1.P = 3; /*19375*/
			$1.D = 4; /*19375*/
			$1.B = 5; /*19375*/
			$1.lu = -2; /*19378*/
			$1.ll = -3; /*19378*/
			$1.lm = -4; /*19378*/
			$1.lp = -5; /*19379*/
			$1.ld = -6; /*19379*/
			$1.su = -7; /*19379*/
			$1.sp = -8; /*19380*/
			$1.sb = -9; /*19380*/
			$1.fl = -10; /*19380*/
			$1.p2 = -11; /*19381*/
			$1.p3 = -12; /*19381*/
			$1.p4 = -13; /*19381*/
			$1.p5 = -14; /*19381*/
			$1.charmaps = $a([$a([$1.sp, $1.sp, $1.sp, $1.fl, $1.sp]), $a([32, 32, 32, 13, 32]), $a(["A", "a", 1, $1.p2, "0"]), $a(["B", "b", 2, $1.p3, "1"]), $a(["C", "c", 3, $1.p4, "2"]), $a(["D", "d", 4, $1.p5, "3"]), $a(["E", "e", 5, "!", "4"]), $a(["F", "f", 6, "\"", "5"]), $a(["G", "g", 7, "#", "6"]), $a(["H", "h", 8, "$", "7"]), $a(["I", "i", 9, "%", "8"]), $a(["J", "j", 10, "&", "9"]), $a(["K", "k", 11, "'", ","]), $a(["L", "l", 12, 40, "."]), $a(["M", "m", 13, 41, $1.lu]), $a(["N", "n", 27, "*", $1.su]), $a(["O", "o", 28, "+", -99]), $a(["P", "p", 29, ",", -99]), $a(["Q", "q", 30, "-", -99]), $a(["R", "r", 31, ".", -99]), $a(["S", "s", "@", "/", -99]), $a(["T", "t", 92, ":", -99]), $a(["U", "u", "^", ";", -99]), $a(["V", "v", "_", "<", -99]), $a(["W", "w", "`", "=", -99]), $a(["X", "x", "|", ">", -99]), $a(["Y", "y", "~", "?", -99]), $a(["Z", "z", 127, "[", -99]), $a([$1.ll, $1.su, $1.ll, "]", -99]), $a([$1.lm, $1.lm, $1.lu, "{", -99]), $a([$1.ld, $1.ld, $1.lp, "}", -99]), $a([$1.sb, $1.sb, $1.sb, $1.lu, -99])]); /*19418*/
			$1.charvals = $a([new Map, new Map, new Map, new Map, new Map]); /*19421*/
			for (var _23 = 0, _22 = $1.charmaps.length - 1; _23 <= _22; _23 += 1) {
				/*19430*/
				$1.i = _23; /*19423*/
				$1.encs = $get($1.charmaps, $1.i); /*19424*/
				for (var _27 = 0; _27 <= 4; _27 += 1) {
					/*19429*/
					$1.j = _27; /*19426*/
					var _2A = $get($1.encs, $1.j); /*19427*/
					$k[$j++] = _2A; /*19427*/
					if ($eq($type(_2A), 'stringtype')) { //no-else/*19427*/
						var _2D = $get($k[--$j], 0); /*19427*/
						$k[$j++] = _2D; /*19427*/
					} /*19427*/
					$put($get($1.charvals, $1.j), $k[--$j], $1.i); /*19428*/
				} /*19428*/
			} /*19428*/
			var _2N = new Map([
				["\x0d\x0a", $1.p2],
				[". ", $1.p3],
				[", ", $1.p4],
				[": ", $1.p5]
			]); /*19437*/
			$1.pcomp = _2N; /*19438*/
			$1.e = 10000; /*19440*/
			$1.latlen = $a([$a([0, 5, 5, 10, 5, 10]), $a([9, 0, 5, 10, 5, 10]), $a([5, 5, 0, 5, 10, 10]), $a([5, 10, 10, 0, 10, 15]), $a([4, 9, 9, 14, 0, 14]), $a([0, 0, 0, 0, 0, 0])]); /*19450*/
			$1.latseq = $a([$a([$a([]), $a([$1.ll]), $a([$1.lm]), $a([$1.lm, $1.lp]), $a([$1.ld]), $a([$1.sb])]), $a([$a([$1.ld, $1.lu]), $a([]), $a([$1.lm]), $a([$1.lm, $1.lp]), $a([$1.ld]), $a([$1.sb])]), $a([$a([$1.lu]), $a([$1.ll]), $a([]), $a([$1.lp]), $a([$1.lu, $1.ld]), $a([$1.sb])]), $a([$a([$1.lu]), $a([$1.lu, $1.ll]), $a([$1.lu, $1.lm]), $a([]), $a([$1.lu, $1.ld]), $a([$1.lu, $1.sb])]), $a([$a([$1.lu]), $a([$1.lu, $1.ll]), $a([$1.lu, $1.lm]), $a([$1.lu, $1.lm, $1.lp]), $a([]), $a([$1.lu, $1.sb])]), $a([$a([$1.lu]), $a([$1.ll]), $a([$1.lm]), $a([]), $a([]), $a([])])]); /*19460*/
			$1.shftlen = $a([$a([$1.e, $1.e, $1.e, 5, $1.e]), $a([5, $1.e, $1.e, 5, $1.e]), $a([$1.e, $1.e, $1.e, 5, $1.e]), $a([$1.e, $1.e, $1.e, $1.e, $1.e]), $a([4, $1.e, $1.e, 4, $1.e])]); /*19469*/
			$1.charsize = function() {
				var _4G = $k[--$j]; /*19472*/
				$k[$j++] = _4G; /*19483*/
				if (_4G >= 0) {
					/*19481*/
					$j--; /*19474*/
					var _4J = $get($a([5, 5, 5, 5, 4, 8]), $k[--$j]); /*19474*/
					$k[$j++] = _4J; /*19474*/
				} else {
					/*19481*/
					var _4K = $k[--$j]; /*19476*/
					var _4L = $k[--$j]; /*19476*/
					$k[$j++] = _4K; /*19482*/
					if (_4K == $1.fn1) {
						/*19481*/
						$j--; /*19478*/
						$k[$j++] = 8; /*19478*/
					} else {
						/*19481*/
						var _4O = (-$k[--$j]) - 1000000; /*19480*/
						$k[$j++] = _4O; /*19480*/
						if (_4O == 0) { //no-else/*19480*/
							$j--; /*19480*/
							$k[$j++] = 1; /*19480*/
						} /*19480*/
						var _4P = $k[--$j]; /*19481*/
						$k[$j++] = (((~~(Math.log(_4P) / Math.log(10))) + 1) * 4) + 8; /*19481*/
					} /*19481*/
				} /*19481*/
			}; /*19484*/
			$1.curlen = $a([0, $1.e, $1.e, $1.e, $1.e, $1.e]); /*19487*/
			$1.curseq = $a([$a([]), $a([]), $a([]), $a([]), $a([]), $a([])]); /*19488*/
			$1.backto = $1.U; /*19490*/
			$1.lastchar = ""; /*19491*/
			$forall($1.msg, function() {
				/*19593*/
				$1.char = $k[--$j]; /*19496*/
				for (;;) {
					/*19522*/
					$1.imp = false; /*19500*/
					var _4m = $a([$1.U, $1.L, $1.M, $1.P, $1.D, $1.B]); /*19501*/
					for (var _4n = 0, _4o = _4m.length; _4n < _4o; _4n++) {
						/*19520*/
						$1.x = $get(_4m, _4n); /*19502*/
						var _4w = $a([$1.U, $1.L, $1.M, $1.P, $1.D, $1.B]); /*19503*/
						for (var _4x = 0, _4y = _4w.length; _4x < _4y; _4x++) {
							/*19519*/
							$1.y = $get(_4w, _4x); /*19504*/
							if (($1.x != $1.B) || ($1.y == $1.backto)) { //no-else/*19518*/
								$1.cost = $get($1.curlen, $1.x) + $get($get($1.latlen, $1.x), $1.y); /*19506*/
								if ($1.cost < $get($1.curlen, $1.y)) { //no-else/*19517*/
									$put($1.curlen, $1.y, $1.cost); /*19508*/
									$k[$j++] = $1.curseq; /*19511*/
									$k[$j++] = $1.y; /*19511*/
									$k[$j++] = Infinity; /*19511*/
									$aload($get($1.curseq, $1.x)); /*19510*/
									$aload($get($get($1.latseq, $1.x), $1.y)); /*19511*/
									var _5T = $a(); /*19511*/
									var _5U = $k[--$j]; /*19512*/
									$put($k[--$j], _5U, _5T); /*19512*/
									if ($1.y == $1.B) { //no-else/*19515*/
										$k[$j++] = 'backto'; /*19514*/
										if (($1.x == $1.P) || ($1.x == $1.D)) {
											/*19514*/
											$k[$j++] = $1.U; /*19514*/
										} else {
											/*19514*/
											$k[$j++] = $1.x; /*19514*/
										} /*19514*/
										var _5e = $k[--$j]; /*19514*/
										$1[$k[--$j]] = _5e; /*19514*/
									} /*19514*/
									$1.imp = true; /*19516*/
								} /*19516*/
							} /*19516*/
						} /*19516*/
					} /*19516*/
					if (!$1.imp) { //no-else/*19521*/
						break; /*19521*/
					} /*19521*/
				} /*19521*/
				$1.nxtlen = $a([$1.e, $1.e, $1.e, $1.e, $1.e, $1.e]); /*19525*/
				$1.nxtseq = $a(6); /*19526*/
				var _5v = $a([$1.U, $1.L, $1.M, $1.P, $1.D, $1.B]); /*19528*/
				for (var _5w = 0, _5x = _5v.length; _5w < _5x; _5w++) {
					/*19567*/
					$1.x = $get(_5v, _5w); /*19529*/
					for (;;) {
						/*19565*/
						if ($1.char >= 0) {
							/*19537*/
							if ($1.x != $1.B) { //no-else/*19535*/
								var _66 = $get($get($1.charvals, $1.x), $1.char) !== undefined; /*19535*/
								if (!_66) { //no-else/*19535*/
									break; /*19535*/
								} /*19535*/
							} /*19535*/
						} else {
							/*19537*/
							if ($1.x != $1.P) { //no-else/*19537*/
								break; /*19537*/
							} /*19537*/
						} /*19537*/
						$k[$j++] = 'cost'; /*19541*/
						$k[$j++] = $get($1.curlen, $1.x); /*19541*/
						$k[$j++] = $1.x; /*19541*/
						$k[$j++] = $1.char; /*19541*/
						$1.charsize(); /*19541*/
						var _6E = $k[--$j]; /*19541*/
						var _6F = $k[--$j]; /*19541*/
						$1[$k[--$j]] = _6F + _6E; /*19541*/
						if ($1.cost < $get($1.nxtlen, $1.x)) { //no-else/*19545*/
							$put($1.nxtlen, $1.x, $1.cost); /*19543*/
							$k[$j++] = $1.nxtseq; /*19544*/
							$k[$j++] = $1.x; /*19544*/
							$k[$j++] = Infinity; /*19544*/
							$aload($get($1.curseq, $1.x)); /*19544*/
							$k[$j++] = $1.char; /*19544*/
							var _6U = $a(); /*19544*/
							var _6V = $k[--$j]; /*19544*/
							$put($k[--$j], _6V, _6U); /*19544*/
						} /*19544*/
						if ($1.x == $1.B) { //no-else/*19548*/
							break; /*19548*/
						} /*19548*/
						var _6e = $a([$1.U, $1.L, $1.M, $1.P, $1.D]); /*19549*/
						for (var _6f = 0, _6g = _6e.length; _6f < _6g; _6f++) {
							/*19562*/
							$1.y = $get(_6e, _6f); /*19550*/
							if ($ne($1.x, $1.y)) { //no-else/*19561*/
								$k[$j++] = 'cost'; /*19552*/
								$k[$j++] = $get($1.curlen, $1.y) + $get($get($1.shftlen, $1.y), $1.x); /*19552*/
								$k[$j++] = $1.x; /*19552*/
								$k[$j++] = $1.char; /*19552*/
								$1.charsize(); /*19552*/
								var _6u = $k[--$j]; /*19552*/
								var _6v = $k[--$j]; /*19552*/
								$1[$k[--$j]] = _6v + _6u; /*19552*/
								if ($1.cost < $get($1.nxtlen, $1.y)) { //no-else/*19560*/
									$put($1.nxtlen, $1.y, $1.cost); /*19554*/
									$k[$j++] = $1.nxtseq; /*19558*/
									$k[$j++] = $1.y; /*19558*/
									$k[$j++] = Infinity; /*19558*/
									$aload($get($1.curseq, $1.y)); /*19556*/
									var _7B = ($1.x == $1.U) ? $1.su : $1.sp; /*19557*/
									$k[$j++] = _7B; /*19558*/
									$k[$j++] = $1.char; /*19558*/
									var _7D = $a(); /*19558*/
									var _7E = $k[--$j]; /*19559*/
									$put($k[--$j], _7E, _7D); /*19559*/
								} /*19559*/
							} /*19559*/
						} /*19559*/
						break; /*19564*/
					} /*19564*/
				} /*19564*/
				if ($ne($1.lastchar, "") && ($1.char >= 0)) { //no-else/*19578*/
					var _7I = $s(2); /*19571*/
					$put(_7I, 0, $1.lastchar); /*19571*/
					$put(_7I, 1, $1.char); /*19571*/
					$1.pchars = _7I; /*19571*/
					var _7N = $get($1.pcomp, $1.pchars) !== undefined; /*19572*/
					if (_7N) { //no-else/*19577*/
						if ($lt($get($1.curlen, $1.P), $get($1.nxtlen, $1.P))) { //no-else/*19576*/
							$put($1.nxtlen, $1.P, $get($1.curlen, $1.P)); /*19574*/
							$k[$j++] = $1.nxtseq; /*19575*/
							$k[$j++] = $1.P; /*19575*/
							$k[$j++] = Infinity; /*19575*/
							$aload($get($1.curseq, $1.P)); /*19575*/
							$j--; /*19575*/
							$k[$j++] = $get($1.pcomp, $1.pchars); /*19575*/
							var _7h = $a(); /*19575*/
							var _7i = $k[--$j]; /*19575*/
							$put($k[--$j], _7i, _7h); /*19575*/
						} /*19575*/
					} /*19575*/
				} /*19575*/
				if ($ne($get($1.nxtseq, $1.B), null)) { //no-else/*19587*/
					$1.numbytes = 0; /*19582*/
					$forall($get($1.nxtseq, $1.B), function() {
						/*19585*/
						if ($k[--$j] == $1.sb) {
							/*19584*/
							$k[$j++] = 0; /*19584*/
						} else {
							/*19584*/
							$k[$j++] = $1.numbytes + 1; /*19584*/
						} /*19584*/
						$1.numbytes = $k[--$j]; /*19584*/
					}); /*19584*/
					if ($1.numbytes == 32) { //no-else/*19586*/
						$put($1.nxtlen, $1.B, $get($1.nxtlen, $1.B) + 11); /*19586*/
					} /*19586*/
				} /*19586*/
				$1.curlen = $1.nxtlen; /*19589*/
				$1.curseq = $1.nxtseq; /*19590*/
				$k[$j++] = 'lastchar'; /*19591*/
				if ($1.char >= 0) {
					/*19591*/
					$k[$j++] = $1.char; /*19591*/
				} else {
					/*19591*/
					$k[$j++] = ""; /*19591*/
				} /*19591*/
				var _84 = $k[--$j]; /*19591*/
				$1[$k[--$j]] = _84; /*19591*/
			}); /*19591*/
			$1.minseq = $1.e; /*19596*/
			var _8D = $a([$1.U, $1.L, $1.M, $1.P, $1.D, $1.B]); /*19597*/
			for (var _8E = 0, _8F = _8D.length; _8E < _8F; _8E++) {
				/*19603*/
				$1.i = $get(_8D, _8E); /*19598*/
				if ($get($1.curlen, $1.i) < $1.minseq) { //no-else/*19602*/
					$1.minseq = $get($1.curlen, $1.i); /*19600*/
					$1.seq = $get($1.curseq, $1.i); /*19601*/
				} /*19601*/
			} /*19601*/
			$1.tobin = function() {
				var _8S = $s($k[--$j]); /*19607*/
				$k[$j++] = _8S; /*19607*/
				for (var _8U = 0, _8T = _8S.length - 1; _8U <= _8T; _8U += 1) {
					/*19607*/
					var _8V = $k[--$j]; /*19607*/
					$put(_8V, _8U, 48); /*19607*/
					$k[$j++] = _8V; /*19607*/
				} /*19607*/
				var _8W = $k[--$j]; /*19608*/
				var _8Z = $cvrs($s(_8W.length), $k[--$j], 2); /*19608*/
				$puti(_8W, _8W.length - _8Z.length, _8Z); /*19608*/
				$k[$j++] = _8W; /*19608*/
			}; /*19609*/
			$1.encu = function() {
				var _8e = $get($get($1.charvals, $1.U), $k[--$j]); /*19611*/
				$k[$j++] = _8e; /*19611*/
				$k[$j++] = 5; /*19611*/
				$1.tobin(); /*19611*/
			}; /*19611*/
			$1.encl = function() {
				var _8j = $get($get($1.charvals, $1.L), $k[--$j]); /*19612*/
				$k[$j++] = _8j; /*19612*/
				$k[$j++] = 5; /*19612*/
				$1.tobin(); /*19612*/
			}; /*19612*/
			$1.encm = function() {
				var _8o = $get($get($1.charvals, $1.M), $k[--$j]); /*19613*/
				$k[$j++] = _8o; /*19613*/
				$k[$j++] = 5; /*19613*/
				$1.tobin(); /*19613*/
			}; /*19613*/
			$1.encd = function() {
				var _8t = $get($get($1.charvals, $1.D), $k[--$j]); /*19614*/
				$k[$j++] = _8t; /*19614*/
				$k[$j++] = 4; /*19614*/
				$1.tobin(); /*19614*/
			}; /*19614*/
			$1.encp = function() {
				var _8u = $k[--$j]; /*19617*/
				$k[$j++] = _8u; /*19635*/
				if (_8u >= 0) {
					/*19633*/
					var _8z = $get($get($1.charvals, $1.P), $k[--$j]); /*19618*/
					$k[$j++] = _8z; /*19618*/
					$k[$j++] = 5; /*19618*/
					$1.tobin(); /*19618*/
				} else {
					/*19633*/
					var _90 = $k[--$j]; /*19620*/
					$k[$j++] = _90; /*19634*/
					if (_90 == $1.fn1) {
						/*19633*/
						$j--; /*19621*/
						$k[$j++] = "00000000"; /*19621*/
					} else {
						/*19633*/
						var _93 = (-$k[--$j]) - 1000000; /*19623*/
						$k[$j++] = _93; /*19623*/
						$k[$j++] = _93; /*19623*/
						if (_93 == 0) { //no-else/*19623*/
							$j--; /*19623*/
							$k[$j++] = 1; /*19623*/
						} /*19623*/
						var _95 = ~~(Math.log($k[--$j]) / Math.log(10)); /*19625*/
						var _96 = $s(((_95 + 1) * 4) + 8); /*19625*/
						$puti(_96, 0, "00000"); /*19626*/
						$k[$j++] = _95; /*19627*/
						$k[$j++] = _96; /*19627*/
						$k[$j++] = _96; /*19627*/
						$k[$j++] = _95 + 1; /*19627*/
						$k[$j++] = 3; /*19627*/
						$1.tobin(); /*19627*/
						var _97 = $k[--$j]; /*19627*/
						$puti($k[--$j], 5, _97); /*19627*/
						var _99 = $k[--$j]; /*19628*/
						var _9A = $k[--$j]; /*19628*/
						var _9B = $k[--$j]; /*19628*/
						$k[$j++] = _99; /*19632*/
						$k[$j++] = _9B; /*19632*/
						for (var _9C = _9A; _9C >= 0; _9C -= 1) {
							/*19632*/
							var _9D = $k[--$j]; /*19629*/
							var _9E = $k[--$j]; /*19630*/
							$k[$j++] = _9E; /*19631*/
							$k[$j++] = ~~(_9D / 10); /*19631*/
							$k[$j++] = _9E; /*19631*/
							$k[$j++] = (_9C * 4) + 8; /*19631*/
							$k[$j++] = (_9D % 10) + 2; /*19631*/
							$k[$j++] = 4; /*19631*/
							$1.tobin(); /*19631*/
							var _9F = $k[--$j]; /*19631*/
							var _9G = $k[--$j]; /*19631*/
							$puti($k[--$j], _9G, _9F); /*19631*/
						} /*19631*/
						$j--; /*19633*/
					} /*19633*/
				} /*19633*/
			}; /*19636*/
			$1.encfuncs = $a(['encu', 'encl', 'encm', 'encp', 'encd']); /*19638*/
			$1.addtomsgbits = function() {
				$1.v = $k[--$j]; /*19641*/
				$puti($1.msgbits, $1.j, $1.v); /*19642*/
				$1.j = $1.j + $1.v.length; /*19643*/
			}; /*19644*/
			$1.state = $1.U; /*19647*/
			$1.msgbits = $s($1.minseq); /*19648*/
			$1.i = 0; /*19649*/
			$1.j = 0; /*19649*/
			for (;;) {
				/*19708*/
				if ($1.i >= $1.seq.length) { //no-else/*19650*/
					break; /*19650*/
				} /*19650*/
				if ($1.state != $1.B) {
					/*19703*/
					$1.char = $get($1.seq, $1.i); /*19654*/
					$k[$j++] = $1.char; /*19657*/
					if ($1[$get($1.encfuncs, $1.state)]() === true) {
						break;
					} /*19657*/
					$1.addtomsgbits(); /*19657*/
					$1.i = $1.i + 1; /*19658*/
					if (($1.char == $1.su) || ($1.char == $1.sp)) { //no-else/*19664*/
						$k[$j++] = $get($1.seq, $1.i); /*19662*/
						if ($1.char == $1.su) {
							/*19662*/
							$1.encu(); /*19662*/
						} else {
							/*19662*/
							$1.encp(); /*19662*/
						} /*19662*/
						$1.addtomsgbits(); /*19662*/
						$1.i = $1.i + 1; /*19663*/
					} /*19663*/
					if ($1.char == $1.lu) { //no-else/*19667*/
						$1.state = $1.U; /*19667*/
					} /*19667*/
					if ($1.char == $1.ll) { //no-else/*19668*/
						$1.state = $1.L; /*19668*/
					} /*19668*/
					if ($1.char == $1.lm) { //no-else/*19669*/
						$1.state = $1.M; /*19669*/
					} /*19669*/
					if ($1.char == $1.lp) { //no-else/*19670*/
						$1.state = $1.P; /*19670*/
					} /*19670*/
					if ($1.char == $1.ld) { //no-else/*19671*/
						$1.state = $1.D; /*19671*/
					} /*19671*/
					if ($1.char == $1.sb) { //no-else/*19672*/
						$1.state = $1.B; /*19672*/
					} /*19672*/
				} else {
					/*19703*/
					$1.numbytes = 0; /*19677*/
					for (;;) {
						/*19681*/
						if (($1.i + $1.numbytes) >= $1.seq.length) { //no-else/*19678*/
							break; /*19678*/
						} /*19678*/
						if ($get($1.seq, $1.i + $1.numbytes) < 0) { //no-else/*19679*/
							break; /*19679*/
						} /*19679*/
						$1.numbytes = $1.numbytes + 1; /*19680*/
					} /*19680*/
					if ($1.numbytes <= 31) {
						/*19688*/
						$k[$j++] = $1.numbytes; /*19685*/
						$k[$j++] = 5; /*19685*/
						$1.tobin(); /*19685*/
						$1.addtomsgbits(); /*19685*/
					} else {
						/*19688*/
						$k[$j++] = 0; /*19687*/
						$k[$j++] = 5; /*19687*/
						$1.tobin(); /*19687*/
						$1.addtomsgbits(); /*19687*/
						$k[$j++] = $1.numbytes - 31; /*19688*/
						$k[$j++] = 11; /*19688*/
						$1.tobin(); /*19688*/
						$1.addtomsgbits(); /*19688*/
					} /*19688*/
					for (var _AJ = 0, _AK = $1.numbytes; _AJ < _AK; _AJ++) {
						/*19695*/
						$k[$j++] = $get($1.seq, $1.i); /*19693*/
						$k[$j++] = 8; /*19693*/
						$1.tobin(); /*19693*/
						$1.addtomsgbits(); /*19693*/
						$1.i = $1.i + 1; /*19694*/
					} /*19694*/
					if ($1.i < $1.seq.length) { //no-else/*19704*/
						$1.char = $get($1.seq, $1.i); /*19699*/
						$1.i = $1.i + 1; /*19700*/
						if ($1.char == $1.lu) { //no-else/*19701*/
							$1.state = $1.U; /*19701*/
						} /*19701*/
						if ($1.char == $1.ll) { //no-else/*19702*/
							$1.state = $1.L; /*19702*/
						} /*19702*/
						if ($1.char == $1.lm) { //no-else/*19703*/
							$1.state = $1.M; /*19703*/
						} /*19703*/
					} /*19703*/
				} /*19703*/
			} /*19703*/
		} /*19703*/
		$1.metrics = $a([$a(["rune", 0, 0, 0, 6]), $a(["compact", 1, 1, 17, 6]), $a(["full", 1, 1, 21, 6]), $a(["compact", 2, 0, 40, 6]), $a(["full", 2, 1, 48, 6]), $a(["compact", 3, 0, 51, 8]), $a(["full", 3, 1, 60, 8]), $a(["compact", 4, 0, 76, 8]), $a(["full", 4, 1, 88, 8]), $a(["full", 5, 1, 120, 8]), $a(["full", 6, 1, 156, 8]), $a(["full", 7, 1, 196, 8]), $a(["full", 8, 1, 240, 8]), $a(["full", 9, 1, 230, 10]), $a(["full", 10, 1, 272, 10]), $a(["full", 11, 1, 316, 10]), $a(["full", 12, 1, 364, 10]), $a(["full", 13, 1, 416, 10]), $a(["full", 14, 1, 470, 10]), $a(["full", 15, 1, 528, 10]), $a(["full", 16, 1, 588, 10]), $a(["full", 17, 1, 652, 10]), $a(["full", 18, 1, 720, 10]), $a(["full", 19, 1, 790, 10]), $a(["full", 20, 1, 864, 10]), $a(["full", 21, 1, 940, 10]), $a(["full", 22, 1, 1020, 10]), $a(["full", 23, 0, 920, 12]), $a(["full", 24, 0, 992, 12]), $a(["full", 25, 0, 1066, 12]), $a(["full", 26, 0, 1144, 12]), $a(["full", 27, 0, 1224, 12]), $a(["full", 28, 0, 1306, 12]), $a(["full", 29, 0, 1392, 12]), $a(["full", 30, 0, 1480, 12]), $a(["full", 31, 0, 1570, 12]), $a(["full", 32, 0, 1664, 12])]); /*19727*/
		$1.i = 0; /*19729*/
		for (;;) {
			/*19747*/
			$1.m = $get($1.metrics, $1.i); /*19731*/
			$1.frmt = $get($1.m, 0); /*19732*/
			$1.mlyr = $get($1.m, 1); /*19733*/
			$1.icap = $get($1.m, 2); /*19734*/
			$1.ncws = $get($1.m, 3); /*19735*/
			$1.bpcw = $get($1.m, 4); /*19736*/
			$1.numecw = ~~(Math.ceil((($1.ncws * $1.eclevel) / 100) + $1.ecaddchars)); /*19737*/
			if ($1.msgbits.length == 0) { //no-else/*19738*/
				$1.numecw = 0; /*19738*/
			} /*19738*/
			$1.numdcw = $1.ncws - $1.numecw; /*19739*/
			$1.okay = true; /*19740*/
			if ($ne($1.format, "unset") && $ne($1.format, $1.frmt)) { //no-else/*19741*/
				$1.okay = false; /*19741*/
			} /*19741*/
			if ($1.readerinit && ($1.icap != 1)) { //no-else/*19742*/
				$1.okay = false; /*19742*/
			} /*19742*/
			if (($1.layers != -1) && ($1.layers != $1.mlyr)) { //no-else/*19743*/
				$1.okay = false; /*19743*/
			} /*19743*/
			if ((~~Math.ceil($1.msgbits.length / $1.bpcw)) > $1.numdcw) { //no-else/*19744*/
				$1.okay = false; /*19744*/
			} /*19744*/
			if ($1.okay) { //no-else/*19745*/
				break; /*19745*/
			} /*19745*/
			$1.i = $1.i + 1; /*19746*/
		} /*19746*/
		$1.layers = $1.mlyr; /*19748*/
		$1.format = $1.frmt; /*19749*/
		$1.allzero = function() {
			var _Bo = $k[--$j]; /*19752*/
			$k[$j++] = $eq(_Bo, $geti("000000000000", 0, _Bo.length)); /*19752*/
		}; /*19752*/
		$1.allones = function() {
			var _Bq = $k[--$j]; /*19753*/
			$k[$j++] = $eq(_Bq, $geti("111111111111", 0, _Bq.length)); /*19753*/
		}; /*19753*/
		$1.cws = $a($1.ncws); /*19754*/
		$1.m = 0; /*19755*/
		$1.c = 0; /*19755*/
		for (;;) {
			/*19782*/
			if ($1.msgbits.length <= $1.m) { //no-else/*19757*/
				break; /*19757*/
			} /*19757*/
			if (($1.msgbits.length - $1.m) >= $1.bpcw) {
				/*19771*/
				$1.cwb = $geti($1.msgbits, $1.m, $1.bpcw - 1); /*19759*/
				$1.cwf = $geti($1.msgbits, ($1.m + $1.bpcw) - 1, 1); /*19760*/
				$k[$j++] = $1.cwb; /*19761*/
				$1.allzero(); /*19761*/
				if ($k[--$j]) { //no-else/*19761*/
					$1.cwf = "1"; /*19761*/
					$1.m = $1.m - 1; /*19761*/
				} /*19761*/
				$k[$j++] = $1.cwb; /*19762*/
				$1.allones(); /*19762*/
				if ($k[--$j]) { //no-else/*19762*/
					$1.cwf = "0"; /*19762*/
					$1.m = $1.m - 1; /*19762*/
				} /*19762*/
				var _CD = $s(12); /*19764*/
				$puti(_CD, 0, $1.cwb); /*19764*/
				$puti(_CD, $1.bpcw - 1, $1.cwf); /*19765*/
				$1.cwb = $geti(_CD, 0, $1.bpcw); /*19767*/
			} else {
				/*19771*/
				$1.cwb = $geti($1.msgbits, $1.m, $1.msgbits.length - $1.m); /*19769*/
				var _CP = $strcpy($s(12), "111111111111"); /*19770*/
				$puti(_CP, 0, $1.cwb); /*19770*/
				$1.cwb = $geti(_CP, 0, $1.bpcw); /*19770*/
				$k[$j++] = $1.cwb; /*19771*/
				$1.allones(); /*19771*/
				if ($k[--$j]) { //no-else/*19771*/
					$puti($1.cwb, $1.cwb.length - 1, "0"); /*19771*/
				} /*19771*/
			} /*19771*/
			$1.cw = 0; /*19774*/
			for (var _CZ = 0, _CY = $1.bpcw - 1; _CZ <= _CY; _CZ += 1) {
				/*19778*/
				$1.i = _CZ; /*19776*/
				$1.cw = $1.cw + ((~~(Math.pow(2, ($1.bpcw - $1.i) - 1))) * ($get($1.cwb, $1.i) - 48)); /*19777*/
			} /*19777*/
			$put($1.cws, $1.c, $1.cw); /*19779*/
			$1.m = $1.m + $1.bpcw; /*19780*/
			$1.c = $1.c + 1; /*19781*/
		} /*19781*/
		$1.cws = $geti($1.cws, 0, $1.c); /*19783*/
		$1.rscodes = function() {
			$1.rspm = $k[--$j]; /*19788*/
			$1.rsgf = $k[--$j]; /*19789*/
			$1.rsnc = $k[--$j]; /*19790*/
			$1.rscws = $k[--$j]; /*19791*/
			$k[$j++] = Infinity; /*19794*/
			$k[$j++] = 1; /*19794*/
			for (var _Cu = 0, _Cv = $1.rsgf - 1; _Cu < _Cv; _Cu++) {
				/*19794*/
				var _Cw = $k[--$j]; /*19794*/
				var _Cx = _Cw * 2; /*19794*/
				$k[$j++] = _Cw; /*19794*/
				$k[$j++] = _Cx; /*19794*/
				if (_Cx >= $1.rsgf) { //no-else/*19794*/
					var _D0 = $k[--$j]; /*19794*/
					$k[$j++] = $xo(_D0, $1.rspm); /*19794*/
				} /*19794*/
			} /*19794*/
			$1.rsalog = $a(); /*19794*/
			$1.rslog = $a($1.rsgf); /*19795*/
			for (var _D6 = 1, _D5 = $1.rsgf - 1; _D6 <= _D5; _D6 += 1) {
				/*19796*/
				$put($1.rslog, $get($1.rsalog, _D6), _D6); /*19796*/
			} /*19796*/
			$1.rsprod = function() {
				var _DA = $k[--$j]; /*19800*/
				var _DB = $k[--$j]; /*19800*/
				$k[$j++] = _DB; /*19804*/
				$k[$j++] = _DA; /*19804*/
				if ((_DA != 0) && (_DB != 0)) {
					/*19803*/
					var _DE = $get($1.rslog, $k[--$j]); /*19801*/
					var _DK = $get($1.rsalog, (_DE + $get($1.rslog, $k[--$j])) % ($1.rsgf - 1)); /*19801*/
					$k[$j++] = _DK; /*19801*/
				} else {
					/*19803*/
					$j -= 2; /*19803*/
					$k[$j++] = 0; /*19803*/
				} /*19803*/
			}; /*19805*/
			$k[$j++] = Infinity; /*19808*/
			$k[$j++] = 1; /*19808*/
			for (var _DM = 0, _DN = $1.rsnc; _DM < _DN; _DM++) {
				/*19808*/
				$k[$j++] = 0; /*19808*/
			} /*19808*/
			$1.coeffs = $a(); /*19808*/
			for (var _DR = 1, _DQ = $1.rsnc; _DR <= _DQ; _DR += 1) {
				/*19817*/
				$1.i = _DR; /*19810*/
				$put($1.coeffs, $1.i, $get($1.coeffs, $1.i - 1)); /*19811*/
				for (var _DY = $1.i - 1; _DY >= 1; _DY -= 1) {
					/*19815*/
					$1.j = _DY; /*19813*/
					$k[$j++] = $1.coeffs; /*19814*/
					$k[$j++] = $1.j; /*19814*/
					$k[$j++] = $get($1.coeffs, $1.j - 1); /*19814*/
					$k[$j++] = $get($1.coeffs, $1.j); /*19814*/
					$k[$j++] = $get($1.rsalog, $1.i); /*19814*/
					$1.rsprod(); /*19814*/
					var _Dk = $k[--$j]; /*19814*/
					var _Dl = $k[--$j]; /*19814*/
					var _Dm = $k[--$j]; /*19814*/
					$put($k[--$j], _Dm, $xo(_Dl, _Dk)); /*19814*/
				} /*19814*/
				$k[$j++] = $1.coeffs; /*19816*/
				$k[$j++] = 0; /*19816*/
				$k[$j++] = $get($1.coeffs, 0); /*19816*/
				$k[$j++] = $get($1.rsalog, $1.i); /*19816*/
				$1.rsprod(); /*19816*/
				var _Du = $k[--$j]; /*19816*/
				var _Dv = $k[--$j]; /*19816*/
				$put($k[--$j], _Dv, _Du); /*19816*/
			} /*19816*/
			$1.nd = $1.rscws.length; /*19820*/
			$k[$j++] = Infinity; /*19821*/
			$forall($1.rscws); /*19821*/
			for (var _E0 = 0, _E1 = $1.rsnc; _E0 < _E1; _E0++) {
				/*19821*/
				$k[$j++] = 0; /*19821*/
			} /*19821*/
			$k[$j++] = 0; /*19821*/
			$1.rscws = $a(); /*19821*/
			for (var _E5 = 0, _E4 = $1.nd - 1; _E5 <= _E4; _E5 += 1) {
				/*19828*/
				$1.k = $xo($get($1.rscws, _E5), $get($1.rscws, $1.nd)); /*19823*/
				for (var _ED = 0, _EC = $1.rsnc - 1; _ED <= _EC; _ED += 1) {
					/*19827*/
					$1.j = _ED; /*19825*/
					$k[$j++] = $1.rscws; /*19826*/
					$k[$j++] = $1.nd + $1.j; /*19826*/
					$k[$j++] = $get($1.rscws, ($1.nd + $1.j) + 1); /*19826*/
					$k[$j++] = $1.k; /*19826*/
					$k[$j++] = $get($1.coeffs, ($1.rsnc - $1.j) - 1); /*19826*/
					$1.rsprod(); /*19826*/
					var _EQ = $k[--$j]; /*19826*/
					var _ER = $k[--$j]; /*19826*/
					var _ES = $k[--$j]; /*19826*/
					$put($k[--$j], _ES, $xo(_ER, _EQ)); /*19826*/
				} /*19826*/
			} /*19826*/
			$k[$j++] = $geti($1.rscws, 0, $1.rscws.length - 1); /*19831*/
		}; /*19833*/
		if ($eq($1.format, "full")) { //no-else/*19846*/
			$1.mode = (($1.layers - 1) << 11) + ($1.cws.length - 1); /*19837*/
			if ($1.readerinit) { //no-else/*19838*/
				$1.mode = $1.mode | 1024; /*19838*/
			} /*19838*/
			$1.mode = $a([($1.mode & 61440) >>> 12, ($1.mode & 3840) >>> 8, ($1.mode & 240) >>> 4, $1.mode & 15]); /*19844*/
			$k[$j++] = 'mode'; /*19845*/
			$k[$j++] = $1.mode; /*19845*/
			$k[$j++] = 6; /*19845*/
			$k[$j++] = 16; /*19845*/
			$k[$j++] = 19; /*19845*/
			$1.rscodes(); /*19845*/
			var _Ei = $k[--$j]; /*19845*/
			$1[$k[--$j]] = _Ei; /*19845*/
		} /*19845*/
		if ($eq($1.format, "compact")) { //no-else/*19855*/
			$1.mode = (($1.layers - 1) << 6) + ($1.cws.length - 1); /*19848*/
			if ($1.readerinit) { //no-else/*19849*/
				$1.mode = $1.mode | 32; /*19849*/
			} /*19849*/
			$1.mode = $a([($1.mode & 240) >>> 4, $1.mode & 15]); /*19853*/
			$k[$j++] = 'mode'; /*19854*/
			$k[$j++] = $1.mode; /*19854*/
			$k[$j++] = 5; /*19854*/
			$k[$j++] = 16; /*19854*/
			$k[$j++] = 19; /*19854*/
			$1.rscodes(); /*19854*/
			var _Et = $k[--$j]; /*19854*/
			$1[$k[--$j]] = _Et; /*19854*/
		} /*19854*/
		if ($eq($1.format, "rune")) { //no-else/*19864*/
			$1.mode = ~~$z($1.barcode); /*19857*/
			$1.mode = $a([($1.mode & 240) >>> 4, $1.mode & 15]); /*19861*/
			$k[$j++] = 'mode'; /*19862*/
			$k[$j++] = $1.mode; /*19862*/
			$k[$j++] = 5; /*19862*/
			$k[$j++] = 16; /*19862*/
			$k[$j++] = 19; /*19862*/
			$1.rscodes(); /*19862*/
			var _F1 = $k[--$j]; /*19862*/
			$1[$k[--$j]] = _F1; /*19862*/
			$k[$j++] = Infinity; /*19863*/
			var _F3 = $1.mode; /*19863*/
			for (var _F4 = 0, _F5 = _F3.length; _F4 < _F5; _F4++) {
				/*19863*/
				$k[$j++] = $get(_F3, _F4) ^ 10; /*19863*/
			} /*19863*/
			$1.mode = $a(); /*19863*/
		} /*19863*/
		$1.modebits = $s($1.mode.length * 4); /*19865*/
		for (var _FC = 0, _FB = $1.modebits.length - 1; _FC <= _FB; _FC += 1) {
			/*19866*/
			$puti($1.modebits, _FC, "0"); /*19866*/
		} /*19866*/
		for (var _FG = 0, _FF = $1.mode.length - 1; _FG <= _FF; _FG += 1) {
			/*19870*/
			$1.i = _FG; /*19868*/
			var _FM = $cvrs($s(4), $get($1.mode, $1.i), 2); /*19869*/
			$puti($1.modebits, (4 - _FM.length) + (4 * $1.i), _FM); /*19869*/
		} /*19869*/
		$1.rsparams = $a([$a([]), $a([]), $a([]), $a([]), $a([]), $a([]), $a([64, 67]), $a([]), $a([256, 301]), $a([]), $a([1024, 1033]), $a([]), $a([4096, 4201])]); /*19882*/
		$k[$j++] = 'cws'; /*19883*/
		$k[$j++] = $1.cws; /*19883*/
		$k[$j++] = $1.ncws - $1.cws.length; /*19883*/
		$forall($get($1.rsparams, $1.bpcw)); /*19883*/
		$1.rscodes(); /*19883*/
		var _Fi = $k[--$j]; /*19883*/
		$1[$k[--$j]] = _Fi; /*19883*/
		if ($eq($1.format, "full")) {
			/*19887*/
			$1.databits = $s((($1.layers * $1.layers) * 16) + ($1.layers * 112)); /*19885*/
		} else {
			/*19887*/
			$1.databits = $s((($1.layers * $1.layers) * 16) + ($1.layers * 88)); /*19887*/
		} /*19887*/
		for (var _Fv = 0, _Fu = $1.databits.length - 1; _Fv <= _Fu; _Fv += 1) {
			/*19889*/
			$puti($1.databits, _Fv, "0"); /*19889*/
		} /*19889*/
		for (var _Fz = 0, _Fy = $1.ncws - 1; _Fz <= _Fy; _Fz += 1) {
			/*19895*/
			$1.i = _Fz; /*19891*/
			var _G6 = $cvrs($s($1.bpcw), $get($1.cws, $1.i), 2); /*19892*/
			$puti($1.databits, (($1.bpcw - _G6.length) + ($1.bpcw * $1.i)) + ($1.databits.length - ($1.ncws * $1.bpcw)), _G6); /*19894*/
		} /*19894*/
		$1.cmv = function() {
			var _GE = $k[--$j]; /*19898*/
			var _GF = $k[--$j]; /*19898*/
			$k[$j++] = (_GF - (_GE * $1.size)) + $1.mid; /*19898*/
		}; /*19898*/
		$1.lmv = function() {
			$1.lbit = $k[--$j]; /*19902*/
			$1.llyr = $k[--$j]; /*19903*/
			$1.lwid = $1.fw + ($1.llyr * 4); /*19904*/
			$1.ldir = ~~((~~($1.lbit / 2)) / $1.lwid); /*19905*/
			if ($1.ldir == 0) { //no-else/*19910*/
				$k[$j++] = ((-(~~(($1.lwid - 1) / 2))) + 1) + ((~~($1.lbit / 2)) % $1.lwid); /*19909*/
				$k[$j++] = ((~~(($1.fw - 1) / 2)) + ($1.llyr * 2)) + ($1.lbit % 2); /*19909*/
				$1.cmv(); /*19909*/
			} /*19909*/
			if ($1.ldir == 1) { //no-else/*19915*/
				$k[$j++] = ((~~($1.fw / 2)) + ($1.llyr * 2)) + ($1.lbit % 2); /*19914*/
				$k[$j++] = ((~~(($1.lwid - 1) / 2)) - 1) - ((~~($1.lbit / 2)) % $1.lwid); /*19914*/
				$1.cmv(); /*19914*/
			} /*19914*/
			if ($1.ldir == 2) { //no-else/*19920*/
				$k[$j++] = -(((-(~~($1.lwid / 2))) + 1) + ((~~($1.lbit / 2)) % $1.lwid)); /*19919*/
				$k[$j++] = -(((~~($1.fw / 2)) + ($1.llyr * 2)) + ($1.lbit % 2)); /*19919*/
				$1.cmv(); /*19919*/
			} /*19919*/
			if ($1.ldir == 3) { //no-else/*19925*/
				$k[$j++] = -(((~~(($1.fw - 1) / 2)) + ($1.llyr * 2)) + ($1.lbit % 2)); /*19924*/
				$k[$j++] = -(((~~($1.lwid / 2)) - 1) - ((~~($1.lbit / 2)) % $1.lwid)); /*19924*/
				$1.cmv(); /*19924*/
			} /*19924*/
		}; /*19926*/
		if ($eq($1.format, "full")) {
			/*19930*/
			$1.fw = 12; /*19930*/
		} else {
			/*19930*/
			$1.fw = 9; /*19930*/
		} /*19930*/
		$1.size = ($1.fw + ($1.layers * 4)) + 2; /*19931*/
		$k[$j++] = Infinity; /*19932*/
		for (var _Gu = 0, _Gv = $1.size * $1.size; _Gu < _Gv; _Gu++) {
			/*19932*/
			$k[$j++] = -1; /*19932*/
		} /*19932*/
		$1.pixs = $a(); /*19932*/
		$1.mid = ((~~(($1.size - 1) / 2)) * $1.size) + (~~(($1.size - 1) / 2)); /*19933*/
		$1.i = 0; /*19936*/
		for (var _H2 = 1, _H1 = $1.layers; _H2 <= _H1; _H2 += 1) {
			/*19944*/
			$1.layer = _H2; /*19938*/
			for (var _H6 = 0, _H5 = (($1.fw + ($1.layer * 4)) * 8) - 1; _H6 <= _H5; _H6 += 1) {
				/*19943*/
				$1.pos = _H6; /*19940*/
				$k[$j++] = $1.pixs; /*19941*/
				$k[$j++] = $1.layer; /*19941*/
				$k[$j++] = $1.pos; /*19941*/
				$1.lmv(); /*19941*/
				var _HE = $k[--$j]; /*19941*/
				$put($k[--$j], _HE, $get($1.databits, ($1.databits.length - $1.i) - 1) - 48); /*19941*/
				$1.i = $1.i + 1; /*19942*/
			} /*19942*/
		} /*19942*/
		if ($eq($1.format, "full")) { //no-else/*19971*/
			$1.fw = 13; /*19948*/
			$1.size = (($1.fw + ($1.layers * 4)) + 2) + ((~~((($1.layers + 10.5) / 7.5) - 1)) * 2); /*19949*/
			$1.mid = ~~(($1.size * $1.size) / 2); /*19950*/
			$k[$j++] = Infinity; /*19951*/
			for (var _HP = 0, _HQ = $1.size * $1.size; _HP < _HQ; _HP++) {
				/*19951*/
				$k[$j++] = -2; /*19951*/
			} /*19951*/
			$1.npixs = $a(); /*19951*/
			for (var _HU = 0, _HT = ~~($1.size / 2); _HU <= _HT; _HU += 16) {
				/*19961*/
				$1.i = _HU; /*19953*/
				for (var _HX = 0, _HW = $1.size - 1; _HX <= _HW; _HX += 1) {
					/*19960*/
					$1.j = _HX; /*19955*/
					$k[$j++] = $1.npixs; /*19956*/
					$k[$j++] = (-(~~($1.size / 2))) + $1.j; /*19956*/
					$k[$j++] = $1.i; /*19956*/
					$1.cmv(); /*19956*/
					var _Hg = $k[--$j]; /*19956*/
					$puti($k[--$j], _Hg, $a([((((~~($1.size / 2)) + $1.j) + $1.i) + 1) % 2])); /*19956*/
					$k[$j++] = $1.npixs; /*19957*/
					$k[$j++] = (-(~~($1.size / 2))) + $1.j; /*19957*/
					$k[$j++] = -$1.i; /*19957*/
					$1.cmv(); /*19957*/
					var _Hq = $k[--$j]; /*19957*/
					$puti($k[--$j], _Hq, $a([((((~~($1.size / 2)) + $1.j) + $1.i) + 1) % 2])); /*19957*/
					$k[$j++] = $1.npixs; /*19958*/
					$k[$j++] = $1.i; /*19958*/
					$k[$j++] = (-(~~($1.size / 2))) + $1.j; /*19958*/
					$1.cmv(); /*19958*/
					var _I0 = $k[--$j]; /*19958*/
					$puti($k[--$j], _I0, $a([((((~~($1.size / 2)) + $1.j) + $1.i) + 1) % 2])); /*19958*/
					$k[$j++] = $1.npixs; /*19959*/
					$k[$j++] = -$1.i; /*19959*/
					$k[$j++] = (-(~~($1.size / 2))) + $1.j; /*19959*/
					$1.cmv(); /*19959*/
					var _IA = $k[--$j]; /*19959*/
					$puti($k[--$j], _IA, $a([((((~~($1.size / 2)) + $1.j) + $1.i) + 1) % 2])); /*19959*/
				} /*19959*/
			} /*19959*/
			$1.j = 0; /*19962*/
			for (var _IE = 0, _ID = $1.npixs.length - 1; _IE <= _ID; _IE += 1) {
				/*19969*/
				$1.i = _IE; /*19964*/
				if ($get($1.npixs, $1.i) == -2) { //no-else/*19968*/
					$put($1.npixs, $1.i, $get($1.pixs, $1.j)); /*19966*/
					$1.j = $1.j + 1; /*19967*/
				} /*19967*/
			} /*19967*/
			$1.pixs = $1.npixs; /*19970*/
		} /*19970*/
		$1.fw = ~~($1.fw / 2); /*19974*/
		for (var _IT = -$1.fw, _IS = $1.fw; _IT <= _IS; _IT += 1) {
			/*19983*/
			$1.i = _IT; /*19976*/
			for (var _IX = -$1.fw, _IW = $1.fw; _IX <= _IW; _IX += 1) {
				/*19982*/
				$1.j = _IX; /*19978*/
				$k[$j++] = $1.pixs; /*19979*/
				$k[$j++] = $1.i; /*19979*/
				$k[$j++] = $1.j; /*19979*/
				$1.cmv(); /*19979*/
				if (Math.abs($1.i) > Math.abs($1.j)) {
					/*19980*/
					$k[$j++] = Math.abs($1.i); /*19980*/
				} else {
					/*19980*/
					$k[$j++] = Math.abs($1.j); /*19980*/
				} /*19980*/
				var _If = $k[--$j]; /*19980*/
				var _Ig = $k[--$j]; /*19981*/
				$put($k[--$j], _Ig, (_If + 1) % 2); /*19981*/
			} /*19981*/
		} /*19981*/
		var _JI = $a([$a([-($1.fw + 1), $1.fw, 1]), $a([-($1.fw + 1), $1.fw + 1, 1]), $a([-$1.fw, $1.fw + 1, 1]), $a([$1.fw + 1, $1.fw + 1, 1]), $a([$1.fw + 1, $1.fw, 1]), $a([$1.fw + 1, -$1.fw, 1]), $a([$1.fw, $1.fw + 1, 0]), $a([$1.fw + 1, -($1.fw + 1), 0]), $a([$1.fw, -($1.fw + 1), 0]), $a([-$1.fw, -($1.fw + 1), 0]), $a([-($1.fw + 1), -($1.fw + 1), 0]), $a([-($1.fw + 1), -$1.fw, 0])]); /*19991*/
		for (var _JJ = 0, _JK = _JI.length; _JJ < _JK; _JJ++) {
			/*19992*/
			$k[$j++] = $1.pixs; /*19992*/
			$forall($get(_JI, _JJ)); /*19992*/
			var _JN = $k[--$j]; /*19992*/
			var _JO = $k[--$j]; /*19992*/
			var _JP = $k[--$j]; /*19992*/
			$k[$j++] = _JN; /*19992*/
			$k[$j++] = _JP; /*19992*/
			$k[$j++] = _JO; /*19992*/
			$1.cmv(); /*19992*/
			var _JQ = $k[--$j]; /*19992*/
			var _JR = $k[--$j]; /*19992*/
			$put($k[--$j], _JQ, _JR); /*19992*/
		} /*19992*/
		if ($eq($1.format, "full")) {
			/*20008*/
			$1.modemap = $a([$a([-5, 7]), $a([-4, 7]), $a([-3, 7]), $a([-2, 7]), $a([-1, 7]), $a([1, 7]), $a([2, 7]), $a([3, 7]), $a([4, 7]), $a([5, 7]), $a([7, 5]), $a([7, 4]), $a([7, 3]), $a([7, 2]), $a([7, 1]), $a([7, -1]), $a([7, -2]), $a([7, -3]), $a([7, -4]), $a([7, -5]), $a([5, -7]), $a([4, -7]), $a([3, -7]), $a([2, -7]), $a([1, -7]), $a([-1, -7]), $a([-2, -7]), $a([-3, -7]), $a([-4, -7]), $a([-5, -7]), $a([-7, -5]), $a([-7, -4]), $a([-7, -3]), $a([-7, -2]), $a([-7, -1]), $a([-7, 1]), $a([-7, 2]), $a([-7, 3]), $a([-7, 4]), $a([-7, 5])]); /*20001*/
		} else {
			/*20008*/
			$1.modemap = $a([$a([-3, 5]), $a([-2, 5]), $a([-1, 5]), $a([0, 5]), $a([1, 5]), $a([2, 5]), $a([3, 5]), $a([5, 3]), $a([5, 2]), $a([5, 1]), $a([5, 0]), $a([5, -1]), $a([5, -2]), $a([5, -3]), $a([3, -5]), $a([2, -5]), $a([1, -5]), $a([0, -5]), $a([-1, -5]), $a([-2, -5]), $a([-3, -5]), $a([-5, -3]), $a([-5, -2]), $a([-5, -1]), $a([-5, 0]), $a([-5, 1]), $a([-5, 2]), $a([-5, 3])]); /*20008*/
		} /*20008*/
		for (var _Ke = 0, _Kd = $1.modemap.length - 1; _Ke <= _Kd; _Ke += 1) {
			/*20013*/
			$1.i = _Ke; /*20011*/
			$k[$j++] = $1.pixs; /*20012*/
			$forall($get($1.modemap, $1.i)); /*20012*/
			$1.cmv(); /*20012*/
			var _Km = $k[--$j]; /*20012*/
			$put($k[--$j], _Km, $get($1.modebits, $1.i) - 48); /*20012*/
		} /*20012*/
		var _Ku = new Map([
			["ren", $0.renmatrix],
			["pixs", $1.pixs],
			["pixx", $1.size],
			["pixy", $1.size],
			["height", ($1.size * 2) / 72],
			["width", ($1.size * 2) / 72],
			["opt", $1.options]
		]); /*20022*/
		$k[$j++] = _Ku; /*20025*/
		if (!$1.dontdraw) { //no-else/*20025*/
			$0.renmatrix(); /*20025*/
		} /*20025*/
	};
	$0.azteccodecompact = function() {
		var $1 = {}; /*20055*/
		$1.options = $k[--$j]; /*20057*/
		$1.barcode = $k[--$j]; /*20058*/
		$1.dontdraw = false; /*20060*/
		$forall($1.options, function() {
			/*20071*/
			var _3 = $k[--$j]; /*20071*/
			$1[$k[--$j]] = _3; /*20071*/
		}); /*20071*/
		$put($1.options, "dontdraw", true); /*20074*/
		$put($1.options, "format", "compact"); /*20075*/
		$k[$j++] = 'args'; /*20077*/
		$k[$j++] = $1.barcode; /*20077*/
		$k[$j++] = $1.options; /*20077*/
		$0.azteccode(); /*20077*/
		var _9 = $k[--$j]; /*20077*/
		$1[$k[--$j]] = _9; /*20077*/
		$put($1.args, "opt", $1.options); /*20079*/
		$k[$j++] = $1.args; /*20082*/
		if (!$1.dontdraw) { //no-else/*20082*/
			$0.renmatrix(); /*20082*/
		} /*20082*/
	};
	$0.aztecrune = function() {
		var $1 = {}; /*20112*/
		$1.options = $k[--$j]; /*20114*/
		$1.barcode = $k[--$j]; /*20115*/
		$1.dontdraw = false; /*20117*/
		$forall($1.options, function() {
			/*20128*/
			var _3 = $k[--$j]; /*20128*/
			$1[$k[--$j]] = _3; /*20128*/
		}); /*20128*/
		$put($1.options, "dontdraw", true); /*20131*/
		$put($1.options, "format", "rune"); /*20132*/
		$k[$j++] = 'args'; /*20134*/
		$k[$j++] = $1.barcode; /*20134*/
		$k[$j++] = $1.options; /*20134*/
		$0.azteccode(); /*20134*/
		var _9 = $k[--$j]; /*20134*/
		$1[$k[--$j]] = _9; /*20134*/
		$put($1.args, "opt", $1.options); /*20136*/
		$k[$j++] = $1.args; /*20139*/
		if (!$1.dontdraw) { //no-else/*20139*/
			$0.renmatrix(); /*20139*/
		} /*20139*/
	};
	$0.codeone = function() {
		var $1 = {}; /*20168*/
		$1.options = $k[--$j]; /*20170*/
		$1.barcode = $k[--$j]; /*20171*/
		$1.dontdraw = false; /*20173*/
		$1.version = "unset"; /*20174*/
		$1.parse = false; /*20175*/
		$1.parsefnc = false; /*20176*/
		$forall($1.options, function() {
			/*20187*/
			var _3 = $k[--$j]; /*20187*/
			$1[$k[--$j]] = _3; /*20187*/
		}); /*20187*/
		$1.barlen = $1.barcode.length; /*20210*/
		$1.stype = $eq($geti($1.version, 0, 1), "S"); /*20212*/
		if ($1.stype) {
			/*20858*/
			$1.vals = $a(["1", "1010", "1100100", "1111101000", "10011100010000", "11000011010100000", "11110100001001000000", "100110001001011010000000", "101111101011110000100000000", "111011100110101100101000000000", "1001010100000010111110010000000000", "1011101001000011101101110100000000000", "1110100011010100101001010001000000000000", "10010001100001001110011100101010000000000000", "10110101111001100010000011110100100000000000000", "11100011010111111010100100110001101000000000000000", "100011100001101111001001101111110000010000000000000000", "101100011010001010111100001011101100010100000000000000000"]); /*20234*/
			$1.normalize = function() {
				$1.base = $k[--$j]; /*20237*/
				$1.num = $k[--$j]; /*20238*/
				for (var _D = $1.num.length - 1; _D >= 1; _D -= 1) {
					/*20243*/
					$1.i = _D; /*20240*/
					var _E = $1.num; /*20241*/
					var _F = $1.i; /*20241*/
					$put(_E, _F - 1, $get(_E, _F - 1) + (~~($get($1.num, $1.i) / $1.base))); /*20241*/
					$put($1.num, $1.i, $get($1.num, $1.i) % $1.base); /*20242*/
				} /*20242*/
				for (;;) {
					/*20249*/
					if ($lt($get($1.num, 0), $1.base)) { //no-else/*20245*/
						break; /*20245*/
					} /*20245*/
					$k[$j++] = Infinity; /*20246*/
					$k[$j++] = 0; /*20246*/
					$forall($1.num); /*20246*/
					$1.num = $a(); /*20246*/
					$put($1.num, 0, $get($1.num, 0) + (~~($get($1.num, 1) / $1.base))); /*20247*/
					$put($1.num, 1, $get($1.num, 1) % $1.base); /*20248*/
				} /*20248*/
				$k[$j++] = Infinity; /*20251*/
				$1.i = true; /*20251*/
				var _g = $1.num; /*20251*/
				for (var _h = 0, _i = _g.length; _h < _i; _h++) {
					/*20251*/
					var _j = $get(_g, _h); /*20251*/
					$k[$j++] = _j; /*20251*/
					if ((_j == 0) && $1.i) {
						/*20251*/
						$j--; /*20251*/
					} else {
						/*20251*/
						$1.i = false; /*20251*/
					} /*20251*/
				} /*20251*/
				$1.num = $a(); /*20251*/
				if ($1.num.length == 0) { //no-else/*20252*/
					$1.num = $a([0]); /*20252*/
				} /*20252*/
				$k[$j++] = $1.num; /*20253*/
			}; /*20254*/
			$1.bigadd = function() {
				var _p = $k[--$j]; /*20257*/
				var _q = $k[--$j]; /*20257*/
				$1.offset = Math.abs(_p.length - _q.length); /*20258*/
				if (_p.length < _q.length) { //no-else/*20259*/
					var _ = _p; /*20259*/
					_p = _q; /*20259*/
					_q = _; /*20259*/
				} /*20259*/
				$1.a = _p; /*20260*/
				$1.b = _q; /*20260*/
				for (var _t = 0, _s = $1.b.length - 1; _t <= _s; _t += 1) {
					/*20263*/
					var _u = $1.a; /*20262*/
					var _v = $1.offset; /*20262*/
					$put(_u, _t + _v, $get(_u, _t + _v) + $get($1.b, _t)); /*20262*/
				} /*20262*/
				$k[$j++] = $1.a; /*20264*/
			}; /*20265*/
			$1.v = $a([1]); /*20268*/
			for (var _13 = 0, _12 = $1.barlen - 1; _13 <= _12; _13 += 1) {
				/*20273*/
				$1.i = _13; /*20270*/
				$k[$j++] = Infinity; /*20271*/
				$forall($get($1.vals, $1.i), function() {
					/*20271*/
					var _17 = $k[--$j]; /*20271*/
					$k[$j++] = (_17 - 48) * ($get($1.barcode, ($1.barlen - $1.i) - 1) - 48); /*20271*/
				}); /*20271*/
				var _1C = $a(); /*20271*/
				$k[$j++] = _1C; /*20272*/
				$k[$j++] = $1.v; /*20272*/
				$1.bigadd(); /*20272*/
				$1.v = $k[--$j]; /*20272*/
			} /*20272*/
			$k[$j++] = 'v'; /*20274*/
			$k[$j++] = $1.v; /*20274*/
			$k[$j++] = 2; /*20274*/
			$1.normalize(); /*20274*/
			var _1G = $k[--$j]; /*20274*/
			$1[$k[--$j]] = _1G; /*20274*/
			$k[$j++] = Infinity; /*20277*/
			for (var _1J = 0, _1K = (5 - ($1.v.length % 5)) % 5; _1J < _1K; _1J++) {
				/*20277*/
				$k[$j++] = 0; /*20277*/
			} /*20277*/
			$aload($1.v); /*20277*/
			$1.v = $a(); /*20277*/
			$1.cws = $a(~~($1.v.length / 5)); /*20278*/
			for (var _1R = 0, _1Q = $1.cws.length - 1; _1R <= _1Q; _1R += 1) {
				/*20284*/
				$1.i = _1R; /*20280*/
				$k[$j++] = 0; /*20282*/
				$forall($geti($1.v, $1.i * 5, 5), function() {
					/*20282*/
					var _1V = $k[--$j]; /*20282*/
					var _1W = $k[--$j]; /*20282*/
					$k[$j++] = (_1W + _1V) * 2; /*20282*/
				}); /*20282*/
				$put($1.cws, $1.i, ~~($k[--$j] / 2)); /*20283*/
			} /*20283*/
			$1.metrics = $a([$a(["S-10", 8, 11, 10, 4, 4, 1, 99, 99, 99]), $a(["S-20", 8, 21, 20, 8, 8, 1, 99, 99, 99]), $a(["S-30", 8, 31, 30, 12, 12, 1, 99, 99, 99])]); /*20292*/
		} else {
			/*20858*/
			$1.fnc1 = -1; /*20297*/
			$1.fnc3 = -2; /*20297*/
			var _1g = new Map([
				["FNC1", $1.fnc1],
				["FNC3", $1.fnc3]
			]); /*20300*/
			$1.fncvals = _1g; /*20301*/
			$1.msg = $a($1.barlen); /*20302*/
			$1.i = 0; /*20303*/
			$1.j = 0; /*20303*/
			$1.numecis = 0; /*20303*/
			for (;;) {
				/*20343*/
				if ($1.i == $1.barlen) { //no-else/*20304*/
					break; /*20304*/
				} /*20304*/
				$1.char = $get($1.barcode, $1.i); /*20305*/
				$1.i = $1.i + 1; /*20306*/
				if (($1.parsefnc && ($1.char == 94)) && ($1.i < $1.barlen)) { //no-else/*20340*/
					if ($get($1.barcode, $1.i) != 94) {
						/*20338*/
						if ($1.i >= ($1.barlen - 3)) { //no-else/*20311*/
							$k[$j++] = 'bwipp.truncatedFNC'; /*20310*/
							$k[$j++] = "Function character truncated"; /*20310*/
							$0.raiseerror(); /*20310*/
						} /*20310*/
						var _20 = $geti($1.barcode, $1.i, 4); /*20312*/
						$k[$j++] = _20; /*20335*/
						if ($ne($geti(_20, 0, 3), "ECI")) {
							/*20334*/
							var _22 = $k[--$j]; /*20314*/
							var _24 = $get($1.fncvals, _22) !== undefined; /*20314*/
							$k[$j++] = _22; /*20318*/
							if (!_24) { //no-else/*20318*/
								var _25 = $k[--$j]; /*20315*/
								var _26 = $s(_25.length + 28); /*20315*/
								$puti(_26, 28, _25); /*20315*/
								$puti(_26, 0, "Unknown function character: "); /*20316*/
								$k[$j++] = 'bwipp.unknownFNC'; /*20317*/
								$k[$j++] = _26; /*20317*/
								$0.raiseerror(); /*20317*/
							} /*20317*/
							var _29 = $get($1.fncvals, $k[--$j]); /*20319*/
							$1.i = $1.i + 4; /*20320*/
							$k[$j++] = _29; /*20320*/
						} else {
							/*20334*/
							$j--; /*20322*/
							if ($1.i >= ($1.barlen - 8)) { //no-else/*20325*/
								$k[$j++] = 'bwipp.truncatedECI'; /*20324*/
								$k[$j++] = "ECI truncated"; /*20324*/
								$0.raiseerror(); /*20324*/
							} /*20324*/
							var _2F = $geti($1.barcode, $1.i + 3, 6); /*20326*/
							$k[$j++] = _2F; /*20331*/
							$forall(_2F, function() {
								/*20331*/
								var _2G = $k[--$j]; /*20328*/
								if ((_2G < 48) || (_2G > 57)) { //no-else/*20330*/
									$k[$j++] = 'bwipp.invalidECI'; /*20329*/
									$k[$j++] = "ECI must be 000000 to 999999"; /*20329*/
									$0.raiseerror(); /*20329*/
								} /*20329*/
							}); /*20329*/
							var _2H = $k[--$j]; /*20332*/
							$k[$j++] = 0; /*20332*/
							$forall(_2H, function() {
								/*20332*/
								var _2I = $k[--$j]; /*20332*/
								var _2J = $k[--$j]; /*20332*/
								$k[$j++] = (_2J - (_2I - 48)) * 10; /*20332*/
							}); /*20332*/
							var _2K = $k[--$j]; /*20332*/
							$1.numecis = $1.numecis + 1; /*20333*/
							$1.i = $1.i + 9; /*20334*/
							$k[$j++] = (~~(_2K / 10)) - 1000000; /*20334*/
						} /*20334*/
						$1.char = $k[--$j]; /*20336*/
					} else {
						/*20338*/
						$1.i = $1.i + 1; /*20338*/
					} /*20338*/
				} /*20338*/
				$put($1.msg, $1.j, $1.char); /*20341*/
				$1.j = $1.j + 1; /*20342*/
			} /*20342*/
			$1.msg = $geti($1.msg, 0, $1.j); /*20344*/
			$1.msglen = $1.msg.length; /*20345*/
			$1.lC = -5; /*20348*/
			$1.lB = -6; /*20348*/
			$1.lX = -7; /*20348*/
			$1.lT = -8; /*20348*/
			$1.lD = -9; /*20348*/
			$1.unl = -10; /*20348*/
			$1.fnc2 = -11; /*20349*/
			$1.fnc4 = -12; /*20349*/
			$1.sft1 = -13; /*20349*/
			$1.sft2 = -14; /*20349*/
			$1.sft3 = -15; /*20349*/
			$1.eci = -16; /*20349*/
			$1.pad = -17; /*20349*/
			$1.fnc1lD = -18; /*20349*/
			$1.unlcw = 255; /*20350*/
			$1.eciesc = 92; /*20353*/
			if ($1.numecis > 0) { //no-else/*20380*/
				$1.msgtmp = $a((($1.msg.length * 2) + ($1.numecis * 6)) + 2); /*20355*/
				$put($1.msgtmp, 0, $1.pad); /*20356*/
				$put($1.msgtmp, 1, $1.eciesc); /*20357*/
				$1.j = 2; /*20358*/
				for (var _2h = 0, _2g = $1.msg.length - 1; _2h <= _2g; _2h += 1) {
					/*20377*/
					var _2j = $get($1.msg, _2h); /*20360*/
					$k[$j++] = _2j; /*20376*/
					if (_2j <= -1000000) {
						/*20374*/
						$forall($geti($cvrs($s(7), -$k[--$j], 10), 1, 6)); /*20362*/
						$astore($a(6)); /*20362*/
						$puti($1.msgtmp, $1.j + 1, $k[--$j]); /*20363*/
						$put($1.msgtmp, $1.j, $1.eciesc); /*20364*/
						$1.j = $1.j + 7; /*20365*/
					} else {
						/*20374*/
						var _2w = $k[--$j]; /*20367*/
						$k[$j++] = _2w; /*20375*/
						if (_2w != $1.eciesc) {
							/*20374*/
							$put($1.msgtmp, $1.j, $k[--$j]); /*20368*/
							$1.j = $1.j + 1; /*20369*/
						} else {
							/*20374*/
							$j--; /*20371*/
							$put($1.msgtmp, $1.j, $1.eciesc); /*20372*/
							$put($1.msgtmp, $1.j + 1, $1.eciesc); /*20373*/
							$1.j = $1.j + 2; /*20374*/
						} /*20374*/
					} /*20374*/
				} /*20374*/
				$1.msg = $geti($1.msgtmp, 0, $1.j); /*20378*/
				$1.msglen = $1.msg.length; /*20379*/
			} /*20379*/
			$1.metrics = $a([$a(["A", 16, 18, 16, 10, 10, 1, 4, 99, 6]), $a(["B", 22, 22, 20, 19, 16, 1, 4, 99, 8]), $a(["C", 28, 32, 28, 44, 26, 1, 4, 22, 11]), $a(["D", 40, 42, 36, 91, 44, 1, 4, 16, 16]), $a(["E", 52, 54, 48, 182, 70, 1, 4, 22, 22]), $a(["F", 70, 76, 68, 370, 140, 2, 4, 22, 31]), $a(["G", 104, 98, 88, 732, 280, 4, 6, 21, 47]), $a(["H", 148, 134, 120, 1480, 560, 8, 6, 20, 69]), $a(["T-16", 16, 17, 16, 10, 10, 1, 99, 99, 99]), $a(["T-32", 16, 33, 32, 24, 16, 1, 99, 99, 99]), $a(["T-48", 16, 49, 48, 38, 22, 1, 99, 99, 99])]); /*20396*/
			$1.fullcws = $a([]); /*20399*/
			var _3Q = $1.metrics; /*20400*/
			for (var _3R = 0, _3S = _3Q.length; _3R < _3S; _3R++) {
				/*20411*/
				$1.m = $get(_3Q, _3R); /*20401*/
				$1.vers = $get($1.m, 0); /*20402*/
				$1.dcws = $get($1.m, 4); /*20403*/
				$1.okay = true; /*20404*/
				if ($eq($1.version, "unset")) {
					/*20408*/
					if ($1.vers.length != 1) { //no-else/*20406*/
						$1.okay = false; /*20406*/
					} /*20406*/
				} else {
					/*20408*/
					if ($ne($1.version, $1.vers)) { //no-else/*20408*/
						$1.okay = false; /*20408*/
					} /*20408*/
				} /*20408*/
				if ($1.okay) { //no-else/*20410*/
					$k[$j++] = Infinity; /*20410*/
					$aload($1.fullcws); /*20410*/
					$k[$j++] = $1.dcws; /*20410*/
					$1.fullcws = $a(); /*20410*/
				} /*20410*/
			} /*20410*/
			$k[$j++] = Infinity; /*20412*/
			for (var _3g = 0, _3h = 1480; _3g < _3h; _3g++) {
				/*20412*/
				$k[$j++] = 10000; /*20412*/
			} /*20412*/
			$1.numremcws = $a(); /*20412*/
			var _3j = $1.fullcws; /*20413*/
			for (var _3k = 0, _3l = _3j.length; _3k < _3l; _3k++) {
				/*20413*/
				$put($1.numremcws, $get(_3j, _3k) - 1, 1); /*20413*/
			} /*20413*/
			for (var _3o = 1478; _3o >= 0; _3o -= 1) {
				/*20419*/
				$1.i = _3o; /*20415*/
				if ($get($1.numremcws, $1.i) != 1) { //no-else/*20418*/
					$put($1.numremcws, $1.i, $get($1.numremcws, $1.i + 1) + 1); /*20417*/
				} /*20417*/
			} /*20417*/
			$k[$j++] = Infinity; /*20430*/
			for (var _3x = 0; _3x <= 128; _3x += 1) {
				/*20422*/
				$k[$j++] = _3x; /*20422*/
				$k[$j++] = _3x + 1; /*20422*/
			} /*20422*/
			$k[$j++] = $1.pad; /*20427*/
			$k[$j++] = 129; /*20427*/
			for (var _3z = 0; _3z <= 99; _3z += 1) {
				/*20427*/
				var _41 = $cvrs($s(2), _3z, 10); /*20425*/
				var _43 = $strcpy($s(2), "00"); /*20425*/
				$puti(_43, 2 - _41.length, _41); /*20425*/
				$k[$j++] = _43; /*20426*/
				$k[$j++] = _3z + 130; /*20426*/
			} /*20426*/
			var _4B = $a([$1.lC, $1.lB, $1.fnc1, $1.fnc2, $1.fnc3, $1.fnc4, $1.fnc1lD]); /*20428*/
			$k[$j++] = 229; /*20428*/
			for (var _4C = 0, _4D = _4B.length; _4C < _4D; _4C++) {
				/*20428*/
				var _4G = $k[--$j] + 1; /*20428*/
				$k[$j++] = $get(_4B, _4C); /*20428*/
				$k[$j++] = _4G; /*20428*/
				$k[$j++] = _4G; /*20428*/
			} /*20428*/
			$j--; /*20428*/
			$k[$j++] = $1.lX; /*20430*/
			$k[$j++] = 238; /*20430*/
			$k[$j++] = $1.lT; /*20430*/
			$k[$j++] = 239; /*20430*/
			$1.Avals = $d(); /*20432*/
			$k[$j++] = Infinity; /*20434*/
			var _4K = $1.Avals; /*20434*/
			for (var _4P = _4K.size, _4O = _4K.keys(), _4N = 0; _4N < _4P; _4N++) {
				/*20434*/
				var _4L = _4O.next().value; /*20434*/
				$k[$j++] = _4L; /*20434*/
				$k[$j++] = _4K.get(_4L); /*20434*/
				$k[$j++] = Infinity; /*20434*/
				var _4Q = $k[--$j]; /*20434*/
				var _4R = $k[--$j]; /*20434*/
				$k[$j++] = _4Q; /*20434*/
				$k[$j++] = _4R; /*20434*/
				var _4S = $a(); /*20434*/
				$k[$j++] = _4S; /*20434*/
			} /*20434*/
			$1.Avals = $d(); /*20435*/
			$k[$j++] = Infinity; /*20443*/
			$k[$j++] = $1.sft1; /*20442*/
			$k[$j++] = 0; /*20442*/
			$k[$j++] = $1.sft2; /*20442*/
			$k[$j++] = 1; /*20442*/
			$k[$j++] = $1.sft3; /*20442*/
			$k[$j++] = 2; /*20442*/
			$k[$j++] = 32; /*20442*/
			$k[$j++] = 3; /*20442*/
			for (var _4X = 48; _4X <= 57; _4X += 1) {
				/*20442*/
				$k[$j++] = _4X; /*20442*/
				$k[$j++] = _4X - 44; /*20442*/
			} /*20442*/
			for (var _4Y = 65; _4Y <= 90; _4Y += 1) {
				/*20443*/
				$k[$j++] = _4Y; /*20443*/
				$k[$j++] = _4Y - 51; /*20443*/
			} /*20443*/
			$1.CNvals = $d(); /*20444*/
			$k[$j++] = Infinity; /*20445*/
			for (var _4a = 0; _4a <= 31; _4a += 1) {
				/*20445*/
				$k[$j++] = _4a; /*20445*/
				$k[$j++] = _4a; /*20445*/
			} /*20445*/
			$1.C1vals = $d(); /*20445*/
			$k[$j++] = Infinity; /*20454*/
			for (var _4c = 33; _4c <= 47; _4c += 1) {
				/*20447*/
				$k[$j++] = _4c; /*20447*/
				$k[$j++] = _4c - 33; /*20447*/
			} /*20447*/
			for (var _4d = 58; _4d <= 64; _4d += 1) {
				/*20448*/
				$k[$j++] = _4d; /*20448*/
				$k[$j++] = _4d - 43; /*20448*/
			} /*20448*/
			for (var _4e = 91; _4e <= 95; _4e += 1) {
				/*20449*/
				$k[$j++] = _4e; /*20449*/
				$k[$j++] = _4e - 69; /*20449*/
			} /*20449*/
			$k[$j++] = $1.fnc1; /*20454*/
			$k[$j++] = 27; /*20454*/
			$k[$j++] = $1.fnc2; /*20454*/
			$k[$j++] = 28; /*20454*/
			$k[$j++] = $1.fnc3; /*20454*/
			$k[$j++] = 29; /*20454*/
			$k[$j++] = $1.fnc4; /*20454*/
			$k[$j++] = 30; /*20454*/
			$k[$j++] = $1.pad; /*20454*/
			$k[$j++] = 31; /*20454*/
			$1.C2vals = $d(); /*20455*/
			$k[$j++] = Infinity; /*20456*/
			for (var _4l = 96; _4l <= 127; _4l += 1) {
				/*20456*/
				$k[$j++] = _4l; /*20456*/
				$k[$j++] = _4l - 96; /*20456*/
			} /*20456*/
			$1.C3vals = $d(); /*20456*/
			$k[$j++] = Infinity; /*20461*/
			var _4n = $1.CNvals; /*20458*/
			for (var _4s = _4n.size, _4r = _4n.keys(), _4q = 0; _4q < _4s; _4q++) {
				/*20458*/
				var _4o = _4r.next().value; /*20458*/
				$k[$j++] = _4o; /*20458*/
				$k[$j++] = _4n.get(_4o); /*20458*/
				$k[$j++] = Infinity; /*20458*/
				var _4t = $k[--$j]; /*20458*/
				var _4u = $k[--$j]; /*20458*/
				$k[$j++] = _4t; /*20458*/
				$k[$j++] = _4u; /*20458*/
				var _4v = $a(); /*20458*/
				$k[$j++] = _4v; /*20458*/
			} /*20458*/
			var _4w = $1.C1vals; /*20459*/
			for (var _51 = _4w.size, _50 = _4w.keys(), _4z = 0; _4z < _51; _4z++) {
				/*20459*/
				var _4x = _50.next().value; /*20459*/
				$k[$j++] = _4x; /*20459*/
				$k[$j++] = _4w.get(_4x); /*20459*/
				$k[$j++] = Infinity; /*20459*/
				var _52 = $k[--$j]; /*20459*/
				var _53 = $k[--$j]; /*20459*/
				$k[$j++] = _52; /*20459*/
				$k[$j++] = $get($1.CNvals, $1.sft1); /*20459*/
				$k[$j++] = _53; /*20459*/
				var _57 = $a(); /*20459*/
				$k[$j++] = _57; /*20459*/
			} /*20459*/
			var _58 = $1.C2vals; /*20460*/
			for (var _5D = _58.size, _5C = _58.keys(), _5B = 0; _5B < _5D; _5B++) {
				/*20460*/
				var _59 = _5C.next().value; /*20460*/
				$k[$j++] = _59; /*20460*/
				$k[$j++] = _58.get(_59); /*20460*/
				$k[$j++] = Infinity; /*20460*/
				var _5E = $k[--$j]; /*20460*/
				var _5F = $k[--$j]; /*20460*/
				$k[$j++] = _5E; /*20460*/
				$k[$j++] = $get($1.CNvals, $1.sft2); /*20460*/
				$k[$j++] = _5F; /*20460*/
				var _5J = $a(); /*20460*/
				$k[$j++] = _5J; /*20460*/
			} /*20460*/
			var _5K = $1.C3vals; /*20461*/
			for (var _5P = _5K.size, _5O = _5K.keys(), _5N = 0; _5N < _5P; _5N++) {
				/*20461*/
				var _5L = _5O.next().value; /*20461*/
				$k[$j++] = _5L; /*20461*/
				$k[$j++] = _5K.get(_5L); /*20461*/
				$k[$j++] = Infinity; /*20461*/
				var _5Q = $k[--$j]; /*20461*/
				var _5R = $k[--$j]; /*20461*/
				$k[$j++] = _5Q; /*20461*/
				$k[$j++] = $get($1.CNvals, $1.sft3); /*20461*/
				$k[$j++] = _5R; /*20461*/
				var _5V = $a(); /*20461*/
				$k[$j++] = _5V; /*20461*/
			} /*20461*/
			$1.Cvals = $d(); /*20462*/
			$k[$j++] = Infinity; /*20470*/
			$k[$j++] = $1.sft1; /*20469*/
			$k[$j++] = 0; /*20469*/
			$k[$j++] = $1.sft2; /*20469*/
			$k[$j++] = 1; /*20469*/
			$k[$j++] = $1.sft3; /*20469*/
			$k[$j++] = 2; /*20469*/
			$k[$j++] = 32; /*20469*/
			$k[$j++] = 3; /*20469*/
			for (var _5a = 48; _5a <= 57; _5a += 1) {
				/*20469*/
				$k[$j++] = _5a; /*20469*/
				$k[$j++] = _5a - 44; /*20469*/
			} /*20469*/
			for (var _5b = 97; _5b <= 122; _5b += 1) {
				/*20470*/
				$k[$j++] = _5b; /*20470*/
				$k[$j++] = _5b - 83; /*20470*/
			} /*20470*/
			$1.TNvals = $d(); /*20471*/
			$k[$j++] = Infinity; /*20472*/
			for (var _5d = 0; _5d <= 31; _5d += 1) {
				/*20472*/
				$k[$j++] = _5d; /*20472*/
				$k[$j++] = _5d; /*20472*/
			} /*20472*/
			$1.T1vals = $d(); /*20472*/
			$k[$j++] = Infinity; /*20481*/
			for (var _5f = 33; _5f <= 47; _5f += 1) {
				/*20474*/
				$k[$j++] = _5f; /*20474*/
				$k[$j++] = _5f - 33; /*20474*/
			} /*20474*/
			for (var _5g = 58; _5g <= 64; _5g += 1) {
				/*20475*/
				$k[$j++] = _5g; /*20475*/
				$k[$j++] = _5g - 43; /*20475*/
			} /*20475*/
			for (var _5h = 91; _5h <= 95; _5h += 1) {
				/*20476*/
				$k[$j++] = _5h; /*20476*/
				$k[$j++] = _5h - 69; /*20476*/
			} /*20476*/
			$k[$j++] = $1.fnc1; /*20481*/
			$k[$j++] = 27; /*20481*/
			$k[$j++] = $1.fnc2; /*20481*/
			$k[$j++] = 28; /*20481*/
			$k[$j++] = $1.fnc3; /*20481*/
			$k[$j++] = 29; /*20481*/
			$k[$j++] = $1.fnc4; /*20481*/
			$k[$j++] = 30; /*20481*/
			$k[$j++] = $1.pad; /*20481*/
			$k[$j++] = 31; /*20481*/
			$1.T2vals = $d(); /*20482*/
			$k[$j++] = Infinity; /*20486*/
			$k[$j++] = 96; /*20485*/
			$k[$j++] = 0; /*20485*/
			for (var _5o = 65; _5o <= 90; _5o += 1) {
				/*20485*/
				$k[$j++] = _5o; /*20485*/
				$k[$j++] = _5o - 64; /*20485*/
			} /*20485*/
			for (var _5p = 123; _5p <= 127; _5p += 1) {
				/*20486*/
				$k[$j++] = _5p; /*20486*/
				$k[$j++] = _5p - 96; /*20486*/
			} /*20486*/
			$1.T3vals = $d(); /*20487*/
			$k[$j++] = Infinity; /*20492*/
			var _5r = $1.TNvals; /*20489*/
			for (var _5w = _5r.size, _5v = _5r.keys(), _5u = 0; _5u < _5w; _5u++) {
				/*20489*/
				var _5s = _5v.next().value; /*20489*/
				$k[$j++] = _5s; /*20489*/
				$k[$j++] = _5r.get(_5s); /*20489*/
				$k[$j++] = Infinity; /*20489*/
				var _5x = $k[--$j]; /*20489*/
				var _5y = $k[--$j]; /*20489*/
				$k[$j++] = _5x; /*20489*/
				$k[$j++] = _5y; /*20489*/
				var _5z = $a(); /*20489*/
				$k[$j++] = _5z; /*20489*/
			} /*20489*/
			var _60 = $1.T1vals; /*20490*/
			for (var _65 = _60.size, _64 = _60.keys(), _63 = 0; _63 < _65; _63++) {
				/*20490*/
				var _61 = _64.next().value; /*20490*/
				$k[$j++] = _61; /*20490*/
				$k[$j++] = _60.get(_61); /*20490*/
				$k[$j++] = Infinity; /*20490*/
				var _66 = $k[--$j]; /*20490*/
				var _67 = $k[--$j]; /*20490*/
				$k[$j++] = _66; /*20490*/
				$k[$j++] = $get($1.TNvals, $1.sft1); /*20490*/
				$k[$j++] = _67; /*20490*/
				var _6B = $a(); /*20490*/
				$k[$j++] = _6B; /*20490*/
			} /*20490*/
			var _6C = $1.T2vals; /*20491*/
			for (var _6H = _6C.size, _6G = _6C.keys(), _6F = 0; _6F < _6H; _6F++) {
				/*20491*/
				var _6D = _6G.next().value; /*20491*/
				$k[$j++] = _6D; /*20491*/
				$k[$j++] = _6C.get(_6D); /*20491*/
				$k[$j++] = Infinity; /*20491*/
				var _6I = $k[--$j]; /*20491*/
				var _6J = $k[--$j]; /*20491*/
				$k[$j++] = _6I; /*20491*/
				$k[$j++] = $get($1.TNvals, $1.sft2); /*20491*/
				$k[$j++] = _6J; /*20491*/
				var _6N = $a(); /*20491*/
				$k[$j++] = _6N; /*20491*/
			} /*20491*/
			var _6O = $1.T3vals; /*20492*/
			for (var _6T = _6O.size, _6S = _6O.keys(), _6R = 0; _6R < _6T; _6R++) {
				/*20492*/
				var _6P = _6S.next().value; /*20492*/
				$k[$j++] = _6P; /*20492*/
				$k[$j++] = _6O.get(_6P); /*20492*/
				$k[$j++] = Infinity; /*20492*/
				var _6U = $k[--$j]; /*20492*/
				var _6V = $k[--$j]; /*20492*/
				$k[$j++] = _6U; /*20492*/
				$k[$j++] = $get($1.TNvals, $1.sft3); /*20492*/
				$k[$j++] = _6V; /*20492*/
				var _6Z = $a(); /*20492*/
				$k[$j++] = _6Z; /*20492*/
			} /*20492*/
			$1.Tvals = $d(); /*20493*/
			for (var _6b = 128; _6b <= 255; _6b += 1) {
				/*20501*/
				$1.i = _6b; /*20497*/
				$k[$j++] = $1.Avals; /*20498*/
				$k[$j++] = $1.i; /*20498*/
				$k[$j++] = Infinity; /*20498*/
				$aload($get($1.Avals, $1.fnc4)); /*20498*/
				$aload($get($1.Avals, $1.i - 128)); /*20498*/
				var _6k = $a(); /*20498*/
				var _6l = $k[--$j]; /*20498*/
				$put($k[--$j], _6l, _6k); /*20498*/
				$k[$j++] = $1.Cvals; /*20499*/
				$k[$j++] = $1.i; /*20499*/
				$k[$j++] = Infinity; /*20499*/
				$aload($get($1.Cvals, $1.fnc4)); /*20499*/
				$aload($get($1.Cvals, $1.i - 128)); /*20499*/
				var _6v = $a(); /*20499*/
				var _6w = $k[--$j]; /*20499*/
				$put($k[--$j], _6w, _6v); /*20499*/
				$k[$j++] = $1.Tvals; /*20500*/
				$k[$j++] = $1.i; /*20500*/
				$k[$j++] = Infinity; /*20500*/
				$aload($get($1.Tvals, $1.fnc4)); /*20500*/
				$aload($get($1.Tvals, $1.i - 128)); /*20500*/
				var _76 = $a(); /*20500*/
				var _77 = $k[--$j]; /*20500*/
				$put($k[--$j], _77, _76); /*20500*/
			} /*20500*/
			$k[$j++] = Infinity; /*20509*/
			$k[$j++] = 13; /*20508*/
			$k[$j++] = 0; /*20508*/
			$k[$j++] = 42; /*20508*/
			$k[$j++] = 1; /*20508*/
			$k[$j++] = 62; /*20508*/
			$k[$j++] = 2; /*20508*/
			$k[$j++] = 32; /*20508*/
			$k[$j++] = 3; /*20508*/
			for (var _79 = 48; _79 <= 57; _79 += 1) {
				/*20508*/
				$k[$j++] = _79; /*20508*/
				$k[$j++] = _79 - 44; /*20508*/
			} /*20508*/
			for (var _7A = 65; _7A <= 90; _7A += 1) {
				/*20509*/
				$k[$j++] = _7A; /*20509*/
				$k[$j++] = _7A - 51; /*20509*/
			} /*20509*/
			$1.Xvals = $d(); /*20510*/
			$k[$j++] = Infinity; /*20512*/
			var _7C = $1.Xvals; /*20512*/
			for (var _7H = _7C.size, _7G = _7C.keys(), _7F = 0; _7F < _7H; _7F++) {
				/*20512*/
				var _7D = _7G.next().value; /*20512*/
				$k[$j++] = _7D; /*20512*/
				$k[$j++] = _7C.get(_7D); /*20512*/
				$k[$j++] = Infinity; /*20512*/
				var _7I = $k[--$j]; /*20512*/
				var _7J = $k[--$j]; /*20512*/
				$k[$j++] = _7I; /*20512*/
				$k[$j++] = _7J; /*20512*/
				var _7K = $a(); /*20512*/
				$k[$j++] = _7K; /*20512*/
			} /*20512*/
			$1.Xvals = $d(); /*20513*/
			$k[$j++] = Infinity; /*20516*/
			for (var _7M = 0; _7M <= 255; _7M += 1) {
				/*20516*/
				$k[$j++] = _7M; /*20516*/
				$k[$j++] = _7M; /*20516*/
			} /*20516*/
			$1.Bvals = $d(); /*20517*/
			$k[$j++] = Infinity; /*20519*/
			var _7O = $1.Bvals; /*20519*/
			for (var _7T = _7O.size, _7S = _7O.keys(), _7R = 0; _7R < _7T; _7R++) {
				/*20519*/
				var _7P = _7S.next().value; /*20519*/
				$k[$j++] = _7P; /*20519*/
				$k[$j++] = _7O.get(_7P); /*20519*/
				$k[$j++] = Infinity; /*20519*/
				var _7U = $k[--$j]; /*20519*/
				var _7V = $k[--$j]; /*20519*/
				$k[$j++] = _7U; /*20519*/
				$k[$j++] = _7V; /*20519*/
				var _7W = $a(); /*20519*/
				$k[$j++] = _7W; /*20519*/
			} /*20519*/
			$1.Bvals = $d(); /*20520*/
			$1.encvals = $a([$1.Avals, $1.Cvals, $1.Tvals, $1.Xvals, -1, $1.Bvals]); /*20522*/
			$k[$j++] = Infinity; /*20524*/
			for (var _7f = 0, _7g = $1.msglen; _7f < _7g; _7f++) {
				/*20524*/
				$k[$j++] = 0; /*20524*/
			} /*20524*/
			$k[$j++] = 0; /*20524*/
			$1.numD = $a(); /*20524*/
			$k[$j++] = Infinity; /*20525*/
			for (var _7j = 0, _7k = $1.msglen; _7j < _7k; _7j++) {
				/*20525*/
				$k[$j++] = 0; /*20525*/
			} /*20525*/
			$k[$j++] = 9999; /*20525*/
			$1.nextXterm = $a(); /*20525*/
			$k[$j++] = Infinity; /*20526*/
			for (var _7n = 0, _7o = $1.msglen; _7n < _7o; _7n++) {
				/*20526*/
				$k[$j++] = 0; /*20526*/
			} /*20526*/
			$k[$j++] = 9999; /*20526*/
			$1.nextNonX = $a(); /*20526*/
			for (var _7r = $1.msglen - 1; _7r >= 0; _7r -= 1) {
				/*20543*/
				$1.i = _7r; /*20528*/
				$1.barchar = $get($1.msg, $1.i); /*20529*/
				if (($1.barchar >= 48) && ($1.barchar <= 57)) { //no-else/*20532*/
					$put($1.numD, $1.i, $get($1.numD, $1.i + 1) + 1); /*20531*/
				} /*20531*/
				if ((($1.barchar == 13) || ($1.barchar == 42)) || ($1.barchar == 62)) {
					/*20536*/
					$put($1.nextXterm, $1.i, 0); /*20534*/
				} else {
					/*20536*/
					$put($1.nextXterm, $1.i, $get($1.nextXterm, $1.i + 1) + 1); /*20536*/
				} /*20536*/
				var _8E = $get($1.Xvals, $1.barchar) !== undefined; /*20538*/
				if (!_8E) {
					/*20541*/
					$put($1.nextNonX, $1.i, 0); /*20539*/
				} else {
					/*20541*/
					$put($1.nextNonX, $1.i, $get($1.nextNonX, $1.i + 1) + 1); /*20541*/
				} /*20541*/
			} /*20541*/
			$k[$j++] = Infinity; /*20544*/
			var _8M = $1.nextXterm; /*20544*/
			for (var _8N = 0, _8O = _8M.length; _8N < _8O; _8N++) {
				/*20544*/
				var _8P = $get(_8M, _8N); /*20544*/
				$k[$j++] = _8P; /*20544*/
				if (_8P > 10000) { //no-else/*20544*/
					$j--; /*20544*/
					$k[$j++] = 10000; /*20544*/
				} /*20544*/
			} /*20544*/
			$1.nextXterm = $a(); /*20544*/
			$k[$j++] = Infinity; /*20545*/
			var _8R = $1.nextNonX; /*20545*/
			for (var _8S = 0, _8T = _8R.length; _8S < _8T; _8S++) {
				/*20545*/
				var _8U = $get(_8R, _8S); /*20545*/
				$k[$j++] = _8U; /*20545*/
				if (_8U > 10000) { //no-else/*20545*/
					$j--; /*20545*/
					$k[$j++] = 10000; /*20545*/
				} /*20545*/
			} /*20545*/
			$1.nextNonX = $a(); /*20545*/
			$1.isD = function() {
				$k[$j++] = ($1.char >= 48) && ($1.char <= 57); /*20547*/
			}; /*20547*/
			$1.isC = function() {
				var _8a = $get($1.CNvals, $1.char) !== undefined; /*20548*/
				$k[$j++] = _8a; /*20548*/
			}; /*20548*/
			$1.isT = function() {
				var _8d = $get($1.TNvals, $1.char) !== undefined; /*20549*/
				$k[$j++] = _8d; /*20549*/
			}; /*20549*/
			$1.isX = function() {
				var _8g = $get($1.Xvals, $1.char) !== undefined; /*20550*/
				$k[$j++] = _8g; /*20550*/
			}; /*20550*/
			$1.isEA = function() {
				$k[$j++] = $1.char > 127; /*20551*/
			}; /*20551*/
			$1.isFN = function() {
				$k[$j++] = $1.char < 0; /*20552*/
			}; /*20552*/
			$1.XtermFirst = function() {
				var _8j = $k[--$j]; /*20553*/
				$k[$j++] = $lt($get($1.nextXterm, _8j), $get($1.nextNonX, _8j)); /*20553*/
			}; /*20553*/
			$1.A = 0; /*20555*/
			$1.C = 1; /*20555*/
			$1.T = 2; /*20555*/
			$1.X = 3; /*20555*/
			$1.D = 4; /*20555*/
			$1.B = 5; /*20555*/
			$1.lookup = function() {
				$1.ac = 1; /*20558*/
				$1.cc = 2; /*20558*/
				$1.tc = 2; /*20558*/
				$1.xc = 2; /*20558*/
				$1.bc = 3; /*20558*/
				if ($1.mode == $1.A) { //no-else/*20559*/
					$1.ac = 0; /*20559*/
					$1.cc = 1; /*20559*/
					$1.tc = 1; /*20559*/
					$1.xc = 1; /*20559*/
					$1.bc = 2; /*20559*/
				} /*20559*/
				if ($1.mode == $1.C) { //no-else/*20560*/
					$1.cc = 0; /*20560*/
				} /*20560*/
				if ($1.mode == $1.T) { //no-else/*20561*/
					$1.tc = 0; /*20561*/
				} /*20561*/
				if ($1.mode == $1.X) { //no-else/*20562*/
					$1.xc = 0; /*20562*/
				} /*20562*/
				if ($1.mode == $1.B) { //no-else/*20563*/
					$1.bc = 0; /*20563*/
				} /*20563*/
				for (var _8y = 0, _8z = 1; _8y < _8z; _8y++) {
					/*20591*/
					$1.k = 0; /*20565*/
					for (;;) {
						/*20590*/
						if (($1.i + $1.k) == $1.msglen) { //no-else/*20572*/
							var _97 = $a([$1.ac, $1.cc, $1.tc, $1.xc]); /*20567*/
							$k[$j++] = true; /*20567*/
							for (var _98 = 0, _99 = _97.length; _98 < _99; _98++) {
								/*20567*/
								var _9C = $k[--$j]; /*20567*/
								$k[$j++] = _9C && ($1.bc <= Math.ceil($get(_97, _98))); /*20567*/
							} /*20567*/
							if ($k[--$j]) { //no-else/*20567*/
								$k[$j++] = $1.B; /*20567*/
								break; /*20567*/
							} /*20567*/
							var _9J = $a([$1.cc, $1.tc, $1.xc, $1.bc]); /*20568*/
							$k[$j++] = true; /*20568*/
							for (var _9K = 0, _9L = _9J.length; _9K < _9L; _9K++) {
								/*20568*/
								var _9O = $k[--$j]; /*20568*/
								$k[$j++] = _9O && ($1.ac <= Math.ceil($get(_9J, _9K))); /*20568*/
							} /*20568*/
							if ($k[--$j]) { //no-else/*20568*/
								$k[$j++] = $1.A; /*20568*/
								break; /*20568*/
							} /*20568*/
							var _9T = $a([$1.tc, $1.xc]); /*20569*/
							$k[$j++] = true; /*20569*/
							for (var _9U = 0, _9V = _9T.length; _9U < _9V; _9U++) {
								/*20569*/
								var _9Y = $k[--$j]; /*20569*/
								$k[$j++] = _9Y && (Math.ceil($1.cc) <= Math.ceil($get(_9T, _9U))); /*20569*/
							} /*20569*/
							if ($k[--$j]) { //no-else/*20569*/
								$k[$j++] = $1.C; /*20569*/
								break; /*20569*/
							} /*20569*/
							var _9c = $a([$1.xc]); /*20570*/
							$k[$j++] = true; /*20570*/
							for (var _9d = 0, _9e = _9c.length; _9d < _9e; _9d++) {
								/*20570*/
								var _9h = $k[--$j]; /*20570*/
								$k[$j++] = _9h && (Math.ceil($1.tc) <= Math.ceil($get(_9c, _9d))); /*20570*/
							} /*20570*/
							if ($k[--$j]) { //no-else/*20570*/
								$k[$j++] = $1.T; /*20570*/
								break; /*20570*/
							} /*20570*/
							$k[$j++] = $1.X; /*20571*/
							break; /*20571*/
						} /*20571*/
						$1.char = $get($1.msg, $1.i + $1.k); /*20573*/
						$k[$j++] = 'ac'; /*20574*/
						$k[$j++] = $1.ac; /*20574*/
						$1.isD(); /*20574*/
						if ($k[--$j]) {
							/*20574*/
							var _9r = $k[--$j]; /*20574*/
							$k[$j++] = _9r + (1 / 2); /*20574*/
						} else {
							/*20574*/
							$1.isEA(); /*20574*/
							if ($k[--$j]) {
								/*20574*/
								var _9t = $k[--$j]; /*20574*/
								$k[$j++] = Math.ceil(_9t) + 2; /*20574*/
							} else {
								/*20574*/
								var _9u = $k[--$j]; /*20574*/
								$k[$j++] = Math.ceil(_9u) + 1; /*20574*/
							} /*20574*/
						} /*20574*/
						var _9v = $k[--$j]; /*20574*/
						$1[$k[--$j]] = _9v; /*20574*/
						$k[$j++] = 'cc'; /*20575*/
						$k[$j++] = $1.cc; /*20575*/
						$1.isC(); /*20575*/
						if ($k[--$j]) {
							/*20575*/
							var _9z = $k[--$j]; /*20575*/
							$k[$j++] = _9z + 0.66666667; /*20575*/
						} else {
							/*20575*/
							$1.isEA(); /*20575*/
							if ($k[--$j]) {
								/*20575*/
								var _A1 = $k[--$j]; /*20575*/
								$k[$j++] = _A1 + 2.66666667; /*20575*/
							} else {
								/*20575*/
								var _A2 = $k[--$j]; /*20575*/
								$k[$j++] = _A2 + 1.33333334; /*20575*/
							} /*20575*/
						} /*20575*/
						var _A3 = $k[--$j]; /*20575*/
						$1[$k[--$j]] = _A3; /*20575*/
						$k[$j++] = 'tc'; /*20576*/
						$k[$j++] = $1.tc; /*20576*/
						$1.isT(); /*20576*/
						if ($k[--$j]) {
							/*20576*/
							var _A7 = $k[--$j]; /*20576*/
							$k[$j++] = _A7 + 0.66666667; /*20576*/
						} else {
							/*20576*/
							$1.isEA(); /*20576*/
							if ($k[--$j]) {
								/*20576*/
								var _A9 = $k[--$j]; /*20576*/
								$k[$j++] = _A9 + 2.66666667; /*20576*/
							} else {
								/*20576*/
								var _AA = $k[--$j]; /*20576*/
								$k[$j++] = _AA + 1.33333334; /*20576*/
							} /*20576*/
						} /*20576*/
						var _AB = $k[--$j]; /*20576*/
						$1[$k[--$j]] = _AB; /*20576*/
						$k[$j++] = 'xc'; /*20577*/
						$k[$j++] = $1.xc; /*20577*/
						$1.isX(); /*20577*/
						if ($k[--$j]) {
							/*20577*/
							var _AF = $k[--$j]; /*20577*/
							$k[$j++] = _AF + 0.66666667; /*20577*/
						} else {
							/*20577*/
							$1.isEA(); /*20577*/
							if ($k[--$j]) {
								/*20577*/
								var _AH = $k[--$j]; /*20577*/
								$k[$j++] = _AH + 4.33333334; /*20577*/
							} else {
								/*20577*/
								var _AI = $k[--$j]; /*20577*/
								$k[$j++] = _AI + 3.33333334; /*20577*/
							} /*20577*/
						} /*20577*/
						var _AJ = $k[--$j]; /*20577*/
						$1[$k[--$j]] = _AJ; /*20577*/
						$k[$j++] = 'bc'; /*20578*/
						$k[$j++] = $1.bc; /*20578*/
						$1.isFN(); /*20578*/
						if ($k[--$j]) {
							/*20578*/
							var _AN = $k[--$j]; /*20578*/
							$k[$j++] = _AN + 3; /*20578*/
						} else {
							/*20578*/
							var _AO = $k[--$j]; /*20578*/
							$k[$j++] = _AO + 1; /*20578*/
						} /*20578*/
						var _AP = $k[--$j]; /*20578*/
						$1[$k[--$j]] = _AP; /*20578*/
						if ($1.k >= 3) { //no-else/*20588*/
							var _AW = $a([$1.ac, $1.cc, $1.tc, $1.xc]); /*20580*/
							$k[$j++] = true; /*20580*/
							for (var _AX = 0, _AY = _AW.length; _AX < _AY; _AX++) {
								/*20580*/
								var _Ab = $k[--$j]; /*20580*/
								$k[$j++] = _Ab && (($1.bc + 1) <= Math.ceil($get(_AW, _AX))); /*20580*/
							} /*20580*/
							if ($k[--$j]) { //no-else/*20580*/
								$k[$j++] = $1.B; /*20580*/
								break; /*20580*/
							} /*20580*/
							var _Ai = $a([$1.cc, $1.tc, $1.xc, $1.bc]); /*20581*/
							$k[$j++] = true; /*20581*/
							for (var _Aj = 0, _Ak = _Ai.length; _Aj < _Ak; _Aj++) {
								/*20581*/
								var _An = $k[--$j]; /*20581*/
								$k[$j++] = _An && (($1.ac + 1) <= Math.ceil($get(_Ai, _Aj))); /*20581*/
							} /*20581*/
							if ($k[--$j]) { //no-else/*20581*/
								$k[$j++] = $1.A; /*20581*/
								break; /*20581*/
							} /*20581*/
							var _Au = $a([$1.ac, $1.cc, $1.xc, $1.bc]); /*20582*/
							$k[$j++] = true; /*20582*/
							for (var _Av = 0, _Aw = _Au.length; _Av < _Aw; _Av++) {
								/*20582*/
								var _Az = $k[--$j]; /*20582*/
								$k[$j++] = _Az && (($1.tc + 1) <= Math.ceil($get(_Au, _Av))); /*20582*/
							} /*20582*/
							if ($k[--$j]) { //no-else/*20582*/
								$k[$j++] = $1.T; /*20582*/
								break; /*20582*/
							} /*20582*/
							var _B4 = $a([$1.ac, $1.tc]); /*20583*/
							$k[$j++] = true; /*20583*/
							for (var _B5 = 0, _B6 = _B4.length; _B5 < _B6; _B5++) {
								/*20583*/
								var _B9 = $k[--$j]; /*20583*/
								$k[$j++] = _B9 && (($1.cc + 1) <= Math.ceil($get(_B4, _B5))); /*20583*/
							} /*20583*/
							if ($k[--$j]) { //no-else/*20586*/
								if (Math.ceil($1.cc) < Math.ceil($1.xc)) { //no-else/*20584*/
									$k[$j++] = $1.C; /*20584*/
									break; /*20584*/
								} /*20584*/
								if ($1.cc == $1.xc) { //no-else/*20585*/
									$k[$j++] = ($1.i + $1.k) + 1; /*20585*/
									$1.XtermFirst(); /*20585*/
									if ($k[--$j]) {
										/*20585*/
										$k[$j++] = $1.X; /*20585*/
										break; /*20585*/
									} else {
										/*20585*/
										$k[$j++] = $1.C; /*20585*/
										break; /*20585*/
									} /*20585*/
								} /*20585*/
							} /*20585*/
							var _BP = $a([$1.ac, $1.cc, $1.tc, $1.bc]); /*20587*/
							$k[$j++] = true; /*20587*/
							for (var _BQ = 0, _BR = _BP.length; _BQ < _BR; _BQ++) {
								/*20587*/
								var _BU = $k[--$j]; /*20587*/
								$k[$j++] = _BU && (($1.xc + 1) < $get(_BP, _BQ)); /*20587*/
							} /*20587*/
							if ($k[--$j]) { //no-else/*20587*/
								$k[$j++] = $1.X; /*20587*/
								break; /*20587*/
							} /*20587*/
						} /*20587*/
						$1.k = $1.k + 1; /*20589*/
					} /*20589*/
				} /*20589*/
			}; /*20592*/
			$1.addtocws = function() {
				var _BY = $k[--$j]; /*20595*/
				$puti($1.cws, $1.j, _BY); /*20595*/
				$1.j = _BY.length + $1.j; /*20596*/
			}; /*20597*/
			$1.tobin = function() {
				var _Bd = $s($k[--$j]); /*20600*/
				$k[$j++] = _Bd; /*20600*/
				for (var _Bf = 0, _Be = _Bd.length - 1; _Bf <= _Be; _Bf += 1) {
					/*20600*/
					var _Bg = $k[--$j]; /*20600*/
					$put(_Bg, _Bf, 48); /*20600*/
					$k[$j++] = _Bg; /*20600*/
				} /*20600*/
				var _Bh = $k[--$j]; /*20601*/
				var _Bk = $cvrs($s(_Bh.length), $k[--$j], 2); /*20601*/
				$puti(_Bh, _Bh.length - _Bk.length, _Bk); /*20601*/
				$k[$j++] = _Bh; /*20602*/
				$k[$j++] = Infinity; /*20602*/
				var _Bl = $k[--$j]; /*20602*/
				var _Bm = $k[--$j]; /*20602*/
				$k[$j++] = _Bl; /*20602*/
				$forall(_Bm, function() {
					/*20602*/
					var _Bn = $k[--$j]; /*20602*/
					$k[$j++] = _Bn - 48; /*20602*/
				}); /*20602*/
				var _Bo = $a(); /*20602*/
				$k[$j++] = _Bo; /*20602*/
			}; /*20603*/
			$1.encA = function() {
				for (var _Bp = 0, _Bq = 1; _Bp < _Bq; _Bp++) {
					/*20647*/
					if ($get($1.numD, $1.i) >= 21) { //no-else/*20611*/
						$1.Dbits = $a([1, 1, 1, 1]); /*20608*/
						$1.mode = $1.D; /*20609*/
						break; /*20610*/
					} /*20610*/
					var _By = $get($1.numD, $1.i); /*20612*/
					if ((_By >= 13) && ((_By + $1.i) == $1.msglen)) { //no-else/*20616*/
						$1.Dbits = $a([1, 1, 1, 1]); /*20613*/
						$1.mode = $1.D; /*20614*/
						break; /*20615*/
					} /*20615*/
					if ($get($1.numD, $1.i) >= 2) { //no-else/*20621*/
						var _C6 = $s(2); /*20618*/
						$put(_C6, 0, $get($1.msg, $1.i)); /*20618*/
						$put(_C6, 1, $get($1.msg, $1.i + 1)); /*20618*/
						$k[$j++] = $get($1.Avals, _C6); /*20618*/
						$1.addtocws(); /*20618*/
						$1.i = $1.i + 2; /*20619*/
						break; /*20620*/
					} /*20620*/
					if ($get($1.msg, $1.i) == $1.fnc1) { //no-else/*20637*/
						if ($get($1.numD, $1.i + 1) >= 15) { //no-else/*20629*/
							$k[$j++] = $get($1.Avals, $1.fnc1lD); /*20624*/
							$1.addtocws(); /*20624*/
							$1.i = $1.i + 1; /*20625*/
							$1.Dbits = $a([]); /*20626*/
							$1.mode = $1.D; /*20627*/
							break; /*20628*/
						} /*20628*/
						var _CV = $get($1.numD, $1.i + 1); /*20630*/
						if ((_CV >= 7) && (((_CV + $1.i) + 1) == $1.msglen)) { //no-else/*20636*/
							$k[$j++] = $get($1.Avals, $1.fnc1lD); /*20631*/
							$1.addtocws(); /*20631*/
							$1.i = $1.i + 1; /*20632*/
							$1.Dbits = $a([]); /*20633*/
							$1.mode = $1.D; /*20634*/
							break; /*20635*/
						} /*20635*/
					} /*20635*/
					$k[$j++] = 'newmode'; /*20638*/
					$1.lookup(); /*20638*/
					var _Ce = $k[--$j]; /*20638*/
					$1[$k[--$j]] = _Ce; /*20638*/
					if ($1.newmode != $1.mode) { //no-else/*20643*/
						$k[$j++] = $get($1.Avals, $get($a([-1, $1.lC, $1.lT, $1.lX, $1.lD, $1.lB]), $1.newmode)); /*20640*/
						$1.addtocws(); /*20640*/
						$1.mode = $1.newmode; /*20641*/
						break; /*20642*/
					} /*20642*/
					$k[$j++] = $get($1.Avals, $get($1.msg, $1.i)); /*20644*/
					$1.addtocws(); /*20644*/
					$1.i = $1.i + 1; /*20645*/
					break; /*20646*/
				} /*20646*/
			}; /*20648*/
			$1.CTXvalstocws = function() {
				$1.in = $k[--$j]; /*20651*/
				$k[$j++] = Infinity; /*20652*/
				for (var _D2 = 0, _D1 = $1.in.length - 1; _D2 <= _D1; _D2 += 3) {
					/*20656*/
					$k[$j++] = 0; /*20654*/
					$forall($geti($1.in, _D2, 3), function() {
						/*20654*/
						var _D5 = $k[--$j]; /*20654*/
						var _D6 = $k[--$j]; /*20654*/
						$k[$j++] = (_D6 + _D5) * 40; /*20654*/
					}); /*20654*/
					var _D8 = (~~($k[--$j] / 40)) + 1; /*20655*/
					$k[$j++] = ~~(_D8 / 256); /*20655*/
					$k[$j++] = _D8 % 256; /*20655*/
				} /*20655*/
				$astore($a($counttomark())); /*20657*/
				var _DB = $k[--$j]; /*20657*/
				var _DC = $k[--$j]; /*20657*/
				$k[$j++] = _DB; /*20657*/
			}; /*20658*/
			$1.encCTX = function() {
				$1.p = 0; /*20661*/
				$1.ctxvals = $a(2220); /*20662*/
				for (;;) {
					/*20740*/
					if ($1.i == $1.msglen) { //no-else/*20666*/
						break; /*20666*/
					} /*20666*/
					var _DM = $get($get($1.encvals, $1.mode), $get($1.msg, $1.i)) !== undefined; /*20667*/
					if (!_DM) { //no-else/*20667*/
						break; /*20667*/
					} /*20667*/
					if (($1.p % 3) == 0) { //no-else/*20735*/
						if ($get($1.numD, $1.i) >= 12) { //no-else/*20673*/
							$k[$j++] = $a([$1.unlcw]); /*20670*/
							$1.addtocws(); /*20670*/
							$1.mode = $1.A; /*20671*/
							break; /*20672*/
						} /*20672*/
						var _DW = $get($1.numD, $1.i); /*20674*/
						if ((_DW >= 8) && ((_DW + $1.i) == $1.msglen)) { //no-else/*20678*/
							$k[$j++] = $a([$1.unlcw]); /*20675*/
							$1.addtocws(); /*20675*/
							$1.mode = $1.A; /*20676*/
							break; /*20677*/
						} /*20677*/
						$1.lookup(); /*20679*/
						if ($k[--$j] != $1.mode) { //no-else/*20684*/
							$k[$j++] = $geti($1.ctxvals, 0, $1.p); /*20680*/
							$1.CTXvalstocws(); /*20680*/
							$1.addtocws(); /*20680*/
							$k[$j++] = $a([$1.unlcw]); /*20681*/
							$1.addtocws(); /*20681*/
							$1.mode = $1.A; /*20682*/
							break; /*20683*/
						} /*20683*/
						if (($1.msglen - $1.i) <= 3) { //no-else/*20734*/
							$1.remcws = $get($1.numremcws, $1.j + ((~~($1.p / 3)) * 2)); /*20686*/
							$k[$j++] = Infinity; /*20692*/
							$forall($geti($1.msg, $1.i, $1.msglen - $1.i), function() {
								/*20694*/
								var _Dv = $k[--$j]; /*20689*/
								var _Dz = $get($get($1.encvals, $1.mode), _Dv) !== undefined; /*20689*/
								$k[$j++] = _Dv; /*20693*/
								if (_Dz) {
									/*20692*/
									$aload($get($get($1.encvals, $1.mode), $k[--$j])); /*20690*/
								} else {
									/*20692*/
									$j--; /*20692*/
									$k[$j++] = -1; /*20692*/
									$k[$j++] = -1; /*20692*/
									$k[$j++] = -1; /*20692*/
									$k[$j++] = -1; /*20692*/
								} /*20692*/
							}); /*20692*/
							$1.remvals = $a(); /*20692*/
							if (($1.remcws == 2) && ($1.remvals.length == 3)) { //no-else/*20705*/
								$k[$j++] = Infinity; /*20700*/
								$aload($geti($1.ctxvals, 0, $1.p)); /*20699*/
								$aload($1.remvals); /*20700*/
								var _EC = $a(); /*20700*/
								$k[$j++] = _EC; /*20701*/
								$1.CTXvalstocws(); /*20701*/
								$1.addtocws(); /*20701*/
								$1.mode = $1.A; /*20702*/
								$1.i = $1.msglen; /*20703*/
								break; /*20704*/
							} /*20704*/
							if ((($1.remcws == 2) && ($1.remvals.length == 2)) && ($1.mode != $1.X)) { //no-else/*20716*/
								$k[$j++] = Infinity; /*20711*/
								$aload($geti($1.ctxvals, 0, $1.p)); /*20709*/
								$aload($1.remvals); /*20710*/
								$aload($get($get($1.encvals, $1.mode), $1.sft1)); /*20711*/
								var _ES = $a(); /*20711*/
								$k[$j++] = _ES; /*20712*/
								$1.CTXvalstocws(); /*20712*/
								$1.addtocws(); /*20712*/
								$1.mode = $1.A; /*20713*/
								$1.i = $1.msglen; /*20714*/
								break; /*20715*/
							} /*20715*/
							if (($1.remcws == 2) && ($1.remvals.length == 1)) { //no-else/*20725*/
								$k[$j++] = $geti($1.ctxvals, 0, $1.p); /*20719*/
								$1.CTXvalstocws(); /*20719*/
								$1.addtocws(); /*20719*/
								$k[$j++] = $a([$1.unlcw]); /*20720*/
								$1.addtocws(); /*20720*/
								$k[$j++] = $get($1.Avals, $get($1.msg, $1.i)); /*20721*/
								$1.addtocws(); /*20721*/
								$1.mode = $1.A; /*20722*/
								$1.i = $1.msglen; /*20723*/
								break; /*20724*/
							} /*20724*/
							if (($1.remcws == 1) && ($1.remvals.length == 1)) { //no-else/*20733*/
								$k[$j++] = $geti($1.ctxvals, 0, $1.p); /*20728*/
								$1.CTXvalstocws(); /*20728*/
								$1.addtocws(); /*20728*/
								$k[$j++] = $get($1.Avals, $get($1.msg, $1.i)); /*20729*/
								$1.addtocws(); /*20729*/
								$1.mode = $1.A; /*20730*/
								$1.i = $1.msglen; /*20731*/
								break; /*20732*/
							} /*20732*/
						} /*20732*/
					} /*20732*/
					var _F1 = $get($get($1.encvals, $1.mode), $get($1.msg, $1.i)); /*20736*/
					$puti($1.ctxvals, $1.p, _F1); /*20737*/
					$1.p = _F1.length + $1.p; /*20738*/
					$1.i = $1.i + 1; /*20739*/
				} /*20739*/
				if ($1.mode != $1.A) { //no-else/*20764*/
					for (;;) {
						/*20748*/
						if (($1.p % 3) == 0) { //no-else/*20745*/
							break; /*20745*/
						} /*20745*/
						$1.i = $1.i - 1; /*20746*/
						$1.p = $1.p - $get($get($1.encvals, $1.mode), $get($1.msg, $1.i)).length; /*20747*/
					} /*20747*/
					$k[$j++] = Infinity; /*20750*/
					$aload($geti($1.ctxvals, 0, $1.p)); /*20750*/
					var _FL = $a(); /*20750*/
					$k[$j++] = _FL; /*20751*/
					$1.CTXvalstocws(); /*20751*/
					$1.addtocws(); /*20751*/
					$k[$j++] = $a([$1.unlcw]); /*20752*/
					$1.addtocws(); /*20752*/
					$1.mode = $1.A; /*20753*/
					if ($1.i != $1.msglen) { //no-else/*20763*/
						if ($get($1.numD, $1.i) >= 2) {
							/*20761*/
							var _FU = $s(2); /*20757*/
							$put(_FU, 0, $get($1.msg, $1.i)); /*20757*/
							$put(_FU, 1, $get($1.msg, $1.i + 1)); /*20757*/
							$k[$j++] = $get($1.Avals, _FU); /*20757*/
							$1.addtocws(); /*20757*/
							$1.i = $1.i + 2; /*20758*/
						} else {
							/*20761*/
							$k[$j++] = $get($1.Avals, $get($1.msg, $1.i)); /*20760*/
							$1.addtocws(); /*20760*/
							$1.i = $1.i + 1; /*20761*/
						} /*20761*/
					} /*20761*/
				} /*20761*/
			}; /*20766*/
			$1.encD = function() {
				for (;;) {
					/*20819*/
					if ($get($1.numD, $1.i) < 3) { //no-else/*20809*/
						$1.Drem = (8 - ($1.Dbits.length % 8)) % 8; /*20774*/
						$1.remcws = $get($1.numremcws, $1.j + (~~($1.Dbits.length / 8))); /*20775*/
						if ((($get($1.numremcws, ($1.j + (~~($1.Dbits.length / 8))) - 1) - 1) == 0) && ($1.i == $1.msglen)) { //no-else/*20779*/
							break; /*20779*/
						} /*20779*/
						if (((($1.i == ($1.msglen - 1)) && ($get($1.numD, $1.i) == 1)) && ($1.remcws == 1)) && ($1.Drem == 0)) { //no-else/*20783*/
							break; /*20783*/
						} /*20783*/
						if (!(((($1.i == ($1.msglen - 1)) && ($get($1.numD, $1.i) == 1)) && ($1.remcws == 1)) && (($1.Drem == 4) || ($1.Drem == 6)))) { //no-else/*20790*/
							$k[$j++] = Infinity; /*20788*/
							$aload($1.Dbits); /*20788*/
							$k[$j++] = 1; /*20788*/
							$k[$j++] = 1; /*20788*/
							$k[$j++] = 1; /*20788*/
							$k[$j++] = 1; /*20788*/
							$k[$j++] = 1; /*20788*/
							$k[$j++] = 1; /*20788*/
							$1.Dbits = $a(); /*20788*/
							$1.Drem = (8 - ($1.Dbits.length % 8)) % 8; /*20789*/
						} /*20789*/
						if (($1.Drem == 4) || ($1.Drem == 6)) { //no-else/*20801*/
							if ($get($1.numD, $1.i) >= 1) {
								/*20798*/
								$k[$j++] = Infinity; /*20795*/
								$aload($1.Dbits); /*20795*/
								$k[$j++] = ($get($1.msg, $1.i) - 48) + 1; /*20795*/
								$k[$j++] = 4; /*20795*/
								$1.tobin(); /*20795*/
								$aload($k[--$j]); /*20795*/
								$1.Dbits = $a(); /*20795*/
								$1.i = $1.i + 1; /*20796*/
							} else {
								/*20798*/
								$k[$j++] = Infinity; /*20798*/
								$aload($1.Dbits); /*20798*/
								$k[$j++] = 1; /*20798*/
								$k[$j++] = 1; /*20798*/
								$k[$j++] = 1; /*20798*/
								$k[$j++] = 1; /*20798*/
								$1.Dbits = $a(); /*20798*/
							} /*20798*/
							$1.Drem = $1.Drem - 4; /*20800*/
						} /*20800*/
						if ($1.Drem == 2) { //no-else/*20805*/
							$k[$j++] = Infinity; /*20803*/
							$aload($1.Dbits); /*20803*/
							$k[$j++] = 0; /*20803*/
							$k[$j++] = 1; /*20803*/
							$1.Dbits = $a(); /*20803*/
							$1.Drem = 0; /*20804*/
						} /*20804*/
						break; /*20807*/
					} /*20807*/
					$k[$j++] = Infinity; /*20815*/
					$aload($1.Dbits); /*20813*/
					$k[$j++] = 0; /*20814*/
					$forall($geti($1.msg, $1.i, 3), function() {
						/*20814*/
						var _Gc = $k[--$j]; /*20814*/
						var _Gd = $k[--$j]; /*20814*/
						$k[$j++] = (_Gd + (_Gc - 48)) * 10; /*20814*/
					}); /*20814*/
					var _Ge = $k[--$j]; /*20814*/
					$k[$j++] = (~~(_Ge / 10)) + 1; /*20815*/
					$k[$j++] = 10; /*20815*/
					$1.tobin(); /*20815*/
					$aload($k[--$j]); /*20815*/
					$1.Dbits = $a(); /*20815*/
					$1.i = $1.i + 3; /*20817*/
				} /*20817*/
				$k[$j++] = Infinity; /*20821*/
				for (var _Gk = 0, _Gj = $1.Dbits.length - 1; _Gk <= _Gj; _Gk += 8) {
					/*20824*/
					$k[$j++] = 0; /*20823*/
					$forall($geti($1.Dbits, _Gk, 8), function() {
						/*20823*/
						var _Gn = $k[--$j]; /*20823*/
						var _Go = $k[--$j]; /*20823*/
						$k[$j++] = (_Go + _Gn) * 2; /*20823*/
					}); /*20823*/
					var _Gp = $k[--$j]; /*20823*/
					$k[$j++] = ~~(_Gp / 2); /*20823*/
				} /*20823*/
				$astore($a($counttomark())); /*20825*/
				var _Gs = $k[--$j]; /*20825*/
				var _Gt = $k[--$j]; /*20825*/
				$k[$j++] = _Gs; /*20825*/
				$1.addtocws(); /*20825*/
				$1.mode = $1.A; /*20826*/
			}; /*20828*/
			$1.encB = function() {
				$1.p = 0; /*20831*/
				$1.bvals = $a(1480); /*20831*/
				for (;;) {
					/*20838*/
					if ($1.i == $1.msglen) { //no-else/*20832*/
						break; /*20832*/
					} /*20832*/
					if ($get($1.msg, $1.i) < 0) { //no-else/*20833*/
						break; /*20833*/
					} /*20833*/
					$1.lookup(); /*20834*/
					if ($k[--$j] != $1.mode) { //no-else/*20834*/
						break; /*20834*/
					} /*20834*/
					$put($1.bvals, $1.p, $get($1.msg, $1.i)); /*20835*/
					$1.p = $1.p + 1; /*20836*/
					$1.i = $1.i + 1; /*20837*/
				} /*20837*/
				$1.remcws = $get($1.numremcws, $1.j + $1.p) - 1; /*20839*/
				$k[$j++] = Infinity; /*20846*/
				if (($1.remcws == 0) && ($1.i == $1.msglen)) {
					/*20844*/
					$k[$j++] = 0; /*20842*/
				} else {
					/*20844*/
					if ($1.p < 250) {
						/*20844*/
						$k[$j++] = $1.p; /*20844*/
					} else {
						/*20844*/
						$k[$j++] = (~~($1.p / 250)) + 249; /*20844*/
						$k[$j++] = $1.p % 250; /*20844*/
					} /*20844*/
				} /*20844*/
				$aload($geti($1.bvals, 0, $1.p)); /*20846*/
				$1.bvals = $a(); /*20846*/
				$k[$j++] = $1.bvals; /*20848*/
				$1.addtocws(); /*20848*/
				$1.mode = $1.A; /*20849*/
			}; /*20850*/
			$1.cws = $a(1480); /*20853*/
			$1.mode = $1.A; /*20854*/
			$1.i = 0; /*20854*/
			$1.j = 0; /*20854*/
			for (;;) {
				/*20857*/
				if ($1.i >= $1.msglen) { //no-else/*20855*/
					break; /*20855*/
				} /*20855*/
				if ($1[$get($a(['encA', 'encCTX', 'encCTX', 'encCTX', 'encD', 'encB']), $1.mode)]() === true) {
					break;
				} /*20856*/
			} /*20856*/
			$1.cws = $geti($1.cws, 0, $1.j); /*20858*/
		} /*20858*/
		$1.i = 0; /*20863*/
		for (;;) {
			/*20883*/
			$1.m = $get($1.metrics, $1.i); /*20865*/
			$1.vers = $get($1.m, 0); /*20866*/
			$1.rows = $get($1.m, 1); /*20867*/
			$1.cols = $get($1.m, 2); /*20868*/
			$1.dcol = $get($1.m, 3); /*20869*/
			$1.dcws = $get($1.m, 4); /*20870*/
			$1.rscw = $get($1.m, 5); /*20871*/
			$1.rsbl = $get($1.m, 6); /*20872*/
			$1.riso = $get($1.m, 7); /*20873*/
			$1.risi = $get($1.m, 8); /*20874*/
			$1.risl = $get($1.m, 9); /*20875*/
			$1.dcpb = ~~($1.dcws / $1.rsbl); /*20876*/
			$1.ecpb = ~~($1.rscw / $1.rsbl); /*20877*/
			$1.okay = true; /*20878*/
			if ($ne($1.version, "unset") && $ne($1.version, $1.vers)) { //no-else/*20879*/
				$1.okay = false; /*20879*/
			} /*20879*/
			if ($1.cws.length > $1.dcws) { //no-else/*20880*/
				$1.okay = false; /*20880*/
			} /*20880*/
			if ($1.okay) { //no-else/*20881*/
				break; /*20881*/
			} /*20881*/
			$1.i = $1.i + 1; /*20882*/
		} /*20882*/
		if (!$1.stype) {
			/*20889*/
			$k[$j++] = Infinity; /*20887*/
			$aload($1.cws); /*20887*/
			for (var _IE = 0, _IF = $1.dcws - $1.cws.length; _IE < _IF; _IE++) {
				/*20887*/
				$k[$j++] = 129; /*20887*/
			} /*20887*/
			$1.cws = $a(); /*20887*/
		} else {
			/*20889*/
			$k[$j++] = Infinity; /*20889*/
			for (var _IJ = 0, _IK = $1.dcws - $1.cws.length; _IJ < _IK; _IJ++) {
				/*20889*/
				$k[$j++] = 0; /*20889*/
			} /*20889*/
			$aload($1.cws); /*20889*/
			$1.cws = $a(); /*20889*/
		} /*20889*/
		$1.cwbs = $a($1.rsbl); /*20893*/
		$1.ecbs = $a($1.rsbl); /*20894*/
		for (var _IT = 0, _IS = $1.rsbl - 1; _IT <= _IS; _IT += 1) {
			/*20903*/
			$1.i = _IT; /*20896*/
			$1.cwb = $a($1.dcpb); /*20897*/
			for (var _IY = 0, _IX = $1.dcpb - 1; _IY <= _IX; _IY += 1) {
				/*20901*/
				$1.j = _IY; /*20899*/
				$put($1.cwb, $1.j, $get($1.cws, ($1.j * $1.rsbl) + $1.i)); /*20900*/
			} /*20900*/
			$put($1.cwbs, $1.i, $1.cwb); /*20902*/
		} /*20902*/
		var _Ik = $1.stype ? 32 : 256; /*20906*/
		$1.gf = _Ik; /*20906*/
		$1['gf-1'] = $1.gf - 1; /*20907*/
		var _In = $1.stype ? 37 : 301; /*20908*/
		$1.pm = _In; /*20908*/
		$k[$j++] = Infinity; /*20909*/
		$k[$j++] = 1; /*20909*/
		for (var _Ip = 0, _Iq = $1["gf-1"]; _Ip < _Iq; _Ip++) {
			/*20909*/
			var _Ir = $k[--$j]; /*20909*/
			var _Is = _Ir * 2; /*20909*/
			$k[$j++] = _Ir; /*20909*/
			$k[$j++] = _Is; /*20909*/
			if (_Is >= $1.gf) { //no-else/*20909*/
				var _Iv = $k[--$j]; /*20909*/
				$k[$j++] = _Iv ^ $1.pm; /*20909*/
			} /*20909*/
		} /*20909*/
		$1.rsalog = $a(); /*20909*/
		$1.rslog = $a($1.gf); /*20910*/
		for (var _J1 = 1, _J0 = $1["gf-1"]; _J1 <= _J0; _J1 += 1) {
			/*20911*/
			$put($1.rslog, $get($1.rsalog, _J1), _J1); /*20911*/
		} /*20911*/
		$1.rsprod = function() {
			var _J5 = $k[--$j]; /*20913*/
			var _J6 = $k[--$j]; /*20913*/
			$k[$j++] = _J6; /*20917*/
			$k[$j++] = _J5; /*20917*/
			if ((_J5 != 0) && (_J6 != 0)) {
				/*20916*/
				var _J9 = $get($1.rslog, $k[--$j]); /*20914*/
				var _JF = $get($1.rsalog, (_J9 + $get($1.rslog, $k[--$j])) % $1["gf-1"]); /*20914*/
				$k[$j++] = _JF; /*20914*/
			} else {
				/*20916*/
				$j -= 2; /*20916*/
				$k[$j++] = 0; /*20916*/
			} /*20916*/
		}; /*20918*/
		$k[$j++] = Infinity; /*20921*/
		$k[$j++] = 1; /*20921*/
		for (var _JH = 0, _JI = $1.ecpb; _JH < _JI; _JH++) {
			/*20921*/
			$k[$j++] = 0; /*20921*/
		} /*20921*/
		$1.coeffs = $a(); /*20921*/
		for (var _JM = 0, _JL = $1.ecpb - 1; _JM <= _JL; _JM += 1) {
			/*20930*/
			$1.i = _JM; /*20923*/
			$put($1.coeffs, $1.i + 1, $get($1.coeffs, $1.i)); /*20924*/
			for (var _JT = $1.i; _JT >= 1; _JT -= 1) {
				/*20928*/
				$1.j = _JT; /*20926*/
				$k[$j++] = $1.coeffs; /*20927*/
				$k[$j++] = $1.j; /*20927*/
				$k[$j++] = $get($1.coeffs, $1.j - 1); /*20927*/
				$k[$j++] = $get($1.coeffs, $1.j); /*20927*/
				$k[$j++] = $get($1.rsalog, $1.i); /*20927*/
				$1.rsprod(); /*20927*/
				var _Jf = $k[--$j]; /*20927*/
				var _Jg = $k[--$j]; /*20927*/
				var _Jh = $k[--$j]; /*20927*/
				$put($k[--$j], _Jh, $xo(_Jg, _Jf)); /*20927*/
			} /*20927*/
			$k[$j++] = $1.coeffs; /*20929*/
			$k[$j++] = 0; /*20929*/
			$k[$j++] = $get($1.coeffs, 0); /*20929*/
			$k[$j++] = $get($1.rsalog, $1.i); /*20929*/
			$1.rsprod(); /*20929*/
			var _Jp = $k[--$j]; /*20929*/
			var _Jq = $k[--$j]; /*20929*/
			$put($k[--$j], _Jq, _Jp); /*20929*/
		} /*20929*/
		$1.coeffs = $geti($1.coeffs, 0, $1.coeffs.length - 1); /*20931*/
		for (var _Jx = 0, _Jw = $1.cwbs.length - 1; _Jx <= _Jw; _Jx += 1) {
			/*20946*/
			$1.i = _Jx; /*20935*/
			$k[$j++] = Infinity; /*20936*/
			$aload($get($1.cwbs, $1.i)); /*20936*/
			for (var _K2 = 0, _K3 = $1.ecpb; _K2 < _K3; _K2++) {
				/*20936*/
				$k[$j++] = 0; /*20936*/
			} /*20936*/
			$1.rscws = $a(); /*20936*/
			for (var _K7 = 0, _K6 = $1.dcpb - 1; _K7 <= _K6; _K7 += 1) {
				/*20944*/
				$1.m = _K7; /*20938*/
				$1.k = $get($1.rscws, $1.m); /*20939*/
				for (var _KD = 0, _KC = $1.ecpb - 1; _KD <= _KC; _KD += 1) {
					/*20943*/
					$1.j = _KD; /*20941*/
					$k[$j++] = $1.rscws; /*20942*/
					$k[$j++] = ($1.m + $1.j) + 1; /*20942*/
					$k[$j++] = $get($1.coeffs, ($1.ecpb - $1.j) - 1); /*20942*/
					$k[$j++] = $1.k; /*20942*/
					$1.rsprod(); /*20942*/
					var _KQ = $k[--$j]; /*20942*/
					var _KR = $k[--$j]; /*20942*/
					$put($k[--$j], _KR, $xo(_KQ, $get($1.rscws, ($1.m + $1.j) + 1))); /*20942*/
				} /*20942*/
			} /*20942*/
			$put($1.ecbs, $1.i, $geti($1.rscws, $1.dcpb, $1.ecpb)); /*20945*/
		} /*20945*/
		$k[$j++] = Infinity; /*20949*/
		$aload($1.cws); /*20949*/
		for (var _Kb = 0, _Kc = $1.rscw; _Kb < _Kc; _Kb++) {
			/*20949*/
			$k[$j++] = 0; /*20949*/
		} /*20949*/
		$1.cws = $a(); /*20949*/
		for (var _Kg = 0, _Kf = $1.rscw - 1; _Kg <= _Kf; _Kg += 1) {
			/*20953*/
			$1.i = _Kg; /*20951*/
			$put($1.cws, $1.dcws + $1.i, $get($get($1.ecbs, $1.i % $1.rsbl), ~~($1.i / $1.rsbl))); /*20952*/
		} /*20952*/
		var _Ku = $1.stype ? 5 : 8; /*20956*/
		$1.mmat = $a(($1.dcws + $1.rscw) * _Ku); /*20956*/
		$1.r = 0; /*20957*/
		$1.c = 0; /*20957*/
		var _Kx = $1.stype ? 2 : 1; /*20958*/
		for (var _L0 = 0, _L1 = _Kx, _Kz = $1.cws.length - 1; _L1 < 0 ? _L0 >= _Kz : _L0 <= _Kz; _L0 += _L1) {
			/*20979*/
			$1.i = _L0; /*20959*/
			if (!$1.stype) {
				/*20973*/
				var _L4 = $strcpy($s(8), "00000000"); /*20961*/
				var _L9 = $cvrs($s(8), $get($1.cws, $1.i), 2); /*20961*/
				$puti(_L4, 8 - _L9.length, _L9); /*20962*/
				$k[$j++] = _L4; /*20962*/
				$k[$j++] = Infinity; /*20962*/
				var _LA = $k[--$j]; /*20962*/
				var _LB = $k[--$j]; /*20962*/
				$k[$j++] = _LA; /*20962*/
				$forall(_LB, function() {
					/*20962*/
					var _LC = $k[--$j]; /*20962*/
					$k[$j++] = _LC - 48; /*20962*/
				}); /*20962*/
				var _LD = $a(); /*20962*/
				$1.top = $geti(_LD, 0, 4); /*20963*/
				$1.bot = $geti(_LD, 4, 4); /*20964*/
			} else {
				/*20973*/
				var _LH = $strcpy($s(5), "00000"); /*20966*/
				var _LM = $cvrs($s(5), $get($1.cws, $1.i), 2); /*20966*/
				$puti(_LH, 5 - _LM.length, _LM); /*20967*/
				$k[$j++] = _LH; /*20967*/
				$k[$j++] = Infinity; /*20967*/
				var _LN = $k[--$j]; /*20967*/
				var _LO = $k[--$j]; /*20967*/
				$k[$j++] = _LN; /*20967*/
				$forall(_LO, function() {
					/*20967*/
					var _LP = $k[--$j]; /*20967*/
					$k[$j++] = _LP - 48; /*20967*/
				}); /*20967*/
				$1.c1 = $a(); /*20968*/
				var _LS = $strcpy($s(5), "00000"); /*20969*/
				var _LX = $cvrs($s(5), $get($1.cws, $1.i + 1), 2); /*20969*/
				$puti(_LS, 5 - _LX.length, _LX); /*20970*/
				$k[$j++] = _LS; /*20970*/
				$k[$j++] = Infinity; /*20970*/
				var _LY = $k[--$j]; /*20970*/
				var _LZ = $k[--$j]; /*20970*/
				$k[$j++] = _LY; /*20970*/
				$forall(_LZ, function() {
					/*20970*/
					var _La = $k[--$j]; /*20970*/
					$k[$j++] = _La - 48; /*20970*/
				}); /*20970*/
				$1.c2 = $a(); /*20971*/
				$k[$j++] = Infinity; /*20972*/
				$aload($geti($1.c1, 0, 3)); /*20972*/
				$aload($geti($1.c2, 0, 2)); /*20972*/
				$1.top = $a(); /*20972*/
				$k[$j++] = Infinity; /*20973*/
				$aload($geti($1.c1, 3, 2)); /*20973*/
				$aload($geti($1.c2, 2, 3)); /*20973*/
				$1.bot = $a(); /*20973*/
			} /*20973*/
			$puti($1.mmat, ($1.r * $1.dcol) + $1.c, $1.top); /*20975*/
			$puti($1.mmat, (($1.r + 1) * $1.dcol) + $1.c, $1.bot); /*20976*/
			$1.c = $1.c + $1.top.length; /*20977*/
			if ($1.c == $1.dcol) { //no-else/*20978*/
				$1.c = 0; /*20978*/
				$1.r = $1.r + 2; /*20978*/
			} /*20978*/
		} /*20978*/
		$1.mmv = function() {
			var _M2 = $k[--$j]; /*20982*/
			var _M3 = $k[--$j]; /*20982*/
			$k[$j++] = _M3 + (_M2 * $1.cols); /*20982*/
		}; /*20982*/
		$k[$j++] = Infinity; /*20983*/
		for (var _M6 = 0, _M7 = $1.rows * $1.cols; _M6 < _M7; _M6++) {
			/*20983*/
			$k[$j++] = -1; /*20983*/
		} /*20983*/
		$1.pixs = $a(); /*20983*/
		var _Md = $a([function() {
			for (var _MA = 0, _MB = $1.cols; _MA < _MB; _MA++) {
				/*20987*/
				$k[$j++] = 0; /*20987*/
			} /*20987*/
		}, function() {
			for (var _MD = 0, _ME = $1.cols; _MD < _ME; _MD++) {
				/*20988*/
				$k[$j++] = 1; /*20988*/
			} /*20988*/
		}, function() {
			$k[$j++] = 0; /*20989*/
			for (var _MG = 0, _MH = $1.cols - 2; _MG < _MH; _MG++) {
				/*20989*/
				$k[$j++] = 1; /*20989*/
			} /*20989*/
			$k[$j++] = 0; /*20989*/
		}, function() {
			$k[$j++] = 0; /*20990*/
			$k[$j++] = 1; /*20990*/
			for (var _MJ = 0, _MK = $1.cols - 4; _MJ < _MK; _MJ++) {
				/*20990*/
				$k[$j++] = 0; /*20990*/
			} /*20990*/
			$k[$j++] = 1; /*20990*/
			$k[$j++] = 0; /*20990*/
		}, function() {
			for (var _MM = 0, _MN = ~~(($1.cols - 1) / 2); _MM < _MN; _MM++) {
				/*20991*/
				$k[$j++] = -1; /*20991*/
			} /*20991*/
			$k[$j++] = 1; /*20991*/
			for (var _MP = 0, _MQ = ~~(($1.cols - 1) / 2); _MP < _MQ; _MP++) {
				/*20991*/
				$k[$j++] = -1; /*20991*/
			} /*20991*/
		}, function() {
			for (var _MS = 0, _MT = ~~(($1.cols - 1) / 2); _MS < _MT; _MS++) {
				/*20992*/
				$k[$j++] = -1; /*20992*/
			} /*20992*/
			$k[$j++] = 0; /*20992*/
			for (var _MV = 0, _MW = ~~(($1.cols - 1) / 2); _MV < _MW; _MV++) {
				/*20992*/
				$k[$j++] = -1; /*20992*/
			} /*20992*/
		}, function() {
			$k[$j++] = 1; /*20993*/
			for (var _MY = 0, _MZ = $1.cols - 2; _MY < _MZ; _MY++) {
				/*20993*/
				$k[$j++] = 0; /*20993*/
			} /*20993*/
			$k[$j++] = 1; /*20993*/
		}, function() {
			$k[$j++] = 1; /*20994*/
			$k[$j++] = 0; /*20994*/
			for (var _Mb = 0, _Mc = $1.cols - 4; _Mb < _Mc; _Mb++) {
				/*20994*/
				$k[$j++] = 1; /*20994*/
			} /*20994*/
			$k[$j++] = 0; /*20994*/
			$k[$j++] = 1; /*20994*/
		}]); /*20994*/
		$1.artifact = _Md; /*20995*/
		var _Me = new Map([
			["A", "121343"],
			["B", "12134343"],
			["C", "12121343"],
			["D", "1213434343"],
			["E", "1212134343"],
			["F", "1212121343"],
			["G", "121213434343"],
			["H", "121212134343"],
			["S", "56661278"],
			["T", "5666666666127878"]
		]); /*21006*/
		$1.cpat = $get(_Me, $geti($1.vers, 0, 1)); /*21007*/
		$k[$j++] = $1.pixs; /*21008*/
		$k[$j++] = 0; /*21008*/
		$k[$j++] = ~~(($1.rows - $1.cpat.length) / 2); /*21008*/
		$1.mmv(); /*21008*/
		$k[$j++] = Infinity; /*21009*/
		$forall($1.cpat, function() {
			/*21009*/
			if ($get($1.artifact, $k[--$j] - 49)() === true) {
				return true;
			} /*21009*/
		}); /*21009*/
		var _Mp = $a(); /*21009*/
		var _Mq = $k[--$j]; /*21009*/
		$puti($k[--$j], _Mq, _Mp); /*21009*/
		for (var _Mu = 0, _Mt = $1.risl - 1; _Mu <= _Mt; _Mu += 1) {
			/*21024*/
			$1.i = _Mu; /*21013*/
			for (var _Mz = $1.riso, _N0 = $1.risi, _My = $1.cols - 1; _N0 < 0 ? _Mz >= _My : _Mz <= _My; _Mz += _N0) {
				/*21023*/
				$1.j = _Mz; /*21015*/
				var _N2 = (($1.i % 12) == 0) ? 1 : 0; /*21016*/
				var _N3 = $a([1, _N2]); /*21016*/
				$k[$j++] = _N3; /*21017*/
				$k[$j++] = _N3; /*21017*/
				$k[$j++] = $1.pixs; /*21017*/
				$k[$j++] = $1.j; /*21017*/
				$k[$j++] = $1.i; /*21017*/
				$1.mmv(); /*21017*/
				var _N7 = $k[--$j]; /*21018*/
				var _N8 = $k[--$j]; /*21018*/
				$puti(_N8, _N7, $k[--$j]); /*21018*/
				if ($1.i != ($1.risl - 1)) {
					/*21022*/
					$k[$j++] = $1.pixs; /*21020*/
					$k[$j++] = ($1.cols - $1.j) - 2; /*21020*/
					$k[$j++] = ($1.rows - $1.i) - 1; /*21020*/
					$1.mmv(); /*21020*/
					var _NH = $k[--$j]; /*21021*/
					var _NI = $k[--$j]; /*21021*/
					$puti(_NI, _NH, $k[--$j]); /*21021*/
				} else {
					/*21022*/
					$j--; /*21022*/
				} /*21022*/
			} /*21022*/
		} /*21022*/
		var _Nx = new Map([
			["A", $a([$a([12, 5])])],
			["B", $a([$a([16, 7])])],
			["C", $a([$a([26, 12])])],
			["D", $a([])],
			["E", $a([$a([26, 23])])],
			["F", $a([$a([26, 32]), $a([70, 32]), $a([26, 34]), $a([70, 34])])],
			["G", $a([$a([27, 48]), $a([69, 48])])],
			["H", $a([$a([26, 70]), $a([66, 70]), $a([106, 70]), $a([26, 72]), $a([66, 72]), $a([106, 72])])],
			["S-10", $a([])],
			["S-20", $a([$a([10, 4])])],
			["S-30", $a([$a([15, 4]), $a([15, 6])])],
			["T-16", $a([$a([8, 10])])],
			["T-32", $a([$a([16, 10]), $a([16, 12])])],
			["T-48", $a([$a([24, 10]), $a([24, 12]), $a([24, 14])])]
		]); /*21041*/
		$forall($get(_Nx, $1.vers), function() {
			/*21042*/
			var _O1 = $k[--$j]; /*21042*/
			$k[$j++] = $1.pixs; /*21042*/
			$aload(_O1); /*21042*/
			$1.mmv(); /*21042*/
			var _O2 = $k[--$j]; /*21042*/
			$put($k[--$j], _O2, 1); /*21042*/
		}); /*21042*/
		$1.j = 0; /*21045*/
		for (var _O6 = 0, _O5 = $1.pixs.length - 1; _O6 <= _O5; _O6 += 1) {
			/*21052*/
			$1.i = _O6; /*21047*/
			if ($get($1.pixs, $1.i) == -1) { //no-else/*21051*/
				$put($1.pixs, $1.i, $get($1.mmat, $1.j)); /*21049*/
				$1.j = $1.j + 1; /*21050*/
			} /*21050*/
		} /*21050*/
		var _OM = new Map([
			["ren", $0.renmatrix],
			["pixs", $1.pixs],
			["pixx", $1.cols],
			["pixy", $1.rows],
			["height", ($1.rows / 72) * 2],
			["width", ($1.cols / 72) * 2],
			["opt", $1.options]
		]); /*21062*/
		$k[$j++] = _OM; /*21065*/
		if (!$1.dontdraw) { //no-else/*21065*/
			$0.renmatrix(); /*21065*/
		} /*21065*/
	};
	$0.hanxin = function() {
		var $1 = {}; /*21094*/
		$1.options = $k[--$j]; /*21096*/
		$1.barcode = $k[--$j]; /*21097*/
		$1.dontdraw = false; /*21099*/
		$1.version = "unset"; /*21100*/
		$1.eclevel = "unset"; /*21101*/
		$1.parse = false; /*21102*/
		$1.parsefnc = false; /*21103*/
		$1.mask = -1; /*21104*/
		$forall($1.options, function() {
			/*21115*/
			var _3 = $k[--$j]; /*21115*/
			$1[$k[--$j]] = _3; /*21115*/
		}); /*21115*/
		$1.mask = ~~$1.mask; /*21117*/
		$1.barlen = $1.barcode.length; /*21140*/
		var _7 = new Map([]); /*21145*/
		$1.fncvals = _7; /*21145*/
		$1.msg = $a($1.barlen); /*21146*/
		$1.i = 0; /*21147*/
		$1.j = 0; /*21147*/
		for (;;) {
			/*21186*/
			if ($1.i == $1.barlen) { //no-else/*21148*/
				break; /*21148*/
			} /*21148*/
			$1.char = $get($1.barcode, $1.i); /*21149*/
			$1.i = $1.i + 1; /*21150*/
			if (($1.parsefnc && ($1.char == 94)) && ($1.i < $1.barlen)) { //no-else/*21183*/
				if ($get($1.barcode, $1.i) != 94) {
					/*21181*/
					if ($1.i >= ($1.barlen - 3)) { //no-else/*21155*/
						$k[$j++] = 'bwipp.truncatedFNC'; /*21154*/
						$k[$j++] = "Function character truncated"; /*21154*/
						$0.raiseerror(); /*21154*/
					} /*21154*/
					var _R = $geti($1.barcode, $1.i, 4); /*21156*/
					$k[$j++] = _R; /*21178*/
					if ($ne($geti(_R, 0, 3), "ECI")) {
						/*21177*/
						var _T = $k[--$j]; /*21158*/
						var _V = $get($1.fncvals, _T) !== undefined; /*21158*/
						$k[$j++] = _T; /*21162*/
						if (!_V) { //no-else/*21162*/
							var _W = $k[--$j]; /*21159*/
							var _X = $s(_W.length + 28); /*21159*/
							$puti(_X, 28, _W); /*21159*/
							$puti(_X, 0, "Unknown function character: "); /*21160*/
							$k[$j++] = 'bwipp.unknownFNC'; /*21161*/
							$k[$j++] = _X; /*21161*/
							$0.raiseerror(); /*21161*/
						} /*21161*/
						var _a = $get($1.fncvals, $k[--$j]); /*21163*/
						$1.i = $1.i + 4; /*21164*/
						$k[$j++] = _a; /*21164*/
					} else {
						/*21177*/
						$j--; /*21166*/
						if ($1.i >= ($1.barlen - 8)) { //no-else/*21169*/
							$k[$j++] = 'bwipp.truncatedECI'; /*21168*/
							$k[$j++] = "ECI truncated"; /*21168*/
							$0.raiseerror(); /*21168*/
						} /*21168*/
						var _g = $geti($1.barcode, $1.i + 3, 6); /*21170*/
						$k[$j++] = _g; /*21175*/
						$forall(_g, function() {
							/*21175*/
							var _h = $k[--$j]; /*21172*/
							if ((_h < 48) || (_h > 57)) { //no-else/*21174*/
								$k[$j++] = 'bwipp.invalidECI'; /*21173*/
								$k[$j++] = "ECI must be 000000 to 999999"; /*21173*/
								$0.raiseerror(); /*21173*/
							} /*21173*/
						}); /*21173*/
						var _i = $k[--$j]; /*21176*/
						$k[$j++] = 0; /*21176*/
						$forall(_i, function() {
							/*21176*/
							var _j = $k[--$j]; /*21176*/
							var _k = $k[--$j]; /*21176*/
							$k[$j++] = (_k - (_j - 48)) * 10; /*21176*/
						}); /*21176*/
						var _l = $k[--$j]; /*21176*/
						$1.i = $1.i + 9; /*21177*/
						$k[$j++] = (~~(_l / 10)) - 1000000; /*21177*/
					} /*21177*/
					$1.char = $k[--$j]; /*21179*/
				} else {
					/*21181*/
					$1.i = $1.i + 1; /*21181*/
				} /*21181*/
			} /*21181*/
			$put($1.msg, $1.j, $1.char); /*21184*/
			$1.j = $1.j + 1; /*21185*/
		} /*21185*/
		$1.msg = $geti($1.msg, 0, $1.j); /*21187*/
		$1.msglen = $1.msg.length; /*21188*/
		if ($eq($1.eclevel, "unset")) { //no-else/*21191*/
			$1.eclevel = "L2"; /*21191*/
		} /*21191*/
		$1.tobin = function() {
			var _z = $s($k[--$j]); /*21194*/
			$k[$j++] = _z; /*21194*/
			for (var _11 = 0, _10 = _z.length - 1; _11 <= _10; _11 += 1) {
				/*21194*/
				var _12 = $k[--$j]; /*21194*/
				$put(_12, _11, 48); /*21194*/
				$k[$j++] = _12; /*21194*/
			} /*21194*/
			var _13 = $k[--$j]; /*21195*/
			var _16 = $cvrs($s(_13.length), $k[--$j], 2); /*21195*/
			$puti(_13, _13.length - _16.length, _16); /*21196*/
			$k[$j++] = _13; /*21196*/
		}; /*21197*/
		$1.bits = $s((4 + 13) + ($1.msglen * 8)); /*21200*/
		$puti($1.bits, 0, "0011"); /*21201*/
		$k[$j++] = $1.bits; /*21202*/
		$k[$j++] = 4; /*21202*/
		$k[$j++] = $1.msglen; /*21202*/
		$k[$j++] = 13; /*21202*/
		$1.tobin(); /*21202*/
		var _1C = $k[--$j]; /*21202*/
		var _1D = $k[--$j]; /*21202*/
		$puti($k[--$j], _1D, _1C); /*21202*/
		for (var _1H = 0, _1G = $1.msglen - 1; _1H <= _1G; _1H += 1) {
			/*21206*/
			$1.i = _1H; /*21204*/
			$k[$j++] = $1.bits; /*21205*/
			$k[$j++] = 17 + ($1.i * 8); /*21205*/
			$k[$j++] = $get($1.msg, $1.i); /*21205*/
			$k[$j++] = 8; /*21205*/
			$1.tobin(); /*21205*/
			var _1N = $k[--$j]; /*21205*/
			var _1O = $k[--$j]; /*21205*/
			$puti($k[--$j], _1O, _1N); /*21205*/
		} /*21205*/
		$1.metrics = $a([$a(["1", 23, -1, 0, 205, $a([1, 21, 4]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 17, 8]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 13, 12]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 9, 16]), $a([0, -1, -1]), $a([0, -1, -1])]), $a(["2", 25, -1, 0, 301, $a([1, 31, 6]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 25, 12]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 19, 18]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 15, 22]), $a([0, -1, -1]), $a([0, -1, -1])]), $a(["3", 27, -1, 0, 405, $a([1, 42, 8]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 34, 16]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 26, 24]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 20, 30]), $a([0, -1, -1]), $a([0, -1, -1])]), $a(["4", 29, 14, 1, 439, $a([1, 46, 8]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 38, 16]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 30, 24]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 22, 32]), $a([0, -1, -1]), $a([0, -1, -1])]), $a(["5", 31, 16, 1, 555, $a([1, 57, 12]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 49, 20]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 37, 32]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 14, 20]), $a([1, 13, 22]), $a([0, -1, -1])]), $a(["6", 33, 16, 1, 675, $a([1, 70, 14]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 58, 26]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 24, 20]), $a([1, 22, 18]), $a([0, -1, -1]), $a([1, 16, 24]), $a([1, 18, 26]), $a([0, -1, -1])]), $a(["7", 35, 17, 1, 805, $a([1, 84, 16]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 70, 30]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 26, 22]), $a([1, 28, 24]), $a([0, -1, -1]), $a([2, 14, 20]), $a([1, 12, 20]), $a([0, -1, -1])]), $a(["8", 37, 18, 1, 943, $a([1, 99, 18]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 40, 18]), $a([1, 41, 18]), $a([0, -1, -1]), $a([1, 31, 26]), $a([1, 32, 28]), $a([0, -1, -1]), $a([2, 16, 24]), $a([1, 15, 22]), $a([0, -1, -1])]), $a(["9", 39, 19, 1, 1089, $a([1, 114, 22]), $a([0, -1, -1]), $a([0, -1, -1]), $a([2, 48, 20]), $a([0, -1, -1]), $a([0, -1, -1]), $a([2, 24, 20]), $a([1, 26, 22]), $a([0, -1, -1]), $a([2, 18, 28]), $a([1, 18, 26]), $a([0, -1, -1])]), $a(["10", 41, 20, 1, 1243, $a([1, 131, 24]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 52, 22]), $a([1, 57, 24]), $a([0, -1, -1]), $a([2, 27, 24]), $a([1, 29, 24]), $a([0, -1, -1]), $a([2, 21, 32]), $a([1, 19, 30]), $a([0, -1, -1])]), $a(["11", 43, 14, 2, 1289, $a([1, 135, 26]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 56, 24]), $a([1, 57, 24]), $a([0, -1, -1]), $a([2, 28, 24]), $a([1, 31, 26]), $a([0, -1, -1]), $a([2, 22, 32]), $a([1, 21, 32]), $a([0, -1, -1])]), $a(["12", 45, 15, 2, 1455, $a([1, 153, 28]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 62, 26]), $a([1, 65, 28]), $a([0, -1, -1]), $a([2, 32, 28]), $a([1, 33, 28]), $a([0, -1, -1]), $a([3, 17, 26]), $a([1, 22, 30]), $a([0, -1, -1])]), $a(["13", 47, 16, 2, 1629, $a([1, 86, 16]), $a([1, 85, 16]), $a([0, -1, -1]), $a([1, 71, 30]), $a([1, 72, 30]), $a([0, -1, -1]), $a([2, 37, 32]), $a([1, 35, 30]), $a([0, -1, -1]), $a([3, 20, 30]), $a([1, 21, 32]), $a([0, -1, -1])]), $a(["14", 49, 16, 2, 1805, $a([1, 94, 18]), $a([1, 95, 18]), $a([0, -1, -1]), $a([2, 51, 22]), $a([1, 55, 24]), $a([0, -1, -1]), $a([3, 30, 26]), $a([1, 31, 26]), $a([0, -1, -1]), $a([4, 18, 28]), $a([1, 17, 24]), $a([0, -1, -1])]), $a(["15", 51, 17, 2, 1995, $a([1, 104, 20]), $a([1, 105, 20]), $a([0, -1, -1]), $a([2, 57, 24]), $a([1, 61, 26]), $a([0, -1, -1]), $a([3, 33, 28]), $a([1, 36, 30]), $a([0, -1, -1]), $a([4, 20, 30]), $a([1, 19, 30]), $a([0, -1, -1])]), $a(["16", 53, 17, 2, 2187, $a([1, 115, 22]), $a([1, 114, 22]), $a([0, -1, -1]), $a([2, 65, 28]), $a([1, 61, 26]), $a([0, -1, -1]), $a([3, 38, 32]), $a([1, 33, 30]), $a([0, -1, -1]), $a([5, 19, 28]), $a([1, 14, 24]), $a([0, -1, -1])]), $a(["17", 55, 18, 2, 2393, $a([1, 126, 24]), $a([1, 125, 24]), $a([0, -1, -1]), $a([2, 70, 30]), $a([1, 69, 30]), $a([0, -1, -1]), $a([4, 33, 28]), $a([1, 29, 26]), $a([0, -1, -1]), $a([5, 20, 30]), $a([1, 19, 30]), $a([0, -1, -1])]), $a(["18", 57, 19, 2, 2607, $a([1, 136, 26]), $a([1, 137, 26]), $a([0, -1, -1]), $a([3, 56, 24]), $a([1, 59, 26]), $a([0, -1, -1]), $a([5, 35, 30]), $a([0, -1, -1]), $a([0, -1, -1]), $a([6, 18, 28]), $a([1, 21, 28]), $a([0, -1, -1])]), $a(["19", 59, 20, 2, 2829, $a([1, 148, 28]), $a([1, 149, 28]), $a([0, -1, -1]), $a([3, 61, 26]), $a([1, 64, 28]), $a([0, -1, -1]), $a([7, 24, 20]), $a([1, 23, 22]), $a([0, -1, -1]), $a([6, 20, 30]), $a([1, 21, 32]), $a([0, -1, -1])]), $a(["20", 61, 20, 2, 3053, $a([3, 107, 20]), $a([0, -1, -1]), $a([0, -1, -1]), $a([3, 65, 28]), $a([1, 72, 30]), $a([0, -1, -1]), $a([7, 26, 22]), $a([1, 23, 22]), $a([0, -1, -1]), $a([7, 19, 28]), $a([1, 20, 32]), $a([0, -1, -1])]), $a(["21", 63, 21, 2, 3291, $a([3, 115, 22]), $a([0, -1, -1]), $a([0, -1, -1]), $a([4, 56, 24]), $a([1, 63, 28]), $a([0, -1, -1]), $a([7, 28, 24]), $a([1, 25, 22]), $a([0, -1, -1]), $a([8, 18, 28]), $a([1, 21, 22]), $a([0, -1, -1])]), $a(["22", 65, 16, 3, 3383, $a([2, 116, 22]), $a([1, 122, 24]), $a([0, -1, -1]), $a([4, 56, 24]), $a([1, 72, 30]), $a([0, -1, -1]), $a([7, 28, 24]), $a([1, 32, 26]), $a([0, -1, -1]), $a([8, 18, 28]), $a([1, 24, 30]), $a([0, -1, -1])]), $a(["23", 67, 17, 3, 3631, $a([3, 127, 24]), $a([0, -1, -1]), $a([0, -1, -1]), $a([5, 51, 22]), $a([1, 62, 26]), $a([0, -1, -1]), $a([7, 30, 26]), $a([1, 35, 26]), $a([0, -1, -1]), $a([8, 20, 30]), $a([1, 21, 32]), $a([0, -1, -1])]), $a(["24", 69, 17, 3, 3887, $a([2, 135, 26]), $a([1, 137, 26]), $a([0, -1, -1]), $a([5, 56, 24]), $a([1, 59, 26]), $a([0, -1, -1]), $a([7, 33, 28]), $a([1, 30, 28]), $a([0, -1, -1]), $a([11, 16, 24]), $a([1, 19, 26]), $a([0, -1, -1])]), $a(["25", 71, 18, 3, 4151, $a([3, 105, 20]), $a([1, 121, 22]), $a([0, -1, -1]), $a([5, 61, 26]), $a([1, 57, 26]), $a([0, -1, -1]), $a([9, 28, 24]), $a([1, 28, 22]), $a([0, -1, -1]), $a([10, 19, 28]), $a([1, 18, 30]), $a([0, -1, -1])]), $a(["26", 73, 18, 3, 4423, $a([2, 157, 30]), $a([1, 150, 28]), $a([0, -1, -1]), $a([5, 65, 28]), $a([1, 61, 26]), $a([0, -1, -1]), $a([8, 33, 28]), $a([1, 34, 30]), $a([0, -1, -1]), $a([10, 19, 28]), $a([2, 15, 26]), $a([0, -1, -1])]), $a(["27", 75, 19, 3, 4703, $a([3, 126, 24]), $a([1, 115, 22]), $a([0, -1, -1]), $a([7, 51, 22]), $a([1, 54, 22]), $a([0, -1, -1]), $a([8, 35, 30]), $a([1, 37, 30]), $a([0, -1, -1]), $a([15, 15, 22]), $a([1, 10, 22]), $a([0, -1, -1])]), $a(["28", 77, 19, 3, 4991, $a([4, 105, 20]), $a([1, 103, 20]), $a([0, -1, -1]), $a([7, 56, 24]), $a([1, 45, 18]), $a([0, -1, -1]), $a([10, 31, 26]), $a([1, 27, 26]), $a([0, -1, -1]), $a([10, 17, 26]), $a([3, 20, 28]), $a([1, 21, 28])]), $a(["29", 79, 20, 3, 5287, $a([3, 139, 26]), $a([1, 137, 28]), $a([0, -1, -1]), $a([6, 66, 28]), $a([1, 66, 30]), $a([0, -1, -1]), $a([9, 36, 30]), $a([1, 34, 32]), $a([0, -1, -1]), $a([13, 19, 28]), $a([1, 17, 32]), $a([0, -1, -1])]), $a(["30", 81, 20, 3, 5591, $a([6, 84, 16]), $a([1, 82, 16]), $a([0, -1, -1]), $a([6, 70, 30]), $a([1, 68, 30]), $a([0, -1, -1]), $a([7, 35, 30]), $a([3, 33, 28]), $a([1, 32, 28]), $a([13, 20, 30]), $a([1, 20, 28]), $a([0, -1, -1])]), $a(["31", 83, 21, 3, 5903, $a([5, 105, 20]), $a([1, 94, 18]), $a([0, -1, -1]), $a([6, 74, 32]), $a([1, 71, 30]), $a([0, -1, -1]), $a([11, 33, 28]), $a([1, 34, 32]), $a([0, -1, -1]), $a([13, 19, 28]), $a([3, 16, 26]), $a([0, -1, -1])]), $a(["32", 85, 17, 4, 6033, $a([4, 127, 24]), $a([1, 126, 24]), $a([0, -1, -1]), $a([7, 66, 28]), $a([1, 66, 30]), $a([0, -1, -1]), $a([12, 30, 24]), $a([1, 24, 28]), $a([1, 24, 30]), $a([15, 19, 28]), $a([1, 17, 32]), $a([0, -1, -1])]), $a(["33", 87, 17, 4, 6353, $a([7, 84, 16]), $a([1, 78, 16]), $a([0, -1, -1]), $a([7, 70, 30]), $a([1, 66, 28]), $a([0, -1, -1]), $a([12, 33, 28]), $a([1, 32, 30]), $a([0, -1, -1]), $a([14, 21, 32]), $a([1, 24, 28]), $a([0, -1, -1])]), $a(["34", 89, 18, 4, 6689, $a([5, 117, 22]), $a([1, 117, 24]), $a([0, -1, -1]), $a([8, 66, 28]), $a([1, 58, 26]), $a([0, -1, -1]), $a([11, 38, 32]), $a([1, 34, 32]), $a([0, -1, -1]), $a([15, 20, 30]), $a([2, 17, 26]), $a([0, -1, -1])]), $a(["35", 91, 18, 4, 7025, $a([4, 148, 28]), $a([1, 146, 28]), $a([0, -1, -1]), $a([8, 68, 30]), $a([1, 70, 24]), $a([0, -1, -1]), $a([10, 36, 32]), $a([3, 38, 28]), $a([0, -1, -1]), $a([16, 19, 28]), $a([3, 16, 26]), $a([0, -1, -1])]), $a(["36", 93, 19, 4, 7377, $a([4, 126, 24]), $a([2, 135, 26]), $a([0, -1, -1]), $a([8, 70, 28]), $a([2, 43, 26]), $a([0, -1, -1]), $a([13, 32, 28]), $a([2, 41, 30]), $a([0, -1, -1]), $a([17, 19, 28]), $a([3, 15, 26]), $a([0, -1, -1])]), $a(["37", 95, 19, 4, 7729, $a([5, 136, 26]), $a([1, 132, 24]), $a([0, -1, -1]), $a([5, 67, 30]), $a([4, 68, 28]), $a([1, 69, 28]), $a([14, 35, 30]), $a([1, 32, 24]), $a([0, -1, -1]), $a([18, 18, 26]), $a([3, 16, 28]), $a([1, 14, 28])]), $a(["38", 97, 19, 4, 8089, $a([3, 142, 26]), $a([3, 141, 28]), $a([0, -1, -1]), $a([8, 70, 30]), $a([1, 73, 32]), $a([1, 74, 32]), $a([12, 34, 30]), $a([3, 34, 26]), $a([1, 35, 28]), $a([18, 21, 32]), $a([1, 27, 30]), $a([0, -1, -1])]), $a(["39", 99, 20, 4, 8465, $a([5, 116, 22]), $a([2, 103, 20]), $a([1, 102, 20]), $a([9, 74, 32]), $a([1, 74, 30]), $a([0, -1, -1]), $a([14, 34, 28]), $a([2, 32, 32]), $a([1, 32, 30]), $a([19, 21, 32]), $a([1, 25, 26]), $a([0, -1, -1])]), $a(["40", 101, 20, 4, 8841, $a([7, 116, 22]), $a([1, 117, 22]), $a([0, -1, -1]), $a([11, 65, 28]), $a([1, 58, 24]), $a([0, -1, -1]), $a([15, 38, 32]), $a([1, 27, 28]), $a([0, -1, -1]), $a([20, 20, 30]), $a([1, 20, 32]), $a([1, 21, 32])]), $a(["41", 103, 17, 5, 9009, $a([6, 136, 26]), $a([1, 130, 24]), $a([0, -1, -1]), $a([11, 66, 28]), $a([1, 62, 30]), $a([0, -1, -1]), $a([14, 34, 28]), $a([3, 34, 32]), $a([1, 30, 30]), $a([18, 20, 30]), $a([3, 20, 28]), $a([2, 15, 26])]), $a(["42", 105, 17, 5, 9401, $a([5, 105, 20]), $a([2, 115, 22]), $a([2, 116, 22]), $a([10, 75, 32]), $a([1, 73, 32]), $a([0, -1, -1]), $a([16, 38, 32]), $a([1, 27, 28]), $a([0, -1, -1]), $a([22, 19, 28]), $a([2, 16, 30]), $a([1, 19, 30])]), $a(["43", 107, 18, 5, 9799, $a([6, 147, 28]), $a([1, 146, 28]), $a([0, -1, -1]), $a([11, 66, 28]), $a([2, 65, 30]), $a([0, -1, -1]), $a([18, 33, 28]), $a([2, 33, 30]), $a([0, -1, -1]), $a([22, 21, 32]), $a([1, 28, 30]), $a([0, -1, -1])]), $a(["44", 109, 18, 5, 10207, $a([6, 116, 22]), $a([3, 125, 24]), $a([0, -1, -1]), $a([11, 75, 32]), $a([1, 68, 30]), $a([0, -1, -1]), $a([13, 35, 28]), $a([6, 34, 32]), $a([1, 30, 30]), $a([23, 21, 32]), $a([1, 26, 30]), $a([0, -1, -1])]), $a(["45", 111, 18, 5, 10623, $a([7, 105, 20]), $a([4, 95, 18]), $a([0, -1, -1]), $a([12, 67, 28]), $a([1, 63, 30]), $a([1, 62, 32]), $a([21, 31, 26]), $a([2, 33, 32]), $a([0, -1, -1]), $a([23, 21, 32]), $a([2, 24, 30]), $a([0, -1, -1])]), $a(["46", 113, 19, 5, 11045, $a([10, 116, 22]), $a([0, -1, -1]), $a([0, -1, -1]), $a([12, 74, 32]), $a([1, 78, 30]), $a([0, -1, -1]), $a([18, 37, 32]), $a([1, 39, 30]), $a([1, 41, 28]), $a([25, 21, 32]), $a([1, 27, 28]), $a([0, -1, -1])]), $a(["47", 115, 19, 5, 11477, $a([5, 126, 24]), $a([4, 115, 22]), $a([1, 114, 22]), $a([12, 67, 28]), $a([2, 66, 32]), $a([1, 68, 30]), $a([21, 35, 30]), $a([1, 39, 30]), $a([0, -1, -1]), $a([26, 21, 32]), $a([1, 28, 28]), $a([0, -1, -1])]), $a(["48", 117, 19, 5, 11917, $a([9, 126, 24]), $a([1, 117, 22]), $a([0, -1, -1]), $a([13, 75, 32]), $a([1, 68, 30]), $a([0, -1, -1]), $a([20, 35, 30]), $a([3, 35, 28]), $a([0, -1, -1]), $a([27, 21, 32]), $a([1, 28, 30]), $a([0, -1, -1])]), $a(["49", 119, 17, 6, 12111, $a([9, 126, 24]), $a([1, 137, 26]), $a([0, -1, -1]), $a([13, 71, 30]), $a([2, 68, 32]), $a([0, -1, -1]), $a([20, 37, 32]), $a([1, 39, 28]), $a([1, 38, 28]), $a([24, 20, 32]), $a([5, 25, 28]), $a([0, -1, -1])]), $a(["50", 121, 17, 6, 12559, $a([8, 147, 28]), $a([1, 141, 28]), $a([0, -1, -1]), $a([10, 73, 32]), $a([4, 74, 30]), $a([1, 73, 30]), $a([16, 36, 32]), $a([6, 39, 30]), $a([1, 37, 30]), $a([27, 21, 32]), $a([3, 20, 26]), $a([0, -1, -1])]), $a(["51", 123, 18, 6, 13025, $a([9, 137, 26]), $a([1, 135, 26]), $a([0, -1, -1]), $a([12, 70, 30]), $a([4, 75, 32]), $a([0, -1, -1]), $a([24, 35, 30]), $a([1, 40, 28]), $a([0, -1, -1]), $a([23, 20, 32]), $a([8, 24, 30]), $a([0, -1, -1])]), $a(["52", 125, 18, 6, 13489, $a([14, 95, 18]), $a([1, 86, 18]), $a([0, -1, -1]), $a([13, 73, 32]), $a([3, 77, 30]), $a([0, -1, -1]), $a([24, 35, 30]), $a([2, 35, 28]), $a([0, -1, -1]), $a([26, 21, 32]), $a([5, 21, 30]), $a([1, 23, 30])]), $a(["53", 127, 18, 6, 13961, $a([9, 147, 28]), $a([1, 142, 28]), $a([0, -1, -1]), $a([10, 73, 30]), $a([6, 70, 32]), $a([1, 71, 32]), $a([25, 35, 30]), $a([2, 34, 26]), $a([0, -1, -1]), $a([29, 21, 32]), $a([4, 22, 30]), $a([0, -1, -1])]), $a(["54", 129, 18, 6, 14441, $a([11, 126, 24]), $a([1, 131, 24]), $a([0, -1, -1]), $a([16, 74, 32]), $a([1, 79, 30]), $a([0, -1, -1]), $a([25, 38, 32]), $a([1, 25, 30]), $a([0, -1, -1]), $a([33, 21, 32]), $a([1, 28, 28]), $a([0, -1, -1])]), $a(["55", 131, 19, 6, 14939, $a([14, 105, 20]), $a([1, 99, 18]), $a([0, -1, -1]), $a([19, 65, 28]), $a([1, 72, 28]), $a([0, -1, -1]), $a([24, 37, 32]), $a([2, 40, 30]), $a([1, 41, 30]), $a([31, 21, 32]), $a([4, 24, 32]), $a([0, -1, -1])]), $a(["56", 133, 19, 6, 15435, $a([10, 147, 28]), $a([1, 151, 28]), $a([0, -1, -1]), $a([15, 71, 30]), $a([3, 71, 32]), $a([1, 73, 32]), $a([24, 37, 32]), $a([3, 38, 30]), $a([1, 39, 30]), $a([36, 19, 30]), $a([3, 29, 26]), $a([0, -1, -1])]), $a(["57", 135, 19, 6, 15939, $a([15, 105, 20]), $a([1, 99, 18]), $a([0, -1, -1]), $a([19, 70, 30]), $a([1, 64, 28]), $a([0, -1, -1]), $a([27, 38, 32]), $a([2, 25, 26]), $a([0, -1, -1]), $a([38, 20, 30]), $a([2, 18, 28]), $a([0, -1, -1])]), $a(["58", 137, 17, 7, 16171, $a([14, 105, 20]), $a([1, 113, 22]), $a([1, 114, 22]), $a([17, 67, 30]), $a([3, 92, 32]), $a([0, -1, -1]), $a([30, 35, 30]), $a([1, 41, 30]), $a([0, -1, -1]), $a([36, 21, 32]), $a([1, 26, 30]), $a([1, 27, 30])]), $a(["59", 139, 17, 7, 16691, $a([11, 146, 28]), $a([1, 146, 26]), $a([0, -1, -1]), $a([20, 70, 30]), $a([1, 60, 26]), $a([0, -1, -1]), $a([29, 38, 32]), $a([1, 24, 32]), $a([0, -1, -1]), $a([40, 20, 30]), $a([2, 17, 26]), $a([0, -1, -1])]), $a(["60", 141, 18, 7, 17215, $a([3, 137, 26]), $a([1, 136, 26]), $a([10, 126, 24]), $a([22, 65, 28]), $a([1, 75, 30]), $a([0, -1, -1]), $a([30, 37, 32]), $a([1, 51, 30]), $a([0, -1, -1]), $a([42, 20, 30]), $a([1, 21, 30]), $a([0, -1, -1])]), $a(["61", 143, 18, 7, 17751, $a([12, 126, 24]), $a([2, 118, 22]), $a([1, 116, 22]), $a([19, 74, 32]), $a([1, 74, 30]), $a([1, 72, 28]), $a([30, 38, 32]), $a([2, 29, 30]), $a([0, -1, -1]), $a([39, 20, 32]), $a([2, 37, 26]), $a([1, 38, 26])]), $a(["62", 145, 18, 7, 18295, $a([12, 126, 24]), $a([3, 136, 26]), $a([0, -1, -1]), $a([21, 70, 30]), $a([2, 65, 28]), $a([0, -1, -1]), $a([34, 35, 30]), $a([1, 44, 32]), $a([0, -1, -1]), $a([42, 20, 30]), $a([2, 19, 28]), $a([2, 18, 28])]), $a(["63", 147, 18, 7, 18847, $a([12, 126, 24]), $a([3, 117, 22]), $a([1, 116, 22]), $a([25, 61, 26]), $a([2, 62, 28]), $a([0, -1, -1]), $a([34, 35, 30]), $a([1, 40, 32]), $a([1, 41, 32]), $a([45, 20, 30]), $a([1, 20, 32]), $a([1, 21, 32])]), $a(["64", 149, 19, 7, 19403, $a([15, 105, 20]), $a([2, 115, 22]), $a([2, 116, 22]), $a([25, 65, 28]), $a([1, 72, 28]), $a([0, -1, -1]), $a([18, 35, 30]), $a([17, 37, 32]), $a([1, 50, 32]), $a([42, 20, 30]), $a([6, 19, 28]), $a([1, 15, 28])]), $a(["65", 151, 19, 7, 19971, $a([19, 105, 20]), $a([1, 101, 20]), $a([0, -1, -1]), $a([33, 51, 22]), $a([1, 65, 22]), $a([0, -1, -1]), $a([40, 33, 28]), $a([1, 28, 28]), $a([0, -1, -1]), $a([49, 20, 30]), $a([1, 18, 28]), $a([0, -1, -1])]), $a(["66", 153, 17, 8, 20229, $a([18, 105, 20]), $a([2, 117, 22]), $a([0, -1, -1]), $a([26, 65, 28]), $a([1, 80, 30]), $a([0, -1, -1]), $a([35, 35, 30]), $a([3, 35, 28]), $a([1, 36, 28]), $a([52, 18, 28]), $a([2, 38, 30]), $a([0, -1, -1])]), $a(["67", 155, 17, 8, 20805, $a([26, 84, 16]), $a([0, -1, -1]), $a([0, -1, -1]), $a([26, 70, 30]), $a([0, -1, -1]), $a([0, -1, -1]), $a([45, 31, 26]), $a([1, 9, 26]), $a([0, -1, -1]), $a([52, 20, 30]), $a([0, -1, -1]), $a([0, -1, -1])]), $a(["68", 157, 17, 8, 21389, $a([16, 126, 24]), $a([1, 114, 22]), $a([1, 115, 22]), $a([23, 70, 30]), $a([3, 65, 28]), $a([1, 66, 28]), $a([40, 35, 30]), $a([1, 43, 30]), $a([0, -1, -1]), $a([46, 20, 30]), $a([7, 19, 28]), $a([1, 16, 28])]), $a(["69", 159, 18, 8, 21993, $a([19, 116, 22]), $a([1, 105, 22]), $a([0, -1, -1]), $a([20, 70, 30]), $a([7, 66, 28]), $a([1, 63, 28]), $a([40, 35, 30]), $a([1, 42, 32]), $a([1, 43, 32]), $a([54, 20, 30]), $a([1, 19, 30]), $a([0, -1, -1])]), $a(["70", 161, 18, 8, 22593, $a([17, 126, 24]), $a([2, 115, 22]), $a([0, -1, -1]), $a([24, 70, 30]), $a([4, 74, 32]), $a([0, -1, -1]), $a([48, 31, 26]), $a([2, 18, 26]), $a([0, -1, -1]), $a([54, 19, 28]), $a([6, 15, 26]), $a([1, 14, 26])]), $a(["71", 163, 18, 8, 23201, $a([29, 84, 16]), $a([0, -1, -1]), $a([0, -1, -1]), $a([29, 70, 30]), $a([0, -1, -1]), $a([0, -1, -1]), $a([6, 34, 30]), $a([3, 36, 30]), $a([38, 33, 28]), $a([58, 20, 30]), $a([0, -1, -1]), $a([0, -1, -1])]), $a(["72", 165, 18, 8, 23817, $a([16, 147, 28]), $a([1, 149, 28]), $a([0, -1, -1]), $a([31, 66, 28]), $a([1, 37, 26]), $a([0, -1, -1]), $a([48, 33, 28]), $a([1, 23, 26]), $a([0, -1, -1]), $a([53, 20, 30]), $a([6, 19, 28]), $a([1, 17, 28])]), $a(["73", 167, 19, 8, 24453, $a([20, 115, 22]), $a([2, 134, 24]), $a([0, -1, -1]), $a([29, 66, 28]), $a([2, 56, 26]), $a([2, 57, 26]), $a([45, 36, 30]), $a([2, 15, 28]), $a([0, -1, -1]), $a([59, 20, 30]), $a([2, 21, 32]), $a([0, -1, -1])]), $a(["74", 169, 19, 8, 25085, $a([17, 147, 28]), $a([1, 134, 26]), $a([0, -1, -1]), $a([26, 70, 30]), $a([5, 75, 32]), $a([0, -1, -1]), $a([47, 35, 30]), $a([1, 48, 32]), $a([0, -1, -1]), $a([64, 18, 28]), $a([2, 33, 30]), $a([1, 35, 30])]), $a(["75", 171, 17, 9, 25373, $a([22, 115, 22]), $a([1, 133, 24]), $a([0, -1, -1]), $a([33, 65, 28]), $a([1, 74, 28]), $a([0, -1, -1]), $a([43, 36, 30]), $a([5, 27, 28]), $a([1, 30, 28]), $a([57, 20, 30]), $a([5, 21, 32]), $a([1, 24, 32])]), $a(["76", 173, 17, 9, 26021, $a([18, 136, 26]), $a([2, 142, 26]), $a([0, -1, -1]), $a([33, 66, 28]), $a([2, 49, 26]), $a([0, -1, -1]), $a([48, 35, 30]), $a([2, 38, 28]), $a([0, -1, -1]), $a([64, 20, 30]), $a([1, 20, 32]), $a([0, -1, -1])]), $a(["77", 175, 17, 9, 26677, $a([19, 126, 24]), $a([2, 135, 26]), $a([1, 136, 26]), $a([32, 66, 28]), $a([2, 55, 26]), $a([2, 56, 26]), $a([49, 36, 30]), $a([2, 18, 32]), $a([0, -1, -1]), $a([65, 18, 28]), $a([5, 27, 30]), $a([1, 29, 30])]), $a(["78", 177, 18, 9, 27335, $a([20, 137, 26]), $a([1, 130, 26]), $a([0, -1, -1]), $a([30, 75, 32]), $a([2, 71, 32]), $a([0, -1, -1]), $a([46, 35, 30]), $a([6, 39, 32]), $a([0, -1, -1]), $a([3, 12, 30]), $a([70, 19, 28]), $a([0, -1, -1])]), $a(["79", 179, 18, 9, 28007, $a([20, 147, 28]), $a([0, -1, -1]), $a([0, -1, -1]), $a([35, 70, 30]), $a([0, -1, -1]), $a([0, -1, -1]), $a([49, 35, 30]), $a([5, 35, 28]), $a([0, -1, -1]), $a([70, 20, 30]), $a([0, -1, -1]), $a([0, -1, -1])]), $a(["80", 181, 18, 9, 28687, $a([21, 136, 26]), $a([1, 155, 28]), $a([0, -1, -1]), $a([34, 70, 30]), $a([1, 64, 28]), $a([1, 65, 28]), $a([54, 35, 30]), $a([1, 45, 30]), $a([0, -1, -1]), $a([68, 20, 30]), $a([3, 18, 28]), $a([1, 19, 28])]), $a(["81", 183, 18, 9, 29375, $a([19, 126, 24]), $a([5, 115, 22]), $a([1, 114, 22]), $a([33, 70, 30]), $a([3, 65, 28]), $a([1, 64, 28]), $a([52, 35, 30]), $a([3, 41, 32]), $a([1, 40, 32]), $a([67, 20, 30]), $a([5, 21, 32]), $a([1, 24, 32])]), $a(["82", 185, 18, 9, 30071, $a([2, 150, 28]), $a([21, 136, 26]), $a([0, -1, -1]), $a([32, 70, 30]), $a([6, 65, 28]), $a([0, -1, -1]), $a([52, 38, 32]), $a([2, 27, 32]), $a([0, -1, -1]), $a([73, 20, 30]), $a([2, 22, 32]), $a([0, -1, -1])]), $a(["83", 187, 17, 10, 30387, $a([21, 126, 24]), $a([4, 136, 26]), $a([0, -1, -1]), $a([30, 74, 32]), $a([6, 73, 30]), $a([0, -1, -1]), $a([54, 35, 30]), $a([4, 40, 32]), $a([0, -1, -1]), $a([75, 20, 30]), $a([1, 20, 28]), $a([0, -1, -1])]), $a(["84", 189, 17, 10, 31091, $a([30, 105, 20]), $a([1, 114, 22]), $a([0, -1, -1]), $a([3, 45, 22]), $a([55, 47, 20]), $a([0, -1, -1]), $a([2, 26, 26]), $a([62, 33, 28]), $a([0, -1, -1]), $a([79, 18, 28]), $a([4, 33, 30]), $a([0, -1, -1])])]); /*21547*/
		$1.eclval = $get($1.eclevel, 1) - 49; /*21549*/
		for (var _J5 = 0; _J5 <= 83; _J5 += 1) {
			/*21569*/
			$1.i = _J5; /*21551*/
			$1.m = $get($1.metrics, $1.i); /*21552*/
			$1.vers = $get($1.m, 0); /*21553*/
			$1.size = $get($1.m, 1); /*21554*/
			$1.alnk = $get($1.m, 2); /*21555*/
			$1.alnn = $get($1.m, 3); /*21556*/
			$1.alnr = $1.size - ($1.alnk * $1.alnn); /*21557*/
			$1.nmod = $get($1.m, 4); /*21558*/
			$1.ncws = ~~($1.nmod / 8); /*21559*/
			$1.rbit = $1.nmod % 8; /*21560*/
			$1.ecbs = $geti($1.m, 5 + ($1.eclval * 3), 3); /*21561*/
			$k[$j++] = 'ecws'; /*21562*/
			$k[$j++] = 0; /*21562*/
			$forall($1.ecbs, function() {
				/*21562*/
				var _JS = $k[--$j]; /*21562*/
				var _JV = $k[--$j]; /*21562*/
				$k[$j++] = _JV + ($get(_JS, 0) * $get(_JS, 2)); /*21562*/
			}); /*21562*/
			var _JW = $k[--$j]; /*21562*/
			$1[$k[--$j]] = _JW; /*21562*/
			$1.dcws = $1.ncws - $1.ecws; /*21563*/
			$1.dmod = $1.dcws * 8; /*21564*/
			$1.okay = true; /*21565*/
			if ($ne($1.version, "unset") && $ne($1.version, $1.vers)) { //no-else/*21566*/
				$1.okay = false; /*21566*/
			} /*21566*/
			if ($1.bits.length > $1.dmod) { //no-else/*21567*/
				$1.okay = false; /*21567*/
			} /*21567*/
			if ($1.okay) { //no-else/*21568*/
				break; /*21568*/
			} /*21568*/
		} /*21568*/
		if (!$1.okay) { //no-else/*21573*/
			$k[$j++] = 'bwipp.hanxinNoValidSymbol'; /*21572*/
			$k[$j++] = "No valid symbol available"; /*21572*/
			$0.raiseerror(); /*21572*/
		} /*21572*/
		$1.version = $1.vers; /*21575*/
		$1.msgbits = $1.bits; /*21576*/
		$1.e1nb = $get($get($1.ecbs, 0), 0); /*21577*/
		$1.e2nb = $get($get($1.ecbs, 1), 0); /*21577*/
		$1.e3nb = $get($get($1.ecbs, 2), 0); /*21577*/
		$1.e1dcws = $get($get($1.ecbs, 0), 1); /*21578*/
		$1.e2dcws = $get($get($1.ecbs, 1), 1); /*21578*/
		$1.e3dcws = $get($get($1.ecbs, 2), 1); /*21578*/
		$1.e1ecws = $get($get($1.ecbs, 0), 2); /*21579*/
		$1.e2ecws = $get($get($1.ecbs, 1), 2); /*21579*/
		$1.e3ecws = $get($get($1.ecbs, 2), 2); /*21579*/
		$1.pad = $s($1.dmod); /*21582*/
		for (var _KF = 0, _KE = $1.pad.length - 1; _KF <= _KE; _KF += 1) {
			/*21583*/
			$put($1.pad, _KF, 48); /*21583*/
		} /*21583*/
		$puti($1.pad, 0, $1.msgbits); /*21584*/
		$1.cws = $a($1.dcws); /*21587*/
		for (var _KN = 0, _KM = $1.cws.length - 1; _KN <= _KM; _KN += 1) {
			/*21597*/
			$1.c = _KN; /*21589*/
			$1.cwb = $geti($1.pad, $1.c * 8, 8); /*21590*/
			$1.cw = 0; /*21591*/
			for (var _KR = 0; _KR <= 7; _KR += 1) {
				/*21595*/
				$1.i = _KR; /*21593*/
				$1.cw = $1.cw + ((~~(Math.pow(2, (8 - $1.i) - 1))) * ($get($1.cwb, $1.i) - 48)); /*21594*/
			} /*21594*/
			$put($1.cws, $1.c, $1.cw); /*21596*/
		} /*21596*/
		$1.rscodes = function() {
			$1.rspm = $k[--$j]; /*21601*/
			$1.rsgf = $k[--$j]; /*21602*/
			$1.rsnc = $k[--$j]; /*21603*/
			$1.rscws = $k[--$j]; /*21604*/
			$k[$j++] = Infinity; /*21607*/
			$k[$j++] = 1; /*21607*/
			for (var _Kf = 0, _Kg = $1.rsgf - 1; _Kf < _Kg; _Kf++) {
				/*21607*/
				var _Kh = $k[--$j]; /*21607*/
				var _Ki = _Kh * 2; /*21607*/
				$k[$j++] = _Kh; /*21607*/
				$k[$j++] = _Ki; /*21607*/
				if (_Ki >= $1.rsgf) { //no-else/*21607*/
					var _Kl = $k[--$j]; /*21607*/
					$k[$j++] = $xo(_Kl, $1.rspm); /*21607*/
				} /*21607*/
			} /*21607*/
			$1.rsalog = $a(); /*21607*/
			$1.rslog = $a($1.rsgf); /*21608*/
			for (var _Kr = 1, _Kq = $1.rsgf - 1; _Kr <= _Kq; _Kr += 1) {
				/*21609*/
				$put($1.rslog, $get($1.rsalog, _Kr), _Kr); /*21609*/
			} /*21609*/
			$1.rsprod = function() {
				var _Kv = $k[--$j]; /*21613*/
				var _Kw = $k[--$j]; /*21613*/
				$k[$j++] = _Kw; /*21617*/
				$k[$j++] = _Kv; /*21617*/
				if ((_Kv != 0) && (_Kw != 0)) {
					/*21616*/
					var _Kz = $get($1.rslog, $k[--$j]); /*21614*/
					var _L5 = $get($1.rsalog, (_Kz + $get($1.rslog, $k[--$j])) % ($1.rsgf - 1)); /*21614*/
					$k[$j++] = _L5; /*21614*/
				} else {
					/*21616*/
					$j -= 2; /*21616*/
					$k[$j++] = 0; /*21616*/
				} /*21616*/
			}; /*21618*/
			$k[$j++] = Infinity; /*21621*/
			$k[$j++] = 1; /*21621*/
			for (var _L7 = 0, _L8 = $1.rsnc; _L7 < _L8; _L7++) {
				/*21621*/
				$k[$j++] = 0; /*21621*/
			} /*21621*/
			$1.coeffs = $a(); /*21621*/
			for (var _LC = 1, _LB = $1.rsnc; _LC <= _LB; _LC += 1) {
				/*21630*/
				$1.i = _LC; /*21623*/
				$put($1.coeffs, $1.i, $get($1.coeffs, $1.i - 1)); /*21624*/
				for (var _LJ = $1.i - 1; _LJ >= 1; _LJ -= 1) {
					/*21628*/
					$1.j = _LJ; /*21626*/
					$k[$j++] = $1.coeffs; /*21627*/
					$k[$j++] = $1.j; /*21627*/
					$k[$j++] = $get($1.coeffs, $1.j - 1); /*21627*/
					$k[$j++] = $get($1.coeffs, $1.j); /*21627*/
					$k[$j++] = $get($1.rsalog, $1.i); /*21627*/
					$1.rsprod(); /*21627*/
					var _LV = $k[--$j]; /*21627*/
					var _LW = $k[--$j]; /*21627*/
					var _LX = $k[--$j]; /*21627*/
					$put($k[--$j], _LX, $xo(_LW, _LV)); /*21627*/
				} /*21627*/
				$k[$j++] = $1.coeffs; /*21629*/
				$k[$j++] = 0; /*21629*/
				$k[$j++] = $get($1.coeffs, 0); /*21629*/
				$k[$j++] = $get($1.rsalog, $1.i); /*21629*/
				$1.rsprod(); /*21629*/
				var _Lf = $k[--$j]; /*21629*/
				var _Lg = $k[--$j]; /*21629*/
				$put($k[--$j], _Lg, _Lf); /*21629*/
			} /*21629*/
			$1.nd = $1.rscws.length; /*21633*/
			$k[$j++] = Infinity; /*21634*/
			$forall($1.rscws); /*21634*/
			for (var _Ll = 0, _Lm = $1.rsnc; _Ll < _Lm; _Ll++) {
				/*21634*/
				$k[$j++] = 0; /*21634*/
			} /*21634*/
			$k[$j++] = 0; /*21634*/
			$1.rscws = $a(); /*21634*/
			for (var _Lq = 0, _Lp = $1.nd - 1; _Lq <= _Lp; _Lq += 1) {
				/*21641*/
				$1.k = $xo($get($1.rscws, _Lq), $get($1.rscws, $1.nd)); /*21636*/
				for (var _Ly = 0, _Lx = $1.rsnc - 1; _Ly <= _Lx; _Ly += 1) {
					/*21640*/
					$1.j = _Ly; /*21638*/
					$k[$j++] = $1.rscws; /*21639*/
					$k[$j++] = $1.nd + $1.j; /*21639*/
					$k[$j++] = $get($1.rscws, ($1.nd + $1.j) + 1); /*21639*/
					$k[$j++] = $1.k; /*21639*/
					$k[$j++] = $get($1.coeffs, ($1.rsnc - $1.j) - 1); /*21639*/
					$1.rsprod(); /*21639*/
					var _MB = $k[--$j]; /*21639*/
					var _MC = $k[--$j]; /*21639*/
					var _MD = $k[--$j]; /*21639*/
					$put($k[--$j], _MD, $xo(_MC, _MB)); /*21639*/
				} /*21639*/
			} /*21639*/
			$k[$j++] = $geti($1.rscws, 0, $1.rscws.length - 1); /*21644*/
		}; /*21646*/
		$1.dcwsb = $a(($1.e1nb + $1.e2nb) + $1.e3nb); /*21649*/
		$1.ecwsb = $a($1.dcwsb.length); /*21650*/
		$1.in = 0; /*21651*/
		$1.out = 0; /*21651*/
		for (var _MP = 0, _MQ = $1.e1nb; _MP < _MQ; _MP++) {
			/*21657*/
			$k[$j++] = $geti($1.cws, $1.in, $1.e1dcws); /*21653*/
			$k[$j++] = $1.e1ecws; /*21653*/
			$k[$j++] = 256; /*21653*/
			$k[$j++] = 355; /*21653*/
			$1.rscodes(); /*21653*/
			var _MW = $k[--$j]; /*21654*/
			$put($1.dcwsb, $1.out, $geti(_MW, 0, $1.e1dcws)); /*21654*/
			$put($1.ecwsb, $1.out, $geti(_MW, $1.e1dcws, $1.e1ecws)); /*21655*/
			$1.in = $1.in + $1.e1dcws; /*21656*/
			$1.out = $1.out + 1; /*21656*/
		} /*21656*/
		for (var _Mk = 0, _Ml = $1.e2nb; _Mk < _Ml; _Mk++) {
			/*21663*/
			$k[$j++] = $geti($1.cws, $1.in, $1.e2dcws); /*21659*/
			$k[$j++] = $1.e2ecws; /*21659*/
			$k[$j++] = 256; /*21659*/
			$k[$j++] = 355; /*21659*/
			$1.rscodes(); /*21659*/
			var _Mr = $k[--$j]; /*21660*/
			$put($1.dcwsb, $1.out, $geti(_Mr, 0, $1.e2dcws)); /*21660*/
			$put($1.ecwsb, $1.out, $geti(_Mr, $1.e2dcws, $1.e2ecws)); /*21661*/
			$1.in = $1.in + $1.e2dcws; /*21662*/
			$1.out = $1.out + 1; /*21662*/
		} /*21662*/
		for (var _N5 = 0, _N6 = $1.e3nb; _N5 < _N6; _N5++) {
			/*21669*/
			$k[$j++] = $geti($1.cws, $1.in, $1.e3dcws); /*21665*/
			$k[$j++] = $1.e3ecws; /*21665*/
			$k[$j++] = 256; /*21665*/
			$k[$j++] = 355; /*21665*/
			$1.rscodes(); /*21665*/
			var _NC = $k[--$j]; /*21666*/
			$put($1.dcwsb, $1.out, $geti(_NC, 0, $1.e3dcws)); /*21666*/
			$put($1.ecwsb, $1.out, $geti(_NC, $1.e3dcws, $1.e3ecws)); /*21667*/
			$1.in = $1.in + $1.e3dcws; /*21668*/
			$1.out = $1.out + 1; /*21668*/
		} /*21668*/
		$1.cws = $a($1.ncws); /*21672*/
		$1.cw = 0; /*21673*/
		for (var _NT = 0, _NS = $1.dcwsb.length - 1; _NT <= _NS; _NT += 1) {
			/*21678*/
			$1.i = _NT; /*21675*/
			var _NW = $get($1.dcwsb, $1.i); /*21676*/
			$puti($1.cws, $1.cw, _NW); /*21676*/
			$1.cw = _NW.length + $1.cw; /*21676*/
			var _Nc = $get($1.ecwsb, $1.i); /*21677*/
			$puti($1.cws, $1.cw, _Nc); /*21677*/
			$1.cw = _Nc.length + $1.cw; /*21677*/
		} /*21677*/
		$k[$j++] = Infinity; /*21683*/
		var _Ng = $1.ncws; /*21682*/
		var _Nh = 12; /*21682*/
		var _Ni = _Ng - 1; /*21682*/
		if ((_Ng - 1) > 12) { //no-else/*21682*/
			var _ = _Nh; /*21682*/
			_Nh = _Ni; /*21682*/
			_Ni = _; /*21682*/
		} /*21682*/
		for (var _Nk = 0, _Nj = _Ni; _Nk <= _Nj; _Nk += 1) {
			/*21684*/
			for (var _Nn = _Nk, _Nm = $1.ncws - 1; _Nn <= _Nm; _Nn += 13) {
				/*21683*/
				$k[$j++] = _Nn; /*21683*/
				if (_Nn < $1.ncws) {
					/*21683*/
					var _Nr = $get($1.cws, $k[--$j]); /*21683*/
					$k[$j++] = _Nr; /*21683*/
				} else {
					/*21683*/
					$j--; /*21683*/
				} /*21683*/
			} /*21683*/
		} /*21683*/
		$1.cws = $a(); /*21683*/
		if ($1.rbit > 0) { //no-else/*21693*/
			$1.pad = $a($1.cws.length + 1); /*21689*/
			$puti($1.pad, 0, $1.cws); /*21690*/
			$put($1.pad, $1.pad.length - 1, 0); /*21691*/
			$1.cws = $1.pad; /*21692*/
		} /*21692*/
		$k[$j++] = Infinity; /*21696*/
		for (var _O3 = 0, _O4 = $1.size * $1.size; _O3 < _O4; _O3++) {
			/*21696*/
			$k[$j++] = -1; /*21696*/
		} /*21696*/
		$1.pixs = $a(); /*21696*/
		$1.qmv = function() {
			var _O7 = $k[--$j]; /*21697*/
			var _O8 = $k[--$j]; /*21697*/
			$k[$j++] = _O8 + (_O7 * $1.size); /*21697*/
		}; /*21697*/
		if ($1.alnn != 0) { //no-else/*21756*/
			$1.trmv = function() {
				var _OB = $k[--$j]; /*21701*/
				var _OD = $k[--$j]; /*21701*/
				$k[$j++] = (((_OB * $1.size) + $1.size) - 1) - _OD; /*21701*/
			}; /*21701*/
			$1.aplot = function() {
				var _OE = $k[--$j]; /*21703*/
				var _OF = $k[--$j]; /*21703*/
				var _OG = $k[--$j]; /*21703*/
				$k[$j++] = _OE; /*21703*/
				$k[$j++] = _OG; /*21703*/
				$k[$j++] = _OF; /*21703*/
				$k[$j++] = _OE; /*21703*/
				$k[$j++] = _OF; /*21703*/
				$k[$j++] = _OG; /*21703*/
				$1.trmv(); /*21703*/
				var _OI = $k[--$j]; /*21703*/
				$put($1.pixs, _OI, $k[--$j]); /*21703*/
				$1.trmv(); /*21704*/
				var _OL = $k[--$j]; /*21704*/
				$put($1.pixs, _OL, $k[--$j]); /*21704*/
			}; /*21705*/
			$1.i = 0; /*21706*/
			$1.stag = 0; /*21706*/
			for (;;) {
				/*21728*/
				if ($1.i >= $1.size) { //no-else/*21707*/
					break; /*21707*/
				} /*21707*/
				for (var _OR = 0, _OQ = $1.size - 1; _OR <= _OQ; _OR += 1) {
					/*21721*/
					$1.j = _OR; /*21709*/
					if (($1.j + $1.alnr) < $1.size) {
						/*21715*/
						$k[$j++] = (((((~~($1.j / $1.alnk)) + $1.stag) % 2) == 0) && (!(($1.i == 0) && ($1.j < $1.alnk)))) || (($1.j % $1.alnk) == 0); /*21713*/
					} else {
						/*21715*/
						$k[$j++] = (($1.alnn + $1.stag) % 2) == 0; /*21715*/
					} /*21715*/
					if ($k[--$j]) { //no-else/*21720*/
						$k[$j++] = $1.j; /*21718*/
						$k[$j++] = $1.i; /*21718*/
						$k[$j++] = 1; /*21718*/
						$1.aplot(); /*21718*/
						var _Oi = $1.j; /*21719*/
						var _Oj = $1.i; /*21719*/
						$k[$j++] = _Oi + 1; /*21719*/
						$k[$j++] = _Oj + 1; /*21719*/
						if (((_Oj + 1) < $1.size) && ((_Oi + 1) < $1.size)) {
							/*21719*/
							$k[$j++] = 0; /*21719*/
							$1.aplot(); /*21719*/
						} else {
							/*21719*/
							$j -= 2; /*21719*/
						} /*21719*/
					} /*21719*/
				} /*21719*/
				if (($1.i + $1.alnr) == $1.size) {
					/*21725*/
					$1.i = ($1.i + $1.alnr) - 1; /*21723*/
				} else {
					/*21725*/
					$1.i = $1.i + $1.alnk; /*21725*/
				} /*21725*/
				$1.stag = 1 - $1.stag; /*21727*/
			} /*21727*/
			for (var _Oy = $1.alnk, _Oz = $1.alnk, _Ox = $1.size - 2; _Oz < 0 ? _Oy >= _Ox : _Oy <= _Ox; _Oy += _Oz) {
				/*21755*/
				$1.i = _Oy; /*21730*/
				if (((~~($1.i / $1.alnk)) % 2) != 0) { //no-else/*21742*/
					$k[$j++] = $1.pixs; /*21732*/
					$k[$j++] = 0; /*21732*/
					$k[$j++] = $1.i - 1; /*21732*/
					$1.trmv(); /*21732*/
					var _P4 = $k[--$j]; /*21732*/
					$put($k[--$j], _P4, 0); /*21732*/
					$k[$j++] = $1.pixs; /*21733*/
					$k[$j++] = 0; /*21733*/
					$k[$j++] = $1.i + 1; /*21733*/
					$1.trmv(); /*21733*/
					var _P8 = $k[--$j]; /*21733*/
					$put($k[--$j], _P8, 0); /*21733*/
					$k[$j++] = $1.pixs; /*21734*/
					$k[$j++] = 1; /*21734*/
					$k[$j++] = $1.i - 1; /*21734*/
					$1.trmv(); /*21734*/
					var _PC = $k[--$j]; /*21734*/
					$put($k[--$j], _PC, 0); /*21734*/
					$k[$j++] = $1.pixs; /*21735*/
					$k[$j++] = 1; /*21735*/
					$k[$j++] = $1.i; /*21735*/
					$1.trmv(); /*21735*/
					var _PG = $k[--$j]; /*21735*/
					$put($k[--$j], _PG, 0); /*21735*/
					$k[$j++] = $1.pixs; /*21736*/
					$k[$j++] = 1; /*21736*/
					$k[$j++] = $1.i + 1; /*21736*/
					$1.trmv(); /*21736*/
					var _PK = $k[--$j]; /*21736*/
					$put($k[--$j], _PK, 0); /*21736*/
					$k[$j++] = $1.pixs; /*21737*/
					$k[$j++] = $1.i - 1; /*21737*/
					$k[$j++] = 0; /*21737*/
					$1.trmv(); /*21737*/
					var _PO = $k[--$j]; /*21737*/
					$put($k[--$j], _PO, 0); /*21737*/
					$k[$j++] = $1.pixs; /*21738*/
					$k[$j++] = $1.i + 1; /*21738*/
					$k[$j++] = 0; /*21738*/
					$1.trmv(); /*21738*/
					var _PS = $k[--$j]; /*21738*/
					$put($k[--$j], _PS, 0); /*21738*/
					$k[$j++] = $1.pixs; /*21739*/
					$k[$j++] = $1.i - 1; /*21739*/
					$k[$j++] = 1; /*21739*/
					$1.trmv(); /*21739*/
					var _PW = $k[--$j]; /*21739*/
					$put($k[--$j], _PW, 0); /*21739*/
					$k[$j++] = $1.pixs; /*21740*/
					$k[$j++] = $1.i; /*21740*/
					$k[$j++] = 1; /*21740*/
					$1.trmv(); /*21740*/
					var _Pa = $k[--$j]; /*21740*/
					$put($k[--$j], _Pa, 0); /*21740*/
					$k[$j++] = $1.pixs; /*21741*/
					$k[$j++] = $1.i + 1; /*21741*/
					$k[$j++] = 1; /*21741*/
					$1.trmv(); /*21741*/
					var _Pe = $k[--$j]; /*21741*/
					$put($k[--$j], _Pe, 0); /*21741*/
				} /*21741*/
				$k[$j++] = $1.pixs; /*21743*/
				$k[$j++] = $1.size - 1; /*21743*/
				$k[$j++] = $1.i - 1; /*21743*/
				$1.trmv(); /*21743*/
				var _Pj = $k[--$j]; /*21743*/
				if ($get($k[--$j], _Pj) != 1) { //no-else/*21754*/
					$k[$j++] = $1.pixs; /*21744*/
					$k[$j++] = $1.size - 1; /*21744*/
					$k[$j++] = $1.i - 1; /*21744*/
					$1.trmv(); /*21744*/
					var _Pp = $k[--$j]; /*21744*/
					$put($k[--$j], _Pp, 0); /*21744*/
					$k[$j++] = $1.pixs; /*21745*/
					$k[$j++] = $1.size - 2; /*21745*/
					$k[$j++] = $1.i - 1; /*21745*/
					$1.trmv(); /*21745*/
					var _Pu = $k[--$j]; /*21745*/
					$put($k[--$j], _Pu, 0); /*21745*/
					$k[$j++] = $1.pixs; /*21746*/
					$k[$j++] = $1.size - 2; /*21746*/
					$k[$j++] = $1.i; /*21746*/
					$1.trmv(); /*21746*/
					var _Pz = $k[--$j]; /*21746*/
					$put($k[--$j], _Pz, 0); /*21746*/
					$k[$j++] = $1.pixs; /*21747*/
					$k[$j++] = $1.size - 2; /*21747*/
					$k[$j++] = $1.i + 1; /*21747*/
					$1.trmv(); /*21747*/
					var _Q4 = $k[--$j]; /*21747*/
					$put($k[--$j], _Q4, 0); /*21747*/
					$k[$j++] = $1.pixs; /*21748*/
					$k[$j++] = $1.size - 1; /*21748*/
					$k[$j++] = $1.i + 1; /*21748*/
					$1.trmv(); /*21748*/
					var _Q9 = $k[--$j]; /*21748*/
					$put($k[--$j], _Q9, 0); /*21748*/
					$k[$j++] = $1.pixs; /*21749*/
					$k[$j++] = $1.i - 1; /*21749*/
					$k[$j++] = $1.size - 1; /*21749*/
					$1.trmv(); /*21749*/
					var _QE = $k[--$j]; /*21749*/
					$put($k[--$j], _QE, 0); /*21749*/
					$k[$j++] = $1.pixs; /*21750*/
					$k[$j++] = $1.i - 1; /*21750*/
					$k[$j++] = $1.size - 2; /*21750*/
					$1.trmv(); /*21750*/
					var _QJ = $k[--$j]; /*21750*/
					$put($k[--$j], _QJ, 0); /*21750*/
					$k[$j++] = $1.pixs; /*21751*/
					$k[$j++] = $1.i; /*21751*/
					$k[$j++] = $1.size - 2; /*21751*/
					$1.trmv(); /*21751*/
					var _QO = $k[--$j]; /*21751*/
					$put($k[--$j], _QO, 0); /*21751*/
					$k[$j++] = $1.pixs; /*21752*/
					$k[$j++] = $1.i + 1; /*21752*/
					$k[$j++] = $1.size - 2; /*21752*/
					$1.trmv(); /*21752*/
					var _QT = $k[--$j]; /*21752*/
					$put($k[--$j], _QT, 0); /*21752*/
					$k[$j++] = $1.pixs; /*21753*/
					$k[$j++] = $1.i + 1; /*21753*/
					$k[$j++] = $1.size - 1; /*21753*/
					$1.trmv(); /*21753*/
					var _QY = $k[--$j]; /*21753*/
					$put($k[--$j], _QY, 0); /*21753*/
				} /*21753*/
			} /*21753*/
		} /*21753*/
		$1.fpat = $a([$a([1, 1, 1, 1, 1, 1, 1, 0]), $a([1, 0, 0, 0, 0, 0, 0, 0]), $a([1, 0, 1, 1, 1, 1, 1, 0]), $a([1, 0, 1, 0, 0, 0, 0, 0]), $a([1, 0, 1, 0, 1, 1, 1, 0]), $a([1, 0, 1, 0, 1, 1, 1, 0]), $a([1, 0, 1, 0, 1, 1, 1, 0]), $a([0, 0, 0, 0, 0, 0, 0, 0])]); /*21768*/
		$1.fpat2 = $a([$a([1, 1, 1, 0, 1, 0, 1, 0]), $a([1, 1, 1, 0, 1, 0, 1, 0]), $a([1, 1, 1, 0, 1, 0, 1, 0]), $a([0, 0, 0, 0, 1, 0, 1, 0]), $a([1, 1, 1, 1, 1, 0, 1, 0]), $a([0, 0, 0, 0, 0, 0, 1, 0]), $a([1, 1, 1, 1, 1, 1, 1, 0]), $a([0, 0, 0, 0, 0, 0, 0, 0])]); /*21778*/
		for (var _Qu = 0, _Qt = $1.fpat.length - 1; _Qu <= _Qt; _Qu += 1) {
			/*21790*/
			$1.y = _Qu; /*21780*/
			for (var _Qy = 0, _Qx = $get($1.fpat, 0).length - 1; _Qy <= _Qx; _Qy += 1) {
				/*21789*/
				$1.x = _Qy; /*21782*/
				$1.fpb = $get($get($1.fpat, $1.y), $1.x); /*21783*/
				$1.fpb2 = $get($get($1.fpat2, $1.y), $1.x); /*21784*/
				$k[$j++] = $1.pixs; /*21785*/
				$k[$j++] = $1.x; /*21785*/
				$k[$j++] = $1.y; /*21785*/
				$1.qmv(); /*21785*/
				var _RD = $k[--$j]; /*21785*/
				$put($k[--$j], _RD, $1.fpb); /*21785*/
				$k[$j++] = $1.pixs; /*21786*/
				$k[$j++] = ($1.size - $1.x) - 1; /*21786*/
				$k[$j++] = $1.y; /*21786*/
				$1.qmv(); /*21786*/
				var _RK = $k[--$j]; /*21786*/
				$put($k[--$j], _RK, $1.fpb); /*21786*/
				$k[$j++] = $1.pixs; /*21787*/
				$k[$j++] = ($1.size - $1.x) - 1; /*21787*/
				$k[$j++] = ($1.size - $1.y) - 1; /*21787*/
				$1.qmv(); /*21787*/
				var _RS = $k[--$j]; /*21787*/
				$put($k[--$j], _RS, $1.fpb); /*21787*/
				$k[$j++] = $1.pixs; /*21788*/
				$k[$j++] = $1.x; /*21788*/
				$k[$j++] = ($1.size - $1.y) - 1; /*21788*/
				$1.qmv(); /*21788*/
				var _RZ = $k[--$j]; /*21788*/
				$put($k[--$j], _RZ, $1.fpb2); /*21788*/
			} /*21788*/
		} /*21788*/
		$1.functionmap = $a([$a([$a([0, 8]), $a([$1.size - 1, $1.size - 9])]), $a([$a([1, 8]), $a([$1.size - 2, $1.size - 9])]), $a([$a([2, 8]), $a([$1.size - 3, $1.size - 9])]), $a([$a([3, 8]), $a([$1.size - 4, $1.size - 9])]), $a([$a([4, 8]), $a([$1.size - 5, $1.size - 9])]), $a([$a([5, 8]), $a([$1.size - 6, $1.size - 9])]), $a([$a([6, 8]), $a([$1.size - 7, $1.size - 9])]), $a([$a([7, 8]), $a([$1.size - 8, $1.size - 9])]), $a([$a([8, 8]), $a([$1.size - 9, $1.size - 9])]), $a([$a([8, 7]), $a([$1.size - 9, $1.size - 8])]), $a([$a([8, 6]), $a([$1.size - 9, $1.size - 7])]), $a([$a([8, 5]), $a([$1.size - 9, $1.size - 6])]), $a([$a([8, 4]), $a([$1.size - 9, $1.size - 5])]), $a([$a([8, 3]), $a([$1.size - 9, $1.size - 4])]), $a([$a([8, 2]), $a([$1.size - 9, $1.size - 3])]), $a([$a([8, 1]), $a([$1.size - 9, $1.size - 2])]), $a([$a([8, 0]), $a([$1.size - 9, $1.size - 1])]), $a([$a([$1.size - 9, 0]), $a([8, $1.size - 1])]), $a([$a([$1.size - 9, 1]), $a([8, $1.size - 2])]), $a([$a([$1.size - 9, 2]), $a([8, $1.size - 3])]), $a([$a([$1.size - 9, 3]), $a([8, $1.size - 4])]), $a([$a([$1.size - 9, 4]), $a([8, $1.size - 5])]), $a([$a([$1.size - 9, 5]), $a([8, $1.size - 6])]), $a([$a([$1.size - 9, 6]), $a([8, $1.size - 7])]), $a([$a([$1.size - 9, 7]), $a([8, $1.size - 8])]), $a([$a([$1.size - 9, 8]), $a([8, $1.size - 9])]), $a([$a([$1.size - 8, 8]), $a([7, $1.size - 9])]), $a([$a([$1.size - 7, 8]), $a([6, $1.size - 9])]), $a([$a([$1.size - 6, 8]), $a([5, $1.size - 9])]), $a([$a([$1.size - 5, 8]), $a([4, $1.size - 9])]), $a([$a([$1.size - 4, 8]), $a([3, $1.size - 9])]), $a([$a([$1.size - 3, 8]), $a([2, $1.size - 9])]), $a([$a([$1.size - 2, 8]), $a([1, $1.size - 9])]), $a([$a([$1.size - 1, 8]), $a([0, $1.size - 9])])]); /*21812*/
		var _UM = $1.functionmap; /*21813*/
		for (var _UN = 0, _UO = _UM.length; _UN < _UO; _UN++) {
			/*21815*/
			$forall($get(_UM, _UN), function() {
				/*21814*/
				$forall($k[--$j]); /*21814*/
				$1.qmv(); /*21814*/
				$put($1.pixs, $k[--$j], 0); /*21814*/
			}); /*21814*/
		} /*21814*/
		var _UZ = $a([function() {
			$j -= 2; /*21818*/
			$k[$j++] = 1; /*21818*/
		}, function() {
			var _UT = $k[--$j]; /*21819*/
			var _UU = $k[--$j]; /*21819*/
			$k[$j++] = (_UU + _UT) % 2; /*21819*/
		}, function() {
			var _UV = $k[--$j]; /*21820*/
			var _UW = $k[--$j]; /*21820*/
			$k[$j++] = (((_UV + _UW) % 3) + (_UW % 3)) % 2; /*21820*/
		}, function() {
			var _UX = $k[--$j]; /*21821*/
			var _UY = $k[--$j]; /*21821*/
			$k[$j++] = ((_UY % _UX) + ((_UX % _UY) + ((_UX % 3) + (_UY % 3)))) % 2; /*21822*/
		}]); /*21822*/
		$1.maskfuncs = _UZ; /*21823*/
		if ($1.mask != -1) { //no-else/*21827*/
			$1.maskfuncs = $a([$get($1.maskfuncs, $1.mask - 1)]); /*21825*/
			$1.bestmaskval = $1.mask - 1; /*21826*/
		} /*21826*/
		$1.masks = $a($1.maskfuncs.length); /*21828*/
		for (var _Uk = 0, _Uj = $1.masks.length - 1; _Uk <= _Uj; _Uk += 1) {
			/*21842*/
			$1.m = _Uk; /*21830*/
			$1.mask = $a($1.size * $1.size); /*21831*/
			for (var _Uq = 0, _Up = $1.size - 1; _Uq <= _Up; _Uq += 1) {
				/*21840*/
				$1.j = _Uq; /*21833*/
				for (var _Ut = 0, _Us = $1.size - 1; _Ut <= _Us; _Ut += 1) {
					/*21839*/
					$1.i = _Ut; /*21835*/
					$k[$j++] = $1.i + 1; /*21836*/
					$k[$j++] = $1.j + 1; /*21836*/
					if ($get($1.maskfuncs, $1.m)() === true) {
						break;
					} /*21836*/
					var _Uz = $k[--$j]; /*21836*/
					$k[$j++] = _Uz == 0; /*21837*/
					$k[$j++] = $1.pixs; /*21837*/
					$k[$j++] = $1.i; /*21837*/
					$k[$j++] = $1.j; /*21837*/
					$1.qmv(); /*21837*/
					var _V3 = $k[--$j]; /*21837*/
					var _V5 = $get($k[--$j], _V3); /*21837*/
					var _V7 = ($k[--$j] && (_V5 == -1)) ? 1 : 0; /*21837*/
					$k[$j++] = _V7; /*21838*/
					$k[$j++] = $1.mask; /*21838*/
					$k[$j++] = $1.i; /*21838*/
					$k[$j++] = $1.j; /*21838*/
					$1.qmv(); /*21838*/
					var _VB = $k[--$j]; /*21838*/
					var _VC = $k[--$j]; /*21838*/
					$put(_VC, _VB, $k[--$j]); /*21838*/
				} /*21838*/
			} /*21838*/
			$put($1.masks, $1.m, $1.mask); /*21841*/
		} /*21841*/
		$1.posx = 0; /*21845*/
		$1.posy = 0; /*21846*/
		$1.num = 0; /*21847*/
		for (;;) {
			/*21857*/
			if ($1.posy == $1.size) { //no-else/*21849*/
				break; /*21849*/
			} /*21849*/
			$k[$j++] = $1.pixs; /*21850*/
			$k[$j++] = $1.posx; /*21850*/
			$k[$j++] = $1.posy; /*21850*/
			$1.qmv(); /*21850*/
			var _VM = $k[--$j]; /*21850*/
			if ($get($k[--$j], _VM) == -1) { //no-else/*21854*/
				var _VR = $get($1.cws, ~~($1.num / 8)); /*21851*/
				var _VT = -(7 - ($1.num % 8)); /*21851*/
				$k[$j++] = ((_VT < 0 ? _VR >>> -_VT : _VR << _VT)) & 1; /*21852*/
				$k[$j++] = $1.pixs; /*21852*/
				$k[$j++] = $1.posx; /*21852*/
				$k[$j++] = $1.posy; /*21852*/
				$1.qmv(); /*21852*/
				var _VX = $k[--$j]; /*21852*/
				var _VY = $k[--$j]; /*21852*/
				$put(_VY, _VX, $k[--$j]); /*21852*/
				$1.num = $1.num + 1; /*21853*/
			} /*21853*/
			$1.posx = $1.posx + 1; /*21855*/
			if ($1.posx == $1.size) { //no-else/*21856*/
				$1.posx = 0; /*21856*/
				$1.posy = $1.posy + 1; /*21856*/
			} /*21856*/
		} /*21856*/
		$1.evalfulln1n3 = function() {
			$1.scrle = $k[--$j]; /*21861*/
			$k[$j++] = 'scr1'; /*21863*/
			$k[$j++] = 0; /*21863*/
			$forall($1.scrle, function() {
				/*21863*/
				var _Vh = $k[--$j]; /*21863*/
				$k[$j++] = _Vh; /*21863*/
				if (_Vh >= 3) { //no-else/*21863*/
					var _Vi = $k[--$j]; /*21863*/
					var _Vk = $k[--$j] + (_Vi * 4); /*21863*/
					$k[$j++] = _Vk; /*21863*/
					$k[$j++] = _Vk; /*21863*/
				} /*21863*/
				$j--; /*21863*/
			}); /*21863*/
			var _Vl = $k[--$j]; /*21863*/
			$1[$k[--$j]] = _Vl; /*21863*/
			$1.scr3 = 0; /*21864*/
			for (var _Vp = 5, _Vo = $1.scrle.length - 1; _Vp <= _Vo; _Vp += 2) {
				/*21880*/
				$1.j = _Vp; /*21867*/
				if (($get($1.scrle, $1.j) % 3) == 0) { //no-else/*21879*/
					$1.fact = ~~($get($1.scrle, $1.j) / 3); /*21869*/
					$forall($geti($1.scrle, $1.j - 4, 4), function() {
						/*21870*/
						var _W0 = $k[--$j]; /*21870*/
						$k[$j++] = _W0 == $1.fact; /*21870*/
					}); /*21870*/
					var _W1 = $k[--$j]; /*21870*/
					var _W2 = $k[--$j]; /*21870*/
					var _W3 = $k[--$j]; /*21870*/
					if ($k[--$j] && (_W3 && (_W2 && _W1))) { //no-else/*21878*/
						if (($1.j == 5) || (($1.j + 2) >= $1.scrle.length)) {
							/*21875*/
							$1.scr3 = $1.scr3 + 50; /*21872*/
						} else {
							/*21875*/
							if (($get($1.scrle, $1.j - 5) >= 3) || ($get($1.scrle, $1.j + 1) >= 3)) { //no-else/*21876*/
								$1.scr3 = $1.scr3 + 50; /*21875*/
							} /*21875*/
						} /*21875*/
					} /*21875*/
				} /*21875*/
			} /*21875*/
			for (var _WI = 1, _WH = $1.scrle.length - 5; _WI <= _WH; _WI += 2) {
				/*21896*/
				$1.j = _WI; /*21883*/
				if (($get($1.scrle, $1.j) % 3) == 0) { //no-else/*21895*/
					$1.fact = ~~($get($1.scrle, $1.j) / 3); /*21885*/
					$forall($geti($1.scrle, $1.j + 1, 4), function() {
						/*21886*/
						var _WT = $k[--$j]; /*21886*/
						$k[$j++] = _WT == $1.fact; /*21886*/
					}); /*21886*/
					var _WU = $k[--$j]; /*21886*/
					var _WV = $k[--$j]; /*21886*/
					var _WW = $k[--$j]; /*21886*/
					if ($k[--$j] && (_WW && (_WV && _WU))) { //no-else/*21894*/
						if (($1.j == 1) || (($1.j + 6) >= $1.scrle.length)) {
							/*21891*/
							$1.scr3 = $1.scr3 + 50; /*21888*/
						} else {
							/*21891*/
							if (($get($1.scrle, $1.j - 1) >= 3) || ($get($1.scrle, $1.j + 5) >= 3)) { //no-else/*21892*/
								$1.scr3 = $1.scr3 + 50; /*21891*/
							} /*21891*/
						} /*21891*/
					} /*21891*/
				} /*21891*/
			} /*21891*/
			$k[$j++] = $1.scr1; /*21897*/
			$k[$j++] = $1.scr3; /*21897*/
		}; /*21898*/
		$1.evalfull = function() {
			$1.sym = $k[--$j]; /*21902*/
			$1.n1 = 0; /*21904*/
			$1.n3 = 0; /*21904*/
			$1.rle = $a($1.size + 1); /*21905*/
			$1.lastpairs = $a($1.size); /*21906*/
			$1.thispairs = $a($1.size); /*21907*/
			$1.sizeadd1 = $1.size + 1; /*21908*/
			for (var _Wv = 0, _Wu = $1.size - 1; _Wv <= _Wu; _Wv += 1) {
				/*21933*/
				$1.i = _Wv; /*21910*/
				$k[$j++] = Infinity; /*21913*/
				var _Wx = $1.size; /*21914*/
				$k[$j++] = 0; /*21916*/
				$k[$j++] = 0; /*21916*/
				for (var _Wz = $1.i, _X0 = _Wx, _Wy = (_Wx * _Wx) - 1; _X0 < 0 ? _Wz >= _Wy : _Wz <= _Wy; _Wz += _X0) {
					/*21916*/
					var _X2 = $get($1.sym, _Wz); /*21915*/
					var _X3 = $k[--$j]; /*21915*/
					$k[$j++] = _X2; /*21915*/
					if ($eq(_X3, _X2)) {
						/*21915*/
						var _X4 = $k[--$j]; /*21915*/
						var _X5 = $k[--$j]; /*21915*/
						$k[$j++] = _X5 + 1; /*21915*/
						$k[$j++] = _X4; /*21915*/
					} else {
						/*21915*/
						var _X6 = $k[--$j]; /*21915*/
						$k[$j++] = 1; /*21915*/
						$k[$j++] = _X6; /*21915*/
					} /*21915*/
				} /*21915*/
				$j--; /*21917*/
				var _X8 = $counttomark() + 2; /*21918*/
				$astore($geti($1.rle, 0, _X8 - 2)); /*21918*/
				$1.evalfulln1n3(); /*21919*/
				$1.n3 = $k[--$j] + $1.n3; /*21919*/
				$1.n1 = $k[--$j] + $1.n1; /*21919*/
				$j--; /*21920*/
				$1.symrow = $geti($1.sym, $1.i * $1.size, $1.size); /*21923*/
				$k[$j++] = Infinity; /*21924*/
				$k[$j++] = 0; /*21927*/
				$k[$j++] = 0; /*21927*/
				$forall($1.symrow, function() {
					/*21927*/
					var _XK = $k[--$j]; /*21926*/
					var _XL = $k[--$j]; /*21926*/
					$k[$j++] = _XK; /*21926*/
					if ($eq(_XL, _XK)) {
						/*21926*/
						var _XM = $k[--$j]; /*21926*/
						var _XN = $k[--$j]; /*21926*/
						$k[$j++] = _XN + 1; /*21926*/
						$k[$j++] = _XM; /*21926*/
					} else {
						/*21926*/
						var _XO = $k[--$j]; /*21926*/
						$k[$j++] = 1; /*21926*/
						$k[$j++] = _XO; /*21926*/
					} /*21926*/
				}); /*21926*/
				$j--; /*21928*/
				var _XQ = $counttomark() + 2; /*21929*/
				$astore($geti($1.rle, 0, _XQ - 2)); /*21929*/
				$1.evalfulln1n3(); /*21930*/
				$1.n3 = $k[--$j] + $1.n3; /*21930*/
				$1.n1 = $k[--$j] + $1.n1; /*21930*/
				$j--; /*21931*/
			} /*21931*/
			$k[$j++] = $1.n1 + $1.n3; /*21935*/
		}; /*21936*/
		$1.bestscore = 999999999; /*21939*/
		for (var _Xa = 0, _XZ = $1.masks.length - 1; _Xa <= _XZ; _Xa += 1) {
			/*21957*/
			$1.m = _Xa; /*21941*/
			$1.masksym = $a($1.size * $1.size); /*21942*/
			for (var _Xh = 0, _Xg = ($1.size * $1.size) - 1; _Xh <= _Xg; _Xh += 1) {
				/*21946*/
				$1.i = _Xh; /*21944*/
				$put($1.masksym, $1.i, $xo($get($1.pixs, $1.i), $get($get($1.masks, $1.m), $1.i))); /*21945*/
			} /*21945*/
			if ($1.masks.length != 1) {
				/*21955*/
				$k[$j++] = $1.masksym; /*21948*/
				$1.evalfull(); /*21948*/
				$1.score = $k[--$j]; /*21948*/
				if ($1.score < $1.bestscore) { //no-else/*21953*/
					$1.bestsym = $1.masksym; /*21950*/
					$1.bestmaskval = $1.m; /*21951*/
					$1.bestscore = $1.score; /*21952*/
				} /*21952*/
			} else {
				/*21955*/
				$1.bestsym = $1.masksym; /*21955*/
			} /*21955*/
		} /*21955*/
		$1.pixs = $1.bestsym; /*21958*/
		$1.funval = (((((~~(($1.size - 21) / 2)) + 20) * 4) + $1.eclval) * 4) + $1.bestmaskval; /*21961*/
		$k[$j++] = $a([($1.funval & 3840) >>> 8, ($1.funval & 240) >>> 4, $1.funval & 15]); /*21965*/
		$k[$j++] = 4; /*21965*/
		$k[$j++] = 16; /*21965*/
		$k[$j++] = 19; /*21965*/
		$1.rscodes(); /*21965*/
		$1.funvals = $k[--$j]; /*21965*/
		$k[$j++] = Infinity; /*21970*/
		$forall($1.funvals, function() {
			/*21969*/
			$k[$j++] = 4; /*21968*/
			$1.tobin(); /*21968*/
			$forall($k[--$j], function() {
				/*21968*/
				var _YC = $k[--$j]; /*21968*/
				$k[$j++] = _YC - 48; /*21968*/
			}); /*21968*/
		}); /*21968*/
		$k[$j++] = 0; /*21970*/
		$k[$j++] = 1; /*21970*/
		$k[$j++] = 0; /*21970*/
		$k[$j++] = 1; /*21970*/
		$k[$j++] = 0; /*21970*/
		$k[$j++] = 1; /*21970*/
		$1.funbits = $a(); /*21970*/
		for (var _YG = 0, _YF = $1.functionmap.length - 1; _YG <= _YF; _YG += 1) {
			/*21977*/
			$1.i = _YG; /*21973*/
			$forall($get($1.functionmap, $1.i), function() {
				/*21976*/
				var _YL = $k[--$j]; /*21975*/
				$k[$j++] = $1.pixs; /*21975*/
				$aload(_YL); /*21975*/
				$1.qmv(); /*21975*/
				var _YP = $k[--$j]; /*21975*/
				$put($k[--$j], _YP, $get($1.funbits, $1.i)); /*21975*/
			}); /*21975*/
		} /*21975*/
		var _YX = new Map([
			["ren", $0.renmatrix],
			["pixs", $1.pixs],
			["pixx", $1.size],
			["pixy", $1.size],
			["height", ($1.size * 2) / 72],
			["width", ($1.size * 2) / 72],
			["opt", $1.options]
		]); /*21987*/
		$k[$j++] = _YX; /*21990*/
		if (!$1.dontdraw) { //no-else/*21990*/
			$0.renmatrix(); /*21990*/
		} /*21990*/
	};
	$0.dotcode = function() {
		var $1 = {}; /*22019*/
		$1.options = $k[--$j]; /*22021*/
		$1.barcode = $k[--$j]; /*22022*/
		$1.dontdraw = false; /*22024*/
		$1.rows = -1; /*22025*/
		$1.columns = -1; /*22026*/
		$1.ratio = -1; /*22027*/
		$1.parse = false; /*22028*/
		$1.parsefnc = false; /*22029*/
		$1.raw = false; /*22030*/
		$1.fast = false; /*22031*/
		$1.mask = -1; /*22032*/
		$forall($1.options, function() {
			/*22043*/
			var _3 = $k[--$j]; /*22043*/
			$1[$k[--$j]] = _3; /*22043*/
		}); /*22043*/
		$1.rows = ~~$1.rows; /*22045*/
		$1.columns = ~~$1.columns; /*22046*/
		$1.ratio = +$1.ratio; /*22047*/
		$1.mask = ~~$1.mask; /*22048*/
		if ((($1.ratio == -1) && ($1.rows == -1)) && ($1.columns == -1)) { //no-else/*22053*/
			$1.ratio = 3 / 2; /*22052*/
		} /*22052*/
		$1.barlen = $1.barcode.length; /*22076*/
		$1.laa = -1; /*22079*/
		$1.lab = -2; /*22079*/
		$1.lac = -3; /*22079*/
		$1.bin = -4; /*22079*/
		$1.sfa = -5; /*22080*/
		$1.sfb = -6; /*22080*/
		$1.sb2 = -7; /*22080*/
		$1.sb3 = -8; /*22080*/
		$1.sb4 = -9; /*22081*/
		$1.sb5 = -10; /*22081*/
		$1.sb6 = -11; /*22081*/
		$1.sfc = -12; /*22081*/
		$1.sc2 = -13; /*22082*/
		$1.sc3 = -14; /*22082*/
		$1.sc4 = -15; /*22082*/
		$1.sc5 = -16; /*22082*/
		$1.sc6 = -17; /*22083*/
		$1.sc7 = -18; /*22083*/
		$1.bsa = -19; /*22083*/
		$1.bsb = -20; /*22083*/
		$1.tma = -21; /*22084*/
		$1.tmb = -22; /*22084*/
		$1.tmc = -23; /*22084*/
		$1.tms = -24; /*22084*/
		$1.fn1 = -25; /*22085*/
		$1.fn2 = -26; /*22085*/
		$1.fn3 = -27; /*22085*/
		$1.crl = -28; /*22085*/
		$1.aim = -29; /*22086*/
		$1.m05 = -30; /*22086*/
		$1.m06 = -31; /*22086*/
		$1.m12 = -32; /*22086*/
		$1.mac = -33; /*22087*/
		$1.charmaps = $a([$a([32, 32, "00"]), $a(["!", "!", "01"]), $a(["\"", "\"", "02"]), $a(["#", "#", "03"]), $a(["$", "$", "04"]), $a(["%", "%", "05"]), $a(["&", "&", "06"]), $a(["'", "'", "07"]), $a([40, 40, "08"]), $a([41, 41, "09"]), $a(["*", "*", "10"]), $a(["+", "+", "11"]), $a([",", ",", "12"]), $a(["-", "-", "13"]), $a([".", ".", "14"]), $a(["/", "/", "15"]), $a(["0", "0", "16"]), $a(["1", "1", "17"]), $a(["2", "2", "18"]), $a(["3", "3", "19"]), $a(["4", "4", "20"]), $a(["5", "5", "21"]), $a(["6", "6", "22"]), $a(["7", "7", "23"]), $a(["8", "8", "24"]), $a(["9", "9", "25"]), $a([":", ":", "26"]), $a([";", ";", "27"]), $a(["<", "<", "28"]), $a(["=", "=", "29"]), $a([">", ">", "30"]), $a(["?", "?", "31"]), $a(["@", "@", "32"]), $a(["A", "A", "33"]), $a(["B", "B", "34"]), $a(["C", "C", "35"]), $a(["D", "D", "36"]), $a(["E", "E", "37"]), $a(["F", "F", "38"]), $a(["G", "G", "39"]), $a(["H", "H", "40"]), $a(["I", "I", "41"]), $a(["J", "J", "42"]), $a(["K", "K", "43"]), $a(["L", "L", "44"]), $a(["M", "M", "45"]), $a(["N", "N", "46"]), $a(["O", "O", "47"]), $a(["P", "P", "48"]), $a(["Q", "Q", "49"]), $a(["R", "R", "50"]), $a(["S", "S", "51"]), $a(["T", "T", "52"]), $a(["U", "U", "53"]), $a(["V", "V", "54"]), $a(["W", "W", "55"]), $a(["X", "X", "56"]), $a(["Y", "Y", "57"]), $a(["Z", "Z", "58"]), $a(["[", "[", "59"]), $a([92, 92, "60"]), $a(["]", "]", "61"]), $a(["^", "^", "62"]), $a(["_", "_", "63"]), $a([0, "`", "64"]), $a([1, "a", "65"]), $a([2, "b", "66"]), $a([3, "c", "67"]), $a([4, "d", "68"]), $a([5, "e", "69"]), $a([6, "f", "70"]), $a([7, "g", "71"]), $a([8, "h", "72"]), $a([9, "i", "73"]), $a([10, "j", "74"]), $a([11, "k", "75"]), $a([12, "l", "76"]), $a([13, "m", "77"]), $a([14, "n", "78"]), $a([15, "o", "79"]), $a([16, "p", "80"]), $a([17, "q", "81"]), $a([18, "r", "82"]), $a([19, "s", "83"]), $a([20, "t", "84"]), $a([21, "u", "85"]), $a([22, "v", "86"]), $a([23, "w", "87"]), $a([24, "x", "88"]), $a([25, "y", "89"]), $a([26, "z", "90"]), $a([27, "{", "91"]), $a([28, "|", "92"]), $a([29, "}", "93"]), $a([30, "~", "94"]), $a([31, 127, "95"]), $a([$1.sfb, $1.crl, "96"]), $a([$1.sb2, 9, "97"]), $a([$1.sb3, 28, "98"]), $a([$1.sb4, 29, "99"]), $a([$1.sb5, 30, $1.aim]), $a([$1.sb6, $1.sfa, $1.laa]), $a([$1.lab, $1.laa, $1.sfb]), $a([$1.sc2, $1.sc2, $1.sb2]), $a([$1.sc3, $1.sc3, $1.sb3]), $a([$1.sc4, $1.sc4, $1.sb4]), $a([$1.lac, $1.lac, $1.lab]), $a([$1.fn1, $1.fn1, $1.fn1]), $a([$1.fn2, $1.fn2, $1.fn2]), $a([$1.fn3, $1.fn3, $1.fn3]), $a([$1.bsa, $1.bsa, $1.bsa]), $a([$1.bsb, $1.bsb, $1.bsb]), $a([$1.bin, $1.bin, $1.bin])]); /*22130*/
		$1.charvals = $a([new Map, new Map, new Map]); /*22133*/
		for (var _2n = 0, _2m = $1.charmaps.length - 1; _2n <= _2m; _2n += 1) {
			/*22142*/
			$1.i = _2n; /*22135*/
			$1.encs = $get($1.charmaps, $1.i); /*22136*/
			for (var _2r = 0; _2r <= 2; _2r += 1) {
				/*22141*/
				$1.j = _2r; /*22138*/
				var _2u = $get($1.encs, $1.j); /*22139*/
				$k[$j++] = _2u; /*22139*/
				if ($eq($type(_2u), 'stringtype')) { //no-else/*22139*/
					var _2x = $get($k[--$j], 0); /*22139*/
					$k[$j++] = _2x; /*22139*/
				} /*22139*/
				$put($get($1.charvals, $1.j), $k[--$j], $1.i); /*22140*/
			} /*22140*/
		} /*22140*/
		$1.Avals = $get($1.charvals, 0); /*22143*/
		$1.Bvals = $get($1.charvals, 1); /*22144*/
		$put($1.Bvals, $1.m05, 97); /*22145*/
		$put($1.Bvals, $1.m06, 98); /*22146*/
		$put($1.Bvals, $1.m12, 99); /*22147*/
		$put($1.Bvals, $1.mac, 100); /*22148*/
		$1.Cvals = $get($1.charvals, 2); /*22149*/
		$k[$j++] = Infinity; /*22151*/
		var _3R = $a([$1.sc2, $1.sc3, $1.sc4, $1.sc5, $1.sc6, $1.sc7, $1.tma, $1.tmb, $1.tmc, $1.tms]); /*22151*/
		$k[$j++] = 102; /*22151*/
		for (var _3S = 0, _3T = _3R.length; _3S < _3T; _3S++) {
			/*22151*/
			var _3W = $k[--$j] + 1; /*22151*/
			$k[$j++] = $get(_3R, _3S); /*22151*/
			$k[$j++] = _3W; /*22151*/
			$k[$j++] = _3W; /*22151*/
		} /*22151*/
		$j--; /*22151*/
		$1.BINvals = $d(); /*22152*/
		var _3a = new Map([
			["FNC1", $1.fn1],
			["FNC3", $1.fn3]
		]); /*22157*/
		$1.fncvals = _3a; /*22158*/
		$1.msg = $a($1.barlen); /*22159*/
		$1.i = 0; /*22160*/
		$1.j = 0; /*22160*/
		$1.numecis = 0; /*22160*/
		for (;;) {
			/*22204*/
			if ($1.i == $1.barlen) { //no-else/*22161*/
				break; /*22161*/
			} /*22161*/
			$1.char = $get($1.barcode, $1.i); /*22162*/
			$1.i = $1.i + 1; /*22163*/
			if (($1.parsefnc && ($1.char == 94)) && ($1.i < $1.barlen)) { //no-else/*22201*/
				if ($get($1.barcode, $1.i) != 94) {
					/*22199*/
					if ($1.i >= ($1.barlen - 3)) { //no-else/*22168*/
						$k[$j++] = 'bwipp.truncatedFNC'; /*22167*/
						$k[$j++] = "Function character truncated"; /*22167*/
						$0.raiseerror(); /*22167*/
					} /*22167*/
					var _3u = $geti($1.barcode, $1.i, 4); /*22169*/
					$k[$j++] = _3u; /*22196*/
					if ($ne($geti(_3u, 0, 3), "ECI")) {
						/*22195*/
						var _3w = $k[--$j]; /*22171*/
						var _3y = $get($1.fncvals, _3w) !== undefined; /*22171*/
						$k[$j++] = _3w; /*22175*/
						if (!_3y) { //no-else/*22175*/
							var _3z = $k[--$j]; /*22172*/
							var _40 = $s(_3z.length + 28); /*22172*/
							$puti(_40, 28, _3z); /*22172*/
							$puti(_40, 0, "Unknown function character: "); /*22173*/
							$k[$j++] = 'bwipp.unknownFNC'; /*22174*/
							$k[$j++] = _40; /*22174*/
							$0.raiseerror(); /*22174*/
						} /*22174*/
						var _43 = $get($1.fncvals, $k[--$j]); /*22176*/
						$1.i = $1.i + 4; /*22177*/
						$k[$j++] = _43; /*22177*/
					} else {
						/*22195*/
						$j--; /*22179*/
						if ($1.i >= ($1.barlen - 8)) { //no-else/*22182*/
							$k[$j++] = 'bwipp.truncatedECI'; /*22181*/
							$k[$j++] = "ECI truncated"; /*22181*/
							$0.raiseerror(); /*22181*/
						} /*22181*/
						var _49 = $geti($1.barcode, $1.i + 3, 6); /*22183*/
						$k[$j++] = _49; /*22188*/
						$forall(_49, function() {
							/*22188*/
							var _4A = $k[--$j]; /*22185*/
							if ((_4A < 48) || (_4A > 57)) { //no-else/*22187*/
								$k[$j++] = 'bwipp.invalidECI'; /*22186*/
								$k[$j++] = "ECI must be 000000 to 811799"; /*22186*/
								$0.raiseerror(); /*22186*/
							} /*22186*/
						}); /*22186*/
						var _4B = $k[--$j]; /*22189*/
						$k[$j++] = 0; /*22189*/
						$forall(_4B, function() {
							/*22189*/
							var _4C = $k[--$j]; /*22189*/
							var _4D = $k[--$j]; /*22189*/
							$k[$j++] = (_4D - (_4C - 48)) * 10; /*22189*/
						}); /*22189*/
						var _4F = (~~($k[--$j] / 10)) - 1000000; /*22190*/
						$k[$j++] = _4F; /*22193*/
						if (_4F < -1811799) { //no-else/*22193*/
							$j--; /*22191*/
							$k[$j++] = 'bwipp.invalidECI'; /*22192*/
							$k[$j++] = "ECI must be 000000 to 811799"; /*22192*/
							$0.raiseerror(); /*22192*/
						} /*22192*/
						$1.numecis = $1.numecis + 1; /*22194*/
						$1.i = $1.i + 9; /*22195*/
					} /*22195*/
					$1.char = $k[--$j]; /*22197*/
				} else {
					/*22199*/
					$1.i = $1.i + 1; /*22199*/
				} /*22199*/
			} /*22199*/
			$put($1.msg, $1.j, $1.char); /*22202*/
			$1.j = $1.j + 1; /*22203*/
		} /*22203*/
		$1.msg = $geti($1.msg, 0, $1.j); /*22205*/
		$1.msgtmp = $a($1.msg.length + ($1.numecis * 6)); /*22208*/
		$1.j = 0; /*22209*/
		for (var _4W = 0, _4V = $1.msg.length - 1; _4W <= _4V; _4W += 1) {
			/*22220*/
			var _4Y = $get($1.msg, _4W); /*22211*/
			$k[$j++] = _4Y; /*22219*/
			if (_4Y <= -1000000) {
				/*22218*/
				$forall($geti($cvrs($s(7), -$k[--$j], 10), 1, 6)); /*22212*/
				$astore($a(6)); /*22212*/
				$puti($1.msgtmp, $1.j + 1, $k[--$j]); /*22213*/
				$put($1.msgtmp, $1.j, $1.fn2); /*22214*/
				$1.j = $1.j + 7; /*22215*/
			} else {
				/*22218*/
				$put($1.msgtmp, $1.j, $k[--$j]); /*22217*/
				$1.j = $1.j + 1; /*22218*/
			} /*22218*/
		} /*22218*/
		$1.msg = $1.msgtmp; /*22221*/
		$1.msglen = $1.msg.length; /*22222*/
		$k[$j++] = Infinity; /*22225*/
		for (var _4s = 0, _4t = $1.msglen + 1; _4s < _4t; _4s++) {
			/*22225*/
			$k[$j++] = 0; /*22225*/
		} /*22225*/
		$1.nDigits = $a(); /*22225*/
		$k[$j++] = Infinity; /*22226*/
		for (var _4w = 0, _4x = $1.msglen + 1; _4w < _4x; _4w++) {
			/*22226*/
			$k[$j++] = false; /*22226*/
		} /*22226*/
		$1.SeventeenTen = $a(); /*22226*/
		$k[$j++] = Infinity; /*22227*/
		for (var _50 = 0, _51 = $1.msglen + 1; _50 < _51; _50++) {
			/*22227*/
			$k[$j++] = false; /*22227*/
		} /*22227*/
		$1.ECI = $a(); /*22227*/
		$k[$j++] = Infinity; /*22228*/
		for (var _54 = 0, _55 = $1.msglen + 1; _54 < _55; _54++) {
			/*22228*/
			$k[$j++] = false; /*22228*/
		} /*22228*/
		$1.DatumA = $a(); /*22228*/
		$k[$j++] = Infinity; /*22229*/
		for (var _58 = 0, _59 = $1.msglen + 1; _58 < _59; _58++) {
			/*22229*/
			$k[$j++] = false; /*22229*/
		} /*22229*/
		$1.DatumB = $a(); /*22229*/
		$k[$j++] = Infinity; /*22230*/
		for (var _5C = 0, _5D = $1.msglen + 1; _5C < _5D; _5C++) {
			/*22230*/
			$k[$j++] = false; /*22230*/
		} /*22230*/
		$1.DatumC = $a(); /*22230*/
		$k[$j++] = Infinity; /*22231*/
		for (var _5G = 0, _5H = $1.msglen + 8; _5G < _5H; _5G++) {
			/*22231*/
			$k[$j++] = false; /*22231*/
		} /*22231*/
		$1.Binary = $a(); /*22231*/
		$k[$j++] = Infinity; /*22232*/
		for (var _5K = 0, _5L = $1.msglen + 1; _5K < _5L; _5K++) {
			/*22232*/
			$k[$j++] = 0; /*22232*/
		} /*22232*/
		$1.AheadC = $a(); /*22232*/
		$k[$j++] = Infinity; /*22233*/
		for (var _5O = 0, _5P = $1.msglen + 1; _5O < _5P; _5O++) {
			/*22233*/
			$k[$j++] = 0; /*22233*/
		} /*22233*/
		$1.TryC = $a(); /*22233*/
		$k[$j++] = Infinity; /*22234*/
		for (var _5S = 0, _5T = $1.msglen + 1; _5S < _5T; _5S++) {
			/*22234*/
			$k[$j++] = 0; /*22234*/
		} /*22234*/
		$1.AheadA = $a(); /*22234*/
		$k[$j++] = Infinity; /*22235*/
		for (var _5W = 0, _5X = $1.msglen + 1; _5W < _5X; _5W++) {
			/*22235*/
			$k[$j++] = 0; /*22235*/
		} /*22235*/
		$1.AheadB = $a(); /*22235*/
		$k[$j++] = Infinity; /*22236*/
		for (var _5a = 0, _5b = $1.msglen + 1; _5a < _5b; _5a++) {
			/*22236*/
			$k[$j++] = 0; /*22236*/
		} /*22236*/
		$1.UntilEndSeg = $a(); /*22236*/
		for (var _5e = $1.msglen - 1; _5e >= 0; _5e -= 1) {
			/*22291*/
			$1.i = _5e; /*22238*/
			$1.barchar = $get($1.msg, $1.i); /*22239*/
			if (($1.barchar >= 48) && ($1.barchar <= 57)) { //no-else/*22242*/
				$put($1.nDigits, $1.i, $get($1.nDigits, $1.i + 1) + 1); /*22241*/
			} /*22241*/
			var _5r = $get($1.Avals, $1.barchar) !== undefined; /*22243*/
			if (_5r) { //no-else/*22243*/
				$put($1.DatumA, $1.i, true); /*22243*/
			} /*22243*/
			var _5w = $get($1.Bvals, $1.barchar) !== undefined; /*22244*/
			if (_5w) { //no-else/*22244*/
				$put($1.DatumB, $1.i, true); /*22244*/
			} /*22244*/
			$1.CRLF = false; /*22245*/
			if (($1.barchar == 13) && ($1.i < ($1.msglen - 1))) { //no-else/*22248*/
				if ($get($1.msg, $1.i + 1) == 10) { //no-else/*22247*/
					$1.CRLF = true; /*22247*/
				} /*22247*/
			} /*22247*/
			if ($1.CRLF) { //no-else/*22249*/
				$put($1.DatumB, $1.i, true); /*22249*/
			} /*22249*/
			if ($get($1.nDigits, $1.i) >= 2) { //no-else/*22250*/
				$put($1.DatumC, $1.i, true); /*22250*/
			} /*22250*/
			if ($1.barchar < 0) { //no-else/*22251*/
				$put($1.DatumC, $1.i, true); /*22251*/
			} /*22251*/
			if ($1.barchar >= 128) { //no-else/*22252*/
				$put($1.Binary, $1.i, true); /*22252*/
			} /*22252*/
			if ($get($1.nDigits, $1.i) >= 10) { //no-else/*22266*/
				$k[$j++] = Infinity; /*22254*/
				$aload($geti($1.msg, $1.i, 10)); /*22255*/
				for (var _6P = 0, _6Q = 1; _6P < _6Q; _6P++) {
					/*22263*/
					if ($k[--$j] != 48) { //no-else/*22257*/
						$k[$j++] = false; /*22257*/
						break; /*22257*/
					} /*22257*/
					if ($k[--$j] != 49) { //no-else/*22258*/
						$k[$j++] = false; /*22258*/
						break; /*22258*/
					} /*22258*/
					$j -= 6; /*22259*/
					if ($k[--$j] != 55) { //no-else/*22260*/
						$k[$j++] = false; /*22260*/
						break; /*22260*/
					} /*22260*/
					if ($k[--$j] != 49) { //no-else/*22261*/
						$k[$j++] = false; /*22261*/
						break; /*22261*/
					} /*22261*/
					$k[$j++] = true; /*22262*/
				} /*22262*/
				$put($1.SeventeenTen, $1.i, $k[--$j]); /*22264*/
				$cleartomark(); /*22265*/
			} /*22265*/
			if (($get($1.nDigits, $1.i + 1) >= 6) && ($get($1.msg, $1.i) == $1.fn2)) { //no-else/*22269*/
				$put($1.ECI, $1.i, true); /*22268*/
			} /*22268*/
			if (($1.barchar < 0) && ($1.barchar != $1.fn3)) {
				/*22276*/
				$put($1.AheadC, $1.i, $get($1.AheadC, $1.i + 1) + 1); /*22271*/
			} else {
				/*22276*/
				if ($get($1.nDigits, $1.i) <= 1) {
					/*22276*/
					$put($1.AheadC, $1.i, 0); /*22274*/
				} else {
					/*22276*/
					$put($1.AheadC, $1.i, $get($1.AheadC, $1.i + 2) + 1); /*22276*/
				} /*22276*/
			} /*22276*/
			if (($get($1.nDigits, $1.i) > 0) && $gt($get($1.AheadC, $1.i), $get($1.AheadC, $1.i + 1))) { //no-else/*22281*/
				$put($1.TryC, $1.i, $get($1.AheadC, $1.i)); /*22280*/
			} /*22280*/
			if (($get($1.DatumA, $1.i) && ($get($1.TryC, $1.i) < 2)) && ($1.barchar != $1.fn3)) { //no-else/*22284*/
				$put($1.AheadA, $1.i, $get($1.AheadA, $1.i + 1) + 1); /*22283*/
			} /*22283*/
			if (($get($1.DatumB, $1.i) && ($get($1.TryC, $1.i) < 2)) && ($1.barchar != $1.fn3)) { //no-else/*22287*/
				$k[$j++] = $1.AheadB; /*22286*/
				$k[$j++] = $1.i; /*22286*/
				$k[$j++] = $1.AheadB; /*22286*/
				$k[$j++] = $1.i + 1; /*22286*/
				if ($1.CRLF) { //no-else/*22286*/
					var _7d = $k[--$j]; /*22286*/
					$k[$j++] = _7d + 1; /*22286*/
				} /*22286*/
				var _7e = $k[--$j]; /*22286*/
				var _7g = $get($k[--$j], _7e); /*22286*/
				var _7h = $k[--$j]; /*22286*/
				$put($k[--$j], _7h, _7g + 1); /*22286*/
			} /*22286*/
			if ($1.barchar != $1.fn3) { //no-else/*22290*/
				$put($1.UntilEndSeg, $1.i, $get($1.UntilEndSeg, $1.i + 1) + 1); /*22289*/
			} /*22289*/
		} /*22289*/
		$1.A = 0; /*22293*/
		$1.B = 1; /*22293*/
		$1.C = 2; /*22293*/
		$1.BIN = 3; /*22293*/
		$1.addtocws = function() {
			var _7q = $k[--$j]; /*22296*/
			$puti($1.cws, $1.j, _7q); /*22296*/
			$1.j = _7q.length + $1.j; /*22297*/
		}; /*22298*/
		$1.base259to103 = function() {
			$1.in = $k[--$j]; /*22302*/
			$1.inlen = $1.in.length; /*22303*/
			$k[$j++] = Infinity; /*22304*/
			for (var _7x = 0, _7y = 5 - $1.inlen; _7x < _7y; _7x++) {
				/*22304*/
				$k[$j++] = 0; /*22304*/
			} /*22304*/
			$aload($1.in); /*22304*/
			$1.in = $a(); /*22304*/
			$1.out = $a(6); /*22305*/
			$k[$j++] = Infinity; /*22306*/
			$aload($geti($1.in, 0, 2)); /*22306*/
			$1.msbs = $a(); /*22306*/
			$k[$j++] = Infinity; /*22309*/
			$aload($1.msbs); /*22308*/
			var _86 = $k[--$j]; /*22308*/
			var _87 = $k[--$j]; /*22308*/
			$k[$j++] = _86 + (_87 * 259); /*22309*/
			for (var _88 = 0, _89 = 2; _88 < _89; _88++) {
				/*22309*/
				var _8A = $k[--$j]; /*22309*/
				$k[$j++] = _8A % 103; /*22309*/
				$k[$j++] = ~~(_8A / 103); /*22309*/
			} /*22309*/
			$1.mscs = $a(); /*22309*/
			$k[$j++] = Infinity; /*22311*/
			$aload($geti($1.in, 2, 3)); /*22311*/
			$1.lsbs = $a(); /*22311*/
			$k[$j++] = Infinity; /*22314*/
			$aload($1.lsbs); /*22313*/
			var _8G = $k[--$j]; /*22313*/
			var _8H = $k[--$j]; /*22313*/
			var _8I = $k[--$j]; /*22313*/
			$k[$j++] = (_8G + (_8H * 259)) + (_8I * 67081); /*22314*/
			for (var _8J = 0, _8K = 3; _8J < _8K; _8J++) {
				/*22314*/
				var _8L = $k[--$j]; /*22314*/
				$k[$j++] = _8L % 103; /*22314*/
				$k[$j++] = ~~(_8L / 103); /*22314*/
			} /*22314*/
			$1.lscs = $a(); /*22314*/
			var _8O = $get($1.lscs, 0); /*22316*/
			var _8Q = $get($1.mscs, 0); /*22316*/
			$put($1.out, 5, (_8O + (_8Q * 42)) % 103); /*22317*/
			var _8T = $get($1.lscs, 1); /*22318*/
			var _8V = $get($1.mscs, 0); /*22318*/
			var _8X = $get($1.mscs, 1); /*22318*/
			$put($1.out, 4, ((((~~((_8O + (_8Q * 42)) / 103)) + _8T) + (_8V * 68)) + (_8X * 42)) % 103); /*22319*/
			var _8a = $get($1.lscs, 2); /*22320*/
			var _8c = $get($1.mscs, 0); /*22320*/
			var _8e = $get($1.mscs, 1); /*22320*/
			var _8g = $get($1.mscs, 2); /*22320*/
			$put($1.out, 3, (((((~~(((((~~((_8O + (_8Q * 42)) / 103)) + _8T) + (_8V * 68)) + (_8X * 42)) / 103)) + _8a) + (_8c * 92)) + (_8e * 68)) + (_8g * 42)) % 103); /*22321*/
			var _8j = $get($1.lscs, 3); /*22322*/
			var _8l = $get($1.mscs, 0); /*22322*/
			var _8n = $get($1.mscs, 1); /*22322*/
			var _8p = $get($1.mscs, 2); /*22322*/
			$put($1.out, 2, (((((~~((((((~~(((((~~((_8O + (_8Q * 42)) / 103)) + _8T) + (_8V * 68)) + (_8X * 42)) / 103)) + _8a) + (_8c * 92)) + (_8e * 68)) + (_8g * 42)) / 103)) + _8j) + (_8l * 15)) + (_8n * 92)) + (_8p * 68)) % 103); /*22323*/
			var _8s = $get($1.mscs, 1); /*22324*/
			var _8u = $get($1.mscs, 2); /*22324*/
			$put($1.out, 1, (((~~((((((~~((((((~~(((((~~((_8O + (_8Q * 42)) / 103)) + _8T) + (_8V * 68)) + (_8X * 42)) / 103)) + _8a) + (_8c * 92)) + (_8e * 68)) + (_8g * 42)) / 103)) + _8j) + (_8l * 15)) + (_8n * 92)) + (_8p * 68)) / 103)) + (_8s * 15)) + (_8u * 92)) % 103); /*22325*/
			$put($1.out, 0, ((~~((((~~((((((~~((((((~~(((((~~((_8O + (_8Q * 42)) / 103)) + _8T) + (_8V * 68)) + (_8X * 42)) / 103)) + _8a) + (_8c * 92)) + (_8e * 68)) + (_8g * 42)) / 103)) + _8j) + (_8l * 15)) + (_8n * 92)) + (_8p * 68)) / 103)) + (_8s * 15)) + (_8u * 92)) / 103)) + ($get($1.mscs, 2) * 15)) % 103); /*22327*/
			$k[$j++] = $geti($1.out, (6 - $1.inlen) - 1, $1.inlen + 1); /*22328*/
		}; /*22329*/
		$1.finaliseBIN = function() {
			if ($1.bpos != 0) { //no-else/*22335*/
				$k[$j++] = $geti($1.bvals, 0, $1.bpos); /*22333*/
				$1.base259to103(); /*22333*/
				$aload($k[--$j]); /*22333*/
				$1.bpos = 0; /*22334*/
			} /*22334*/
		}; /*22336*/
		$1.addtobin = function() {
			$put($1.bvals, $1.bpos, $k[--$j]); /*22339*/
			$1.bpos = $1.bpos + 1; /*22340*/
			if ($1.bpos == 5) { //no-else/*22341*/
				$1.finaliseBIN(); /*22341*/
			} /*22341*/
		}; /*22342*/
		$1.ECIabc = function() {
			$k[$j++] = 0; /*22345*/
			$forall($geti($1.msg, $1.i + 1, 6), function() {
				/*22345*/
				var _9G = $k[--$j]; /*22345*/
				var _9H = $k[--$j]; /*22345*/
				$k[$j++] = (_9H + (_9G - 48)) * 10; /*22345*/
			}); /*22345*/
			var _9J = ~~($k[--$j] / 10); /*22346*/
			$k[$j++] = _9J; /*22350*/
			if (_9J >= 40) { //no-else/*22350*/
				var _9L = $k[--$j] - 40; /*22348*/
				var _9M = _9L % 12769; /*22349*/
				$k[$j++] = (~~(_9L / 12769)) + 40; /*22349*/
				$k[$j++] = ~~(_9M / 113); /*22349*/
				$k[$j++] = _9M % 113; /*22349*/
			} /*22349*/
		}; /*22351*/
		$1.ECIbin = function() {
			$k[$j++] = Infinity; /*22362*/
			$k[$j++] = 0; /*22355*/
			$forall($geti($1.msg, $1.i + 1, 6), function() {
				/*22355*/
				var _9Q = $k[--$j]; /*22355*/
				var _9R = $k[--$j]; /*22355*/
				$k[$j++] = (_9R + (_9Q - 48)) * 10; /*22355*/
			}); /*22355*/
			var _9T = ~~($k[--$j] / 10); /*22356*/
			$k[$j++] = _9T; /*22364*/
			if (_9T >= 65536) {
				/*22362*/
				var _9U = $k[--$j]; /*22357*/
				var _9V = _9U % 65536; /*22357*/
				$k[$j++] = 258; /*22357*/
				$k[$j++] = ~~(_9U / 65536); /*22357*/
				$k[$j++] = ~~(_9V / 256); /*22357*/
				$k[$j++] = _9V % 256; /*22357*/
			} else {
				/*22362*/
				var _9W = $k[--$j]; /*22359*/
				$k[$j++] = _9W; /*22363*/
				if (_9W >= 256) {
					/*22362*/
					var _9X = $k[--$j]; /*22360*/
					$k[$j++] = 257; /*22360*/
					$k[$j++] = ~~(_9X / 256); /*22360*/
					$k[$j++] = _9X % 256; /*22360*/
				} else {
					/*22362*/
					var _9Y = $k[--$j]; /*22362*/
					$k[$j++] = 256; /*22362*/
					$k[$j++] = _9Y; /*22362*/
				} /*22362*/
			} /*22362*/
			var _9Z = $a(); /*22362*/
			for (var _9a = 0, _9b = _9Z.length; _9a < _9b; _9a++) {
				/*22367*/
				$k[$j++] = $get(_9Z, _9a); /*22366*/
				$1.addtobin(); /*22366*/
			} /*22366*/
		}; /*22368*/
		$1.encC = function() {
			for (var _9d = 0, _9e = 1; _9d < _9e; _9d++) {
				/*22479*/
				if ($1.i == $1.segstart) { //no-else/*22397*/
					for (var _9h = 0, _9i = 1; _9h < _9i; _9h++) {
						/*22389*/
						if ($1.i > ($1.segend - 7)) { //no-else/*22374*/
							$k[$j++] = 0; /*22374*/
							break; /*22374*/
						} /*22374*/
						if ($get($1.msg, $1.segstart) != 91) { //no-else/*22375*/
							$k[$j++] = 0; /*22375*/
							break; /*22375*/
						} /*22375*/
						if ($get($1.msg, $1.segstart + 1) != 41) { //no-else/*22376*/
							$k[$j++] = 0; /*22376*/
							break; /*22376*/
						} /*22376*/
						if ($get($1.msg, $1.segstart + 2) != 62) { //no-else/*22377*/
							$k[$j++] = 0; /*22377*/
							break; /*22377*/
						} /*22377*/
						if ($get($1.msg, $1.segstart + 3) != 30) { //no-else/*22378*/
							$k[$j++] = 0; /*22378*/
							break; /*22378*/
						} /*22378*/
						var _9z = $get($1.msg, $1.segstart + 4); /*22379*/
						if ((_9z < 48) || (_9z > 57)) { //no-else/*22379*/
							$k[$j++] = 0; /*22379*/
							break; /*22379*/
						} /*22379*/
						var _A2 = $get($1.msg, $1.segstart + 5); /*22380*/
						if ((_A2 < 48) || (_A2 > 57)) { //no-else/*22380*/
							$k[$j++] = 0; /*22380*/
							break; /*22380*/
						} /*22380*/
						if ($get($1.msg, $1.segend - 1) != 4) { //no-else/*22381*/
							$k[$j++] = 0; /*22381*/
							break; /*22381*/
						} /*22381*/
						var _AC = (($get($1.msg, $1.segstart + 4) - 48) * 10) + ($get($1.msg, $1.segstart + 5) - 48); /*22383*/
						$k[$j++] = _AC; /*22383*/
						if ((_AC != 5) && ((_AC != 6) && (_AC != 12))) { //no-else/*22383*/
							$j--; /*22383*/
							$k[$j++] = $1.mac; /*22383*/
							break; /*22383*/
						} /*22383*/
						if ($get($1.msg, $1.segstart + 6) != 29) { //no-else/*22384*/
							$j--; /*22384*/
							$k[$j++] = 0; /*22384*/
							break; /*22384*/
						} /*22384*/
						if ($get($1.msg, $1.segend - 2) != 30) { //no-else/*22385*/
							$j--; /*22385*/
							$k[$j++] = 0; /*22385*/
							break; /*22385*/
						} /*22385*/
						var _AK = $k[--$j]; /*22386*/
						$k[$j++] = _AK; /*22386*/
						if (_AK == 5) { //no-else/*22386*/
							$j--; /*22386*/
							$k[$j++] = $1.m05; /*22386*/
							break; /*22386*/
						} /*22386*/
						if ($k[--$j] == 6) { //no-else/*22387*/
							$k[$j++] = $1.m06; /*22387*/
							break; /*22387*/
						} /*22387*/
						$k[$j++] = $1.m12; /*22388*/
						break; /*22388*/
					} /*22388*/
					$1.inmac = $k[--$j]; /*22390*/
					if ($1.inmac != 0) { //no-else/*22396*/
						$1.mode = $1.B; /*22392*/
						$k[$j++] = $a([$get($1.Bvals, $1.inmac)]); /*22393*/
						$1.addtocws(); /*22393*/
						var _AZ = ($1.inmac != $1.mac) ? 7 : 6; /*22394*/
						$1.i = $1.i + _AZ; /*22394*/
						break; /*22395*/
					} /*22395*/
				} /*22395*/
				if ($1.i == $1.segstart) { //no-else/*22408*/
					if ($get($1.nDigits, $1.i) >= 2) { //no-else/*22403*/
						$k[$j++] = $a([$get($1.Cvals, $1.fn1)]); /*22402*/
						$1.addtocws(); /*22402*/
					} /*22402*/
					if (($get($1.msg, $1.i) == $1.fn1) && ($get($1.nDigits, $1.i + 1) >= 2)) { //no-else/*22407*/
						$1.i = $1.i + 1; /*22406*/
					} /*22406*/
				} /*22406*/
				if ($get($1.SeventeenTen, $1.i)) { //no-else/*22418*/
					$k[$j++] = $a([$get($1.Cvals, $1.aim), (($get($1.msg, $1.i + 2) - 48) * 10) + ($get($1.msg, $1.i + 3) - 48), (($get($1.msg, $1.i + 4) - 48) * 10) + ($get($1.msg, $1.i + 5) - 48), (($get($1.msg, $1.i + 6) - 48) * 10) + ($get($1.msg, $1.i + 7) - 48)]); /*22415*/
					$1.addtocws(); /*22415*/
					$1.i = $1.i + 10; /*22416*/
					break; /*22417*/
				} /*22417*/
				if ($get($1.DatumC, $1.i)) { //no-else/*22440*/
					var _BM = $get($1.msg, $1.i); /*22420*/
					if ((_BM == $1.fn1) || ((_BM == $1.fn2) || (_BM == $1.fn3))) { //no-else/*22436*/
						$k[$j++] = $a([$get($1.Cvals, $get($1.msg, $1.i))]); /*22421*/
						$1.addtocws(); /*22421*/
						if ($get($1.ECI, $1.i)) { //no-else/*22426*/
							$k[$j++] = Infinity; /*22423*/
							$1.ECIabc(); /*22423*/
							var _BZ = $a(); /*22423*/
							$k[$j++] = _BZ; /*22423*/
							$1.addtocws(); /*22423*/
							$1.i = $1.i + 7; /*22424*/
							break; /*22425*/
						} /*22425*/
						if (($get($1.msg, $1.i) == $1.fn3) && ($1.segstart != $1.i)) { //no-else/*22433*/
							$1.i = $1.i + 1; /*22428*/
							$1.inmac = 0; /*22429*/
							$1.segstart = $1.i; /*22430*/
							$1.segend = $1.i + $get($1.UntilEndSeg, $1.i); /*22431*/
							break; /*22432*/
						} /*22432*/
						$1.i = $1.i + 1; /*22434*/
						break; /*22435*/
					} /*22435*/
					$k[$j++] = $a([(($get($1.msg, $1.i) - 48) * 10) + ($get($1.msg, $1.i + 1) - 48)]); /*22437*/
					$1.addtocws(); /*22437*/
					$1.i = $1.i + 2; /*22438*/
					break; /*22439*/
				} /*22439*/
				if ($get($1.Binary, $1.i)) { //no-else/*22454*/
					if ($get($1.nDigits, $1.i + 1) > 0) { //no-else/*22450*/
						if ($get($1.msg, $1.i) < 160) {
							/*22446*/
							$k[$j++] = $a([$get($1.Cvals, $1.bsa), $get($1.Avals, $get($1.msg, $1.i) - 128)]); /*22444*/
							$1.addtocws(); /*22444*/
						} else {
							/*22446*/
							$k[$j++] = $a([$get($1.Cvals, $1.bsb), $get($1.Bvals, $get($1.msg, $1.i) - 128)]); /*22446*/
							$1.addtocws(); /*22446*/
						} /*22446*/
						$1.i = $1.i + 1; /*22448*/
						break; /*22449*/
					} /*22449*/
					$k[$j++] = $a([$get($1.Cvals, $1.bin)]); /*22451*/
					$1.addtocws(); /*22451*/
					$1.mode = $1.BIN; /*22452*/
					break; /*22453*/
				} /*22453*/
				$1.m = $get($1.AheadA, $1.i); /*22455*/
				$1.n = $get($1.AheadB, $1.i); /*22455*/
				if ($gt($1.m, $1.n)) { //no-else/*22460*/
					$k[$j++] = $a([$get($1.Cvals, $1.laa)]); /*22457*/
					$1.addtocws(); /*22457*/
					$1.mode = $1.A; /*22458*/
					break; /*22459*/
				} /*22459*/
				if ($1.i == $1.segstart) { //no-else/*22467*/
					var _Ck = $get($1.msg, $1.i); /*22462*/
					if ((_Ck == 9) || ((_Ck == 28) || ((_Ck == 29) || (_Ck == 30)))) { //no-else/*22466*/
						$k[$j++] = $a([$get($1.Cvals, $1.laa)]); /*22463*/
						$1.addtocws(); /*22463*/
						$1.mode = $1.A; /*22464*/
						break; /*22465*/
					} /*22465*/
				} /*22465*/
				if ($1.n > 4) { //no-else/*22472*/
					$k[$j++] = $a([$get($1.Cvals, $1.lab)]); /*22469*/
					$1.addtocws(); /*22469*/
					$1.mode = $1.B; /*22470*/
					break; /*22471*/
				} /*22471*/
				$k[$j++] = $a([$get($1.Cvals, $get($a([$1.sfb, $1.sb2, $1.sb3, $1.sb4]), $1.n - 1))]); /*22473*/
				$1.addtocws(); /*22473*/
				for (var _D7 = 0, _D8 = $1.n; _D7 < _D8; _D7++) {
					/*22477*/
					$k[$j++] = $a([$get($1.Bvals, $get($1.msg, $1.i))]); /*22475*/
					$1.addtocws(); /*22475*/
					$1.i = $1.i + 1; /*22476*/
				} /*22476*/
				break; /*22478*/
			} /*22478*/
		}; /*22480*/
		$1.encB = function() {
			for (var _DG = 0, _DH = 1; _DG < _DH; _DG++) {
				/*22555*/
				$1.n = $get($1.TryC, $1.i); /*22484*/
				if ($1.n >= 2) { //no-else/*22502*/
					if ($1.n > 4) { //no-else/*22490*/
						$k[$j++] = $a([$get($1.Bvals, $1.lac)]); /*22487*/
						$1.addtocws(); /*22487*/
						$1.mode = $1.C; /*22488*/
						break; /*22489*/
					} /*22489*/
					$k[$j++] = $a([$get($1.Bvals, $get($a([$1.sfc, $1.sc2, $1.sc3, $1.sc4]), $1.n - 1))]); /*22491*/
					$1.addtocws(); /*22491*/
					for (var _Dd = 0, _De = $1.n; _Dd < _De; _Dd++) {
						/*22500*/
						if ($get($1.msg, $1.i) < 0) {
							/*22498*/
							$k[$j++] = $a([$get($1.Cvals, $get($1.msg, $1.i))]); /*22494*/
							$1.addtocws(); /*22494*/
							$1.i = $1.i + 1; /*22495*/
						} else {
							/*22498*/
							$k[$j++] = $a([(($get($1.msg, $1.i) - 48) * 10) + ($get($1.msg, $1.i + 1) - 48)]); /*22497*/
							$1.addtocws(); /*22497*/
							$1.i = $1.i + 2; /*22498*/
						} /*22498*/
					} /*22498*/
					break; /*22501*/
				} /*22501*/
				if ($get($1.DatumB, $1.i)) { //no-else/*22532*/
					var _E2 = $get($1.msg, $1.i); /*22504*/
					if ((_E2 == $1.fn1) || ((_E2 == $1.fn2) || (_E2 == $1.fn3))) { //no-else/*22521*/
						$k[$j++] = $a([$get($1.Bvals, $get($1.msg, $1.i))]); /*22505*/
						$1.addtocws(); /*22505*/
						if ($get($1.ECI, $1.i)) { //no-else/*22510*/
							$k[$j++] = Infinity; /*22507*/
							$1.ECIabc(); /*22507*/
							var _EF = $a(); /*22507*/
							$k[$j++] = _EF; /*22507*/
							$1.addtocws(); /*22507*/
							$1.i = $1.i + 7; /*22508*/
							break; /*22509*/
						} /*22509*/
						if (($get($1.msg, $1.i) == $1.fn3) && ($1.i != $1.segstart)) { //no-else/*22518*/
							$1.i = $1.i + 1; /*22512*/
							$1.mode = $1.C; /*22513*/
							$1.inmac = 0; /*22514*/
							$1.segstart = $1.i; /*22515*/
							$1.segend = $1.i + $get($1.UntilEndSeg, $1.i); /*22516*/
							break; /*22517*/
						} /*22517*/
						$1.i = $1.i + 1; /*22519*/
						break; /*22520*/
					} /*22520*/
					if (($get($1.msg, $1.i) == 13) && ($1.i < ($1.msglen - 1))) { //no-else/*22528*/
						if ($get($1.msg, $1.i + 1) == 10) { //no-else/*22527*/
							$k[$j++] = $a([$get($1.Bvals, $1.crl)]); /*22524*/
							$1.addtocws(); /*22524*/
							$1.i = $1.i + 2; /*22525*/
							break; /*22526*/
						} /*22526*/
					} /*22526*/
					$k[$j++] = $a([$get($1.Bvals, $get($1.msg, $1.i))]); /*22529*/
					$1.addtocws(); /*22529*/
					$1.i = $1.i + 1; /*22530*/
					break; /*22531*/
				} /*22531*/
				if ($get($1.Binary, $1.i)) { //no-else/*22546*/
					if ($get($1.DatumB, $1.i + 1)) { //no-else/*22542*/
						if ($get($1.msg, $1.i) < 160) {
							/*22538*/
							$k[$j++] = $a([$get($1.Bvals, $1.bsa), $get($1.Avals, $get($1.msg, $1.i) - 128)]); /*22536*/
							$1.addtocws(); /*22536*/
						} else {
							/*22538*/
							$k[$j++] = $a([$get($1.Bvals, $1.bsb), $get($1.Bvals, $get($1.msg, $1.i) - 128)]); /*22538*/
							$1.addtocws(); /*22538*/
						} /*22538*/
						$1.i = $1.i + 1; /*22540*/
						break; /*22541*/
					} /*22541*/
					$k[$j++] = $a([$get($1.Bvals, $1.bin)]); /*22543*/
					$1.addtocws(); /*22543*/
					$1.mode = $1.BIN; /*22544*/
					break; /*22545*/
				} /*22545*/
				if ($get($1.AheadA, $1.i) == 1) { //no-else/*22551*/
					$k[$j++] = $a([$get($1.Bvals, $1.sfa), $get($1.Avals, $get($1.msg, $1.i))]); /*22548*/
					$1.addtocws(); /*22548*/
					$1.i = $1.i + 1; /*22549*/
					break; /*22550*/
				} /*22550*/
				$k[$j++] = $a([$get($1.Bvals, $1.laa)]); /*22552*/
				$1.addtocws(); /*22552*/
				$1.mode = $1.A; /*22553*/
				break; /*22554*/
			} /*22554*/
		}; /*22556*/
		$1.encA = function() {
			for (var _Fe = 0, _Ff = 1; _Fe < _Ff; _Fe++) {
				/*22628*/
				$1.n = $get($1.TryC, $1.i); /*22560*/
				if ($1.n >= 2) { //no-else/*22578*/
					if ($1.n > 4) { //no-else/*22566*/
						$k[$j++] = $a([$get($1.Avals, $1.lac)]); /*22563*/
						$1.addtocws(); /*22563*/
						$1.mode = $1.C; /*22564*/
						break; /*22565*/
					} /*22565*/
					$k[$j++] = $a([$get($1.Avals, $get($a([$1.sfc, $1.sc2, $1.sc3, $1.sc4]), $1.n - 1))]); /*22567*/
					$1.addtocws(); /*22567*/
					for (var _G1 = 0, _G2 = $1.n; _G1 < _G2; _G1++) {
						/*22576*/
						if ($get($1.msg, $1.i) < 0) {
							/*22574*/
							$k[$j++] = $a([$get($1.Cvals, $get($1.msg, $1.i))]); /*22570*/
							$1.addtocws(); /*22570*/
							$1.i = $1.i + 1; /*22571*/
						} else {
							/*22574*/
							$k[$j++] = $a([(($get($1.msg, $1.i) - 48) * 10) + ($get($1.msg, $1.i + 1) - 48)]); /*22573*/
							$1.addtocws(); /*22573*/
							$1.i = $1.i + 2; /*22574*/
						} /*22574*/
					} /*22574*/
					break; /*22577*/
				} /*22577*/
				if ($get($1.DatumA, $1.i)) { //no-else/*22601*/
					var _GQ = $get($1.msg, $1.i); /*22580*/
					if ((_GQ == $1.fn1) || ((_GQ == $1.fn2) || (_GQ == $1.fn3))) { //no-else/*22597*/
						$k[$j++] = $a([$get($1.Avals, $get($1.msg, $1.i))]); /*22581*/
						$1.addtocws(); /*22581*/
						if ($get($1.ECI, $1.i)) { //no-else/*22586*/
							$k[$j++] = Infinity; /*22583*/
							$1.ECIabc(); /*22583*/
							var _Gd = $a(); /*22583*/
							$k[$j++] = _Gd; /*22583*/
							$1.addtocws(); /*22583*/
							$1.i = $1.i + 7; /*22584*/
							break; /*22585*/
						} /*22585*/
						if (($get($1.msg, $1.i) == $1.fn3) && ($1.i != $1.segstart)) { //no-else/*22594*/
							$1.i = $1.i + 1; /*22588*/
							$1.mode = $1.C; /*22589*/
							$1.inmac = 0; /*22590*/
							$1.segstart = $1.i; /*22591*/
							$1.segend = $1.i + $get($1.UntilEndSeg, $1.i); /*22592*/
							break; /*22593*/
						} /*22593*/
						$1.i = $1.i + 1; /*22595*/
						break; /*22596*/
					} /*22596*/
					$k[$j++] = $a([$get($1.Avals, $get($1.msg, $1.i))]); /*22598*/
					$1.addtocws(); /*22598*/
					$1.i = $1.i + 1; /*22599*/
					break; /*22600*/
				} /*22600*/
				if ($get($1.Binary, $1.i)) { //no-else/*22615*/
					if ($get($1.DatumA, $1.i + 1)) { //no-else/*22611*/
						if ($get($1.msg, $1.i) < 160) {
							/*22607*/
							$k[$j++] = $a([$get($1.Avals, $1.bsa), $get($1.Avals, $get($1.msg, $1.i) - 128)]); /*22605*/
							$1.addtocws(); /*22605*/
						} else {
							/*22607*/
							$k[$j++] = $a([$get($1.Avals, $1.bsb), $get($1.Bvals, $get($1.msg, $1.i) - 128)]); /*22607*/
							$1.addtocws(); /*22607*/
						} /*22607*/
						$1.i = $1.i + 1; /*22609*/
						break; /*22610*/
					} /*22610*/
					$k[$j++] = $a([$get($1.Avals, $1.bin)]); /*22612*/
					$1.addtocws(); /*22612*/
					$1.mode = $1.BIN; /*22613*/
					break; /*22614*/
				} /*22614*/
				$1.n = $get($1.AheadB, $1.i); /*22616*/
				if ($1.n > 6) { //no-else/*22621*/
					$k[$j++] = $a([$get($1.Avals, $1.lab)]); /*22618*/
					$1.addtocws(); /*22618*/
					$1.mode = $1.B; /*22619*/
					break; /*22620*/
				} /*22620*/
				$k[$j++] = $a([$get($1.Avals, $get($a([$1.sfb, $1.sb2, $1.sb3, $1.sb4, $1.sb5, $1.sb6]), $1.n - 1))]); /*22622*/
				$1.addtocws(); /*22622*/
				for (var _Ht = 0, _Hu = $1.n; _Ht < _Hu; _Ht++) {
					/*22626*/
					$k[$j++] = $a([$get($1.Bvals, $get($1.msg, $1.i))]); /*22624*/
					$1.addtocws(); /*22624*/
					$1.i = $1.i + 1; /*22625*/
				} /*22625*/
				break; /*22627*/
			} /*22627*/
		}; /*22629*/
		$1.encBIN = function() {
			for (var _I2 = 0, _I3 = 1; _I2 < _I3; _I2++) {
				/*22690*/
				$1.n = $get($1.TryC, $1.i); /*22633*/
				if ($1.n >= 2) { //no-else/*22652*/
					$k[$j++] = Infinity; /*22635*/
					$1.finaliseBIN(); /*22635*/
					var _I8 = $a(); /*22635*/
					$k[$j++] = _I8; /*22635*/
					$1.addtocws(); /*22635*/
					if ($1.n > 7) { //no-else/*22640*/
						var _IE = $k[--$j]; /*22637*/
						$1.mode = $1.C; /*22638*/
						$k[$j++] = _IE + $a([$get($1.BINvals, $1.tmc)]); /*22639*/
						break; /*22639*/
					} /*22639*/
					$k[$j++] = $a([$get($1.BINvals, $get($a([$1.sc2, $1.sc3, $1.sc4, $1.sc5, $1.sc6, $1.sc7]), $1.n - 2))]); /*22641*/
					$1.addtocws(); /*22641*/
					for (var _IT = 0, _IU = $1.n; _IT < _IU; _IT++) {
						/*22650*/
						if ($get($1.msg, $1.i) < 0) {
							/*22648*/
							$k[$j++] = $a([$get($1.Cvals, $get($1.msg, $1.i))]); /*22644*/
							$1.addtocws(); /*22644*/
							$1.i = $1.i + 1; /*22645*/
						} else {
							/*22648*/
							$k[$j++] = $a([(($get($1.msg, $1.i) - 48) * 10) + ($get($1.msg, $1.i + 1) - 48)]); /*22647*/
							$1.addtocws(); /*22647*/
							$1.i = $1.i + 2; /*22648*/
						} /*22648*/
					} /*22648*/
					break; /*22651*/
				} /*22651*/
				if (($get($1.ECI, $1.i) && $get($1.Binary, $1.i + 7))) { //no-else/*22658*/
					$k[$j++] = Infinity; /*22654*/
					$1.ECIbin(); /*22654*/
					var _It = $a(); /*22654*/
					$k[$j++] = _It; /*22654*/
					$1.addtocws(); /*22654*/
					$1.i = $1.i + 7; /*22655*/
					if ($1.i == $1.msglen) { //no-else/*22656*/
						$k[$j++] = Infinity; /*22656*/
						$1.finaliseBIN(); /*22656*/
						var _Ix = $a(); /*22656*/
						$k[$j++] = _Ix; /*22656*/
						$1.addtocws(); /*22656*/
					} /*22656*/
					break; /*22657*/
				} /*22657*/
				if ($get($1.msg, $1.i) >= 0) { //no-else/*22668*/
					if (((($get($1.Binary, $1.i) || $get($1.Binary, $1.i + 1)) || $get($1.Binary, $1.i + 2)) || $get($1.Binary, $1.i + 3)) || ($get($1.ECI, $1.i + 1) && $get($1.Binary, $1.i + 8))) { //no-else/*22667*/
						$k[$j++] = Infinity; /*22663*/
						$k[$j++] = $get($1.msg, $1.i); /*22663*/
						$1.addtobin(); /*22663*/
						var _JM = $a(); /*22663*/
						$k[$j++] = _JM; /*22663*/
						$1.addtocws(); /*22663*/
						$1.i = $1.i + 1; /*22664*/
						if ($1.i == $1.msglen) { //no-else/*22665*/
							$k[$j++] = Infinity; /*22665*/
							$1.finaliseBIN(); /*22665*/
							var _JQ = $a(); /*22665*/
							$k[$j++] = _JQ; /*22665*/
							$1.addtocws(); /*22665*/
						} /*22665*/
						break; /*22666*/
					} /*22666*/
				} /*22666*/
				$k[$j++] = Infinity; /*22669*/
				$1.finaliseBIN(); /*22669*/
				var _JR = $a(); /*22669*/
				$k[$j++] = _JR; /*22669*/
				$1.addtocws(); /*22669*/
				if ($1.i != ($1.msglen - 1)) { //no-else/*22688*/
					if (($get($1.msg, $1.i) == $1.fn3) && ($1.i != $1.segstart)) { //no-else/*22679*/
						$k[$j++] = $a([$get($1.BINvals, $1.tms)]); /*22672*/
						$1.addtocws(); /*22672*/
						$1.i = $1.i + 1; /*22673*/
						$1.mode = $1.C; /*22674*/
						$1.inmac = 0; /*22675*/
						$1.segstart = $1.i; /*22676*/
						$1.segend = $1.i + $get($1.UntilEndSeg, $1.i); /*22677*/
						break; /*22678*/
					} /*22678*/
					if ($gt($get($1.AheadA, $1.i), $get($1.AheadB, $1.i))) {
						/*22685*/
						$k[$j++] = $a([$get($1.BINvals, $1.tma)]); /*22681*/
						$1.addtocws(); /*22681*/
						$1.mode = $1.A; /*22682*/
					} else {
						/*22685*/
						$k[$j++] = $a([$get($1.BINvals, $1.tmb)]); /*22684*/
						$1.addtocws(); /*22684*/
						$1.mode = $1.B; /*22685*/
					} /*22685*/
					break; /*22687*/
				} /*22687*/
				break; /*22689*/
			} /*22689*/
		}; /*22691*/
		$1.cws = $a(($1.barlen * 2) + 1); /*22693*/
		$1.mode = $1.C; /*22694*/
		$1.bvals = $a(5); /*22695*/
		$1.bpos = 0; /*22695*/
		$1.inmac = 0; /*22696*/
		$1.segstart = 0; /*22696*/
		$1.segend = $get($1.UntilEndSeg, 0); /*22696*/
		$1.i = 0; /*22697*/
		$1.j = 0; /*22697*/
		for (;;) {
			/*22710*/
			if ($1.i >= $1.msglen) { //no-else/*22698*/
				break; /*22698*/
			} /*22698*/
			if ($1.inmac != 0) { //no-else/*22708*/
				if (($1.inmac != $1.mac) && ($1.i == ($1.segend - 2))) { //no-else/*22703*/
					$1.i = $1.i + 2; /*22701*/
					if ($1.i >= $1.msglen) { //no-else/*22702*/
						break; /*22702*/
					} /*22702*/
				} /*22702*/
				if (($1.inmac == $1.mac) && ($1.i == ($1.segend - 1))) { //no-else/*22707*/
					$1.i = $1.i + 1; /*22705*/
					if ($1.i >= $1.msglen) { //no-else/*22706*/
						break; /*22706*/
					} /*22706*/
				} /*22706*/
			} /*22706*/
			if ($1[$get($a(['encA', 'encB', 'encC', 'encBIN']), $1.mode)]() === true) {
				break;
			} /*22709*/
		} /*22709*/
		$1.cws = $geti($1.cws, 0, $1.j); /*22711*/
		$1.nd = $1.cws.length; /*22714*/
		$1.minarea = (((($1.nd + 3) + (~~($1.nd / 2))) * 9) + 2) * 2; /*22715*/
		if ($1.ratio != -1) {
			/*22743*/
			$1.hgt = Math.sqrt($1.minarea / $1.ratio); /*22717*/
			$1.wid = Math.sqrt($1.minarea * $1.ratio); /*22718*/
			$1.h = ~~$1.hgt; /*22719*/
			$1.w = ~~$1.wid; /*22719*/
			if ((($1.h + $1.w) % 2) == 1) {
				/*22733*/
				if (($1.h * $1.w) < $1.minarea) { //no-else/*22721*/
					$1.h = $1.h + 1; /*22721*/
					$1.w = $1.w + 1; /*22721*/
				} /*22721*/
			} else {
				/*22733*/
				if (($1.hgt * $1.w) < ($1.wid * $1.h)) {
					/*22733*/
					$1.w = $1.w + 1; /*22724*/
					if (($1.h * $1.w) < $1.minarea) { //no-else/*22728*/
						$1.w = $1.w - 1; /*22726*/
						$1.h = $1.h + 1; /*22726*/
						if (($1.h * $1.w) < $1.minarea) { //no-else/*22727*/
							$1.w = $1.w + 2; /*22727*/
						} /*22727*/
					} /*22727*/
				} else {
					/*22733*/
					$1.h = $1.h + 1; /*22730*/
					if (($1.h * $1.w) < $1.minarea) { //no-else/*22734*/
						$1.h = $1.h - 1; /*22732*/
						$1.w = $1.w + 1; /*22732*/
						if (($1.h * $1.w) < $1.minarea) { //no-else/*22733*/
							$1.h = $1.h + 2; /*22733*/
						} /*22733*/
					} /*22733*/
				} /*22733*/
			} /*22733*/
			$1.rows = $1.h; /*22737*/
			$1.columns = $1.w; /*22737*/
		} else {
			/*22743*/
			if ($1.columns == -1) { //no-else/*22741*/
				var _LG = ~~((($1.minarea + $1.rows) - 1) / $1.rows); /*22740*/
				$k[$j++] = 'columns'; /*22740*/
				$k[$j++] = _LG; /*22740*/
				if (((_LG + $1.rows) % 2) == 0) { //no-else/*22740*/
					var _LI = $k[--$j]; /*22740*/
					$k[$j++] = _LI + 1; /*22740*/
				} /*22740*/
				var _LJ = $k[--$j]; /*22740*/
				$1[$k[--$j]] = _LJ; /*22740*/
			} /*22740*/
			if ($1.rows == -1) { //no-else/*22744*/
				var _LP = ~~((($1.minarea + $1.columns) - 1) / $1.columns); /*22743*/
				$k[$j++] = 'rows'; /*22743*/
				$k[$j++] = _LP; /*22743*/
				if (((_LP + $1.columns) % 2) == 0) { //no-else/*22743*/
					var _LR = $k[--$j]; /*22743*/
					$k[$j++] = _LR + 1; /*22743*/
				} /*22743*/
				var _LS = $k[--$j]; /*22743*/
				$1[$k[--$j]] = _LS; /*22743*/
			} /*22743*/
		} /*22743*/
		$1.ndots = ~~(($1.rows * $1.columns) / 2); /*22748*/
		for (;;) {
			/*22752*/
			var _LX = $1.nd + 1; /*22750*/
			if ((((_LX + ((~~(_LX / 2)) + 3)) * 9) + 2) > $1.ndots) { //no-else/*22750*/
				break; /*22750*/
			} /*22750*/
			$1.nd = $1.nd + 1; /*22751*/
		} /*22751*/
		$1.nc = (~~($1.nd / 2)) + 3; /*22753*/
		$1.nw = $1.nd + $1.nc; /*22754*/
		$1.rembits = $1.ndots - (($1.nw * 9) + 2); /*22755*/
		if ($1.nd > $1.cws.length) { //no-else/*22762*/
			$k[$j++] = Infinity; /*22760*/
			$aload($1.cws); /*22758*/
			var _Lk = ($1.mode == $1.BIN) ? 109 : 106; /*22759*/
			$k[$j++] = _Lk; /*22760*/
			for (var _Ln = 0, _Lo = ($1.nd - $1.cws.length) - 1; _Ln < _Lo; _Ln++) {
				/*22760*/
				$k[$j++] = 106; /*22760*/
			} /*22760*/
			$1.cws = $a(); /*22760*/
		} /*22761*/
		$1.encs = $a
		if (($1.rows % 2) == 0) {
			/*22809*/
			$1.sixedges = $a([$a([$1.columns - 1, $1.rows - 2]), $a([0, $1.rows - 2]), $a([$1.columns - 2, $1.rows - 1]), $a([1, $1.rows - 1]), $a([$1.columns - 1, 0]), $a([0, 0])]); /*22800*/
		} else {
			/*22809*/
			$1.sixedges = $a([$a([$1.columns - 2, 0]), $a([$1.columns - 2, $1.rows - 1]), $a([$1.columns - 1, 1]), $a([$1.columns - 1, $1.rows - 2]), $a([0, 0]), $a([0, $1.rows - 1])]); /*22809*/
		} /*22809*/
		$1.dmv = function() {
			var _ML = $k[--$j]; /*22812*/
			var _MM = $k[--$j]; /*22812*/
			$k[$j++] = _MM + (_ML * $1.columns); /*22812*/
		}; /*22812*/
		$1.outline = $a($1.rows * $1.columns); /*22815*/
		for (var _MS = 0, _MR = $1.rows - 1; _MS <= _MR; _MS += 1) {
			/*22822*/
			$1.y = _MS; /*22817*/
			for (var _MV = 0, _MU = $1.columns - 1; _MV <= _MU; _MV += 1) {
				/*22821*/
				$1.x = _MV; /*22819*/
				$k[$j++] = $1.outline; /*22820*/
				$k[$j++] = $1.x; /*22820*/
				$k[$j++] = $1.y; /*22820*/
				$1.dmv(); /*22820*/
				var _Mb = $k[--$j]; /*22820*/
				$put($k[--$j], _Mb, (($1.x + $1.y) % 2) - 1); /*22820*/
			} /*22820*/
		} /*22820*/
		var _Md = $1.sixedges; /*22823*/
		for (var _Me = 0, _Mf = _Md.length; _Me < _Mf; _Me++) {
			/*22825*/
			$k[$j++] = $1.outline; /*22824*/
			$aload($get(_Md, _Me)); /*22824*/
			$1.dmv(); /*22824*/
			var _Mi = $k[--$j]; /*22824*/
			$put($k[--$j], _Mi, 1); /*22824*/
		} /*22824*/
		$1.clearcol = function() {
			$1.x = $k[--$j]; /*22828*/
			$k[$j++] = true; /*22832*/
			for (var _Mo = $1.x & 1, _Mn = $1.rows - 1; _Mo <= _Mn; _Mo += 2) {
				/*22832*/
				$k[$j++] = $1.x; /*22831*/
				$k[$j++] = _Mo; /*22831*/
				$1.dmv(); /*22831*/
				if ($get($1.sym, $k[--$j]) == 1) { //no-else/*22831*/
					$j--; /*22831*/
					$k[$j++] = false; /*22831*/
					break; /*22831*/
				} /*22831*/
			} /*22831*/
		}; /*22833*/
		$1.clearrow = function() {
			$1.y = $k[--$j]; /*22836*/
			$k[$j++] = true; /*22840*/
			for (var _Mx = $1.y & 1, _Mw = $1.columns - 1; _Mx <= _Mw; _Mx += 2) {
				/*22840*/
				$k[$j++] = _Mx; /*22839*/
				$k[$j++] = $1.y; /*22839*/
				$1.dmv(); /*22839*/
				if ($get($1.sym, $k[--$j]) == 1) { //no-else/*22839*/
					$j--; /*22839*/
					$k[$j++] = false; /*22839*/
					break; /*22839*/
				} /*22839*/
			} /*22839*/
		}; /*22841*/
		$1.evalsymbol = function() {
			$1.sym = $k[--$j]; /*22845*/
			$1.worst = 9999999; /*22848*/
			var _N7 = $a([$a(['x', 0]), $a(['x', 1]), $a(['y', 0]), $a(['y', 1])]); /*22849*/
			for (var _N8 = 0, _N9 = _N7.length; _N8 < _N9; _N8++) {
				/*22867*/
				$aload($get(_N7, _N8)); /*22850*/
				$1.fl = $k[--$j]; /*22850*/
				$1.dir = $k[--$j]; /*22850*/
				$1.sum = 0; /*22851*/
				$1.first = -1; /*22851*/
				$1.last = -1; /*22851*/
				var _NE = $eq($1.dir, 'x') ? $1.columns : $1.rows; /*22852*/
				for (var _NG = 0, _NF = _NE - 1; _NG <= _NF; _NG += 1) {
					/*22863*/
					$1[$1.dir] = _NG; /*22853*/
					var _NI = $1.sym; /*22854*/
					var _NK = $1[$1.dir]; /*22855*/
					var _NM = $eq($1.dir, 'x') ? $1.rows : $1.columns; /*22856*/
					var _NP = (_NM - 1) * $1.fl; /*22857*/
					if ($eq($1.dir, 'y')) { //no-else/*22857*/
						var _ = _NP; /*22857*/
						_NP = _NK; /*22857*/
						_NK = _; /*22857*/
					} /*22857*/
					$k[$j++] = _NI; /*22858*/
					$k[$j++] = _NK; /*22858*/
					$k[$j++] = _NP; /*22858*/
					$1.dmv(); /*22858*/
					var _NQ = $k[--$j]; /*22858*/
					if ($get($k[--$j], _NQ) == 1) { //no-else/*22862*/
						if ($1.first == -1) { //no-else/*22859*/
							$1.first = $1[$1.dir]; /*22859*/
						} /*22859*/
						$1.last = $1[$1.dir]; /*22860*/
						$1.sum = $1.sum + 1; /*22861*/
					} /*22861*/
				} /*22861*/
				var _Nd = $eq($1.dir, 'x') ? $1.rows : $1.columns; /*22865*/
				var _Ne = (($1.sum + $1.last) - $1.first) * _Nd; /*22866*/
				$k[$j++] = _Ne; /*22866*/
				if (_Ne < $1.worst) {
					/*22866*/
					$1.worst = $k[--$j]; /*22866*/
				} else {
					/*22866*/
					$j--; /*22866*/
				} /*22866*/
			} /*22866*/
			$1.pen = 0; /*22869*/
			if ((($1.rows % 2) == 1) || ($1.rows <= 12)) { //no-else/*22887*/
				$1.sum = 0; /*22875*/
				$1.p = 0; /*22875*/
				for (var _Nl = 1, _Nk = $1.columns - 2; _Nl <= _Nk; _Nl += 1) {
					/*22885*/
					$k[$j++] = _Nl; /*22877*/
					$1.clearcol(); /*22877*/
					if ($k[--$j]) {
						/*22883*/
						$1.sum = $1.sum + 1; /*22878*/
						$k[$j++] = 'p'; /*22879*/
						if ($1.sum == 1) {
							/*22879*/
							$k[$j++] = $1.rows; /*22879*/
						} else {
							/*22879*/
							$k[$j++] = $1.p * $1.rows; /*22879*/
						} /*22879*/
						var _Ns = $k[--$j]; /*22879*/
						$1[$k[--$j]] = _Ns; /*22879*/
					} else {
						/*22883*/
						$1.sum = 0; /*22881*/
						$1.pen = $1.pen + $1.p; /*22882*/
						$1.p = 0; /*22883*/
					} /*22883*/
				} /*22883*/
				$1.pen = $1.pen + $1.p; /*22886*/
			} /*22886*/
			if ((($1.rows % 2) == 0) || ($1.columns <= 12)) { //no-else/*22905*/
				$1.sum = 0; /*22893*/
				$1.p = 0; /*22893*/
				for (var _O2 = 1, _O1 = $1.rows - 2; _O2 <= _O1; _O2 += 1) {
					/*22903*/
					$k[$j++] = _O2; /*22895*/
					$1.clearrow(); /*22895*/
					if ($k[--$j]) {
						/*22901*/
						$1.sum = $1.sum + 1; /*22896*/
						$k[$j++] = 'p'; /*22897*/
						if ($1.sum == 1) {
							/*22897*/
							$k[$j++] = $1.columns; /*22897*/
						} else {
							/*22897*/
							$k[$j++] = $1.p * $1.columns; /*22897*/
						} /*22897*/
						var _O9 = $k[--$j]; /*22897*/
						$1[$k[--$j]] = _O9; /*22897*/
					} else {
						/*22901*/
						$1.sum = 0; /*22899*/
						$1.pen = $1.pen + $1.p; /*22900*/
						$1.p = 0; /*22901*/
					} /*22901*/
				} /*22901*/
				$1.pen = $1.pen + $1.p; /*22904*/
			} /*22904*/
			$k[$j++] = Infinity; /*22915*/
			for (var _OG = 0, _OH = ($1.columns + 4) * 2; _OG < _OH; _OG++) {
				/*22909*/
				$k[$j++] = 0; /*22909*/
			} /*22909*/
			for (var _OL = 0, _OM = $1.columns, _OK = $1.sym.length - 1; _OM < 0 ? _OL >= _OK : _OL <= _OK; _OL += _OM) {
				/*22914*/
				$k[$j++] = 0; /*22912*/
				$k[$j++] = 0; /*22912*/
				$aload($geti($1.sym, _OL, $1.columns)); /*22912*/
				$k[$j++] = 0; /*22913*/
				$k[$j++] = 0; /*22913*/
			} /*22913*/
			for (var _OR = 0, _OS = ($1.columns + 4) * 2; _OR < _OS; _OR++) {
				/*22915*/
				$k[$j++] = 0; /*22915*/
			} /*22915*/
			$1.symp = $a(); /*22915*/
			$1.columns = $1.columns + 4; /*22919*/
			$1.rows = $1.rows + 4; /*22920*/
			$1.sum = 0; /*22921*/
			for (var _OY = 2, _OX = $1.rows - 3; _OY <= _OX; _OY += 1) {
				/*22939*/
				$1.y = _OY; /*22923*/
				for (var _Oc = ($1.y & 1) + 2, _Ob = $1.columns - 3; _Oc <= _Ob; _Oc += 2) {
					/*22938*/
					$1.x = _Oc; /*22925*/
					for (var _Od = 0, _Oe = 1; _Od < _Oe; _Od++) {
						/*22937*/
						$k[$j++] = $1.symp; /*22927*/
						$k[$j++] = $1.x - 1; /*22927*/
						$k[$j++] = $1.y - 1; /*22927*/
						$1.dmv(); /*22927*/
						var _Oi = $k[--$j]; /*22927*/
						if ($get($k[--$j], _Oi) == 1) { //no-else/*22927*/
							break; /*22927*/
						} /*22927*/
						$k[$j++] = $1.symp; /*22928*/
						$k[$j++] = $1.x + 1; /*22928*/
						$k[$j++] = $1.y - 1; /*22928*/
						$1.dmv(); /*22928*/
						var _Oo = $k[--$j]; /*22928*/
						if ($get($k[--$j], _Oo) == 1) { //no-else/*22928*/
							break; /*22928*/
						} /*22928*/
						$k[$j++] = $1.symp; /*22929*/
						$k[$j++] = $1.x - 1; /*22929*/
						$k[$j++] = $1.y + 1; /*22929*/
						$1.dmv(); /*22929*/
						var _Ou = $k[--$j]; /*22929*/
						if ($get($k[--$j], _Ou) == 1) { //no-else/*22929*/
							break; /*22929*/
						} /*22929*/
						$k[$j++] = $1.symp; /*22930*/
						$k[$j++] = $1.x + 1; /*22930*/
						$k[$j++] = $1.y + 1; /*22930*/
						$1.dmv(); /*22930*/
						var _P0 = $k[--$j]; /*22930*/
						if ($get($k[--$j], _P0) == 1) { //no-else/*22930*/
							break; /*22930*/
						} /*22930*/
						$k[$j++] = $1.symp; /*22931*/
						$k[$j++] = $1.x; /*22931*/
						$k[$j++] = $1.y; /*22931*/
						$1.dmv(); /*22931*/
						var _P6 = $k[--$j]; /*22931*/
						if ($get($k[--$j], _P6) == 0) { //no-else/*22931*/
							$1.sum = $1.sum + 1; /*22931*/
							break; /*22931*/
						} /*22931*/
						$k[$j++] = $1.symp; /*22932*/
						$k[$j++] = $1.x - 2; /*22932*/
						$k[$j++] = $1.y; /*22932*/
						$1.dmv(); /*22932*/
						var _PD = $k[--$j]; /*22932*/
						if ($get($k[--$j], _PD) == 1) { //no-else/*22932*/
							break; /*22932*/
						} /*22932*/
						$k[$j++] = $1.symp; /*22933*/
						$k[$j++] = $1.x; /*22933*/
						$k[$j++] = $1.y - 2; /*22933*/
						$1.dmv(); /*22933*/
						var _PJ = $k[--$j]; /*22933*/
						if ($get($k[--$j], _PJ) == 1) { //no-else/*22933*/
							break; /*22933*/
						} /*22933*/
						$k[$j++] = $1.symp; /*22934*/
						$k[$j++] = $1.x + 2; /*22934*/
						$k[$j++] = $1.y; /*22934*/
						$1.dmv(); /*22934*/
						var _PP = $k[--$j]; /*22934*/
						if ($get($k[--$j], _PP) == 1) { //no-else/*22934*/
							break; /*22934*/
						} /*22934*/
						$k[$j++] = $1.symp; /*22935*/
						$k[$j++] = $1.x; /*22935*/
						$k[$j++] = $1.y + 2; /*22935*/
						$1.dmv(); /*22935*/
						var _PV = $k[--$j]; /*22935*/
						if ($get($k[--$j], _PV) == 1) { //no-else/*22935*/
							break; /*22935*/
						} /*22935*/
						$1.sum = $1.sum + 1; /*22936*/
					} /*22936*/
				} /*22936*/
			} /*22936*/
			$1.columns = $1.columns - 4; /*22940*/
			$1.rows = $1.rows - 4; /*22941*/
			if ($1.worst == 0) {
				/*22946*/
				$k[$j++] = -99999; /*22944*/
			} else {
				/*22946*/
				$k[$j++] = ($1.worst - ($1.sum * $1.sum)) - $1.pen; /*22946*/
			} /*22946*/
		}; /*22949*/
		$k[$j++] = Infinity; /*22952*/
		$k[$j++] = 1; /*22952*/
		for (var _Pg = 0, _Ph = 112; _Pg < _Ph; _Pg++) {
			/*22952*/
			var _Pi = $k[--$j]; /*22952*/
			$k[$j++] = _Pi; /*22952*/
			$k[$j++] = (_Pi * 3) % 113; /*22952*/
		} /*22952*/
		$1.rsalog = $a(); /*22952*/
		$1.step = (~~($1.nw / 112)) + 1; /*22953*/
		$1.offset = function() {
			var _Pm = $k[--$j]; /*22954*/
			$k[$j++] = (_Pm * $1.step) + $1.start; /*22954*/
		}; /*22954*/
		$1.bestscore = -99999999; /*22962*/
		$k[$j++] = 'masks'; /*22967*/
		if ($1.mask != -1) {
			/*22966*/
			$k[$j++] = $a([$1.mask]); /*22964*/
		} else {
			/*22966*/
			if ($1.fast) {
				/*22966*/
				$k[$j++] = $a([3, 2, 1, 0]); /*22966*/
			} else {
				/*22966*/
				$k[$j++] = $a([0, 1, 2, 3]); /*22966*/
			} /*22966*/
		} /*22966*/
		var _Pu = $k[--$j]; /*22967*/
		$1[$k[--$j]] = _Pu; /*22967*/
		$1.litmasks = $a(4); /*22968*/
		$forall($1.masks, function() {
			/*23070*/
			$1.mask = $k[--$j]; /*22971*/
			$k[$j++] = Infinity; /*22977*/
			var _Q3 = $1.cws; /*22976*/
			$k[$j++] = $1.mask; /*22976*/
			$k[$j++] = $get($a([0, 3, 7, 17]), $1.mask); /*22976*/
			$k[$j++] = 0; /*22976*/
			for (var _Q4 = 0, _Q5 = _Q3.length; _Q4 < _Q5; _Q4++) {
				/*22976*/
				var _Q7 = $k[--$j]; /*22976*/
				var _Q8 = $k[--$j]; /*22976*/
				$k[$j++] = ($get(_Q3, _Q4) + _Q7) % 113; /*22976*/
				$k[$j++] = _Q8; /*22976*/
				$k[$j++] = _Q7 + _Q8; /*22976*/
			} /*22976*/
			$j -= 2; /*22976*/
			for (var _QA = 0, _QB = $1.nc; _QA < _QB; _QA++) {
				/*22977*/
				$k[$j++] = 0; /*22977*/
			} /*22977*/
			$1.rscws = $a(); /*22977*/
			for (var _QF = 0, _QE = $1.step - 1; _QF <= _QE; _QF += 1) {
				/*23001*/
				$1.start = _QF; /*22980*/
				$1.ND = ~~((((($1.nd + 1) - $1.start) + $1.step) - 1) / $1.step); /*22981*/
				$1.NW = ~~((((($1.nw + 1) - $1.start) + $1.step) - 1) / $1.step); /*22982*/
				$1.NC = $1.NW - $1.ND; /*22983*/
				$k[$j++] = Infinity; /*22984*/
				$k[$j++] = 1; /*22984*/
				for (var _QR = 0, _QS = $1.NC; _QR < _QS; _QR++) {
					/*22984*/
					$k[$j++] = 0; /*22984*/
				} /*22984*/
				$1.coeffs = $a(); /*22984*/
				for (var _QW = 1, _QV = $1.NC; _QW <= _QV; _QW += 1) {
					/*22991*/
					$1.i = _QW; /*22986*/
					for (var _QY = $1.NC; _QY >= 1; _QY -= 1) {
						/*22990*/
						$1.j = _QY; /*22988*/
						$put($1.coeffs, $1.j, (($get($1.coeffs, $1.j) + 113) - (($get($1.rsalog, $1.i) * $get($1.coeffs, $1.j - 1)) % 113)) % 113); /*22989*/
					} /*22989*/
				} /*22989*/
				for (var _Qm = 0, _Ql = $1.ND - 1; _Qm <= _Ql; _Qm += 1) {
					/*22999*/
					$k[$j++] = 't'; /*22993*/
					$k[$j++] = $1.rscws; /*22993*/
					$k[$j++] = _Qm; /*22993*/
					$1.offset(); /*22993*/
					var _Qo = $k[--$j]; /*22993*/
					var _Qq = $get($k[--$j], _Qo); /*22993*/
					$k[$j++] = _Qq; /*22993*/
					$k[$j++] = $1.rscws; /*22993*/
					$k[$j++] = $1.ND; /*22993*/
					$1.offset(); /*22993*/
					var _Qt = $k[--$j]; /*22993*/
					var _Qv = $get($k[--$j], _Qt); /*22993*/
					var _Qw = $k[--$j]; /*22993*/
					$1[$k[--$j]] = (_Qw + _Qv) % 113; /*22993*/
					for (var _R0 = 0, _Qz = $1.NC - 2; _R0 <= _Qz; _R0 += 1) {
						/*22997*/
						$1.j = _R0; /*22995*/
						$k[$j++] = $1.rscws; /*22996*/
						$k[$j++] = $1.ND + $1.j; /*22996*/
						$1.offset(); /*22996*/
						$k[$j++] = $1.rscws; /*22996*/
						$k[$j++] = ($1.ND + $1.j) + 1; /*22996*/
						$1.offset(); /*22996*/
						var _R7 = $k[--$j]; /*22996*/
						var _R9 = $get($k[--$j], _R7); /*22996*/
						var _RE = $k[--$j]; /*22996*/
						$put($k[--$j], _RE, ((_R9 + 113) - (($1.t * $get($1.coeffs, $1.j + 1)) % 113)) % 113); /*22996*/
					} /*22996*/
					$k[$j++] = $1.rscws; /*22998*/
					$k[$j++] = ($1.ND + $1.NC) - 1; /*22998*/
					$1.offset(); /*22998*/
					var _RN = $k[--$j]; /*22998*/
					$put($k[--$j], _RN, (113 - (($1.t * $get($1.coeffs, $1.NC)) % 113)) % 113); /*22998*/
				} /*22998*/
				for (var _RS = $1.ND, _RR = $1.NW - 1; _RS <= _RR; _RS += 1) {
					/*23000*/
					$k[$j++] = _RS; /*23000*/
					$k[$j++] = $1.rscws; /*23000*/
					$k[$j++] = _RS; /*23000*/
					$1.offset(); /*23000*/
					var _RV = $k[--$j]; /*23000*/
					var _RW = $k[--$j]; /*23000*/
					var _RX = $k[--$j]; /*23000*/
					$k[$j++] = _RW; /*23000*/
					$k[$j++] = _RV; /*23000*/
					$k[$j++] = 113; /*23000*/
					$k[$j++] = $1.rscws; /*23000*/
					$k[$j++] = _RX; /*23000*/
					$1.offset(); /*23000*/
					var _RY = $k[--$j]; /*23000*/
					var _Ra = $get($k[--$j], _RY); /*23000*/
					var _Rb = $k[--$j]; /*23000*/
					var _Rc = $k[--$j]; /*23000*/
					$put($k[--$j], _Rc, (_Rb - _Ra) % 113); /*23000*/
				} /*23000*/
			} /*23000*/
			$1.bits = $s($1.ndots); /*23004*/
			$puti($1.bits, 0, $get($a(["00", "01", "10", "11"]), $1.mask)); /*23005*/
			for (var _Rm = 1, _Rl = $1.nw; _Rm <= _Rl; _Rm += 1) {
				/*23009*/
				$1.i = _Rm; /*23007*/
				$puti($1.bits, (($1.i - 1) * 9) + 2, $get($1.encs, $get($1.rscws, $1.i))); /*23008*/
			} /*23008*/
			if ($1.rembits > 0) { //no-else/*23012*/
				$puti($1.bits, ($1.nw * 9) + 2, $geti("11111111111111111", 0, $1.rembits)); /*23011*/
			} /*23011*/
			var _Rz = $1.outline; /*23015*/
			$1.pixs = $arrcpy($a(_Rz.length), _Rz); /*23015*/
			$1.posx = 0; /*23016*/
			$k[$j++] = 'posy'; /*23017*/
			if (($1.rows % 2) == 0) {
				/*23017*/
				$k[$j++] = 0; /*23017*/
			} else {
				/*23017*/
				$k[$j++] = $1.rows - 1; /*23017*/
			} /*23017*/
			var _S4 = $k[--$j]; /*23017*/
			$1[$k[--$j]] = _S4; /*23017*/
			$forall($geti($1.bits, 0, $1.bits.length - 6), function() {
				/*23036*/
				for (;;) {
					/*23034*/
					$k[$j++] = $1.pixs; /*23020*/
					$k[$j++] = $1.posx; /*23020*/
					$k[$j++] = $1.posy; /*23020*/
					$1.dmv(); /*23020*/
					var _SC = $k[--$j]; /*23020*/
					if ($get($k[--$j], _SC) == -1) { //no-else/*23020*/
						break; /*23020*/
					} /*23020*/
					if (($1.rows % 2) == 0) {
						/*23031*/
						$1.posy = $1.posy + 1; /*23022*/
						if ($1.posy == $1.rows) { //no-else/*23026*/
							$1.posy = 0; /*23024*/
							$1.posx = $1.posx + 1; /*23025*/
						} /*23025*/
					} else {
						/*23031*/
						$1.posx = $1.posx + 1; /*23028*/
						if ($1.posx == $1.columns) { //no-else/*23032*/
							$1.posx = 0; /*23030*/
							$1.posy = $1.posy - 1; /*23031*/
						} /*23031*/
					} /*23031*/
				} /*23031*/
				$k[$j++] = $1.pixs; /*23035*/
				$k[$j++] = $1.posx; /*23035*/
				$k[$j++] = $1.posy; /*23035*/
				$1.dmv(); /*23035*/
				var _SR = $k[--$j]; /*23035*/
				var _SS = $k[--$j]; /*23035*/
				$put(_SS, _SR, $k[--$j] - 48); /*23035*/
			}); /*23035*/
			for (var _SU = 0; _SU <= 5; _SU += 1) {
				/*23041*/
				$1.i = _SU; /*23038*/
				$k[$j++] = $1.pixs; /*23039*/
				$aload($get($1.sixedges, $1.i)); /*23039*/
				$1.dmv(); /*23039*/
				var _Sd = $k[--$j]; /*23040*/
				$put($k[--$j], _Sd, $get($1.bits, ($1.bits.length - 6) + $1.i) - 48); /*23040*/
			} /*23040*/
			$k[$j++] = 'score'; /*23044*/
			$k[$j++] = $1.pixs; /*23044*/
			$1.evalsymbol(); /*23044*/
			var _Sg = $k[--$j]; /*23044*/
			$1[$k[--$j]] = _Sg; /*23044*/
			if ($1.score > $1.bestscore) { //no-else/*23049*/
				$1.bestsym = $1.pixs; /*23046*/
				$1.bestscore = $1.score; /*23047*/
				if ($1.fast && ($1.bestscore > (~~(($1.rows * $1.columns) / 2)))) { //no-else/*23048*/
					return true; /*23048*/
				} /*23048*/
			} /*23048*/
			var _Sq = $1.pixs; /*23052*/
			$1.litmask = $arrcpy($a(_Sq.length), _Sq); /*23052*/
			for (var _St = 0; _St <= 5; _St += 1) {
				/*23057*/
				$1.i = _St; /*23054*/
				$k[$j++] = $1.litmask; /*23055*/
				$aload($get($1.sixedges, $1.i)); /*23055*/
				$1.dmv(); /*23055*/
				var _Sy = $k[--$j]; /*23056*/
				$put($k[--$j], _Sy, 1); /*23056*/
			} /*23056*/
			$put($1.litmasks, $1.mask, $1.litmask); /*23058*/
			if ($1.fast) { //no-else/*23068*/
				$k[$j++] = 'score'; /*23062*/
				$k[$j++] = $1.litmask; /*23062*/
				$1.evalsymbol(); /*23062*/
				var _T5 = $k[--$j]; /*23062*/
				$1[$k[--$j]] = _T5; /*23062*/
				if ($gt($1.score, $1.bestscore)) { //no-else/*23067*/
					$1.bestsym = $1.litmask; /*23064*/
					$1.bestscore = $1.score; /*23065*/
					if ($1.bestscore > (~~(($1.rows * $1.columns) / 2))) { //no-else/*23066*/
						return true; /*23066*/
					} /*23066*/
				} /*23066*/
			} /*23066*/
		}); /*23066*/
		$1.pixs = $1.bestsym; /*23071*/
		if ((!$1.fast) && ($1.bestscore <= (~~(($1.rows * $1.columns) / 2)))) { //no-else/*23085*/
			$1.bestscore = -99999999; /*23075*/
			$forall($1.masks, function() {
				/*23083*/
				$1.litmask = $get($1.litmasks, $k[--$j]); /*23077*/
				$k[$j++] = 'score'; /*23078*/
				$k[$j++] = $1.litmask; /*23078*/
				$1.evalsymbol(); /*23078*/
				var _TO = $k[--$j]; /*23078*/
				$1[$k[--$j]] = _TO; /*23078*/
				if ($1.score > $1.bestscore) { //no-else/*23082*/
					$1.bestsym = $1.litmask; /*23080*/
					$1.bestscore = $1.score; /*23081*/
				} /*23081*/
			}); /*23081*/
			$1.pixs = $1.bestsym; /*23084*/
		} /*23084*/
		var _Tb = new Map([
			["ren", $0.renmatrix],
			["dotty", true],
			["pixs", $1.pixs],
			["pixx", $1.columns],
			["pixy", $1.rows],
			["height", ($1.rows * 2) / 72],
			["width", ($1.columns * 2) / 72],
			["opt", $1.options]
		]); /*23096*/
		$k[$j++] = _Tb; /*23099*/
		if (!$1.dontdraw) { //no-else/*23099*/
			$0.renmatrix(); /*23099*/
		} /*23099*/
	};
	$0.ultracode = function() {
		var $1 = {}; /*23128*/
		$1.options = $k[--$j]; /*23130*/
		$1.barcode = $k[--$j]; /*23131*/
		$1.dontdraw = false; /*23133*/
		$1.eclevel = "EC2"; /*23134*/
		$1.parse = false; /*23135*/
		$1.parsefnc = false; /*23136*/
		$forall($1.options, function() {
			/*23147*/
			var _3 = $k[--$j]; /*23147*/
			$1[$k[--$j]] = _3; /*23147*/
		}); /*23147*/
		$1.barlen = $1.barcode.length; /*23170*/
		$1.fn1 = -1; /*23173*/
		$1.fn3 = -2; /*23173*/
		var _8 = new Map([
			["FNC1", $1.fn1],
			["FNC3", $1.fn3]
		]); /*23176*/
		$1.fncvals = _8; /*23177*/
		$1.msg = $a($1.barlen); /*23178*/
		$1.i = 0; /*23179*/
		$1.j = 0; /*23179*/
		for (;;) {
			/*23218*/
			if ($1.i == $1.barlen) { //no-else/*23180*/
				break; /*23180*/
			} /*23180*/
			$1.char = $get($1.barcode, $1.i); /*23181*/
			$1.i = $1.i + 1; /*23182*/
			if (($1.parsefnc && ($1.char == 94)) && ($1.i < $1.barlen)) { //no-else/*23215*/
				if ($get($1.barcode, $1.i) != 94) {
					/*23213*/
					if ($1.i >= ($1.barlen - 3)) { //no-else/*23187*/
						$k[$j++] = 'bwipp.truncatedFNC'; /*23186*/
						$k[$j++] = "Function character truncated"; /*23186*/
						$0.raiseerror(); /*23186*/
					} /*23186*/
					var _S = $geti($1.barcode, $1.i, 4); /*23188*/
					$k[$j++] = _S; /*23210*/
					if ($ne($geti(_S, 0, 3), "ECI")) {
						/*23209*/
						var _U = $k[--$j]; /*23190*/
						var _W = $get($1.fncvals, _U) !== undefined; /*23190*/
						$k[$j++] = _U; /*23194*/
						if (!_W) { //no-else/*23194*/
							var _X = $k[--$j]; /*23191*/
							var _Y = $s(_X.length + 28); /*23191*/
							$puti(_Y, 28, _X); /*23191*/
							$puti(_Y, 0, "Unknown function character: "); /*23192*/
							$k[$j++] = 'bwipp.unknownFNC'; /*23193*/
							$k[$j++] = _Y; /*23193*/
							$0.raiseerror(); /*23193*/
						} /*23193*/
						var _b = $get($1.fncvals, $k[--$j]); /*23195*/
						$1.i = $1.i + 4; /*23196*/
						$k[$j++] = _b; /*23196*/
					} else {
						/*23209*/
						$j--; /*23198*/
						if ($1.i >= ($1.barlen - 8)) { //no-else/*23201*/
							$k[$j++] = 'bwipp.truncatedECI'; /*23200*/
							$k[$j++] = "ECI truncated"; /*23200*/
							$0.raiseerror(); /*23200*/
						} /*23200*/
						var _h = $geti($1.barcode, $1.i + 3, 6); /*23202*/
						$k[$j++] = _h; /*23207*/
						$forall(_h, function() {
							/*23207*/
							var _i = $k[--$j]; /*23204*/
							if ((_i < 48) || (_i > 57)) { //no-else/*23206*/
								$k[$j++] = 'bwipp.invalidECI'; /*23205*/
								$k[$j++] = "ECI must be 000000 to 999999"; /*23205*/
								$0.raiseerror(); /*23205*/
							} /*23205*/
						}); /*23205*/
						var _j = $k[--$j]; /*23208*/
						$k[$j++] = 0; /*23208*/
						$forall(_j, function() {
							/*23208*/
							var _k = $k[--$j]; /*23208*/
							var _l = $k[--$j]; /*23208*/
							$k[$j++] = (_l - (_k - 48)) * 10; /*23208*/
						}); /*23208*/
						var _m = $k[--$j]; /*23208*/
						$1.i = $1.i + 9; /*23209*/
						$k[$j++] = (~~(_m / 10)) - 1000000; /*23209*/
					} /*23209*/
					$1.char = $k[--$j]; /*23211*/
				} else {
					/*23213*/
					$1.i = $1.i + 1; /*23213*/
				} /*23213*/
			} /*23213*/
			$put($1.msg, $1.j, $1.char); /*23216*/
			$1.j = $1.j + 1; /*23217*/
		} /*23217*/
		$1.msg = $geti($1.msg, 0, $1.j); /*23219*/
		$1.msglen = $1.msg.length; /*23220*/
		$1.start = 257; /*23223*/
		$1.scr = $a([]); /*23224*/
		$1.link1 = 0; /*23225*/
		$1.scp = $a([]); /*23226*/
		$k[$j++] = Infinity; /*23232*/
		$aload($1.scr); /*23228*/
		$aload($1.scp); /*23229*/
		$forall($1.msg, function() {
			/*23233*/
			var _13 = $k[--$j]; /*23231*/
			$k[$j++] = _13; /*23231*/
			if (_13 == $1.fn1) { //no-else/*23231*/
				$j--; /*23231*/
				$k[$j++] = 268; /*23231*/
			} /*23231*/
			var _15 = $k[--$j]; /*23232*/
			$k[$j++] = _15; /*23232*/
			if (_15 == $1.fn3) { //no-else/*23232*/
				$j--; /*23232*/
				$k[$j++] = 269; /*23232*/
			} /*23232*/
		}); /*23232*/
		$1.dcws = $a(); /*23232*/
		$1.mcc = $1.dcws.length + 3; /*23235*/
		$1.eclval = $get($1.eclevel, 2) - 48; /*23237*/
		if ($1.eclval != 0) {
			/*23241*/
			$k[$j++] = 'qcc'; /*23239*/
			$k[$j++] = $get($a([0, 1, 2, 4, 6, 8]), $1.eclval); /*23239*/
			$k[$j++] = ~~($1.mcc / 25); /*23239*/
			if (($1.mcc % 25) != 0) { //no-else/*23239*/
				var _1H = $k[--$j]; /*23239*/
				$k[$j++] = _1H + 1; /*23239*/
			} /*23239*/
			var _1I = $k[--$j]; /*23239*/
			var _1J = $k[--$j]; /*23239*/
			$1[$k[--$j]] = (_1J * _1I) + 5; /*23239*/
		} else {
			/*23241*/
			$1.qcc = 3; /*23241*/
		} /*23241*/
		$1.acc = ($1.qcc - 3) + (78 * $1.link1); /*23243*/
		$1.tcc = $1.mcc + $1.qcc; /*23244*/
		$1.metrics = $a([$a([2, 4, 34, 5]), $a([3, 33, 82, 13]), $a([4, 82, 158, 23]), $a([5, 134, 282, 30])]); /*23254*/
		for (var _1U = 0; _1U <= 3; _1U += 1) {
			/*23265*/
			$1.i = _1U; /*23256*/
			$1.m = $get($1.metrics, $1.i); /*23257*/
			$1.rows = $get($1.m, 0); /*23258*/
			$1.minc = $get($1.m, 1); /*23259*/
			$1.maxc = $get($1.m, 2); /*23260*/
			$1.mcol = $get($1.m, 3); /*23261*/
			$1.okay = true; /*23262*/
			if (($1.tcc < $1.minc) || ($1.tcc > $1.maxc)) { //no-else/*23263*/
				$1.okay = false; /*23263*/
			} /*23263*/
			if ($1.okay) { //no-else/*23264*/
				break; /*23264*/
			} /*23264*/
		} /*23264*/
		if (!$1.okay) { //no-else/*23269*/
			$k[$j++] = 'bwipp.ultracodeNoValidSymbol'; /*23268*/
			$k[$j++] = "No valid symbol available"; /*23268*/
			$0.raiseerror(); /*23268*/
		} /*23268*/
		for (var _1n = $1.mcol; _1n <= 61; _1n += 1) {
			/*23283*/
			$1.columns = _1n; /*23273*/
			$k[$j++] = $1.columns; /*23275*/
			if ($1.columns >= 15) { //no-else/*23275*/
				var _1q = $k[--$j]; /*23275*/
				$k[$j++] = _1q - 1; /*23275*/
			} /*23275*/
			if ($1.columns >= 31) { //no-else/*23276*/
				var _1s = $k[--$j]; /*23276*/
				$k[$j++] = _1s - 1; /*23276*/
			} /*23276*/
			if ($1.columns >= 47) { //no-else/*23277*/
				var _1u = $k[--$j]; /*23277*/
				$k[$j++] = _1u - 1; /*23277*/
			} /*23277*/
			var _1y = (($k[--$j] * $1.rows) - 3) - $1.tcc; /*23278*/
			$k[$j++] = _1y; /*23281*/
			if (_1y >= 0) { //no-else/*23281*/
				$1.pads = $k[--$j]; /*23279*/
				break; /*23280*/
			} /*23280*/
			$j--; /*23282*/
		} /*23282*/
		$1.dcc = $1.columns - $1.mcol; /*23284*/
		$k[$j++] = Infinity; /*23294*/
		$k[$j++] = $1.start; /*23291*/
		$k[$j++] = $1.mcc; /*23291*/
		$k[$j++] = $1.acc; /*23291*/
		$aload($1.scr); /*23291*/
		$aload($1.dcws); /*23292*/
		for (var _28 = 0, _29 = $1.qcc; _28 < _29; _28++) {
			/*23293*/
			$k[$j++] = 0; /*23293*/
		} /*23293*/
		$k[$j++] = 0; /*23294*/
		$1.rsseq = $a(); /*23294*/
		$k[$j++] = Infinity; /*23298*/
		$k[$j++] = 1; /*23298*/
		for (var _2B = 0, _2C = 282; _2B < _2C; _2B++) {
			/*23298*/
			var _2D = $k[--$j]; /*23298*/
			$k[$j++] = _2D; /*23298*/
			$k[$j++] = (_2D * 3) % 283; /*23298*/
		} /*23298*/
		$1.rsalog = $a(); /*23298*/
		$1.rslog = $a(283); /*23299*/
		for (var _2G = 1; _2G <= 282; _2G += 1) {
			/*23300*/
			$put($1.rslog, $get($1.rsalog, _2G), _2G); /*23300*/
		} /*23300*/
		$1.rsprod = function() {
			var _2K = $k[--$j]; /*23304*/
			var _2L = $k[--$j]; /*23304*/
			$k[$j++] = _2L; /*23308*/
			$k[$j++] = _2K; /*23308*/
			if ((_2K != 0) && (_2L != 0)) {
				/*23307*/
				var _2O = $get($1.rslog, $k[--$j]); /*23305*/
				var _2T = $get($1.rsalog, (_2O + $get($1.rslog, $k[--$j])) % 282); /*23305*/
				$k[$j++] = _2T; /*23305*/
			} else {
				/*23307*/
				$j -= 2; /*23307*/
				$k[$j++] = 0; /*23307*/
			} /*23307*/
		}; /*23309*/
		$1.n = $1.mcc; /*23312*/
		$1.k = $1.qcc; /*23312*/
		$k[$j++] = Infinity; /*23313*/
		$k[$j++] = 1; /*23313*/
		for (var _2X = 0, _2Y = $1.k; _2X < _2Y; _2X++) {
			/*23313*/
			$k[$j++] = 0; /*23313*/
		} /*23313*/
		$1.coeffs = $a(); /*23313*/
		for (var _2c = 1, _2b = $1.k; _2c <= _2b; _2c += 1) {
			/*23322*/
			$1.i = _2c; /*23315*/
			$put($1.coeffs, $1.i, $get($1.coeffs, $1.i - 1)); /*23316*/
			for (var _2j = $1.i - 1; _2j >= 1; _2j -= 1) {
				/*23320*/
				$1.j = _2j; /*23318*/
				$k[$j++] = $1.coeffs; /*23319*/
				$k[$j++] = $1.j; /*23319*/
				$k[$j++] = $get($1.coeffs, $1.j - 1); /*23319*/
				$k[$j++] = $get($1.coeffs, $1.j); /*23319*/
				$k[$j++] = $get($1.rsalog, $1.i); /*23319*/
				$1.rsprod(); /*23319*/
				var _2v = $k[--$j]; /*23319*/
				var _2w = $k[--$j]; /*23319*/
				var _2x = $k[--$j]; /*23319*/
				$put($k[--$j], _2x, (_2w + _2v) % 283); /*23319*/
			} /*23319*/
			$k[$j++] = $1.coeffs; /*23321*/
			$k[$j++] = 0; /*23321*/
			$k[$j++] = $get($1.coeffs, 0); /*23321*/
			$k[$j++] = $get($1.rsalog, $1.i); /*23321*/
			$1.rsprod(); /*23321*/
			var _35 = $k[--$j]; /*23321*/
			var _36 = $k[--$j]; /*23321*/
			$put($k[--$j], _36, _35); /*23321*/
		} /*23321*/
		$1.coeffs = $geti($1.coeffs, 0, $1.coeffs.length - 1); /*23323*/
		for (var _3C = $1.coeffs.length - 1; _3C >= 0; _3C -= 2) {
			/*23324*/
			var _3D = $1.coeffs; /*23324*/
			$put(_3D, _3C, 283 - $get(_3D, _3C)); /*23324*/
		} /*23324*/
		for (var _3H = 0, _3G = $1.n - 1; _3H <= _3G; _3H += 1) {
			/*23333*/
			$1.t = ($get($1.rsseq, _3H) + $get($1.rsseq, $1.n)) % 283; /*23328*/
			for (var _3P = 0, _3O = $1.k - 1; _3P <= _3O; _3P += 1) {
				/*23332*/
				$1.j = _3P; /*23330*/
				$put($1.rsseq, $1.n + $1.j, ($get($1.rsseq, ($1.n + $1.j) + 1) + (283 - (($1.t * $get($1.coeffs, ($1.k - $1.j) - 1)) % 283))) % 283); /*23331*/
			} /*23331*/
		} /*23331*/
		for (var _3g = $1.n, _3f = $1.n + $1.k; _3g <= _3f; _3g += 1) {
			/*23334*/
			$put($1.rsseq, _3g, (283 - $get($1.rsseq, _3g)) % 283); /*23334*/
		} /*23334*/
		$1.ecws = $geti($1.rsseq, $1.n, $1.k); /*23335*/
		$1.dccu = $a([51363, 51563, 51653, 53153, 53163, 53513, 53563, 53613, 53653, 56153, 56163, 56313, 56353, 56363, 56513, 56563, 51316, 51356, 51536, 51616, 53156, 53516, 53536, 53616, 53636, 53656, 56136, 56156, 56316, 56356, 56516, 56536]); /*23342*/
		$1.dccl = $a([61351, 61361, 61531, 61561, 61631, 61651, 63131, 63151, 63161, 63531, 63561, 63631, 65131, 65161, 65351, 65631, 31351, 31361, 31531, 31561, 31631, 31651, 35131, 35151, 35161, 35361, 35631, 35651, 36131, 36151, 36351, 36531]); /*23349*/
		$1.tiles = $a([13135, 13136, 13153, 13156, 13163, 13165, 13513, 13515, 13516, 13531, 13535, 13536, 13561, 13563, 13565, 13613, 13615, 13616, 13631, 13635, 13636, 13651, 13653, 13656, 15135, 15136, 15153, 15163, 15165, 15313, 15315, 15316, 15351, 15353, 15356, 15361, 15363, 15365, 15613, 15615, 15616, 15631, 15635, 15636, 15651, 15653, 15656, 16135, 16136, 16153, 16156, 16165, 16313, 16315, 16316, 16351, 16353, 16356, 16361, 16363, 16365, 16513, 16515, 16516, 16531, 16535, 16536, 16561, 16563, 16565, 31315, 31316, 31351, 31356, 31361, 31365, 31513, 31515, 31516, 31531, 31535, 31536, 31561, 31563, 31565, 31613, 31615, 31631, 31635, 31636, 31651, 31653, 31656, 35131, 35135, 35136, 35151, 35153, 35156, 35161, 35163, 35165, 35315, 35316, 35351, 35356, 35361, 35365, 35613, 35615, 35616, 35631, 35635, 35636, 35651, 35653, 35656, 36131, 36135, 36136, 36151, 36153, 36156, 36163, 36165, 36315, 36316, 36351, 36356, 36361, 36365, 36513, 36515, 36516, 36531, 36535, 36536, 36561, 36563, 36565, 51313, 51315, 51316, 51351, 51353, 51356, 51361, 51363, 51365, 51513, 51516, 51531, 51536, 51561, 51563, 51613, 51615, 51616, 51631, 51635, 51636, 51651, 51653, 51656, 53131, 53135, 53136, 53151, 53153, 53156, 53161, 53163, 53165, 53513, 53516, 53531, 53536, 53561, 53563, 53613, 53615, 53616, 53631, 53635, 53636, 53651, 53653, 53656, 56131, 56135, 56136, 56151, 56153, 56156, 56161, 56163, 56165, 56313, 56315, 56316, 56351, 56353, 56356, 56361, 56363, 56365, 56513, 56516, 56531, 56536, 56561, 56563, 61313, 61315, 61316, 61351, 61353, 61356, 61361, 61363, 61365, 61513, 61515, 61516, 61531, 61535, 61536, 61561, 61563, 61565, 61615, 61631, 61635, 61651, 61653, 63131, 63135, 63136, 63151, 63153, 63156, 63161, 63163, 63165, 63513, 63515, 63516, 63531, 63535, 63536, 63561, 63563, 63565, 63613, 63615, 63631, 63635, 63651, 63653, 65131, 65135, 65136, 65151, 65153, 65156, 65161, 65163, 65165, 65313, 65315, 65316, 65351, 65353, 65356, 65361, 65363, 65365, 65613, 65615, 65631, 65635, 65651, 65653, 56565, 51515]); /*23381*/
		$1.rows = ($1.rows * 6) + 1; /*23384*/
		$1.columns = $1.columns + 6; /*23385*/
		$k[$j++] = Infinity; /*23386*/
		for (var _3v = 0, _3w = $1.rows * $1.columns; _3v < _3w; _3v++) {
			/*23386*/
			$k[$j++] = -1; /*23386*/
		} /*23386*/
		$1.pixs = $a(); /*23386*/
		$1.qmv = function() {
			var _3z = $k[--$j]; /*23387*/
			var _40 = $k[--$j]; /*23387*/
			$k[$j++] = _40 + (_3z * $1.columns); /*23387*/
		}; /*23387*/
		for (var _43 = 0, _42 = $1.columns - 1; _43 <= _42; _43 += 1) {
			/*23396*/
			$1.i = _43; /*23389*/
			for (var _46 = 0, _45 = $1.rows - 1; _46 <= _45; _46 += 6) {
				/*23393*/
				$1.j = _46; /*23391*/
				if ($1.i >= 5) { //no-else/*23392*/
					$k[$j++] = $1.pixs; /*23392*/
					$k[$j++] = $1.i; /*23392*/
					$k[$j++] = $1.j; /*23392*/
					$1.qmv(); /*23392*/
					var _4C = $k[--$j]; /*23392*/
					$put($k[--$j], _4C, ($1.i % 2) * 9); /*23392*/
				} /*23392*/
			} /*23392*/
			$k[$j++] = $1.pixs; /*23394*/
			$k[$j++] = $1.i; /*23394*/
			$k[$j++] = 0; /*23394*/
			$1.qmv(); /*23394*/
			var _4G = $k[--$j]; /*23394*/
			$put($k[--$j], _4G, 9); /*23394*/
			$k[$j++] = $1.pixs; /*23395*/
			$k[$j++] = $1.i; /*23395*/
			$k[$j++] = $1.rows - 1; /*23395*/
			$1.qmv(); /*23395*/
			var _4L = $k[--$j]; /*23395*/
			$put($k[--$j], _4L, 9); /*23395*/
		} /*23395*/
		for (var _4P = 1, _4O = $1.rows - 2; _4P <= _4O; _4P += 1) {
			/*23409*/
			$1.i = _4P; /*23398*/
			for (var _4S = 3, _4R = $1.columns - 1; _4S <= _4R; _4S += 16) {
				/*23402*/
				$1.j = _4S; /*23400*/
				$k[$j++] = $1.pixs; /*23401*/
				$k[$j++] = $1.j; /*23401*/
				$k[$j++] = $1.i; /*23401*/
				$1.qmv(); /*23401*/
				var _4X = $k[--$j]; /*23401*/
				$put($k[--$j], _4X, (1 - ($1.i % 2)) * 9); /*23401*/
			} /*23401*/
			$k[$j++] = $1.pixs; /*23403*/
			$k[$j++] = 0; /*23403*/
			$k[$j++] = $1.i; /*23403*/
			$1.qmv(); /*23403*/
			var _4b = $k[--$j]; /*23403*/
			$put($k[--$j], _4b, 9); /*23403*/
			$k[$j++] = $1.pixs; /*23404*/
			$k[$j++] = 1; /*23404*/
			$k[$j++] = $1.i; /*23404*/
			$1.qmv(); /*23404*/
			var _4g = $k[--$j]; /*23404*/
			$put($k[--$j], _4g, (1 - ($1.i % 2)) * 9); /*23404*/
			$k[$j++] = $1.pixs; /*23405*/
			$k[$j++] = 2; /*23405*/
			$k[$j++] = $1.i; /*23405*/
			$1.qmv(); /*23405*/
			var _4k = $k[--$j]; /*23405*/
			$put($k[--$j], _4k, 0); /*23405*/
			$k[$j++] = $1.pixs; /*23406*/
			$k[$j++] = 3; /*23406*/
			$k[$j++] = $1.i; /*23406*/
			$1.qmv(); /*23406*/
			var _4o = $k[--$j]; /*23406*/
			$put($k[--$j], _4o, 9); /*23406*/
			$k[$j++] = $1.pixs; /*23407*/
			$k[$j++] = 4; /*23407*/
			$k[$j++] = $1.i; /*23407*/
			$1.qmv(); /*23407*/
			var _4s = $k[--$j]; /*23407*/
			$put($k[--$j], _4s, 0); /*23407*/
			$k[$j++] = $1.pixs; /*23408*/
			$k[$j++] = $1.columns - 1; /*23408*/
			$k[$j++] = $1.i; /*23408*/
			$1.qmv(); /*23408*/
			var _4x = $k[--$j]; /*23408*/
			$put($k[--$j], _4x, 9); /*23408*/
		} /*23408*/
		$1.i = (~~($1.rows / 2)) - 5; /*23412*/
		$k[$j++] = Infinity; /*23416*/
		var _54 = $cvrs($s(5), $get($1.dccu, $1.dcc), 10); /*23414*/
		for (var _55 = 0, _56 = _54.length; _55 < _56; _55++) {
			/*23414*/
			$k[$j++] = $get(_54, _55) - 48; /*23414*/
		} /*23414*/
		var _5C = $cvrs($s(5), $get($1.dccl, $1.dcc), 10); /*23416*/
		$k[$j++] = 0; /*23416*/
		for (var _5D = 0, _5E = _5C.length; _5D < _5E; _5D++) {
			/*23416*/
			$k[$j++] = $get(_5C, _5D) - 48; /*23416*/
		} /*23416*/
		var _5G = $a(); /*23416*/
		for (var _5H = 0, _5I = _5G.length; _5H < _5I; _5H++) {
			/*23420*/
			$k[$j++] = $get(_5G, _5H); /*23418*/
			$k[$j++] = $1.pixs; /*23418*/
			$k[$j++] = 2; /*23418*/
			$k[$j++] = $1.i; /*23418*/
			$1.qmv(); /*23418*/
			var _5M = $k[--$j]; /*23418*/
			var _5N = $k[--$j]; /*23418*/
			$put(_5N, _5M, $k[--$j]); /*23418*/
			$1.i = $1.i + 1; /*23419*/
		} /*23419*/
		$k[$j++] = Infinity; /*23433*/
		$k[$j++] = $1.start; /*23426*/
		$k[$j++] = $1.mcc; /*23426*/
		$aload($1.ecws); /*23426*/
		$k[$j++] = $1.tcc; /*23430*/
		$k[$j++] = 283; /*23430*/
		$k[$j++] = $1.acc; /*23430*/
		$aload($1.scr); /*23430*/
		$aload($1.dcws); /*23431*/
		for (var _5Y = 0, _5Z = $1.pads; _5Y < _5Z; _5Y++) {
			/*23432*/
			$k[$j++] = 284; /*23432*/
		} /*23432*/
		$k[$j++] = $1.qcc; /*23433*/
		$1.tileseq = $a(); /*23433*/
		$1.x = 5; /*23436*/
		$1.y = 1; /*23436*/
		var _5c = $1.tileseq; /*23437*/
		for (var _5d = 0, _5e = _5c.length; _5d < _5e; _5d++) {
			/*23450*/
			var _5j = $cvrs($s(5), $get($1.tiles, $get(_5c, _5d)), 10); /*23438*/
			for (var _5k = 0, _5l = _5j.length; _5k < _5l; _5k++) {
				/*23441*/
				$k[$j++] = $get(_5j, _5k); /*23439*/
				$k[$j++] = $1.pixs; /*23439*/
				$k[$j++] = $1.x; /*23439*/
				$k[$j++] = $1.y; /*23439*/
				$1.qmv(); /*23439*/
				var _5q = $k[--$j]; /*23439*/
				var _5r = $k[--$j]; /*23439*/
				$put(_5r, _5q, $k[--$j] - 48); /*23439*/
				$1.y = $1.y + 1; /*23440*/
			} /*23440*/
			if ($1.y != ($1.rows - 1)) {
				/*23447*/
				$1.y = $1.y + 1; /*23443*/
			} else {
				/*23447*/
				$1.x = $1.x + 1; /*23445*/
				$1.y = 1; /*23445*/
				$k[$j++] = $1.pixs; /*23446*/
				$k[$j++] = $1.x; /*23446*/
				$k[$j++] = $1.y; /*23446*/
				$1.qmv(); /*23446*/
				var _61 = $k[--$j]; /*23446*/
				if ($get($k[--$j], _61) != -1) { //no-else/*23448*/
					$1.x = $1.x + 1; /*23447*/
				} /*23447*/
			} /*23447*/
		} /*23447*/
		var _6A = new Map([
			[0, "00000000"],
			[9, "000000FF"],
			[1, "FF000000"],
			[3, "00FF0000"],
			[5, "0000FF00"],
			[6, "7F00FF00"]
		]); /*23466*/
		var _6C = new Map([
			["ren", $0.renmatrix],
			["pixs", $1.pixs],
			["pixx", $1.columns],
			["pixy", $1.rows],
			["height", ($1.rows / 72) * 2],
			["width", ($1.columns / 72) * 2],
			["colormap", _6A],
			["opt", $1.options]
		]); /*23468*/
		$k[$j++] = _6C; /*23471*/
		if (!$1.dontdraw) { //no-else/*23471*/
			$0.renmatrix(); /*23471*/
		} /*23471*/
	};
	$0.jabcode = function() {
		var $1 = {}; /*23500*/
		$1.options = $k[--$j]; /*23502*/
		$1.barcode = $k[--$j]; /*23503*/
		$1.dontdraw = false; /*23505*/
		$1.rows = -1; /*23506*/
		$1.columns = -1; /*23507*/
		$1.slave = false; /*23508*/
		$1.colors = 16; /*23509*/
		$1.eclevel = 6; /*23510*/
		$1.raw = false; /*23511*/
		$1.parse = false; /*23512*/
		$1.parsefnc = false; /*23513*/
		$1.mask = -1; /*23514*/
		$forall($1.options, function() {
			/*23525*/
			var _3 = $k[--$j]; /*23525*/
			$1[$k[--$j]] = _3; /*23525*/
		}); /*23525*/
		$1.rows = ~~$1.rows; /*23527*/
		$1.columns = ~~$1.columns; /*23528*/
		$1.colors = ~~$1.colors; /*23529*/
		$1.eclevel = ~~$1.eclevel; /*23530*/
		$1.mask = ~~$1.mask; /*23531*/
		$1.databpm = ~~(Math.round(Math.log($1.colors) / Math.log(2))); /*23533*/
		var _B = $1.colors; /*23534*/
		$k[$j++] = 'metabpm'; /*23534*/
		$k[$j++] = _B; /*23534*/
		if (_B > 8) { //no-else/*23534*/
			$j--; /*23534*/
			$k[$j++] = 8; /*23534*/
		} /*23534*/
		var _C = $k[--$j]; /*23534*/
		$1[$k[--$j]] = ~~(Math.round(Math.log(_C) / Math.log(2))); /*23534*/
		$1.barlen = $1.barcode.length; /*23557*/
		$1.fn1 = -1; /*23560*/
		var _G = new Map([
			["FNC1", $1.fn1]
		]); /*23562*/
		$1.fncvals = _G; /*23563*/
		$1.msg = $a($1.barlen); /*23564*/
		$1.i = 0; /*23565*/
		$1.j = 0; /*23565*/
		for (;;) {
			/*23604*/
			if ($1.i == $1.barlen) { //no-else/*23566*/
				break; /*23566*/
			} /*23566*/
			$1.char = $get($1.barcode, $1.i); /*23567*/
			$1.i = $1.i + 1; /*23568*/
			if (($1.parsefnc && ($1.char == 94)) && ($1.i < $1.barlen)) { //no-else/*23601*/
				if ($get($1.barcode, $1.i) != 94) {
					/*23599*/
					if ($1.i >= ($1.barlen - 3)) { //no-else/*23573*/
						$k[$j++] = 'bwipp.truncatedFNC'; /*23572*/
						$k[$j++] = "Function character truncated"; /*23572*/
						$0.raiseerror(); /*23572*/
					} /*23572*/
					var _a = $geti($1.barcode, $1.i, 4); /*23574*/
					$k[$j++] = _a; /*23596*/
					if ($ne($geti(_a, 0, 3), "ECI")) {
						/*23595*/
						var _c = $k[--$j]; /*23576*/
						var _e = $get($1.fncvals, _c) !== undefined; /*23576*/
						$k[$j++] = _c; /*23580*/
						if (!_e) { //no-else/*23580*/
							var _f = $k[--$j]; /*23577*/
							var _g = $s(_f.length + 28); /*23577*/
							$puti(_g, 28, _f); /*23577*/
							$puti(_g, 0, "Unknown function character: "); /*23578*/
							$k[$j++] = 'bwipp.unknownFNC'; /*23579*/
							$k[$j++] = _g; /*23579*/
							$0.raiseerror(); /*23579*/
						} /*23579*/
						var _j = $get($1.fncvals, $k[--$j]); /*23581*/
						$1.i = $1.i + 4; /*23582*/
						$k[$j++] = _j; /*23582*/
					} else {
						/*23595*/
						$j--; /*23584*/
						if ($1.i >= ($1.barlen - 8)) { //no-else/*23587*/
							$k[$j++] = 'bwipp.truncatedECI'; /*23586*/
							$k[$j++] = "ECI truncated"; /*23586*/
							$0.raiseerror(); /*23586*/
						} /*23586*/
						var _p = $geti($1.barcode, $1.i + 3, 6); /*23588*/
						$k[$j++] = _p; /*23593*/
						$forall(_p, function() {
							/*23593*/
							var _q = $k[--$j]; /*23590*/
							if ((_q < 48) || (_q > 57)) { //no-else/*23592*/
								$k[$j++] = 'bwipp.invalidECI'; /*23591*/
								$k[$j++] = "ECI must be 000000 to 999999"; /*23591*/
								$0.raiseerror(); /*23591*/
							} /*23591*/
						}); /*23591*/
						var _r = $k[--$j]; /*23594*/
						$k[$j++] = 0; /*23594*/
						$forall(_r, function() {
							/*23594*/
							var _s = $k[--$j]; /*23594*/
							var _t = $k[--$j]; /*23594*/
							$k[$j++] = (_t - (_s - 48)) * 10; /*23594*/
						}); /*23594*/
						var _u = $k[--$j]; /*23594*/
						$1.i = $1.i + 9; /*23595*/
						$k[$j++] = (~~(_u / 10)) - 1000000; /*23595*/
					} /*23595*/
					$1.char = $k[--$j]; /*23597*/
				} else {
					/*23599*/
					$1.i = $1.i + 1; /*23599*/
				} /*23599*/
			} /*23599*/
			$put($1.msg, $1.j, $1.char); /*23602*/
			$1.j = $1.j + 1; /*23603*/
		} /*23603*/
		$1.msg = $geti($1.msg, 0, $1.j); /*23605*/
		$1.msglen = $1.msg.length; /*23606*/
		$1.addtobits = function() {
			var _16 = $k[--$j]; /*23627*/
			$puti($1.bits, $1.j, _16); /*23627*/
			$1.j = _16.length + $1.j; /*23628*/
		}; /*23629*/
		$1.tofixedbits = function() {
			var _1B = $strcpy($s(13), "0000000000000"); /*23632*/
			var _1C = $k[--$j]; /*23632*/
			var _1F = $cvrs($s(13), $k[--$j], 2); /*23632*/
			$puti(_1B, _1C - _1F.length, _1F); /*23633*/
			$k[$j++] = $geti(_1B, 0, _1C); /*23634*/
		}; /*23635*/
		var _1I = ($1.msglen <= 15) ? 4 : 17; /*23638*/
		$1.bits = $s(((7 + _1I) + ($1.msglen * 8)) + 12); /*23638*/
		$1.j = 0; /*23639*/
		$k[$j++] = 31; /*23640*/
		$k[$j++] = 5; /*23640*/
		$1.tofixedbits(); /*23640*/
		$1.addtobits(); /*23640*/
		$k[$j++] = "00"; /*23641*/
		$1.addtobits(); /*23641*/
		if ($1.msglen <= 15) {
			/*23646*/
			$k[$j++] = $1.msglen; /*23643*/
			$k[$j++] = 4; /*23643*/
			$1.tofixedbits(); /*23643*/
			$1.addtobits(); /*23643*/
		} else {
			/*23646*/
			$k[$j++] = "0000"; /*23645*/
			$1.addtobits(); /*23645*/
			$k[$j++] = $1.msglen - 16; /*23646*/
			$k[$j++] = 13; /*23646*/
			$1.tofixedbits(); /*23646*/
			$1.addtobits(); /*23646*/
		} /*23646*/
		for (var _1Q = 0, _1P = $1.msglen - 1; _1Q <= _1P; _1Q += 1) {
			/*23650*/
			$k[$j++] = $get($1.msg, _1Q); /*23649*/
			$k[$j++] = 8; /*23649*/
			$1.tofixedbits(); /*23649*/
			$1.addtobits(); /*23649*/
		} /*23649*/
		$k[$j++] = 28; /*23651*/
		$k[$j++] = 5; /*23651*/
		$1.tofixedbits(); /*23651*/
		$1.addtobits(); /*23651*/
		$k[$j++] = 31; /*23652*/
		$k[$j++] = 5; /*23652*/
		$1.tofixedbits(); /*23652*/
		$1.addtobits(); /*23652*/
		$k[$j++] = "11"; /*23653*/
		$1.addtobits(); /*23653*/
		$1.diffside = 21; /*23656*/
		$1.sameshape = false; /*23657*/
		$1.sameecc = false; /*23658*/
		$1.hasslaves = false; /*23659*/
		$1.metrics = function() {
			$1.mc = $k[--$j]; /*23663*/
			$1.mr = $k[--$j]; /*23663*/
			var _1V = $1.mc; /*23664*/
			var _1W = $1.mr; /*23664*/
			var _1X = $1.mc; /*23665*/
			var _1Y = $1.mr; /*23665*/
			var _1Z = $1.colors; /*23667*/
			var _1a = 64; /*23667*/
			if (64 > _1Z) { //no-else/*23667*/
				var _ = _1Z; /*23667*/
				_1Z = _1a; /*23667*/
				_1a = _; /*23667*/
			} /*23667*/
			var _1c = $1.slave ? 7 : 17; /*23668*/
			$k[$j++] = _1V * _1W; /*23696*/
			$k[$j++] = ((((~~((_1X - 25) / 16)) + 2) * ((~~((_1Y - 25) / 16)) + 2)) - 4) * 7; /*23696*/
			$k[$j++] = _1a * 2; /*23696*/
			$k[$j++] = _1c * 4; /*23696*/
			if (!$1.slave) {
				/*23695*/
				var _1g = $eq($1.mr, $1.mc) ? 0 : 1; /*23672*/
				$1.metass = _1g; /*23672*/
				var _1h = $1.mr; /*23673*/
				var _1i = $1.mc; /*23673*/
				if ($lt(_1h, _1i)) { //no-else/*23673*/
					var _ = _1i; /*23673*/
					_1i = _1h; /*23673*/
					_1h = _; /*23673*/
				} /*23673*/
				$1.metavf = $get($a([0, 1, 2, 2, 3, 3, 3, 3]), ~~((_1h - 21) / 16)); /*23674*/
				$k[$j++] = 'metavlen'; /*23675*/
				if ($1.metass == 0) {
					/*23675*/
					$k[$j++] = $a([2, 2, 3, 4]); /*23675*/
				} else {
					/*23675*/
					$k[$j++] = $a([4, 6, 8, 10]); /*23675*/
				} /*23675*/
				var _1q = $get($k[--$j], $1.metavf); /*23675*/
				$1[$k[--$j]] = _1q; /*23675*/
				$1.metaelen = ($1.metavf * 2) + 10; /*23676*/
				$k[$j++] = (7 + $1.metavlen) + $1.metaelen; /*23679*/
				if ($1.hasslaves) { //no-else/*23679*/
					var _1w = $k[--$j]; /*23679*/
					$k[$j++] = _1w + 4; /*23679*/
				} /*23679*/
				var _1z = ~~(Math.ceil(($k[--$j] * 2) / $1.metabpm)); /*23682*/
				$1.nummetabits = (_1z * $1.metabpm) + 6; /*23682*/
				$k[$j++] = _1z + 6; /*23683*/
			} else {
				/*23695*/
				$k[$j++] = 3; /*23686*/
				if (!$1.sameshape) { //no-else/*23686*/
					var _22 = $k[--$j]; /*23686*/
					$k[$j++] = _22 + 5; /*23686*/
				} /*23686*/
				if ($1.hasslaves) { //no-else/*23687*/
					var _24 = $k[--$j]; /*23687*/
					$k[$j++] = _24 + 3; /*23687*/
				} /*23687*/
				if (!$1.sameecc) { //no-else/*23692*/
					var _26 = $1.mr; /*23689*/
					var _27 = $1.mc; /*23689*/
					if ($lt(_26, _27)) { //no-else/*23689*/
						var _ = _27; /*23689*/
						_27 = _26; /*23689*/
						_26 = _; /*23689*/
					} /*23689*/
					var _2A = $k[--$j]; /*23691*/
					$k[$j++] = _2A + $get($a([10, 12, 14, 14, 16, 16, 16, 16]), ~~((_26 - 21) / 16)); /*23691*/
				} /*23691*/
				var _2D = ~~(Math.ceil(($k[--$j] * 2) / $1.metabpm)); /*23695*/
				$1.nummetabits = _2D * $1.metabpm; /*23695*/
				$k[$j++] = _2D; /*23695*/
			} /*23695*/
			var _2F = $k[--$j]; /*23698*/
			$1.nummetamodules = _2F; /*23698*/
			var _2G = $k[--$j]; /*23699*/
			var _2H = $k[--$j]; /*23699*/
			var _2I = $k[--$j]; /*23699*/
			$1.numdatamodules = $k[--$j] - (_2I + (_2H + (_2G + _2F))); /*23699*/
			$1.numdatabits = $1.numdatamodules * $1.databpm; /*23700*/
		}; /*23701*/
		$1.coderate = $get($a([0.67, 0.63, 0.57, 0.55, 0.5, 0.43, 0.34, 0.25, 0.2, 0.17, 0.14]), $1.eclevel); /*23704*/
		$1.grosslen = ~~Math.ceil($1.bits.length / $1.coderate); /*23705*/
		$1.snapsize = function() {
			var _2S = (~~Math.ceil($k[--$j])) - 18; /*23706*/
			$k[$j++] = _2S; /*23706*/
			if (_2S < 0) { //no-else/*23706*/
				$j--; /*23706*/
				$k[$j++] = 0; /*23706*/
			} /*23706*/
			var _2T = $k[--$j]; /*23706*/
			$k[$j++] = ((~~(_2T / 4)) * 4) + 21; /*23706*/
		}; /*23706*/
		if (($1.rows == -1) && ($1.columns == -1)) {
			/*23735*/
			$k[$j++] = 'size'; /*23709*/
			$k[$j++] = Math.sqrt($1.grosslen); /*23709*/
			$1.snapsize(); /*23709*/
			var _2X = $k[--$j]; /*23709*/
			$1[$k[--$j]] = _2X; /*23709*/
			for (;;) {
				/*23714*/
				$k[$j++] = $1.size; /*23711*/
				$k[$j++] = $1.size; /*23711*/
				$1.metrics(); /*23711*/
				if ($1.grosslen <= $1.numdatabits) { //no-else/*23712*/
					break; /*23712*/
				} /*23712*/
				$1.size = $1.size + 4; /*23713*/
			} /*23713*/
			$1.rows = $1.size; /*23715*/
			$1.columns = $1.size; /*23716*/
		} else {
			/*23735*/
			if (($1.columns == -1) && ($1.rows != -1)) { //no-else/*23725*/
				$k[$j++] = 'columns'; /*23719*/
				$k[$j++] = $1.grosslen / $1.rows; /*23719*/
				$1.snapsize(); /*23719*/
				var _2k = $k[--$j]; /*23719*/
				$1[$k[--$j]] = _2k; /*23719*/
				for (;;) {
					/*23724*/
					$k[$j++] = $1.rows; /*23721*/
					$k[$j++] = $1.columns; /*23721*/
					$1.metrics(); /*23721*/
					if ($1.grosslen <= $1.numdatabits) { //no-else/*23722*/
						break; /*23722*/
					} /*23722*/
					$1.columns = $1.columns + 4; /*23723*/
				} /*23723*/
			} /*23723*/
			if (($1.rows == -1) && ($1.columns != -1)) { //no-else/*23733*/
				$k[$j++] = 'rows'; /*23727*/
				$k[$j++] = $1.grosslen / $1.columns; /*23727*/
				$1.snapsize(); /*23727*/
				var _2v = $k[--$j]; /*23727*/
				$1[$k[--$j]] = _2v; /*23727*/
				for (;;) {
					/*23732*/
					$k[$j++] = $1.rows; /*23729*/
					$k[$j++] = $1.columns; /*23729*/
					$1.metrics(); /*23729*/
					if ($1.grosslen <= $1.numdatabits) { //no-else/*23730*/
						break; /*23730*/
					} /*23730*/
					$1.rows = $1.rows + 4; /*23731*/
				} /*23731*/
			} /*23731*/
			if (($1.rows != -1) && ($1.columns != -1)) { //no-else/*23736*/
				$k[$j++] = $1.rows; /*23735*/
				$k[$j++] = $1.columns; /*23735*/
				$1.metrics(); /*23735*/
			} /*23735*/
		} /*23735*/
		$1.C = $1.numdatabits; /*23738*/
		$1.cols = $1.columns; /*23739*/
		if (($1.rows > 145) || ($1.cols > 145)) { //no-else/*23744*/
			$k[$j++] = 'bwipp.jabcodeNoValidSymbol'; /*23743*/
			$k[$j++] = "No valid symbol available"; /*23743*/
			$0.raiseerror(); /*23743*/
		} /*23743*/
		$1.min = $1.C; /*23747*/
		for (var _3B = 3; _3B <= 8; _3B += 1) {
			/*23759*/
			$1.i = _3B; /*23749*/
			for (var _3D = $1.i + 1; _3D <= 9; _3D += 1) {
				/*23758*/
				$1.j = _3D; /*23751*/
				$1.dist = (((~~($1.C / $1.j)) * $1.j) - ((~~($1.C / $1.j)) * $1.i)) - $1.bits.length; /*23752*/
				if (($1.dist < $1.min) && ($1.dist >= 0)) { //no-else/*23757*/
					$1.datawc = $1.i; /*23754*/
					$1.datawr = $1.j; /*23755*/
					$1.min = $1.dist; /*23756*/
				} /*23756*/
			} /*23756*/
		} /*23756*/
		$1.tmpbits = $s(((~~($1.C / $1.datawr)) * $1.datawr) - ((~~($1.C / $1.datawr)) * $1.datawc)); /*23762*/
		$puti($1.tmpbits, 0, $1.bits); /*23763*/
		for (var _3d = $1.bits.length, _3c = $1.tmpbits.length - 1; _3d <= _3c; _3d += 1) {
			/*23767*/
			var _3f = $get($1.tmpbits, _3d - 1); /*23765*/
			$k[$j++] = _3d; /*23765*/
			$k[$j++] = _3f; /*23765*/
			if ((_3f % 2) == 0) {
				/*23765*/
				var _3g = $k[--$j]; /*23765*/
				$k[$j++] = _3g + 1; /*23765*/
			} else {
				/*23765*/
				var _3h = $k[--$j]; /*23765*/
				$k[$j++] = _3h - 1; /*23765*/
			} /*23765*/
			var _3j = $k[--$j]; /*23766*/
			$put($1.tmpbits, $k[--$j], _3j); /*23766*/
		} /*23766*/
		$1.bits = $1.tmpbits; /*23768*/
		$1.m0 = 22609 + 1; /*23772*/
		$1.m1 = 62509 - 65536; /*23772*/
		$1.m2 = 19605; /*23772*/
		$1.m3 = 32557; /*23772*/
		$1.lcg64_temper = function() {
			$1.p00 = $1.m0 * $1.s0; /*23778*/
			$1.p01 = $1.m0 * $1.s1; /*23778*/
			$1.p02 = $1.m0 * $1.s2; /*23778*/
			$1.p03 = $1.m0 * $1.s3; /*23778*/
			$1.p10 = $1.m1 * $1.s0; /*23779*/
			$1.p11 = $1.m1 * $1.s1; /*23779*/
			$1.p12 = $1.m1 * $1.s2; /*23779*/
			$1.p13 = $1.m1 * $1.s3; /*23779*/
			$1.p20 = $1.m2 * $1.s0; /*23780*/
			$1.p21 = $1.m2 * $1.s1; /*23780*/
			$1.p22 = $1.m2 * $1.s2; /*23780*/
			$1.p23 = $1.m2 * $1.s3; /*23780*/
			$1.p30 = $1.m3 * $1.s0; /*23781*/
			$1.p31 = $1.m3 * $1.s1; /*23781*/
			$1.p32 = $1.m3 * $1.s2; /*23781*/
			$1.p33 = $1.m3 * $1.s3; /*23781*/
			$1.s3 = ($1.p33 % 65536) + 1; /*23783*/
			$1.s2 = (($1.p32 % 65536) + (~~($1.p33 / 65536))) + ($1.p23 % 65536); /*23785*/
			$1.s1 = ((($1.p31 % 65536) + (~~($1.p32 / 65536))) + (($1.p22 % 65536) + (~~($1.p23 / 65536)))) + ($1.p13 % 65536); /*23788*/
			$1.s0 = (((($1.p30 % 65536) + (~~($1.p31 / 65536))) + (($1.p21 % 65536) + (~~($1.p22 / 65536)))) + (($1.p12 % 65536) + (~~($1.p13 / 65536)))) + ($1.p03 % 65536); /*23792*/
			$1.s3 = $1.s3 + 65536; /*23795*/
			$1.s2 = $1.s2 + 65535; /*23796*/
			$1.s1 = $1.s1 + 65535; /*23797*/
			$1.s0 = $1.s0 + 65535; /*23798*/
			$1.s2 = (~~($1.s3 / 65536)) + $1.s2; /*23801*/
			$1.s3 = $1.s3 % 65536; /*23801*/
			$1.s1 = (~~($1.s2 / 65536)) + $1.s1; /*23802*/
			$1.s2 = $1.s2 % 65536; /*23802*/
			$1.s0 = (~~($1.s1 / 65536)) + $1.s0; /*23803*/
			$1.s1 = $1.s1 % 65536; /*23803*/
			$1.s0 = $1.s0 % 65536; /*23804*/
			var _4o = (((($1.s0 - 32768) * 65536) + $1.s1) ^ 2147483648) & 4294967295; /*23809*/
			var _4p = _4o ^ (_4o >>> 11); /*23810*/
			var _4q = _4p ^ ((_4p << 7) & -1658038656); /*23811*/
			var _4r = (_4q ^ ((_4q << 15) & -272236544)) & 4294967295; /*23813*/
			$k[$j++] = _4r ^ (_4r >>> 18); /*23813*/
		}; /*23815*/
		$1.createMatrixA = function() {
			$k[$j++] = 'nb_pcb'; /*23819*/
			if ($1.wr < 4) {
				/*23819*/
				$k[$j++] = ~~($1.Pg_sub_block / 2); /*23819*/
			} else {
				/*23819*/
				$k[$j++] = (~~($1.Pg_sub_block / $1.wr)) * $1.wc; /*23819*/
			} /*23819*/
			var _4x = $k[--$j]; /*23819*/
			$1[$k[--$j]] = _4x; /*23819*/
			$1.offset = ~~Math.ceil($1.Pg_sub_block / 32); /*23820*/
			$1.effwidth = $1.offset * 32; /*23821*/
			$1.matrixA = $a($1.offset * $1.nb_pcb); /*23822*/
			for (var _57 = 0, _56 = ($1.offset * $1.nb_pcb) - 1; _57 <= _56; _57 += 1) {
				/*23823*/
				$put($1.matrixA, _57, 0); /*23823*/
			} /*23823*/
			$1.permutation = $a($1.Pg_sub_block); /*23824*/
			for (var _5D = 0, _5C = $1.Pg_sub_block - 1; _5D <= _5C; _5D += 1) {
				/*23825*/
				$put($1.permutation, _5D, _5D); /*23825*/
			} /*23825*/
			for (var _5I = 0, _5H = (~~($1.Pg_sub_block / $1.wr)) - 1; _5I <= _5H; _5I += 1) {
				/*23834*/
				$1.i = _5I; /*23828*/
				for (var _5L = 0, _5K = $1.wr - 1; _5L <= _5K; _5L += 1) {
					/*23833*/
					$1.j = _5L; /*23830*/
					var _5M = $1.matrixA; /*23831*/
					var _5N = $1.i; /*23831*/
					var _5O = $1.effwidth; /*23831*/
					var _5P = $1.wr; /*23831*/
					var _5Q = $1.j; /*23831*/
					var _5W = 31 - ((($1.i * ($1.effwidth + $1.wr)) + $1.j) % 32); /*23832*/
					$put(_5M, ~~(((_5N * (_5O + _5P)) + _5Q) / 32), $get(_5M, ~~(((_5N * (_5O + _5P)) + _5Q) / 32)) | ((_5W < 0 ? 1 >>> -_5W : 1 << _5W))); /*23832*/
				} /*23832*/
			} /*23832*/
			$1.s0 = 0; /*23837*/
			$1.s1 = 0; /*23837*/
			$1.s2 = 11; /*23837*/
			$1.s3 = 64569; /*23837*/
			for (var _5Z = 1, _5Y = $1.wc - 1; _5Z <= _5Y; _5Z += 1) {
				/*23860*/
				$1.i = _5Z; /*23839*/
				$1.off_index = (~~($1.Pg_sub_block / $1.wr)) * $1.i; /*23840*/
				for (var _5f = 0, _5e = $1.Pg_sub_block - 1; _5f <= _5e; _5f += 1) {
					/*23859*/
					$1.j = _5f; /*23842*/
					$1.lcg64_temper(); /*23843*/
					var _5g = $k[--$j]; /*23844*/
					$k[$j++] = _5g; /*23844*/
					if (_5g < 0) { //no-else/*23844*/
						var _5h = $k[--$j]; /*23844*/
						$k[$j++] = (_5h ^ 2147483648) + 2147483648; /*23844*/
					} /*23844*/
					$1.pos = ~~(($k[--$j] / 4294967296) * ($1.Pg_sub_block - $1.j)); /*23846*/
					for (var _5o = 0, _5n = (~~($1.Pg_sub_block / $1.wr)) - 1; _5o <= _5n; _5o += 1) {
						/*23855*/
						$1.k = _5o; /*23848*/
						var _5p = $1.matrixA; /*23849*/
						var _5q = $1.off_index; /*23849*/
						var _5r = $1.k; /*23849*/
						var _5s = $1.offset; /*23849*/
						var _5t = $1.j; /*23849*/
						var _61 = $get($1.matrixA, (~~($get($1.permutation, $1.pos) / 32)) + ($1.k * $1.offset)); /*23851*/
						var _65 = -(31 - ($get($1.permutation, $1.pos) % 32)); /*23852*/
						var _67 = 31 - ($1.j % 32); /*23853*/
						$put(_5p, ((_5q + _5r) * _5s) + (~~(_5t / 32)), $get(_5p, ((_5q + _5r) * _5s) + (~~(_5t / 32))) | ((_67 < 0 ? (((_65 < 0 ? _61 >>> -_65 : _61 << _65)) & 1) >>> -_67 : (((_65 < 0 ? _61 >>> -_65 : _61 << _65)) & 1) << _67))); /*23854*/
					} /*23854*/
					var _6A = $1.permutation; /*23856*/
					var _6B = $1.Pg_sub_block; /*23856*/
					var _6C = $1.j; /*23856*/
					$put(_6A, (_6B - 1) - _6C, $get($1.permutation, $1.pos)); /*23858*/
					$put($1.permutation, $1.pos, $get(_6A, (_6B - 1) - _6C)); /*23858*/
				} /*23858*/
			} /*23858*/
		}; /*23862*/
		$1.createMetadataMatrixA = function() {
			$1.nb_pcb = ~~($1.Pg_sub_block / 2); /*23866*/
			$1.offset = ~~Math.ceil($1.Pg_sub_block / 32); /*23867*/
			$1.matrixA = $a($1.offset * $1.nb_pcb); /*23868*/
			for (var _6P = 0, _6O = ($1.offset * $1.nb_pcb) - 1; _6P <= _6O; _6P += 1) {
				/*23869*/
				$put($1.matrixA, _6P, 0); /*23869*/
			} /*23869*/
			$1.permutation = $a($1.Pg_sub_block); /*23870*/
			for (var _6V = 0, _6U = $1.Pg_sub_block - 1; _6V <= _6U; _6V += 1) {
				/*23871*/
				$put($1.permutation, _6V, _6V); /*23871*/
			} /*23871*/
			$1.s0 = 0; /*23874*/
			$1.s1 = 0; /*23874*/
			$1.s2 = 0; /*23874*/
			$1.s3 = 38545; /*23874*/
			$1.nb_once = ~~((~~((($1.nb_pcb / $1.wc) * $1.Pg_sub_block) + 3)) / $1.nb_pcb); /*23875*/
			for (var _6d = 0, _6c = $1.nb_pcb - 1; _6d <= _6c; _6d += 1) {
				/*23890*/
				$1.i = _6d; /*23877*/
				for (var _6g = 0, _6f = $1.nb_once - 1; _6g <= _6f; _6g += 1) {
					/*23889*/
					$1.j = _6g; /*23879*/
					$1.lcg64_temper(); /*23880*/
					var _6h = $k[--$j]; /*23881*/
					$k[$j++] = _6h; /*23881*/
					if (_6h < 0) { //no-else/*23881*/
						var _6i = $k[--$j]; /*23881*/
						$k[$j++] = (_6i ^ 2147483648) + 2147483648; /*23881*/
					} /*23881*/
					$1.pos = ~~(($k[--$j] / 4294967296) * ($1.Pg_sub_block - $1.j)); /*23883*/
					var _6m = $1.matrixA; /*23884*/
					var _6n = $1.i; /*23884*/
					var _6o = $1.offset; /*23884*/
					var _6r = $get($1.permutation, $1.pos); /*23884*/
					var _6w = 31 - ($get($1.permutation, $1.pos) % 32); /*23885*/
					$put(_6m, (_6n * _6o) + (~~(_6r / 32)), $get(_6m, (_6n * _6o) + (~~(_6r / 32))) | ((_6w < 0 ? 1 >>> -_6w : 1 << _6w))); /*23885*/
					var _6z = $1.permutation; /*23886*/
					var _70 = $1.Pg_sub_block; /*23886*/
					var _71 = $1.j; /*23886*/
					$put(_6z, (_70 - 1) - _71, $get($1.permutation, $1.pos)); /*23888*/
					$put($1.permutation, $1.pos, $get(_6z, (_70 - 1) - _71)); /*23888*/
				} /*23888*/
			} /*23888*/
		}; /*23892*/
		$1.GaussJordan = function() {
			$k[$j++] = 'nb_pcb'; /*23896*/
			if ($1.wr < 4) {
				/*23896*/
				$k[$j++] = ~~($1.Pg_sub_block / 2); /*23896*/
			} else {
				/*23896*/
				$k[$j++] = (~~($1.Pg_sub_block / $1.wr)) * $1.wc; /*23896*/
			} /*23896*/
			var _7B = $k[--$j]; /*23896*/
			$1[$k[--$j]] = _7B; /*23896*/
			$1.offset = ~~Math.ceil($1.Pg_sub_block / 32); /*23897*/
			var _7E = $1.matrixA; /*23898*/
			$1.matrixH = $arrcpy($a(_7E.length), _7E); /*23898*/
			$k[$j++] = Infinity; /*23899*/
			for (var _7I = 0, _7J = $1.Pg_sub_block; _7I < _7J; _7I++) {
				/*23899*/
				$k[$j++] = 0; /*23899*/
			} /*23899*/
			$1.column_arrangement = $a(); /*23899*/
			$k[$j++] = Infinity; /*23900*/
			for (var _7M = 0, _7N = $1.Pg_sub_block; _7M < _7N; _7M++) {
				/*23900*/
				$k[$j++] = false; /*23900*/
			} /*23900*/
			$1.processed_column = $a(); /*23900*/
			$k[$j++] = Infinity; /*23901*/
			for (var _7Q = 0, _7R = $1.nb_pcb; _7Q < _7R; _7Q++) {
				/*23901*/
				$k[$j++] = 0; /*23901*/
			} /*23901*/
			$1.zero_lines_nb = $a(); /*23901*/
			$k[$j++] = Infinity; /*23902*/
			for (var _7U = 0, _7V = $1.Pg_sub_block * 2; _7U < _7V; _7U++) {
				/*23902*/
				$k[$j++] = 0; /*23902*/
			} /*23902*/
			$1.swap_col = $a(); /*23902*/
			$1.zero_lines = 0; /*23903*/
			$1.loop0 = 0; /*23905*/
			for (var _7Z = 0, _7Y = $1.nb_pcb - 1; _7Z <= _7Y; _7Z += 1) {
				/*23943*/
				$1.i = _7Z; /*23907*/
				$1.pivot_column = $1.Pg_sub_block + 1; /*23908*/
				for (var _7d = 0, _7c = $1.Pg_sub_block - 1; _7d <= _7c; _7d += 1) {
					/*23916*/
					$1.j = _7d; /*23910*/
					var _7i = $get($1.matrixH, ~~(((($1.offset * 32) * $1.i) + $1.j) / 32)); /*23911*/
					var _7m = -(31 - (((($1.offset * 32) * $1.i) + $1.j) % 32)); /*23912*/
					if ((((_7m < 0 ? _7i >>> -_7m : _7i << _7m)) & 1) == 1) { //no-else/*23915*/
						$1.pivot_column = $1.j; /*23913*/
						break; /*23914*/
					} /*23914*/
				} /*23914*/
				if ($1.pivot_column < $1.Pg_sub_block) {
					/*23941*/
					$put($1.processed_column, $1.pivot_column, true); /*23918*/
					$put($1.column_arrangement, $1.pivot_column, $1.i); /*23919*/
					if ($1.pivot_column >= $1.nb_pcb) { //no-else/*23923*/
						$put($1.swap_col, $1.loop0 * 2, $1.pivot_column); /*23921*/
						$1.loop0 = $1.loop0 + 1; /*23922*/
					} /*23922*/
					$1.off_index = ~~($1.pivot_column / 32); /*23924*/
					$1.off_index1 = $1.pivot_column % 32; /*23925*/
					for (var _85 = 0, _84 = $1.nb_pcb - 1; _85 <= _84; _85 += 1) {
						/*23938*/
						$1.j = _85; /*23927*/
						if ($1.i != $1.j) { //no-else/*23937*/
							var _8C = $get($1.matrixH, $1.off_index + ($1.j * $1.offset)); /*23929*/
							var _8E = -(31 - $1.off_index1); /*23930*/
							if ((((_8E < 0 ? _8C >>> -_8E : _8C << _8E)) & 1) == 1) { //no-else/*23936*/
								for (var _8H = 0, _8G = $1.offset - 1; _8H <= _8G; _8H += 1) {
									/*23935*/
									$1.k = _8H; /*23932*/
									var _8I = $1.matrixH; /*23933*/
									var _8J = $1.offset; /*23933*/
									var _8K = $1.j; /*23933*/
									var _8L = $1.k; /*23933*/
									$put(_8I, (_8J * _8K) + _8L, $xo($get(_8I, (_8J * _8K) + _8L), $get($1.matrixH, ($1.offset * $1.i) + $1.k))); /*23934*/
								} /*23934*/
							} /*23934*/
						} /*23934*/
					} /*23934*/
				} else {
					/*23941*/
					$put($1.zero_lines_nb, $1.zero_lines, $1.i); /*23940*/
					$1.zero_lines = $1.zero_lines + 1; /*23941*/
				} /*23941*/
			} /*23941*/
			$1.matrix_rank = $1.nb_pcb - $1.zero_lines; /*23945*/
			$1.loop2 = 0; /*23946*/
			for (var _8b = $1.matrix_rank, _8a = $1.nb_pcb - 1; _8b <= _8a; _8b += 1) {
				/*23966*/
				$1.i = _8b; /*23948*/
				if ($get($1.column_arrangement, $1.i) > 0) { //no-else/*23965*/
					for (var _8h = 0, _8g = $1.nb_pcb - 1; _8h <= _8g; _8h += 1) {
						/*23964*/
						$1.j = _8h; /*23951*/
						if ($nt($get($1.processed_column, $1.j))) { //no-else/*23963*/
							$put($1.column_arrangement, $1.j, $get($1.column_arrangement, $1.i)); /*23953*/
							$put($1.column_arrangement, $1.i, 0); /*23954*/
							$put($1.processed_column, $1.j, true); /*23955*/
							$put($1.processed_column, $1.i, false); /*23956*/
							$put($1.swap_col, $1.loop0 * 2, $1.i); /*23957*/
							$put($1.swap_col, ($1.loop0 * 2) + 1, $1.j); /*23958*/
							$put($1.column_arrangement, $1.i, $1.j); /*23959*/
							$1.loop0 = $1.loop0 + 1; /*23960*/
							$1.loop2 = $1.loop2 + 1; /*23961*/
							break; /*23962*/
						} /*23962*/
					} /*23962*/
				} /*23962*/
			} /*23962*/
			$1.loop1 = 0; /*23968*/
			for (var _99 = 0, _98 = $1.nb_pcb - 1; _99 <= _98; _99 += 1) {
				/*23977*/
				$1.kl = _99; /*23970*/
				if ($nt($get($1.processed_column, $1.kl)) && ($1.loop1 < ($1.loop0 - $1.loop2))) { //no-else/*23976*/
					$put($1.column_arrangement, $1.kl, $get($1.column_arrangement, $get($1.swap_col, $1.loop1 * 2))); /*23972*/
					$put($1.processed_column, $1.kl, true); /*23973*/
					$put($1.swap_col, ($1.loop1 * 2) + 1, $1.kl); /*23974*/
					$1.loop1 = $1.loop1 + 1; /*23975*/
				} /*23975*/
			} /*23975*/
			$1.loop1 = 0; /*23979*/
			for (var _9V = 0, _9U = $1.nb_pcb - 1; _9V <= _9U; _9V += 1) {
				/*23986*/
				$1.kl = _9V; /*23981*/
				if ($nt($get($1.processed_column, $1.kl))) { //no-else/*23985*/
					$put($1.column_arrangement, $1.kl, $get($1.zero_lines_nb, $1.loop1)); /*23983*/
					$1.loop1 = $1.loop1 + 1; /*23984*/
				} /*23984*/
			} /*23984*/
			for (var _9h = 0, _9g = $1.nb_pcb - 1; _9h <= _9g; _9h += 1) {
				/*23995*/
				$1.i = _9h; /*23989*/
				for (var _9k = 0, _9j = $1.offset - 1; _9k <= _9j; _9k += 1) {
					/*23994*/
					$1.j = _9k; /*23991*/
					$put($1.matrixA, ($1.i * $1.offset) + $1.j, $get($1.matrixH, ($get($1.column_arrangement, $1.i) * $1.offset) + $1.j)); /*23993*/
				} /*23993*/
			} /*23993*/
			$1.tmp = 0; /*23997*/
			for (var _9y = 0, _9x = $1.loop0 - 1; _9y <= _9x; _9y += 1) {
				/*24019*/
				$1.i = _9y; /*23999*/
				for (var _A1 = 0, _A0 = $1.nb_pcb - 1; _A1 <= _A0; _A1 += 1) {
					/*24018*/
					$1.j = _A1; /*24001*/
					var _A8 = $get($1.matrixA, (~~($get($1.swap_col, $1.i * 2) / 32)) + ($1.j * $1.offset)); /*24002*/
					var _AC = -(31 - ($get($1.swap_col, $1.i * 2) % 32)); /*24003*/
					$1.tmp = (((-(((_AC < 0 ? _A8 >>> -_AC : _A8 << _AC)) & 1)) ^ $1.tmp) & 1) ^ $1.tmp; /*24004*/
					var _AF = $1.matrixA; /*24005*/
					var _AI = $get($1.swap_col, $1.i * 2); /*24005*/
					var _AJ = $1.j; /*24005*/
					var _AK = $1.offset; /*24005*/
					var _AS = $get($1.matrixA, (~~($get($1.swap_col, ($1.i * 2) + 1) / 32)) + ($1.j * $1.offset)); /*24007*/
					var _AW = -(31 - ($get($1.swap_col, ($1.i * 2) + 1) % 32)); /*24008*/
					var _Ah = 31 - ($get($1.swap_col, $1.i * 2) % 32); /*24010*/
					$put(_AF, (~~(_AI / 32)) + (_AJ * _AK), $get(_AF, (~~(_AI / 32)) + (_AJ * _AK)) ^ (((-(((_AW < 0 ? _AS >>> -_AW : _AS << _AW)) & 1)) ^ $get($1.matrixA, (~~($get($1.swap_col, $1.i * 2) / 32)) + ($1.j * $1.offset))) & ((_Ah < 0 ? 1 >>> -_Ah : 1 << _Ah)))); /*24011*/
					var _Ai = $1.matrixA; /*24012*/
					var _Al = $get($1.swap_col, ($1.i * 2) + 1); /*24012*/
					var _Am = $1.j; /*24012*/
					var _An = $1.offset; /*24012*/
					var _B0 = 31 - ($get($1.swap_col, ($1.i * 2) + 1) % 32); /*24016*/
					$put(_Ai, (~~(_Al / 32)) + (_Am * _An), $get(_Ai, (~~(_Al / 32)) + (_Am * _An)) ^ (((-($1.tmp & 1)) ^ $get($1.matrixA, (~~($get($1.swap_col, ($1.i * 2) + 1) / 32)) + ($1.j * $1.offset))) & ((_B0 < 0 ? 1 >>> -_B0 : 1 << _B0)))); /*24017*/
				} /*24017*/
			} /*24017*/
		}; /*24021*/
		$1.createGeneratorMatrix = function() {
			$1.pn = $1.Pg_sub_block - $1.matrix_rank; /*24025*/
			$1.offset = ~~Math.ceil($1.pn / 32); /*24026*/
			$1.effwidth = $1.offset * 32; /*24027*/
			$1.offset_cap = ~~Math.ceil($1.Pg_sub_block / 32); /*24028*/
			$1.G = $a($1.offset * $1.Pg_sub_block); /*24029*/
			for (var _BC = 0, _BB = ($1.offset * $1.Pg_sub_block) - 1; _BC <= _BB; _BC += 1) {
				/*24032*/
				$put($1.G, _BC, 0); /*24031*/
			} /*24031*/
			for (var _BG = 0, _BF = $1.pn - 1; _BG <= _BF; _BG += 1) {
				/*24037*/
				$1.i = _BG; /*24034*/
				var _BH = $1.G; /*24035*/
				var _BI = $1.Pg_sub_block; /*24035*/
				var _BJ = $1.pn; /*24035*/
				var _BK = $1.i; /*24035*/
				var _BL = $1.offset; /*24035*/
				var _BM = $1.i; /*24035*/
				var _BP = 31 - ($1.i % 32); /*24036*/
				$put(_BH, (((_BI - _BJ) + _BK) * _BL) + (~~(_BM / 32)), $get(_BH, (((_BI - _BJ) + _BK) * _BL) + (~~(_BM / 32))) | ((_BP < 0 ? 1 >>> -_BP : 1 << _BP))); /*24036*/
			} /*24036*/
			$1.matrix_index = $1.Pg_sub_block - $1.pn; /*24038*/
			$1.loop0 = 0; /*24039*/
			for (var _BW = 0, _BV = (($1.Pg_sub_block - $1.pn) * $1.effwidth) - 1; _BW <= _BV; _BW += 1) {
				/*24056*/
				$1.i = _BW; /*24041*/
				if ($1.matrix_index >= $1.Pg_sub_block) { //no-else/*24045*/
					$1.loop0 = $1.loop0 + 1; /*24043*/
					$1.matrix_index = $1.Pg_sub_block - $1.pn; /*24044*/
				} /*24044*/
				if (($1.i % $1.effwidth) < $1.pn) { //no-else/*24055*/
					var _Bf = $1.G; /*24047*/
					var _Bg = $1.i; /*24047*/
					var _Bm = $get($1.matrixA, (~~($1.matrix_index / 32)) + ($1.offset_cap * $1.loop0)); /*24049*/
					var _Bo = -(31 - ($1.matrix_index % 32)); /*24050*/
					var _Bt = 31 - ($1.i % 32); /*24052*/
					$put(_Bf, ~~(_Bg / 32), $get(_Bf, ~~(_Bg / 32)) ^ (((-(((_Bo < 0 ? _Bm >>> -_Bo : _Bm << _Bo)) & 1)) ^ $get($1.G, ~~($1.i / 32))) & ((_Bt < 0 ? 1 >>> -_Bt : 1 << _Bt)))); /*24053*/
					$1.matrix_index = $1.matrix_index + 1; /*24054*/
				} /*24054*/
			} /*24054*/
		}; /*24058*/
		$1.ldpc = function() {
			$1.wr = $k[--$j]; /*24062*/
			$1.wc = $k[--$j]; /*24063*/
			$k[$j++] = Infinity; /*24064*/
			var _Bx = $k[--$j]; /*24064*/
			var _By = $k[--$j]; /*24064*/
			$k[$j++] = _Bx; /*24064*/
			$forall(_By, function() {
				/*24064*/
				var _Bz = $k[--$j]; /*24064*/
				$k[$j++] = _Bz - 48; /*24064*/
			}); /*24064*/
			$1.data = $a(); /*24064*/
			$1.Pn = $1.data.length; /*24066*/
			if ($1.wr != -1) {
				/*24081*/
				$1.Pg = ~~((Math.ceil((Math.ceil(($1.Pn * $1.wr) / ($1.wr - $1.wc))) / $1.wr)) * $1.wr); /*24068*/
				$1.nb_sub_blocks = (~~($1.Pg / 2700)) + 1; /*24069*/
				$1.Pg_sub_block = (~~((~~($1.Pg / $1.nb_sub_blocks)) / $1.wr)) * $1.wr; /*24070*/
				$1.Pn_sub_block = ~~(($1.Pg_sub_block * ($1.wr - $1.wc)) / $1.wr); /*24071*/
				$1.nb_sub_blocks = ~~($1.Pg / $1.Pg_sub_block); /*24072*/
				$k[$j++] = 'encoding_iterations'; /*24073*/
				$k[$j++] = ~~($1.Pg / $1.Pg_sub_block); /*24073*/
				if (($1.Pn_sub_block * $1.nb_sub_blocks) < $1.Pn) { //no-else/*24073*/
					var _CP = $k[--$j]; /*24073*/
					$k[$j++] = _CP - 1; /*24073*/
				} /*24073*/
				var _CQ = $k[--$j]; /*24073*/
				$1[$k[--$j]] = _CQ; /*24073*/
				$1.createMatrixA(); /*24074*/
			} else {
				/*24081*/
				$1.Pg = $1.Pn * 2; /*24076*/
				$1.nb_sub_blocks = 1; /*24077*/
				$1.Pg_sub_block = $1.Pg; /*24078*/
				$1.Pn_sub_block = $1.Pn; /*24079*/
				$1.encoding_iterations = 1; /*24080*/
				$1.createMetadataMatrixA(); /*24081*/
			} /*24081*/
			$1.GaussJordan(); /*24083*/
			$1.createGeneratorMatrix(); /*24084*/
			$1.ecc_encoded_data = $a($1.Pg); /*24086*/
			$1.offset = ~~(Math.ceil(($1.Pg_sub_block - $1.matrix_rank) / 32)); /*24088*/
			for (var _Cb = 0, _Ca = $1.encoding_iterations - 1; _Cb <= _Ca; _Cb += 1) {
				/*24104*/
				$1.iter = _Cb; /*24090*/
				for (var _Ce = 0, _Cd = $1.Pg_sub_block - 1; _Ce <= _Cd; _Ce += 1) {
					/*24103*/
					$1.i = _Ce; /*24092*/
					$1.temp = 0; /*24093*/
					$1.loop0 = 0; /*24094*/
					$1.offset_index = $1.offset * $1.i; /*24095*/
					for (var _Cm = $1.iter * $1.Pn_sub_block, _Cl = (($1.iter + 1) * $1.Pn_sub_block) - 1; _Cm <= _Cl; _Cm += 1) {
						/*24101*/
						var _Cs = $get($1.G, $1.offset_index + (~~($1.loop0 / 32))); /*24098*/
						var _Cu = -(31 - ($1.loop0 % 32)); /*24098*/
						$1.temp = ($get($1.data, _Cm) & (((_Cu < 0 ? _Cs >>> -_Cu : _Cs << _Cu)) & 1)) ^ $1.temp; /*24099*/
						$1.loop0 = $1.loop0 + 1; /*24100*/
					} /*24100*/
					$put($1.ecc_encoded_data, $1.i + ($1.iter * $1.Pg_sub_block), $1.temp); /*24102*/
				} /*24102*/
			} /*24102*/
			if ($1.encoding_iterations != $1.nb_sub_blocks) { //no-else/*24128*/
				$1.start = $1.encoding_iterations * $1.Pn_sub_block; /*24107*/
				$1.last_index = $1.encoding_iterations * $1.Pg_sub_block; /*24108*/
				$1.Pg_sub_block = $1.Pg - ($1.encoding_iterations * $1.Pg_sub_block); /*24109*/
				$1.Pn_sub_block = ~~(($1.Pg_sub_block * ($1.wr - $1.wc)) / $1.wr); /*24110*/
				$1.createMatrixA(); /*24111*/
				$1.GaussJordan(); /*24112*/
				$1.createGeneratorMatrix(); /*24113*/
				$1.offset = ~~(Math.ceil(($1.Pg_sub_block - $1.matrix_rank) / 32)); /*24114*/
				for (var _DJ = 0, _DI = $1.Pg_sub_block - 1; _DJ <= _DI; _DJ += 1) {
					/*24127*/
					$1.i = _DJ; /*24116*/
					$1.temp = 0; /*24117*/
					$1.loop0 = 0; /*24118*/
					$1.offset_index = $1.offset * $1.i; /*24119*/
					for (var _DP = $1.start, _DO = $1.Pn - 1; _DP <= _DO; _DP += 1) {
						/*24125*/
						var _DV = $get($1.G, $1.offset_index + (~~($1.loop0 / 32))); /*24122*/
						var _DX = -(31 - ($1.loop0 % 32)); /*24122*/
						$1.temp = ($get($1.data, _DP) & (((_DX < 0 ? _DV >>> -_DX : _DV << _DX)) & 1)) ^ $1.temp; /*24123*/
						$1.loop0 = $1.loop0 + 1; /*24124*/
					} /*24124*/
					$put($1.ecc_encoded_data, $1.i + $1.last_index, $1.temp); /*24126*/
				} /*24126*/
			} /*24126*/
			$1.out = $s($1.Pg); /*24130*/
			for (var _Di = 0, _Dh = $1.Pg - 1; _Di <= _Dh; _Di += 1) {
				/*24134*/
				$put($1.out, _Di, $get($1.ecc_encoded_data, _Di) + 48); /*24133*/
			} /*24133*/
			$k[$j++] = $1.out; /*24135*/
		}; /*24137*/
		$k[$j++] = 'bits'; /*24140*/
		$k[$j++] = $1.bits; /*24140*/
		$k[$j++] = $1.datawc; /*24140*/
		$k[$j++] = $1.datawr; /*24140*/
		$1.ldpc(); /*24140*/
		var _Dq = $k[--$j]; /*24140*/
		$1[$k[--$j]] = _Dq; /*24140*/
		$1.s0 = 0; /*24143*/
		$1.s1 = 0; /*24143*/
		$1.s2 = 3; /*24143*/
		$1.s3 = 30151; /*24143*/
		for (var _Dt = $1.bits.length - 1; _Dt >= 1; _Dt -= 1) {
			/*24153*/
			$1.l = _Dt; /*24145*/
			$1.lcg64_temper(); /*24146*/
			var _Du = $k[--$j]; /*24147*/
			$k[$j++] = _Du; /*24147*/
			if (_Du < 0) { //no-else/*24147*/
				var _Dv = $k[--$j]; /*24147*/
				$k[$j++] = (_Dv ^ 2147483648) + 2147483648; /*24147*/
			} /*24147*/
			$1.r = ~~(($k[--$j] / 4294967296) * ($1.l + 1)); /*24149*/
			$put($1.bits, $1.l, $get($1.bits, $1.r)); /*24151*/
			$put($1.bits, $1.r, $get($1.bits, $1.l)); /*24152*/
		} /*24152*/
		$1.tmpbits = $s($1.C); /*24156*/
		$puti($1.tmpbits, 0, $1.bits); /*24157*/
		$1.j = $1.bits.length; /*24158*/
		for (var _EF = 0, _EG = ~~((($1.C - $1.j) + 1) / 2); _EF < _EG; _EF++) {
			/*24163*/
			$put($1.tmpbits, $1.j, 48); /*24160*/
			if (($1.j + 1) < $1.C) { //no-else/*24161*/
				$put($1.tmpbits, $1.j + 1, 49); /*24161*/
			} /*24161*/
			$1.j = $1.j + 2; /*24162*/
		} /*24162*/
		$1.bits = $1.tmpbits; /*24164*/
		if ($1.colors == 4) {
			/*24229*/
			$1.bi = 0; /*24168*/
			$1.gi = 1; /*24168*/
			$1.mi = 2; /*24168*/
			$1.yi = 3; /*24168*/
			$1.ki = 4; /*24169*/
			$1.wi = 5; /*24169*/
			$k[$j++] = Infinity; /*24172*/
			$k[$j++] = $1.bi; /*24172*/
			$k[$j++] = "0000FF"; /*24172*/
			$k[$j++] = $1.gi; /*24172*/
			$k[$j++] = "00FF00"; /*24172*/
			$k[$j++] = $1.mi; /*24172*/
			$k[$j++] = "FF00FF"; /*24172*/
			$k[$j++] = $1.yi; /*24172*/
			$k[$j++] = "FFFF00"; /*24172*/
			$k[$j++] = $1.ki; /*24172*/
			$k[$j++] = "000000"; /*24172*/
			$k[$j++] = $1.wi; /*24172*/
			$k[$j++] = "FFFFFF"; /*24172*/
			$1.palette = $d(); /*24173*/
			$1.metacolorindex = $a([$1.bi, $1.gi, $1.mi, $1.yi]); /*24174*/
			$1.palettelayout = $a([$1.bi, $1.gi, $1.mi, $1.yi]); /*24175*/
		} else {
			/*24229*/
			var _En = new Map([
				[8, $a([2, 2, 2])],
				[16, $a([4, 2, 2])],
				[32, $a([4, 4, 2])],
				[64, $a([4, 4, 4])],
				[128, $a([8, 4, 4])],
				[256, $a([8, 8, 4])]
			]); /*24184*/
			$1.rgbres = $get(_En, $1.colors); /*24185*/
			$k[$j++] = 'rvals'; /*24187*/
			$k[$j++] = $get($1.rgbres, 0); /*24187*/
			$k[$j++] = Infinity; /*24187*/
			var _Es = $k[--$j]; /*24187*/
			var _Eu = $k[--$j] - 1; /*24187*/
			$k[$j++] = _Es; /*24187*/
			$k[$j++] = _Eu; /*24187*/
			for (var _Ew = 0, _Ev = _Eu; _Ew <= _Ev; _Ew += 1) {
				/*24187*/
				var _Ex = $k[--$j]; /*24187*/
				$k[$j++] = ~~(Math.round(_Ew * (255 / _Ex))); /*24187*/
				$k[$j++] = _Ex; /*24187*/
			} /*24187*/
			$j--; /*24187*/
			var _Ey = $a(); /*24187*/
			$1[$k[--$j]] = _Ey; /*24187*/
			$k[$j++] = 'gvals'; /*24188*/
			$k[$j++] = $get($1.rgbres, 1); /*24188*/
			$k[$j++] = Infinity; /*24188*/
			var _F2 = $k[--$j]; /*24188*/
			var _F4 = $k[--$j] - 1; /*24188*/
			$k[$j++] = _F2; /*24188*/
			$k[$j++] = _F4; /*24188*/
			for (var _F6 = 0, _F5 = _F4; _F6 <= _F5; _F6 += 1) {
				/*24188*/
				var _F7 = $k[--$j]; /*24188*/
				$k[$j++] = ~~(Math.round(_F6 * (255 / _F7))); /*24188*/
				$k[$j++] = _F7; /*24188*/
			} /*24188*/
			$j--; /*24188*/
			var _F8 = $a(); /*24188*/
			$1[$k[--$j]] = _F8; /*24188*/
			$k[$j++] = 'bvals'; /*24189*/
			$k[$j++] = $get($1.rgbres, 2); /*24189*/
			$k[$j++] = Infinity; /*24189*/
			var _FC = $k[--$j]; /*24189*/
			var _FE = $k[--$j] - 1; /*24189*/
			$k[$j++] = _FC; /*24189*/
			$k[$j++] = _FE; /*24189*/
			for (var _FG = 0, _FF = _FE; _FG <= _FF; _FG += 1) {
				/*24189*/
				var _FH = $k[--$j]; /*24189*/
				$k[$j++] = ~~(Math.round(_FG * (255 / _FH))); /*24189*/
				$k[$j++] = _FH; /*24189*/
			} /*24189*/
			$j--; /*24189*/
			var _FI = $a(); /*24189*/
			$1[$k[--$j]] = _FI; /*24189*/
			var _FK = $1.colors; /*24191*/
			$1.palette = new Map; /*24191*/
			var _FL = $1.colors; /*24192*/
			var _FM = 64; /*24192*/
			if (64 > _FL) { //no-else/*24192*/
				var _ = _FL; /*24192*/
				_FL = _FM; /*24192*/
				_FM = _; /*24192*/
			} /*24192*/
			$1.palettelayout = $a(_FM); /*24192*/
			$1.i = 0; /*24193*/
			$1.j = 8; /*24193*/
			$forall($1.rvals, function() {
				/*24227*/
				$1.r = $k[--$j]; /*24195*/
				$forall($1.gvals, function() {
					/*24226*/
					$1.g = $k[--$j]; /*24197*/
					$forall($1.bvals, function() {
						/*24225*/
						$1.b = $k[--$j]; /*24199*/
						var _FY = $strcpy($s(6), "000000"); /*24201*/
						var _Fa = $cvrs($s(6), (($1.r << 16) | ($1.g << 8)) | $1.b, 16); /*24201*/
						$puti(_FY, 6 - _Fa.length, _Fa); /*24201*/
						$k[$j++] = _FY; /*24203*/
						$k[$j++] = false; /*24203*/
						if ($eq(_FY, "000000")) { //no-else/*24203*/
							$1.ki = $1.i; /*24203*/
							$j--; /*24203*/
							$k[$j++] = true; /*24203*/
						} /*24203*/
						var _Fc = $k[--$j]; /*24204*/
						var _Fd = $k[--$j]; /*24204*/
						$k[$j++] = _Fd; /*24204*/
						$k[$j++] = _Fc; /*24204*/
						if ($eq(_Fd, "0000FF")) { //no-else/*24204*/
							$1.bi = $1.i; /*24204*/
							$j--; /*24204*/
							$k[$j++] = true; /*24204*/
						} /*24204*/
						var _Ff = $k[--$j]; /*24205*/
						var _Fg = $k[--$j]; /*24205*/
						$k[$j++] = _Fg; /*24205*/
						$k[$j++] = _Ff; /*24205*/
						if ($eq(_Fg, "00FF00")) { //no-else/*24205*/
							$1.gi = $1.i; /*24205*/
							$j--; /*24205*/
							$k[$j++] = true; /*24205*/
						} /*24205*/
						var _Fi = $k[--$j]; /*24206*/
						var _Fj = $k[--$j]; /*24206*/
						$k[$j++] = _Fj; /*24206*/
						$k[$j++] = _Fi; /*24206*/
						if ($eq(_Fj, "00FFFF")) { //no-else/*24206*/
							$1.ci = $1.i; /*24206*/
							$j--; /*24206*/
							$k[$j++] = true; /*24206*/
						} /*24206*/
						var _Fl = $k[--$j]; /*24207*/
						var _Fm = $k[--$j]; /*24207*/
						$k[$j++] = _Fm; /*24207*/
						$k[$j++] = _Fl; /*24207*/
						if ($eq(_Fm, "FF0000")) { //no-else/*24207*/
							$1.ri = $1.i; /*24207*/
							$j--; /*24207*/
							$k[$j++] = true; /*24207*/
						} /*24207*/
						var _Fo = $k[--$j]; /*24208*/
						var _Fp = $k[--$j]; /*24208*/
						$k[$j++] = _Fp; /*24208*/
						$k[$j++] = _Fo; /*24208*/
						if ($eq(_Fp, "FF00FF")) { //no-else/*24208*/
							$1.mi = $1.i; /*24208*/
							$j--; /*24208*/
							$k[$j++] = true; /*24208*/
						} /*24208*/
						var _Fr = $k[--$j]; /*24209*/
						var _Fs = $k[--$j]; /*24209*/
						$k[$j++] = _Fs; /*24209*/
						$k[$j++] = _Fr; /*24209*/
						if ($eq(_Fs, "FFFF00")) { //no-else/*24209*/
							$1.yi = $1.i; /*24209*/
							$j--; /*24209*/
							$k[$j++] = true; /*24209*/
						} /*24209*/
						var _Fu = $k[--$j]; /*24210*/
						var _Fv = $k[--$j]; /*24210*/
						$k[$j++] = _Fv; /*24210*/
						$k[$j++] = _Fu; /*24210*/
						if ($eq(_Fv, "FFFFFF")) { //no-else/*24210*/
							$1.wi = $1.i; /*24210*/
							$j--; /*24210*/
							$k[$j++] = true; /*24210*/
						} /*24210*/
						if ($nt($k[--$j])) { //no-else/*24222*/
							if (($1.colors <= 64) || ((($1.colors == 128) && (((($1.r == 0) || ($1.r == 73)) || ($1.r == 182)) || ($1.r == 255))) || ((($1.colors == 256) && (((($1.r == 0) || ($1.r == 73)) || ($1.r == 182)) || ($1.r == 255))) && (((($1.g == 0) || ($1.g == 73)) || ($1.g == 182)) || ($1.g == 255))))) { //no-else/*24221*/
								$put($1.palettelayout, $1.j, $1.i); /*24219*/
								$1.j = $1.j + 1; /*24220*/
							} /*24220*/
						} /*24220*/
						$put($1.palette, $1.i, $k[--$j]); /*24223*/
						$1.i = $1.i + 1; /*24224*/
					}); /*24224*/
				}); /*24224*/
			}); /*24224*/
			$puti($1.palettelayout, 0, $a([$1.ki, $1.bi, $1.gi, $1.ci, $1.ri, $1.mi, $1.yi, $1.wi])); /*24228*/
			$1.metacolorindex = $a([$1.ki, $1.bi, $1.gi, $1.ci, $1.ri, $1.mi, $1.yi, $1.wi]); /*24229*/
		} /*24229*/
		$k[$j++] = Infinity; /*24233*/
		for (var _Gg = 0, _Gh = $1.rows * $1.cols; _Gg < _Gh; _Gg++) {
			/*24233*/
			$k[$j++] = -1; /*24233*/
		} /*24233*/
		$1.pixs = $a(); /*24233*/
		$1.jmv = function() {
			var _Gk = $k[--$j]; /*24234*/
			var _Gl = $k[--$j]; /*24234*/
			$k[$j++] = _Gl + (_Gk * $1.cols); /*24234*/
		}; /*24234*/
		if (!$1.slave) {
			/*24264*/
			$1.fpat = $a([$a([1, 1, 1, 0, 0]), $a([1, 2, 2, 0, 0]), $a([1, 2, 1, 2, 1]), $a([0, 0, 2, 2, 1]), $a([0, 0, 1, 1, 1])]); /*24244*/
			$1.fmap = $a([$a([-1, $1.bi, $1.yi]), $a([-1, $1.yi, $1.bi]), $a([-1, $1.gi, $1.mi]), $a([-1, $1.mi, $1.gi])]); /*24250*/
		} else {
			/*24264*/
			$1.fpat = $a([$a([0, 0, 0, 0, 0]), $a([0, 2, 2, 0, 0]), $a([0, 2, 1, 2, 0]), $a([0, 0, 2, 2, 0]), $a([0, 0, 0, 0, 0])]); /*24258*/
			$1.fmap = $a([$a([-1, $1.ki, $1.wi]), $a([-1, $1.ki, $1.wi]), $a([-1, $1.ki, $1.wi]), $a([-1, $1.ki, $1.wi])]); /*24264*/
		} /*24264*/
		for (var _HP = 0; _HP <= 4; _HP += 1) {
			/*24276*/
			$1.y = _HP; /*24267*/
			for (var _HQ = 0; _HQ <= 4; _HQ += 1) {
				/*24275*/
				$1.x = _HQ; /*24269*/
				$1.fpb = $get($get($1.fpat, $1.y), $1.x); /*24270*/
				$k[$j++] = $1.pixs; /*24271*/
				$k[$j++] = $1.x + 1; /*24271*/
				$k[$j++] = $1.y + 1; /*24271*/
				$1.jmv(); /*24271*/
				var _Hd = $k[--$j]; /*24271*/
				$put($k[--$j], _Hd, $get($get($1.fmap, 0), $1.fpb)); /*24271*/
				$k[$j++] = $1.pixs; /*24272*/
				$k[$j++] = $1.x + 1; /*24272*/
				$k[$j++] = ($1.rows - $1.y) - 2; /*24272*/
				$1.jmv(); /*24272*/
				var _Hn = $k[--$j]; /*24272*/
				$put($k[--$j], _Hn, $get($get($1.fmap, 1), $1.fpb)); /*24272*/
				$k[$j++] = $1.pixs; /*24273*/
				$k[$j++] = ($1.x + $1.cols) - 6; /*24273*/
				$k[$j++] = $1.y + 1; /*24273*/
				$1.jmv(); /*24273*/
				var _Hx = $k[--$j]; /*24273*/
				$put($k[--$j], _Hx, $get($get($1.fmap, 2), $1.fpb)); /*24273*/
				$k[$j++] = $1.pixs; /*24274*/
				$k[$j++] = ($1.x + $1.cols) - 6; /*24274*/
				$k[$j++] = ($1.rows - $1.y) - 2; /*24274*/
				$1.jmv(); /*24274*/
				var _I8 = $k[--$j]; /*24274*/
				$put($k[--$j], _I8, $get($get($1.fmap, 3), $1.fpb)); /*24274*/
			} /*24274*/
		} /*24274*/
		$1.algnpat0 = $a([$a([$1.ki, $1.ki, -1]), $a([$1.ki, $1.wi, $1.ki]), $a([-1, $1.ki, $1.ki])]); /*24283*/
		$1.algnpat1 = $a([$a([-1, $1.ki, $1.ki]), $a([$1.ki, $1.wi, $1.ki]), $a([$1.ki, $1.ki, -1])]); /*24288*/
		$1.num = (~~Math.round($1.cols / 16)) - 1; /*24289*/
		$1.algnrpos = $a([3, 17]); /*24290*/
		if ($1.num > 0) { //no-else/*24293*/
			$k[$j++] = Infinity; /*24292*/
			for (var _Ib = 0, _Ia = $1.num; _Ib <= _Ia; _Ib += 1) {
				/*24292*/
				$k[$j++] = (~~(_Ib * (($1.cols - 7) / $1.num))) + 3; /*24292*/
			} /*24292*/
			$1.algnrpos = $a(); /*24292*/
		} /*24292*/
		$1.num = (~~Math.round($1.rows / 16)) - 1; /*24294*/
		$1.algncpos = $a([3, 17]); /*24295*/
		if ($1.num > 0) { //no-else/*24298*/
			$k[$j++] = Infinity; /*24297*/
			for (var _Ik = 0, _Ij = $1.num; _Ik <= _Ij; _Ik += 1) {
				/*24297*/
				$k[$j++] = (~~(_Ik * (($1.rows - 7) / $1.num))) + 3; /*24297*/
			} /*24297*/
			$1.algncpos = $a(); /*24297*/
		} /*24297*/
		$1.putalgnpat = function() {
			$1.pp = $k[--$j]; /*24300*/
			$1.py = $k[--$j]; /*24301*/
			$1.px = $k[--$j]; /*24302*/
			for (var _Ir = 0; _Ir <= 2; _Ir += 1) {
				/*24309*/
				$1.pb = _Ir; /*24304*/
				for (var _Is = 0; _Is <= 2; _Is += 1) {
					/*24308*/
					$1.pa = _Is; /*24306*/
					$k[$j++] = $1.pixs; /*24307*/
					$k[$j++] = $1.px + $1.pa; /*24307*/
					$k[$j++] = $1.py + $1.pb; /*24307*/
					$1.jmv(); /*24307*/
					var _J3 = $k[--$j]; /*24307*/
					$put($k[--$j], _J3, $get($get($1.pp, $1.pb), $1.pa)); /*24307*/
				} /*24307*/
			} /*24307*/
		}; /*24310*/
		for (var _J7 = 0, _J6 = $1.algncpos.length - 1; _J7 <= _J6; _J7 += 1) {
			/*24321*/
			$1.j = _J7; /*24312*/
			$1.y = $get($1.algncpos, $1.j); /*24313*/
			for (var _JD = 0, _JC = $1.algnrpos.length - 1; _JD <= _JC; _JD += 1) {
				/*24320*/
				$1.i = _JD; /*24315*/
				$1.x = $get($1.algnrpos, $1.i); /*24316*/
				$k[$j++] = $1.pixs; /*24317*/
				$k[$j++] = $1.x; /*24317*/
				$k[$j++] = $1.y; /*24317*/
				$1.jmv(); /*24317*/
				var _JK = $k[--$j]; /*24317*/
				if ($get($k[--$j], _JK) == -1) { //no-else/*24319*/
					$k[$j++] = $1.x - 1; /*24318*/
					$k[$j++] = $1.y - 1; /*24318*/
					if ((($1.i + $1.j) % 2) == 0) {
						/*24318*/
						$k[$j++] = $1.algnpat0; /*24318*/
					} else {
						/*24318*/
						$k[$j++] = $1.algnpat1; /*24318*/
					} /*24318*/
					$1.putalgnpat(); /*24318*/
				} /*24318*/
			} /*24318*/
		} /*24318*/
		if (!$1.slave) {
			/*24373*/
			var _KC = $a([$a([6, 1]), $a([6, 2]), $a([6, 3]), $a([6, 4]), $a([6, 5]), $a([6, 6]), $a([5, 6]), $a([4, 6]), $a([3, 6]), $a([2, 6]), $a([1, 6]), $a([7, 1]), $a([7, 2]), $a([7, 3]), $a([7, 4]), $a([7, 5]), $a([7, 6]), $a([7, 7]), $a([6, 7]), $a([5, 7]), $a([4, 7]), $a([3, 7]), $a([2, 7]), $a([1, 7]), $a([8, 1]), $a([8, 2]), $a([8, 3]), $a([8, 4]), $a([8, 5]), $a([8, 6]), $a([8, 7]), $a([8, 8]), $a([7, 8]), $a([6, 8]), $a([5, 8]), $a([4, 8]), $a([3, 8]), $a([2, 8]), $a([1, 8]), $a([9, 1]), $a([9, 2]), $a([9, 3]), $a([9, 4]), $a([9, 5])]); /*24332*/
			for (var _KD = 0, _KE = _KC.length; _KD < _KE; _KD++) {
				/*24336*/
				$aload($get(_KC, _KD)); /*24334*/
				$1.y = $k[--$j]; /*24334*/
				$1.x = $k[--$j]; /*24334*/
				$k[$j++] = $a([$1.x, $1.y]); /*24335*/
				$k[$j++] = $a([-$1.x, $1.y]); /*24335*/
				$k[$j++] = $a([-$1.x, -$1.y]); /*24335*/
				$k[$j++] = $a([$1.x, -$1.y]); /*24335*/
			} /*24335*/
			$astore($a(176)); /*24337*/
			$1.metadatamap = $k[--$j]; /*24337*/
			$1.palettemap1 = $a([$a([4, 1]), $a([4, 2]), $a([5, 1]), $a([5, 2]), $a([2, 4]), $a([2, 5]), $a([1, 4]), $a([1, 5]), $a([-2, 1]), $a([-2, 2]), $a([-1, 1]), $a([-1, 2]), $a([-4, 4]), $a([-4, 5]), $a([-5, 4]), $a([-5, 5])]); /*24342*/
			$1.palettemap2 = $a([$a([-4, -5]), $a([-4, -4]), $a([-5, -5]), $a([-5, -4]), $a([-2, -2]), $a([-2, -1]), $a([-1, -2]), $a([-1, -1]), $a([2, -5]), $a([2, -4]), $a([1, -5]), $a([1, -4]), $a([4, -2]), $a([4, -1]), $a([5, -2]), $a([5, -1])]); /*24347*/
		} else {
			/*24373*/
			$k[$j++] = Infinity; /*24360*/
			for (var _L4 = 1; _L4 <= 19; _L4 += 1) {
				/*24357*/
				$1.i = _L4; /*24355*/
				$k[$j++] = $a([0, $1.i]); /*24356*/
				$k[$j++] = $a([1, $1.i]); /*24356*/
			} /*24356*/
			for (var _L9 = 5; _L9 <= 12; _L9 += 1) {
				/*24361*/
				$1.i = _L9; /*24359*/
				$k[$j++] = $a([2, $1.i]); /*24360*/
				$k[$j++] = $a([3, $1.i]); /*24360*/
			} /*24360*/
			$1.metadatamap = $a(); /*24360*/
			$k[$j++] = Infinity; /*24368*/
			for (var _LF = 5; _LF <= 12; _LF += 1) {
				/*24365*/
				$k[$j++] = _LF; /*24365*/
				$k[$j++] = Infinity; /*24365*/
				var _LG = $k[--$j]; /*24365*/
				var _LH = $k[--$j]; /*24365*/
				$k[$j++] = _LG; /*24365*/
				$k[$j++] = 4; /*24365*/
				$k[$j++] = _LH; /*24365*/
				var _LI = $a(); /*24365*/
				$k[$j++] = _LI; /*24365*/
			} /*24365*/
			for (var _LJ = 12; _LJ >= 5; _LJ -= 1) {
				/*24366*/
				$k[$j++] = _LJ; /*24366*/
				$k[$j++] = Infinity; /*24366*/
				var _LK = $k[--$j]; /*24366*/
				var _LL = $k[--$j]; /*24366*/
				$k[$j++] = _LK; /*24366*/
				$k[$j++] = 5; /*24366*/
				$k[$j++] = _LL; /*24366*/
				var _LM = $a(); /*24366*/
				$k[$j++] = _LM; /*24366*/
			} /*24366*/
			for (var _LN = 5; _LN <= 12; _LN += 1) {
				/*24367*/
				$k[$j++] = _LN; /*24367*/
				$k[$j++] = Infinity; /*24367*/
				var _LO = $k[--$j]; /*24367*/
				var _LP = $k[--$j]; /*24367*/
				$k[$j++] = _LO; /*24367*/
				$k[$j++] = 6; /*24367*/
				$k[$j++] = _LP; /*24367*/
				var _LQ = $a(); /*24367*/
				$k[$j++] = _LQ; /*24367*/
			} /*24367*/
			for (var _LR = 12; _LR >= 5; _LR -= 1) {
				/*24368*/
				$k[$j++] = _LR; /*24368*/
				$k[$j++] = Infinity; /*24368*/
				var _LS = $k[--$j]; /*24368*/
				var _LT = $k[--$j]; /*24368*/
				$k[$j++] = _LS; /*24368*/
				$k[$j++] = 7; /*24368*/
				$k[$j++] = _LT; /*24368*/
				var _LU = $a(); /*24368*/
				$k[$j++] = _LU; /*24368*/
			} /*24368*/
			$1.palettemap1 = $a(); /*24368*/
			$k[$j++] = Infinity; /*24372*/
			var _LW = $1.palettemap1; /*24372*/
			for (var _LX = 0, _LY = _LW.length; _LX < _LY; _LX++) {
				/*24372*/
				$k[$j++] = $get(_LW, _LX); /*24372*/
				$k[$j++] = Infinity; /*24372*/
				var _La = $k[--$j]; /*24372*/
				var _Lb = $k[--$j]; /*24372*/
				$k[$j++] = _La; /*24372*/
				$aload(_Lb); /*24372*/
				var _Lc = $k[--$j]; /*24372*/
				var _Ld = $k[--$j]; /*24372*/
				$k[$j++] = -_Ld; /*24372*/
				$k[$j++] = -_Lc; /*24372*/
				var _Le = $a(); /*24372*/
				$k[$j++] = _Le; /*24372*/
			} /*24372*/
			$1.palettemap2 = $a(); /*24372*/
		} /*24373*/
		var _Lg = $1.metadatamap; /*24378*/
		for (var _Lh = 0, _Li = _Lg.length; _Lh < _Li; _Lh++) {
			/*24382*/
			var _Lj = $get(_Lg, _Lh); /*24382*/
			var _Lk = $get(_Lj, 0); /*24379*/
			$k[$j++] = _Lj; /*24379*/
			$k[$j++] = _Lk; /*24379*/
			if (_Lk < 0) {
				/*24379*/
				var _Lm = $k[--$j]; /*24379*/
				var _Ln = $k[--$j]; /*24379*/
				$put(_Ln, 0, (_Lm + $1.cols) - 1); /*24379*/
				$k[$j++] = _Ln; /*24379*/
			} else {
				/*24379*/
				$j--; /*24379*/
			} /*24379*/
			var _Lo = $k[--$j]; /*24380*/
			var _Lp = $get(_Lo, 1); /*24380*/
			$k[$j++] = _Lo; /*24380*/
			$k[$j++] = _Lp; /*24380*/
			if (_Lp < 0) {
				/*24380*/
				var _Lr = $k[--$j]; /*24380*/
				var _Ls = $k[--$j]; /*24380*/
				$put(_Ls, 1, (_Lr + $1.rows) - 1); /*24380*/
				$k[$j++] = _Ls; /*24380*/
			} else {
				/*24380*/
				$j--; /*24380*/
			} /*24380*/
			$j--; /*24381*/
		} /*24381*/
		var _Lt = $1.palettemap1; /*24383*/
		for (var _Lu = 0, _Lv = _Lt.length; _Lu < _Lv; _Lu++) {
			/*24387*/
			var _Lw = $get(_Lt, _Lu); /*24387*/
			var _Lx = $get(_Lw, 0); /*24384*/
			$k[$j++] = _Lw; /*24384*/
			$k[$j++] = _Lx; /*24384*/
			if (_Lx < 0) {
				/*24384*/
				var _Lz = $k[--$j]; /*24384*/
				var _M0 = $k[--$j]; /*24384*/
				$put(_M0, 0, (_Lz + $1.cols) - 1); /*24384*/
				$k[$j++] = _M0; /*24384*/
			} else {
				/*24384*/
				$j--; /*24384*/
			} /*24384*/
			var _M1 = $k[--$j]; /*24385*/
			var _M2 = $get(_M1, 1); /*24385*/
			$k[$j++] = _M1; /*24385*/
			$k[$j++] = _M2; /*24385*/
			if (_M2 < 0) {
				/*24385*/
				var _M4 = $k[--$j]; /*24385*/
				var _M5 = $k[--$j]; /*24385*/
				$put(_M5, 1, (_M4 + $1.rows) - 1); /*24385*/
				$k[$j++] = _M5; /*24385*/
			} else {
				/*24385*/
				$j--; /*24385*/
			} /*24385*/
			$j--; /*24386*/
		} /*24386*/
		var _M6 = $1.palettemap2; /*24388*/
		for (var _M7 = 0, _M8 = _M6.length; _M7 < _M8; _M7++) {
			/*24392*/
			var _M9 = $get(_M6, _M7); /*24392*/
			var _MA = $get(_M9, 0); /*24389*/
			$k[$j++] = _M9; /*24389*/
			$k[$j++] = _MA; /*24389*/
			if (_MA < 0) {
				/*24389*/
				var _MC = $k[--$j]; /*24389*/
				var _MD = $k[--$j]; /*24389*/
				$put(_MD, 0, (_MC + $1.cols) - 1); /*24389*/
				$k[$j++] = _MD; /*24389*/
			} else {
				/*24389*/
				$j--; /*24389*/
			} /*24389*/
			var _ME = $k[--$j]; /*24390*/
			var _MF = $get(_ME, 1); /*24390*/
			$k[$j++] = _ME; /*24390*/
			$k[$j++] = _MF; /*24390*/
			if (_MF < 0) {
				/*24390*/
				var _MH = $k[--$j]; /*24390*/
				var _MI = $k[--$j]; /*24390*/
				$put(_MI, 1, (_MH + $1.rows) - 1); /*24390*/
				$k[$j++] = _MI; /*24390*/
			} else {
				/*24390*/
				$j--; /*24390*/
			} /*24390*/
			$j--; /*24391*/
		} /*24391*/
		for (var _ML = 0, _MK = $1.nummetamodules - 1; _ML <= _MK; _ML += 1) {
			/*24397*/
			$k[$j++] = $1.pixs; /*24396*/
			$aload($get($1.metadatamap, _ML)); /*24396*/
			$1.jmv(); /*24396*/
			var _MP = $k[--$j]; /*24396*/
			$put($k[--$j], _MP, 0); /*24396*/
		} /*24396*/
		if (!$1.slave) {
			/*24410*/
			var _MS = $1.colors; /*24402*/
			var _MT = 16; /*24402*/
			if (16 > _MS) { //no-else/*24402*/
				var _ = _MS; /*24402*/
				_MS = _MT; /*24402*/
				_MT = _; /*24402*/
			} /*24402*/
			for (var _MV = 0, _MU = _MT - 1; _MV <= _MU; _MV += 1) {
				/*24407*/
				$1.i = _MV; /*24403*/
				var _MY = $get($1.palettelayout, $1.i); /*24404*/
				$k[$j++] = _MY; /*24405*/
				$k[$j++] = $1.pixs; /*24405*/
				$k[$j++] = _MY; /*24405*/
				$aload($get($1.palettemap1, $1.i)); /*24405*/
				$1.jmv(); /*24405*/
				var _Md = $k[--$j]; /*24405*/
				var _Me = $k[--$j]; /*24405*/
				$put($k[--$j], _Md, _Me); /*24405*/
				var _Mh = $k[--$j]; /*24406*/
				$k[$j++] = $1.pixs; /*24406*/
				$k[$j++] = _Mh; /*24406*/
				$aload($get($1.palettemap2, $1.i)); /*24406*/
				$1.jmv(); /*24406*/
				var _Ml = $k[--$j]; /*24406*/
				var _Mm = $k[--$j]; /*24406*/
				$put($k[--$j], _Ml, _Mm); /*24406*/
			} /*24406*/
			$1.i = 16; /*24408*/
		} else {
			/*24410*/
			$1.i = 0; /*24410*/
		} /*24410*/
		$1.j = $1.nummetamodules; /*24414*/
		for (var _Ms = $1.i, _Mr = $1.palettelayout.length - 1; _Ms <= _Mr; _Ms += 2) {
			/*24424*/
			$1.i = _Ms; /*24416*/
			var _Mv = $get($1.palettelayout, $1.i); /*24417*/
			$k[$j++] = _Mv; /*24418*/
			$k[$j++] = $1.pixs; /*24418*/
			$k[$j++] = _Mv; /*24418*/
			$aload($get($1.metadatamap, $1.j)); /*24418*/
			$1.jmv(); /*24418*/
			var _N0 = $k[--$j]; /*24418*/
			var _N1 = $k[--$j]; /*24418*/
			$put($k[--$j], _N0, _N1); /*24418*/
			var _N4 = $k[--$j]; /*24419*/
			$k[$j++] = $1.pixs; /*24419*/
			$k[$j++] = _N4; /*24419*/
			$aload($get($1.metadatamap, $1.j + 2)); /*24419*/
			$1.jmv(); /*24419*/
			var _N8 = $k[--$j]; /*24419*/
			var _N9 = $k[--$j]; /*24419*/
			$put($k[--$j], _N8, _N9); /*24419*/
			var _ND = $get($1.palettelayout, $1.i + 1); /*24420*/
			$k[$j++] = _ND; /*24421*/
			$k[$j++] = $1.pixs; /*24421*/
			$k[$j++] = _ND; /*24421*/
			$aload($get($1.metadatamap, $1.j + 1)); /*24421*/
			$1.jmv(); /*24421*/
			var _NI = $k[--$j]; /*24421*/
			var _NJ = $k[--$j]; /*24421*/
			$put($k[--$j], _NI, _NJ); /*24421*/
			var _NM = $k[--$j]; /*24422*/
			$k[$j++] = $1.pixs; /*24422*/
			$k[$j++] = _NM; /*24422*/
			$aload($get($1.metadatamap, $1.j + 3)); /*24422*/
			$1.jmv(); /*24422*/
			var _NQ = $k[--$j]; /*24422*/
			var _NR = $k[--$j]; /*24422*/
			$put($k[--$j], _NQ, _NR); /*24422*/
			$1.j = $1.j + 4; /*24423*/
		} /*24423*/
		var _Ns = $a([function() {
			var _NU = $k[--$j]; /*24428*/
			var _NV = $k[--$j]; /*24428*/
			$k[$j++] = (_NV + _NU) % $1.colors; /*24428*/
		}, function() {
			$j--; /*24429*/
			var _NY = $k[--$j]; /*24429*/
			$k[$j++] = _NY % $1.colors; /*24429*/
		}, function() {
			var _NZ = $k[--$j]; /*24430*/
			var _Na = $k[--$j]; /*24430*/
			$k[$j++] = _NZ % $1.colors; /*24430*/
		}, function() {
			var _Nc = $k[--$j]; /*24431*/
			var _Nd = $k[--$j]; /*24431*/
			$k[$j++] = ((~~(_Nc / 3)) + (~~(_Nd / 2))) % $1.colors; /*24431*/
		}, function() {
			var _Nf = $k[--$j]; /*24432*/
			var _Ng = $k[--$j]; /*24432*/
			$k[$j++] = ((~~(_Nf / 2)) + (~~(_Ng / 3))) % $1.colors; /*24432*/
		}, function() {
			var _Ni = $k[--$j]; /*24433*/
			var _Nk = $k[--$j] + _Ni; /*24433*/
			$k[$j++] = ((~~(_Nk / 2)) + (~~(_Nk / 3))) % $1.colors; /*24433*/
		}, function() {
			var _Nm = $k[--$j]; /*24434*/
			var _Nn = $k[--$j]; /*24434*/
			$k[$j++] = (((_Nm * (_Nn * _Nn)) % 7) + (((_Nm + (_Nn * _Nn)) * 2) % 19)) % $1.colors; /*24434*/
		}, function() {
			var _Np = $k[--$j]; /*24435*/
			var _Nq = $k[--$j]; /*24435*/
			$k[$j++] = (((_Nq * (_Np * _Np)) % 5) + (((_Np * _Np) + (_Nq * 2)) % 13)) % $1.colors; /*24435*/
		}]); /*24435*/
		$1.maskfuncs = _Ns; /*24436*/
		if ($1.mask != -1) { //no-else/*24440*/
			$1.maskfuncs = $a([$get($1.maskfuncs, $1.mask)]); /*24438*/
			$1.bestmaskval = $1.mask; /*24439*/
		} /*24439*/
		$1.masks = $a($1.maskfuncs.length); /*24441*/
		for (var _O3 = 0, _O2 = $1.masks.length - 1; _O3 <= _O2; _O3 += 1) {
			/*24454*/
			$1.m = _O3; /*24443*/
			$1.mask = $a($1.rows * $1.cols); /*24444*/
			for (var _O9 = 0, _O8 = $1.rows - 1; _O9 <= _O8; _O9 += 1) {
				/*24452*/
				$1.j = _O9; /*24446*/
				for (var _OC = 0, _OB = $1.cols - 1; _OC <= _OB; _OC += 1) {
					/*24451*/
					$1.i = _OC; /*24448*/
					$k[$j++] = $1.pixs; /*24449*/
					$k[$j++] = $1.i; /*24449*/
					$k[$j++] = $1.j; /*24449*/
					$1.jmv(); /*24449*/
					var _OG = $k[--$j]; /*24449*/
					if ($get($k[--$j], _OG) == -1) {
						/*24449*/
						$k[$j++] = $1.i; /*24449*/
						$k[$j++] = $1.j; /*24449*/
						if ($get($1.maskfuncs, $1.m)() === true) {
							break;
						} /*24449*/
					} else {
						/*24449*/
						$k[$j++] = 0; /*24449*/
					} /*24449*/
					$k[$j++] = $1.mask; /*24450*/
					$k[$j++] = $1.i; /*24450*/
					$k[$j++] = $1.j; /*24450*/
					$1.jmv(); /*24450*/
					var _OR = $k[--$j]; /*24450*/
					var _OS = $k[--$j]; /*24450*/
					$put(_OS, _OR, $k[--$j]); /*24450*/
				} /*24450*/
			} /*24450*/
			$put($1.masks, $1.m, $1.mask); /*24453*/
		} /*24453*/
		$1.posx = 0; /*24457*/
		$1.posy = 0; /*24457*/
		$1.i = 0; /*24458*/
		for (;;) {
			/*24468*/
			if ($1.posx == $1.cols) { //no-else/*24460*/
				break; /*24460*/
			} /*24460*/
			$k[$j++] = $1.pixs; /*24461*/
			$k[$j++] = $1.posx; /*24461*/
			$k[$j++] = $1.posy; /*24461*/
			$1.jmv(); /*24461*/
			var _Oc = $k[--$j]; /*24461*/
			if ($get($k[--$j], _Oc) == -1) { //no-else/*24465*/
				$k[$j++] = 0; /*24462*/
				$forall($geti($1.bits, $1.i, $1.databpm), function() {
					/*24462*/
					var _Oj = $k[--$j]; /*24462*/
					var _Ok = $k[--$j]; /*24462*/
					$k[$j++] = (_Ok + (_Oj - 48)) * 2; /*24462*/
				}); /*24462*/
				var _Ol = $k[--$j]; /*24462*/
				$k[$j++] = ~~(_Ol / 2); /*24463*/
				$k[$j++] = $1.pixs; /*24463*/
				$k[$j++] = $1.posx; /*24463*/
				$k[$j++] = $1.posy; /*24463*/
				$1.jmv(); /*24463*/
				var _Op = $k[--$j]; /*24463*/
				var _Oq = $k[--$j]; /*24463*/
				$put(_Oq, _Op, $k[--$j]); /*24463*/
				$1.i = $1.i + $1.databpm; /*24464*/
			} /*24464*/
			$1.posy = $1.posy + 1; /*24466*/
			if ($1.posy == $1.rows) { //no-else/*24467*/
				$1.posy = 0; /*24467*/
				$1.posx = $1.posx + 1; /*24467*/
			} /*24467*/
		} /*24467*/
		$1.evalrle = function() {
			$1.scrle = $k[--$j]; /*24472*/
			$1.scr1 = 0; /*24473*/
			$1.scr3 = 0; /*24473*/
			for (var _P1 = 0, _P0 = $1.scrle.length - 2; _P1 <= _P0; _P1 += 2) {
				/*24495*/
				$1.j = _P1; /*24475*/
				if ($get($1.scrle, $1.j + 1) != -1) { //no-else/*24494*/
					var _P7 = $get($1.scrle, $1.j); /*24478*/
					$k[$j++] = _P7; /*24478*/
					if (_P7 >= 5) {
						/*24478*/
						$1.scr1 = ($k[--$j] - 2) + $1.scr1; /*24478*/
					} else {
						/*24478*/
						$j--; /*24478*/
					} /*24478*/
					if (($1.j >= 4) && ($1.j <= ($1.scrle.length - 5))) { //no-else/*24493*/
						var _PF = $geti($1.scrle, $1.j - 4, 10); /*24481*/
						$k[$j++] = _PF; /*24482*/
						$forall(_PF, function() {
							/*24482*/
							var _PG = $k[--$j]; /*24482*/
							$k[$j++] = _PG == 1; /*24482*/
						}); /*24482*/
						$j--; /*24482*/
						for (var _PH = 0, _PI = 4; _PH < _PI; _PH++) {
							/*24482*/
							var _PJ = $k[--$j]; /*24482*/
							var _PK = $k[--$j]; /*24482*/
							var _PL = $k[--$j]; /*24482*/
							$k[$j++] = $an(_PL, _PJ); /*24482*/
						} /*24482*/
						if ($k[--$j]) {
							/*24492*/
							$k[$j++] = Infinity; /*24483*/
							var _PN = $k[--$j]; /*24483*/
							var _PO = $k[--$j]; /*24483*/
							$k[$j++] = _PN; /*24483*/
							$aload(_PO); /*24483*/
							var _PP = $k[--$j]; /*24484*/
							var _PQ = $k[--$j]; /*24484*/
							var _PR = $k[--$j]; /*24484*/
							var _PS = $k[--$j]; /*24484*/
							var _PT = $k[--$j]; /*24484*/
							var _PU = $k[--$j]; /*24484*/
							var _PV = $k[--$j]; /*24484*/
							var _PW = $k[--$j]; /*24484*/
							var _PX = $k[--$j]; /*24484*/
							$k[$j++] = _PX; /*24490*/
							$k[$j++] = _PW; /*24490*/
							$k[$j++] = _PV; /*24490*/
							$k[$j++] = _PU; /*24490*/
							$k[$j++] = _PT; /*24490*/
							$k[$j++] = _PS; /*24490*/
							$k[$j++] = _PR; /*24490*/
							$k[$j++] = _PQ; /*24490*/
							$k[$j++] = _PP; /*24490*/
							if (($eq(_PX, _PT) && $eq(_PX, _PP)) && $eq(_PV, _PR)) { //no-else/*24490*/
								var _PY = $k[--$j]; /*24486*/
								var _PZ = $k[--$j]; /*24486*/
								var _Pa = $k[--$j]; /*24486*/
								$1.c4 = _Pa; /*24486*/
								$1.c5 = _PY; /*24486*/
								$k[$j++] = _Pa; /*24489*/
								$k[$j++] = _PZ; /*24489*/
								if ((($1.c4 == $1.bi) && ($1.c5 == $1.yi)) || ((($1.c4 == $1.yi) && ($1.c5 == $1.bi)) || ((($1.c4 == $1.gi) && ($1.c5 == $1.mi)) || (($1.c4 == $1.mi) && ($1.c5 == $1.gi))))) { //no-else/*24489*/
									$1.scr3 = $1.scr3 + 100; /*24489*/
								} /*24489*/
							} /*24489*/
							$cleartomark(); /*24491*/
						} else {
							/*24492*/
							$j--; /*24492*/
						} /*24492*/
					} /*24492*/
				} /*24492*/
			} /*24492*/
			$k[$j++] = $1.scr1; /*24496*/
			$k[$j++] = $1.scr3; /*24496*/
		}; /*24497*/
		$1.evalmask = function() {
			$1.sym = $k[--$j]; /*24500*/
			$1.n1 = 0; /*24502*/
			$1.n2 = 0; /*24502*/
			$1.n3 = 0; /*24502*/
			var _Pv = $1.rows; /*24503*/
			var _Pw = $1.cols; /*24503*/
			if (_Pv < _Pw) { //no-else/*24503*/
				var _ = _Pw; /*24503*/
				_Pw = _Pv; /*24503*/
				_Pv = _; /*24503*/
			} /*24503*/
			$1.rle = $a((_Pv * 2) + 2); /*24503*/
			$1.lastpairs = $a($1.cols); /*24504*/
			$1.thispairs = $a($1.cols); /*24505*/
			for (var _Q4 = 0, _Q3 = $1.cols - 1; _Q4 <= _Q3; _Q4 += 1) {
				/*24517*/
				$1.i = _Q4; /*24509*/
				$k[$j++] = Infinity; /*24510*/
				$k[$j++] = 0; /*24513*/
				$k[$j++] = -1; /*24513*/
				for (var _QA = $1.i, _QB = $1.cols, _Q9 = ($1.rows * $1.cols) - 1; _QB < 0 ? _QA >= _Q9 : _QA <= _Q9; _QA += _QB) {
					/*24513*/
					var _QD = $get($1.sym, _QA); /*24512*/
					var _QE = $k[--$j]; /*24512*/
					$k[$j++] = _QE; /*24512*/
					$k[$j++] = _QD; /*24512*/
					if ($eq(_QE, _QD)) {
						/*24512*/
						$j--; /*24512*/
						var _QF = $k[--$j]; /*24512*/
						var _QG = $k[--$j]; /*24512*/
						$k[$j++] = _QG + 1; /*24512*/
						$k[$j++] = _QF; /*24512*/
					} else {
						/*24512*/
						var _QH = $k[--$j]; /*24512*/
						$k[$j++] = 1; /*24512*/
						$k[$j++] = _QH; /*24512*/
					} /*24512*/
				} /*24512*/
				var _QJ = $counttomark() + 2; /*24514*/
				$astore($geti($1.rle, 0, _QJ - 2)); /*24514*/
				$1.evalrle(); /*24515*/
				$1.n3 = $k[--$j] + $1.n3; /*24515*/
				$1.n1 = $k[--$j] + $1.n1; /*24515*/
				$j--; /*24516*/
			} /*24516*/
			for (var _QR = 0, _QQ = $1.rows - 1; _QR <= _QQ; _QR += 1) {
				/*24544*/
				$1.i = _QR; /*24520*/
				$1.symrow = $geti($1.sym, $1.i * $1.cols, $1.cols); /*24523*/
				$k[$j++] = Infinity; /*24524*/
				$k[$j++] = 0; /*24527*/
				$k[$j++] = -1; /*24527*/
				$forall($1.symrow, function() {
					/*24527*/
					var _QY = $k[--$j]; /*24526*/
					var _QZ = $k[--$j]; /*24526*/
					$k[$j++] = _QZ; /*24526*/
					$k[$j++] = _QY; /*24526*/
					if ($eq(_QZ, _QY)) {
						/*24526*/
						$j--; /*24526*/
						var _Qa = $k[--$j]; /*24526*/
						var _Qb = $k[--$j]; /*24526*/
						$k[$j++] = _Qb + 1; /*24526*/
						$k[$j++] = _Qa; /*24526*/
					} else {
						/*24526*/
						var _Qc = $k[--$j]; /*24526*/
						$k[$j++] = 1; /*24526*/
						$k[$j++] = _Qc; /*24526*/
					} /*24526*/
				}); /*24526*/
				var _Qe = $counttomark() + 2; /*24528*/
				$astore($geti($1.rle, 0, _Qe - 2)); /*24528*/
				$1.evalrle(); /*24529*/
				$1.n3 = $k[--$j] + $1.n3; /*24529*/
				$1.n1 = $k[--$j] + $1.n1; /*24529*/
				$j--; /*24530*/
				var _Qk = $1.thispairs; /*24533*/
				$1.thispairs = $1.lastpairs; /*24533*/
				$1.lastpairs = _Qk; /*24533*/
				$k[$j++] = -1; /*24534*/
				$forall($1.symrow, function() {
					/*24534*/
					var _Qn = $k[--$j]; /*24534*/
					var _Qo = $k[--$j]; /*24534*/
					$k[$j++] = _Qn; /*24534*/
					$k[$j++] = _Qo; /*24534*/
					if ($ne(_Qn, _Qo)) { //no-else/*24534*/
						$j--; /*24534*/
						var _Qp = $k[--$j]; /*24534*/
						$k[$j++] = -1; /*24534*/
						$k[$j++] = _Qp; /*24534*/
					} /*24534*/
				}); /*24534*/
				$j--; /*24535*/
				$astore($1.thispairs); /*24536*/
				$j--; /*24536*/
				if ($1.i > 0) { //no-else/*24543*/
					$k[$j++] = Infinity; /*24538*/
					$aload($1.lastpairs); /*24539*/
					$aload($1.thispairs); /*24539*/
					$k[$j++] = $1.n2; /*24540*/
					for (var _Qw = 0, _Qx = $1.cols; _Qw < _Qx; _Qw++) {
						/*24540*/
						var _Qy = $k[--$j]; /*24540*/
						var _Qz = $k[--$j]; /*24540*/
						$k[$j++] = _Qy; /*24540*/
						$k[$j++] = _Qz; /*24540*/
						if (_Qz != -1) {
							/*24540*/
							var _R1 = $k[$j - 1 - ($1.cols + 1)]; /*24540*/
							if ($eq($k[--$j], _R1)) { //no-else/*24540*/
								var _R3 = $k[--$j]; /*24540*/
								$k[$j++] = _R3 + 3; /*24540*/
							} /*24540*/
						} else {
							/*24540*/
							$j--; /*24540*/
						} /*24540*/
					} /*24540*/
					$1.n2 = $k[--$j]; /*24541*/
					$cleartomark(); /*24542*/
				} /*24542*/
			} /*24542*/
			$k[$j++] = ($1.n1 + $1.n2) + $1.n3; /*24546*/
		}; /*24547*/
		$1.bestscore = 999999999; /*24550*/
		for (var _RA = 0, _R9 = $1.masks.length - 1; _RA <= _R9; _RA += 1) {
			/*24568*/
			$1.m = _RA; /*24552*/
			$1.masksym = $a($1.rows * $1.cols); /*24553*/
			for (var _RH = 0, _RG = ($1.rows * $1.cols) - 1; _RH <= _RG; _RH += 1) {
				/*24557*/
				$1.i = _RH; /*24555*/
				$put($1.masksym, $1.i, $xo($get($1.pixs, $1.i), $get($get($1.masks, $1.m), $1.i))); /*24556*/
			} /*24556*/
			if ($1.masks.length != 1) {
				/*24566*/
				$k[$j++] = $1.masksym; /*24559*/
				$1.evalmask(); /*24559*/
				$1.score = $k[--$j]; /*24559*/
				if ($1.score < $1.bestscore) { //no-else/*24564*/
					$1.bestsym = $1.masksym; /*24561*/
					$1.bestmaskval = $1.m; /*24562*/
					$1.bestscore = $1.score; /*24563*/
				} /*24563*/
			} else {
				/*24566*/
				$1.bestsym = $1.masksym; /*24566*/
			} /*24566*/
		} /*24566*/
		$1.pixs = $1.bestsym; /*24569*/
		$1.metamask = $1.bestmaskval; /*24570*/
		$1.addtometapart = function() {
			var _Rd = $k[--$j]; /*24574*/
			$puti($1.metapart, $1.p, _Rd); /*24574*/
			$1.p = _Rd.length + $1.p; /*24575*/
		}; /*24576*/
		$1.addtometabits = function() {
			var _Rh = $k[--$j]; /*24579*/
			$puti($1.metabits, $1.q, _Rh); /*24579*/
			$1.q = _Rh.length + $1.q; /*24580*/
		}; /*24581*/
		$1.metapart = $s(40); /*24583*/
		$1.metabits = $s($1.nummetabits); /*24584*/
		$1.p = 0; /*24585*/
		$1.q = 0; /*24585*/
		if (!$1.slave) {
			/*24640*/
			$k[$j++] = (~~(Math.round(Math.log($1.colors) / Math.log(2)))) - 1; /*24590*/
			$k[$j++] = 3; /*24590*/
			$1.tofixedbits(); /*24590*/
			$1.addtometapart(); /*24590*/
			$k[$j++] = $geti($1.metapart, 0, $1.p); /*24591*/
			$k[$j++] = 2; /*24591*/
			$k[$j++] = -1; /*24591*/
			$1.ldpc(); /*24591*/
			$1.addtometabits(); /*24591*/
			$1.p = 0; /*24591*/
			$k[$j++] = $1.metass; /*24594*/
			$k[$j++] = 1; /*24594*/
			$1.tofixedbits(); /*24594*/
			$1.addtometapart(); /*24594*/
			$k[$j++] = $1.metavf; /*24595*/
			$k[$j++] = 2; /*24595*/
			$1.tofixedbits(); /*24595*/
			$1.addtometapart(); /*24595*/
			$k[$j++] = $1.metamask; /*24596*/
			$k[$j++] = 3; /*24596*/
			$1.tofixedbits(); /*24596*/
			$1.addtometapart(); /*24596*/
			if ($1.hasslaves) {
				/*24597*/
				$k[$j++] = "1"; /*24597*/
			} else {
				/*24597*/
				$k[$j++] = "0"; /*24597*/
			} /*24597*/
			$1.addtometapart(); /*24597*/
			$k[$j++] = $geti($1.metapart, 0, $1.p); /*24598*/
			$k[$j++] = 2; /*24598*/
			$k[$j++] = -1; /*24598*/
			$1.ldpc(); /*24598*/
			$1.addtometabits(); /*24598*/
			$1.p = 0; /*24598*/
			if ($1.metass == 0) {
				/*24608*/
				$k[$j++] = ((~~(($1.cols - 17) / 4)) - $get($a([0, 4, 8, 16]), $1.metavf)) - 1; /*24603*/
				$k[$j++] = $1.metavlen; /*24603*/
				$1.tofixedbits(); /*24603*/
				$1.addtometapart(); /*24603*/
			} else {
				/*24608*/
				$k[$j++] = (~~(($1.cols - 17) / 4)) - 1; /*24606*/
				$k[$j++] = ~~($1.metavlen / 2); /*24606*/
				$1.tofixedbits(); /*24606*/
				$1.addtometapart(); /*24606*/
				$k[$j++] = (~~(($1.rows - 17) / 4)) - 1; /*24608*/
				$k[$j++] = ~~($1.metavlen / 2); /*24608*/
				$1.tofixedbits(); /*24608*/
				$1.addtometapart(); /*24608*/
			} /*24608*/
			$k[$j++] = $1.datawc - 3; /*24610*/
			$k[$j++] = ~~($1.metaelen / 2); /*24610*/
			$1.tofixedbits(); /*24610*/
			$1.addtometapart(); /*24610*/
			$k[$j++] = $1.datawr - 4; /*24611*/
			$k[$j++] = ~~($1.metaelen / 2); /*24611*/
			$1.tofixedbits(); /*24611*/
			$1.addtometapart(); /*24611*/
			if ($1.hasslaves) { //no-else/*24614*/
				$k[$j++] = 0; /*24613*/
				$k[$j++] = 4; /*24613*/
				$1.tofixedbits(); /*24613*/
				$1.addtometapart(); /*24613*/
			} /*24613*/
			$k[$j++] = $geti($1.metapart, 0, $1.p); /*24615*/
			$k[$j++] = 2; /*24615*/
			$k[$j++] = -1; /*24615*/
			$1.ldpc(); /*24615*/
			$1.addtometabits(); /*24615*/
			$1.p = 0; /*24615*/
		} else {
			/*24640*/
			var _SJ = $1.sameshape ? 0 : 1; /*24620*/
			$k[$j++] = _SJ; /*24620*/
			$k[$j++] = 1; /*24620*/
			$1.tofixedbits(); /*24620*/
			$1.addtometapart(); /*24620*/
			var _SL = $1.sameecc ? 0 : 1; /*24621*/
			$k[$j++] = _SL; /*24621*/
			$k[$j++] = 1; /*24621*/
			$1.tofixedbits(); /*24621*/
			$1.addtometapart(); /*24621*/
			var _SN = $1.hasslaves ? 1 : 0; /*24622*/
			$k[$j++] = _SN; /*24622*/
			$k[$j++] = 1; /*24622*/
			$1.tofixedbits(); /*24622*/
			$1.addtometapart(); /*24622*/
			$k[$j++] = $geti($1.metapart, 0, $1.p); /*24623*/
			$k[$j++] = 2; /*24623*/
			$k[$j++] = -1; /*24623*/
			$1.ldpc(); /*24623*/
			$1.addtometabits(); /*24623*/
			$1.p = 0; /*24623*/
			if (!$1.sameshape) { //no-else/*24629*/
				$k[$j++] = (~~(($1.diffside - 17) / 4)) - 1; /*24628*/
				$k[$j++] = 5; /*24628*/
				$1.tofixedbits(); /*24628*/
				$1.addtometapart(); /*24628*/
			} /*24628*/
			if ($1.hasslaves) { //no-else/*24632*/
				$k[$j++] = 0; /*24631*/
				$k[$j++] = 3; /*24631*/
				$1.tofixedbits(); /*24631*/
				$1.addtometapart(); /*24631*/
			} /*24631*/
			$k[$j++] = $geti($1.metapart, 0, $1.p); /*24633*/
			$k[$j++] = 2; /*24633*/
			$k[$j++] = -1; /*24633*/
			$1.ldpc(); /*24633*/
			$1.addtometabits(); /*24633*/
			$1.p = 0; /*24633*/
			if (!$1.sameecc) { //no-else/*24639*/
				$k[$j++] = $1.datawc - 3; /*24637*/
				$k[$j++] = ~~($1.metaelen / 2); /*24637*/
				$1.tofixedbits(); /*24637*/
				$1.addtometapart(); /*24637*/
				$k[$j++] = $1.datawr - 4; /*24638*/
				$k[$j++] = ~~($1.metaelen / 2); /*24638*/
				$1.tofixedbits(); /*24638*/
				$1.addtometapart(); /*24638*/
			} /*24638*/
			$k[$j++] = $geti($1.metapart, 0, $1.p); /*24640*/
			$k[$j++] = 2; /*24640*/
			$k[$j++] = -1; /*24640*/
			$1.ldpc(); /*24640*/
			$1.addtometabits(); /*24640*/
			$1.p = 0; /*24640*/
		} /*24640*/
		for (var _Si = $1.q, _Sh = $1.nummetabits - 1; _Si <= _Sh; _Si += 1) {
			/*24645*/
			$put($1.metabits, _Si, 48); /*24644*/
		} /*24644*/
		$1.i = 0; /*24648*/
		$1.j = 0; /*24648*/
		if (!$1.slave) { //no-else/*24656*/
			$forall($geti($1.metabits, $1.i, 6), function() {
				/*24654*/
				if ($1.colors == 4) {
					/*24651*/
					$k[$j++] = $a([$1.bi, $1.yi]); /*24651*/
				} else {
					/*24651*/
					$k[$j++] = $a([$1.ki, $1.wi]); /*24651*/
				} /*24651*/
				var _Sv = $k[--$j]; /*24651*/
				var _Sx = $get(_Sv, $k[--$j] - 48); /*24651*/
				$k[$j++] = _Sx; /*24652*/
				$k[$j++] = $1.pixs; /*24652*/
				$aload($get($1.metadatamap, $1.j)); /*24652*/
				$1.jmv(); /*24652*/
				var _T2 = $k[--$j]; /*24652*/
				var _T3 = $k[--$j]; /*24652*/
				$put(_T3, _T2, $k[--$j]); /*24652*/
				$1.j = $1.j + 1; /*24653*/
			}); /*24653*/
			$1.i = $1.i + 6; /*24655*/
		} /*24655*/
		for (var _TA = 0, _TB = ~~(($1.nummetabits - $1.i) / $1.metabpm); _TA < _TB; _TA++) {
			/*24663*/
			$k[$j++] = 0; /*24658*/
			$forall($geti($1.metabits, $1.i, $1.metabpm), function() {
				/*24658*/
				var _TG = $k[--$j]; /*24658*/
				var _TH = $k[--$j]; /*24658*/
				$k[$j++] = (_TH + (_TG - 48)) * 2; /*24658*/
			}); /*24658*/
			var _TK = $get($1.metacolorindex, ~~($k[--$j] / 2)); /*24659*/
			$k[$j++] = _TK; /*24660*/
			$k[$j++] = $1.pixs; /*24660*/
			$aload($get($1.metadatamap, $1.j)); /*24660*/
			$1.jmv(); /*24660*/
			var _TP = $k[--$j]; /*24660*/
			var _TQ = $k[--$j]; /*24660*/
			$put(_TQ, _TP, $k[--$j]); /*24660*/
			$1.i = $1.i + $1.metabpm; /*24661*/
			$1.j = $1.j + 1; /*24662*/
		} /*24662*/
		var _Tc = new Map([
			["ren", $0.renmatrix],
			["pixs", $1.pixs],
			["pixx", $1.cols],
			["pixy", $1.rows],
			["colormap", $1.palette],
			["height", ($1.rows * 2) / 72],
			["width", ($1.cols * 2) / 72],
			["opt", $1.options]
		]); /*24673*/
		$k[$j++] = _Tc; /*24676*/
		if (!$1.dontdraw) { //no-else/*24676*/
			$0.renmatrix(); /*24676*/
		} /*24676*/
	};
	$0['gs1-cc'] = function() {
		var $1 = {}; /*24707*/
		$1.options = $k[--$j]; /*24709*/
		$1.barcode = $k[--$j]; /*24710*/
		$1.dontdraw = false; /*24712*/
		$1.ccversion = "a"; /*24713*/
		$1.cccolumns = -1; /*24714*/
		$1.lintype = ""; /*24715*/
		$1.linwidth = -1; /*24716*/
		$forall($1.options, function() {
			/*24727*/
			var _3 = $k[--$j]; /*24727*/
			$1[$k[--$j]] = _3; /*24727*/
		}); /*24727*/
		$1.cccolumns = ~~$1.cccolumns; /*24729*/
		$1.linwidth = ~~$1.linwidth; /*24730*/
		if ($1.cccolumns == -1) { //no-else/*24749*/
			$k[$j++] = Infinity; /*24747*/
			$k[$j++] = 'ean13'; /*24740*/
			$k[$j++] = 4; /*24740*/
			$k[$j++] = 'upca'; /*24740*/
			$k[$j++] = 4; /*24740*/
			$k[$j++] = 'ean8'; /*24740*/
			$k[$j++] = 3; /*24740*/
			$k[$j++] = 'upce'; /*24740*/
			$k[$j++] = 2; /*24740*/
			$k[$j++] = 'gs1-128'; /*24740*/
			if ($ne($1.ccversion, "c")) {
				/*24740*/
				$k[$j++] = 4; /*24740*/
			} else {
				/*24740*/
				$k[$j++] = ~~(($1.linwidth - 52) / 17); /*24740*/
			} /*24740*/
			$k[$j++] = 'databaromni'; /*24747*/
			$k[$j++] = 4; /*24747*/
			$k[$j++] = 'databarstacked'; /*24747*/
			$k[$j++] = 2; /*24747*/
			$k[$j++] = 'databarstackedomni'; /*24747*/
			$k[$j++] = 2; /*24747*/
			$k[$j++] = 'databartruncated'; /*24747*/
			$k[$j++] = 4; /*24747*/
			$k[$j++] = 'databarlimited'; /*24747*/
			$k[$j++] = 3; /*24747*/
			$k[$j++] = 'databarexpanded'; /*24747*/
			$k[$j++] = 4; /*24747*/
			$k[$j++] = 'databarexpandedstacked'; /*24747*/
			$k[$j++] = 4; /*24747*/
			$1.cccolumns = $get($d(), $1.lintype); /*24748*/
		} /*24748*/
		$1.expand = function() {
			$1.in = $k[--$j]; /*24753*/
			$1.out = $s($1.in.length); /*24754*/
			$1.j = 0; /*24755*/
			$k[$j++] = $1.in; /*24769*/
			for (;;) {
				/*24769*/
				$search($k[--$j], "^"); /*24758*/
				if ($k[--$j]) {
					/*24767*/
					var _J = $k[--$j]; /*24759*/
					$puti($1.out, $1.j, _J); /*24759*/
					$1.j = (_J.length + $1.j) + 1; /*24760*/
					$j--; /*24761*/
					var _N = $k[--$j]; /*24762*/
					$put($1.out, $1.j - 1, ~~$z($geti(_N, 0, 3))); /*24762*/
					$k[$j++] = $geti(_N, 3, _N.length - 3); /*24763*/
				} else {
					/*24767*/
					var _S = $k[--$j]; /*24765*/
					$puti($1.out, $1.j, _S); /*24765*/
					$1.j = _S.length + $1.j; /*24766*/
					$k[$j++] = $geti($1.out, 0, $1.j); /*24767*/
					break; /*24767*/
				} /*24767*/
			} /*24767*/
		}; /*24770*/
		$1.ais = $a([]); /*24773*/
		$1.vals = $a([]); /*24774*/
		var _b = $1.barcode; /*24775*/
		$k[$j++] = $geti(_b, 1, _b.length - 1); /*24788*/
		for (;;) {
			/*24788*/
			var _d = $k[--$j]; /*24777*/
			$k[$j++] = _d; /*24777*/
			if ($eq(_d, "")) { //no-else/*24777*/
				break; /*24777*/
			} /*24777*/
			$search($k[--$j], ")"); /*24778*/
			$j--; /*24778*/
			var _f = $k[--$j]; /*24779*/
			var _g = $k[--$j]; /*24779*/
			var _h = $k[--$j]; /*24780*/
			$k[$j++] = _f; /*24780*/
			$search(_h, "("); /*24780*/
			if ($k[--$j]) {
				/*24783*/
				var _j = $k[--$j]; /*24781*/
				var _k = $k[--$j]; /*24781*/
				var _l = $k[--$j]; /*24781*/
				var _m = $k[--$j]; /*24781*/
				$k[$j++] = _l; /*24781*/
				$k[$j++] = _m; /*24781*/
				$k[$j++] = _j; /*24781*/
			} else {
				/*24783*/
				var _n = $k[--$j]; /*24783*/
				var _o = $k[--$j]; /*24783*/
				$k[$j++] = ""; /*24783*/
				$k[$j++] = _o; /*24783*/
				$k[$j++] = _n; /*24783*/
			} /*24783*/
			$k[$j++] = Infinity; /*24785*/
			$aload($1.ais); /*24785*/
			var _r = $k[$j - 1 - ($counttomark() + 2)]; /*24785*/
			$k[$j++] = _r; /*24785*/
			$1.ais = $a(); /*24785*/
			$k[$j++] = Infinity; /*24786*/
			$aload($1.vals); /*24786*/
			var _v = $k[$j - 1 - ($counttomark() + 1)]; /*24786*/
			$k[$j++] = _v; /*24786*/
			$1.expand(); /*24786*/
			$1.vals = $a(); /*24786*/
			$j -= 2; /*24787*/
		} /*24787*/
		$j--; /*24789*/
		$1.isupper = function() {
			var _x = $k[--$j]; /*24792*/
			$k[$j++] = (_x >= 65) && (_x <= 90); /*24792*/
		}; /*24792*/
		$1.isnum0 = function() {
			var _y = $k[--$j]; /*24793*/
			$k[$j++] = (_y >= 48) && (_y <= 57); /*24793*/
		}; /*24793*/
		$1.isnum1 = function() {
			var _z = $k[--$j]; /*24794*/
			$k[$j++] = (_z >= 49) && (_z <= 57); /*24794*/
		}; /*24794*/
		for (;;) {
			/*24840*/
			if ($1.ais.length >= 1) { //no-else/*24802*/
				if (($eq($get($1.ais, 0), "10") || $eq($get($1.ais, 0), "11")) || $eq($get($1.ais, 0), "17")) { //no-else/*24801*/
					$k[$j++] = -1; /*24800*/
					$k[$j++] = "10"; /*24800*/
					break; /*24800*/
				} /*24800*/
			} /*24800*/
			if ($1.ais.length >= 1) { //no-else/*24835*/
				if ($eq($get($1.ais, 0), "90")) { //no-else/*24834*/
					$1.v = $get($1.vals, 0); /*24807*/
					if ($1.v.length >= 1) { //no-else/*24812*/
						$k[$j++] = $get($1.v, 0); /*24809*/
						$1.isupper(); /*24809*/
						if ($k[--$j]) { //no-else/*24811*/
							$k[$j++] = 0; /*24810*/
							$k[$j++] = "11"; /*24810*/
							break; /*24810*/
						} /*24810*/
					} /*24810*/
					if ($1.v.length >= 2) { //no-else/*24818*/
						$k[$j++] = $get($1.v, 0); /*24814*/
						$1.isnum1(); /*24814*/
						$k[$j++] = $get($1.v, 1); /*24815*/
						$1.isupper(); /*24815*/
						var _1L = $k[--$j]; /*24815*/
						if (($k[--$j] && _1L)) { //no-else/*24817*/
							$k[$j++] = 1; /*24816*/
							$k[$j++] = "11"; /*24816*/
							break; /*24816*/
						} /*24816*/
					} /*24816*/
					if ($1.v.length >= 3) { //no-else/*24825*/
						$k[$j++] = $get($1.v, 0); /*24820*/
						$1.isnum1(); /*24820*/
						$k[$j++] = $get($1.v, 1); /*24821*/
						$1.isnum0(); /*24821*/
						var _1S = $k[--$j]; /*24821*/
						var _1T = $k[--$j]; /*24821*/
						$k[$j++] = $an(_1T, _1S); /*24822*/
						$k[$j++] = $get($1.v, 2); /*24822*/
						$1.isupper(); /*24822*/
						var _1W = $k[--$j]; /*24822*/
						if (($k[--$j] && _1W)) { //no-else/*24824*/
							$k[$j++] = 2; /*24823*/
							$k[$j++] = "11"; /*24823*/
							break; /*24823*/
						} /*24823*/
					} /*24823*/
					if ($1.v.length >= 4) { //no-else/*24833*/
						$k[$j++] = $get($1.v, 0); /*24827*/
						$1.isnum1(); /*24827*/
						$k[$j++] = $get($1.v, 1); /*24828*/
						$1.isnum0(); /*24828*/
						var _1d = $k[--$j]; /*24828*/
						var _1e = $k[--$j]; /*24828*/
						$k[$j++] = $an(_1e, _1d); /*24829*/
						$k[$j++] = $get($1.v, 2); /*24829*/
						$1.isnum0(); /*24829*/
						var _1h = $k[--$j]; /*24829*/
						var _1i = $k[--$j]; /*24829*/
						$k[$j++] = $an(_1i, _1h); /*24830*/
						$k[$j++] = $get($1.v, 3); /*24830*/
						$1.isupper(); /*24830*/
						var _1l = $k[--$j]; /*24830*/
						if (($k[--$j] && _1l)) { //no-else/*24832*/
							$k[$j++] = 3; /*24831*/
							$k[$j++] = "11"; /*24831*/
							break; /*24831*/
						} /*24831*/
					} /*24831*/
				} /*24831*/
			} /*24831*/
			$k[$j++] = -1; /*24838*/
			$k[$j++] = "0"; /*24838*/
			break; /*24838*/
		} /*24838*/
		$1.method = $k[--$j]; /*24841*/
		$1.npre = $k[--$j]; /*24842*/
		$1.fnc1 = -1; /*24844*/
		$1.lnumeric = -2; /*24844*/
		$1.lalphanumeric = -3; /*24844*/
		$1.liso646 = -4; /*24844*/
		$1.tobin = function() {
			var _1q = $s($k[--$j]); /*24847*/
			$k[$j++] = _1q; /*24847*/
			for (var _1s = 0, _1r = _1q.length - 1; _1s <= _1r; _1s += 1) {
				/*24847*/
				var _1t = $k[--$j]; /*24847*/
				$put(_1t, _1s, 48); /*24847*/
				$k[$j++] = _1t; /*24847*/
			} /*24847*/
			var _1u = $k[--$j]; /*24848*/
			var _1x = $cvrs($s(_1u.length), $k[--$j], 2); /*24848*/
			$puti(_1u, _1u.length - _1x.length, _1x); /*24848*/
			$k[$j++] = _1u; /*24848*/
		}; /*24849*/
		$k[$j++] = Infinity; /*24854*/
		for (var _1y = 65; _1y <= 90; _1y += 1) {
			/*24852*/
			$k[$j++] = _1y; /*24852*/
			$k[$j++] = _1y - 65; /*24852*/
			$k[$j++] = 5; /*24852*/
			$1.tobin(); /*24852*/
		} /*24852*/
		for (var _1z = 48; _1z <= 57; _1z += 1) {
			/*24853*/
			$k[$j++] = _1z; /*24853*/
			$k[$j++] = _1z + 4; /*24853*/
			$k[$j++] = 6; /*24853*/
			$1.tobin(); /*24853*/
		} /*24853*/
		$k[$j++] = $1.fnc1; /*24854*/
		$k[$j++] = "11111"; /*24854*/
		$1.alpha = $d(); /*24855*/
		$k[$j++] = Infinity; /*24867*/
		for (var _22 = 0; _22 <= 119; _22 += 1) {
			/*24866*/
			var _24 = $strcpy($s(2), "00"); /*24859*/
			var _26 = $cvrs($s(2), _22, 11); /*24859*/
			$puti(_24, 2 - _26.length, _26); /*24860*/
			$k[$j++] = _22; /*24861*/
			$k[$j++] = _24; /*24861*/
			if ($get(_24, 0) == 65) { //no-else/*24861*/
				var _28 = $k[--$j]; /*24861*/
				$put(_28, 0, 94); /*24861*/
				$k[$j++] = _28; /*24861*/
			} /*24861*/
			var _29 = $k[--$j]; /*24862*/
			$k[$j++] = _29; /*24862*/
			if ($get(_29, 1) == 65) { //no-else/*24862*/
				var _2B = $k[--$j]; /*24862*/
				$put(_2B, 1, 94); /*24862*/
				$k[$j++] = _2B; /*24862*/
			} /*24862*/
			var _2C = $k[--$j]; /*24863*/
			var _2F = $strcpy($s(7), "0000000"); /*24864*/
			var _2H = $cvrs($s(7), $k[--$j] + 8, 2); /*24864*/
			$puti(_2F, 7 - _2H.length, _2H); /*24865*/
			$k[$j++] = _2C; /*24865*/
			$k[$j++] = _2F; /*24865*/
		} /*24865*/
		$k[$j++] = $1.lalphanumeric; /*24867*/
		$k[$j++] = "0000"; /*24867*/
		$1.numeric = $d(); /*24868*/
		$k[$j++] = Infinity; /*24877*/
		for (var _2K = 48; _2K <= 57; _2K += 1) {
			/*24871*/
			$k[$j++] = _2K; /*24871*/
			$k[$j++] = _2K - 43; /*24871*/
			$k[$j++] = 5; /*24871*/
			$1.tobin(); /*24871*/
		} /*24871*/
		$k[$j++] = $1.fnc1; /*24873*/
		$k[$j++] = "01111"; /*24873*/
		for (var _2M = 65; _2M <= 90; _2M += 1) {
			/*24873*/
			$k[$j++] = _2M; /*24873*/
			$k[$j++] = _2M - 33; /*24873*/
			$k[$j++] = 6; /*24873*/
			$1.tobin(); /*24873*/
		} /*24873*/
		$k[$j++] = 42; /*24875*/
		$k[$j++] = "111010"; /*24875*/
		for (var _2N = 44; _2N <= 47; _2N += 1) {
			/*24875*/
			$k[$j++] = _2N; /*24875*/
			$k[$j++] = _2N + 15; /*24875*/
			$k[$j++] = 6; /*24875*/
			$1.tobin(); /*24875*/
		} /*24875*/
		$k[$j++] = $1.lnumeric; /*24877*/
		$k[$j++] = "000"; /*24877*/
		$k[$j++] = $1.liso646; /*24877*/
		$k[$j++] = "00100"; /*24877*/
		$1.alphanumeric = $d(); /*24878*/
		$k[$j++] = Infinity; /*24892*/
		for (var _2R = 48; _2R <= 57; _2R += 1) {
			/*24881*/
			$k[$j++] = _2R; /*24881*/
			$k[$j++] = _2R - 43; /*24881*/
			$k[$j++] = 5; /*24881*/
			$1.tobin(); /*24881*/
		} /*24881*/
		$k[$j++] = $1.fnc1; /*24883*/
		$k[$j++] = "01111"; /*24883*/
		for (var _2T = 65; _2T <= 90; _2T += 1) {
			/*24883*/
			$k[$j++] = _2T; /*24883*/
			$k[$j++] = _2T - 1; /*24883*/
			$k[$j++] = 7; /*24883*/
			$1.tobin(); /*24883*/
		} /*24883*/
		for (var _2U = 97; _2U <= 122; _2U += 1) {
			/*24884*/
			$k[$j++] = _2U; /*24884*/
			$k[$j++] = _2U - 7; /*24884*/
			$k[$j++] = 7; /*24884*/
			$1.tobin(); /*24884*/
		} /*24884*/
		$k[$j++] = 33; /*24887*/
		$k[$j++] = "11101000"; /*24887*/
		$k[$j++] = 34; /*24887*/
		$k[$j++] = "11101001"; /*24887*/
		for (var _2V = 37; _2V <= 47; _2V += 1) {
			/*24887*/
			$k[$j++] = _2V; /*24887*/
			$k[$j++] = _2V + 197; /*24887*/
			$k[$j++] = 8; /*24887*/
			$1.tobin(); /*24887*/
		} /*24887*/
		for (var _2W = 58; _2W <= 63; _2W += 1) {
			/*24888*/
			$k[$j++] = _2W; /*24888*/
			$k[$j++] = _2W + 187; /*24888*/
			$k[$j++] = 8; /*24888*/
			$1.tobin(); /*24888*/
		} /*24888*/
		$k[$j++] = 95; /*24892*/
		$k[$j++] = "11111011"; /*24892*/
		$k[$j++] = 32; /*24892*/
		$k[$j++] = "11111100"; /*24892*/
		$k[$j++] = $1.lnumeric; /*24892*/
		$k[$j++] = "000"; /*24892*/
		$k[$j++] = $1.lalphanumeric; /*24892*/
		$k[$j++] = "00100"; /*24892*/
		$1.iso646 = $d(); /*24893*/
		if ($eq($1.method, "10")) { //no-else/*24926*/
			if ($eq($get($1.ais, 0), "11") || $eq($get($1.ais, 0), "17")) {
				/*24910*/
				var _2g = $get($1.vals, 0); /*24897*/
				var _2l = $strcpy($s(16), "0000000000000000"); /*24901*/
				var _2n = $cvrs($s(16), ((~~$z($geti(_2g, 0, 2))) * 384) + ((((~~$z($geti(_2g, 2, 2))) - 1) * 32) + (~~$z($geti(_2g, 4, 2)))), 2); /*24901*/
				$puti(_2l, 16 - _2n.length, _2n); /*24902*/
				$k[$j++] = _2l; /*24905*/
				$k[$j++] = Infinity; /*24905*/
				var _2o = $k[--$j]; /*24904*/
				var _2p = $k[--$j]; /*24904*/
				$k[$j++] = _2o; /*24904*/
				$k[$j++] = 1; /*24904*/
				$k[$j++] = 0; /*24904*/
				$forall(_2p, function() {
					/*24904*/
					var _2q = $k[--$j]; /*24904*/
					$k[$j++] = _2q - 48; /*24904*/
				}); /*24904*/
				var _2t = $eq($get($1.ais, 0), "11") ? 0 : 1; /*24905*/
				$k[$j++] = _2t; /*24905*/
				$1.cdf = $a(); /*24906*/
				$1.ais = $geti($1.ais, 1, $1.ais.length - 1); /*24907*/
				$1.vals = $geti($1.vals, 1, $1.vals.length - 1); /*24908*/
			} else {
				/*24910*/
				$1.cdf = $a([1, 0, 1, 1]); /*24910*/
			} /*24910*/
			if ($1.ais.length != 0) {
				/*24923*/
				if ($eq($get($1.ais, 0), "10")) {
					/*24919*/
					$k[$j++] = Infinity; /*24914*/
					$forall($get($1.vals, 0)); /*24914*/
					$1.gpf = $a(); /*24914*/
					if ($1.ais.length > 1) { //no-else/*24915*/
						$k[$j++] = Infinity; /*24915*/
						$aload($1.gpf); /*24915*/
						$k[$j++] = $1.fnc1; /*24915*/
						$1.gpf = $a(); /*24915*/
					} /*24915*/
					$1.ais = $geti($1.ais, 1, $1.ais.length - 1); /*24916*/
					$1.vals = $geti($1.vals, 1, $1.vals.length - 1); /*24917*/
				} else {
					/*24919*/
					$1.gpf = $a([$1.fnc1]); /*24919*/
				} /*24919*/
			} else {
				/*24923*/
				$k[$j++] = Infinity; /*24922*/
				$aload($1.cdf); /*24922*/
				$k[$j++] = 0; /*24922*/
				$k[$j++] = 0; /*24922*/
				$k[$j++] = 0; /*24922*/
				$k[$j++] = 0; /*24922*/
				$k[$j++] = 0; /*24922*/
				$k[$j++] = 1; /*24922*/
				$k[$j++] = 1; /*24922*/
				$k[$j++] = 1; /*24922*/
				$k[$j++] = 1; /*24922*/
				$1.cdf = $a(); /*24922*/
				$1.gpf = $a([]); /*24923*/
			} /*24923*/
			$1.mode = "numeric"; /*24925*/
		} /*24925*/
		if ($eq($1.method, "11")) { //no-else/*25018*/
			$1.cdf = $a([1, 1]); /*24929*/
			$1.ai90 = $get($1.vals, 0); /*24930*/
			if (($1.npre + 1) != $1.ai90.length) {
				/*24934*/
				$k[$j++] = $geti($1.ai90, $1.npre + 1, ($1.ai90.length - $1.npre) - 1); /*24932*/
			} else {
				/*24934*/
				$k[$j++] = ""; /*24934*/
			} /*24934*/
			$1.ai90rem = $k[--$j]; /*24936*/
			$k[$j++] = 'nalpha'; /*24937*/
			$k[$j++] = 0; /*24937*/
			$forall($1.ai90rem, function() {
				/*24937*/
				var _3a = $k[--$j]; /*24937*/
				if ((_3a >= 65) && (_3a <= 90)) { //no-else/*24937*/
					var _3b = $k[--$j]; /*24937*/
					$k[$j++] = _3b + 1; /*24937*/
				} /*24937*/
			}); /*24937*/
			var _3c = $k[--$j]; /*24937*/
			$1[$k[--$j]] = _3c; /*24937*/
			$k[$j++] = 'nnums'; /*24938*/
			$k[$j++] = 0; /*24938*/
			$forall($1.ai90rem, function() {
				/*24938*/
				var _3f = $k[--$j]; /*24938*/
				if ((_3f >= 48) && (_3f <= 57)) { //no-else/*24938*/
					var _3g = $k[--$j]; /*24938*/
					$k[$j++] = _3g + 1; /*24938*/
				} /*24938*/
			}); /*24938*/
			var _3h = $k[--$j]; /*24938*/
			$1[$k[--$j]] = _3h; /*24938*/
			$k[$j++] = 'mode'; /*24939*/
			if ($gt($1.nalpha, $1.nnums)) {
				/*24939*/
				$k[$j++] = "alpha"; /*24939*/
			} else {
				/*24939*/
				if ($1.nalpha == 0) {
					/*24939*/
					$k[$j++] = "numeric"; /*24939*/
				} else {
					/*24939*/
					$k[$j++] = "alphanumeric"; /*24939*/
				} /*24939*/
			} /*24939*/
			var _3m = $k[--$j]; /*24939*/
			$1[$k[--$j]] = _3m; /*24939*/
			if (($1.nalpha + $1.nnums) != $1.ai90rem.length) { //no-else/*24940*/
				$1.mode = "alphanumeric"; /*24940*/
			} /*24940*/
			$k[$j++] = Infinity; /*24945*/
			$aload($1.cdf); /*24942*/
			if ($eq($1.mode, "alphanumeric")) { //no-else/*24943*/
				$k[$j++] = 0; /*24943*/
			} /*24943*/
			if ($eq($1.mode, "numeric")) { //no-else/*24944*/
				$k[$j++] = 1; /*24944*/
				$k[$j++] = 0; /*24944*/
			} /*24944*/
			if ($eq($1.mode, "alpha")) { //no-else/*24945*/
				$k[$j++] = 1; /*24945*/
				$k[$j++] = 1; /*24945*/
			} /*24945*/
			$1.cdf = $a(); /*24945*/
			$k[$j++] = 'ais1'; /*24947*/
			if ($1.ais.length > 1) {
				/*24947*/
				$k[$j++] = $get($1.ais, 1); /*24947*/
			} else {
				/*24947*/
				$k[$j++] = -1; /*24947*/
			} /*24947*/
			var _3z = $k[--$j]; /*24947*/
			$1[$k[--$j]] = _3z; /*24947*/
			$k[$j++] = 'vals1'; /*24948*/
			if ($1.vals.length > 1) {
				/*24948*/
				$k[$j++] = $get($1.vals, 1); /*24948*/
			} else {
				/*24948*/
				$k[$j++] = -1; /*24948*/
			} /*24948*/
			var _44 = $k[--$j]; /*24948*/
			$1[$k[--$j]] = _44; /*24948*/
			if ($eq($1.ais1, "21") || $eq($1.ais1, "8004")) {
				/*24952*/
				$k[$j++] = Infinity; /*24950*/
				$aload($1.cdf); /*24950*/
				if ($eq($1.ais1, "21")) {
					/*24950*/
					$k[$j++] = 1; /*24950*/
					$k[$j++] = 0; /*24950*/
				} else {
					/*24950*/
					$k[$j++] = 1; /*24950*/
					$k[$j++] = 1; /*24950*/
				} /*24950*/
				$1.cdf = $a(); /*24950*/
			} else {
				/*24952*/
				$k[$j++] = Infinity; /*24952*/
				$aload($1.cdf); /*24952*/
				$k[$j++] = 0; /*24952*/
				$1.cdf = $a(); /*24952*/
			} /*24952*/
			$k[$j++] = 'nval'; /*24954*/
			if ($1.npre != 0) {
				/*24954*/
				$k[$j++] = ~~$z($geti($1.ai90, 0, $1.npre)); /*24954*/
			} else {
				/*24954*/
				$k[$j++] = 0; /*24954*/
			} /*24954*/
			var _4H = $k[--$j]; /*24954*/
			$1[$k[--$j]] = _4H; /*24954*/
			$search("BDHIJKLNPQRSTVXZ", $geti($1.ai90, $1.npre, 1)); /*24955*/
			if ($k[--$j]) {
				/*24959*/
				var _4N = $k[--$j]; /*24956*/
				var _4O = $k[--$j]; /*24956*/
				var _4P = $k[--$j]; /*24956*/
				$1.aval = _4N.length; /*24957*/
			} else {
				/*24959*/
				$j--; /*24959*/
				$1.aval = -1; /*24959*/
			} /*24959*/
			if (($1.nval < 31) && ($1.aval != -1)) {
				/*24985*/
				var _4T = $strcpy($s(5), "00000"); /*24962*/
				var _4W = $cvrs($s(5), $1.nval, 2); /*24962*/
				$puti(_4T, 5 - _4W.length, _4W); /*24963*/
				$k[$j++] = _4T; /*24964*/
				$k[$j++] = Infinity; /*24964*/
				var _4X = $k[--$j]; /*24964*/
				var _4Y = $k[--$j]; /*24964*/
				$k[$j++] = _4X; /*24964*/
				$forall(_4Y, function() {
					/*24964*/
					var _4Z = $k[--$j]; /*24964*/
					$k[$j++] = _4Z - 48; /*24964*/
				}); /*24964*/
				$1.nbits = $a(); /*24964*/
				var _4c = $strcpy($s(4), "0000"); /*24965*/
				var _4f = $cvrs($s(4), $1.aval, 2); /*24965*/
				$puti(_4c, 4 - _4f.length, _4f); /*24966*/
				$k[$j++] = _4c; /*24967*/
				$k[$j++] = Infinity; /*24967*/
				var _4g = $k[--$j]; /*24967*/
				var _4h = $k[--$j]; /*24967*/
				$k[$j++] = _4g; /*24967*/
				$forall(_4h, function() {
					/*24967*/
					var _4i = $k[--$j]; /*24967*/
					$k[$j++] = _4i - 48; /*24967*/
				}); /*24967*/
				$1.abits = $a(); /*24967*/
				$k[$j++] = Infinity; /*24971*/
				$aload($1.cdf); /*24969*/
				$aload($1.nbits); /*24970*/
				$aload($1.abits); /*24971*/
				$1.cdf = $a(); /*24971*/
			} else {
				/*24985*/
				var _4p = $strcpy($s(10), "0000000000"); /*24974*/
				var _4s = $cvrs($s(10), $1.nval, 2); /*24974*/
				$puti(_4p, 10 - _4s.length, _4s); /*24975*/
				$k[$j++] = _4p; /*24976*/
				$k[$j++] = Infinity; /*24976*/
				var _4t = $k[--$j]; /*24976*/
				var _4u = $k[--$j]; /*24976*/
				$k[$j++] = _4t; /*24976*/
				$forall(_4u, function() {
					/*24976*/
					var _4v = $k[--$j]; /*24976*/
					$k[$j++] = _4v - 48; /*24976*/
				}); /*24976*/
				$1.nbits = $a(); /*24976*/
				var _4y = $strcpy($s(5), "00000"); /*24977*/
				var _53 = $cvrs($s(5), $get($1.ai90, $1.npre) - 65, 2); /*24977*/
				$puti(_4y, 5 - _53.length, _53); /*24978*/
				$k[$j++] = _4y; /*24979*/
				$k[$j++] = Infinity; /*24979*/
				var _54 = $k[--$j]; /*24979*/
				var _55 = $k[--$j]; /*24979*/
				$k[$j++] = _54; /*24979*/
				$forall(_55, function() {
					/*24979*/
					var _56 = $k[--$j]; /*24979*/
					$k[$j++] = _56 - 48; /*24979*/
				}); /*24979*/
				$1.abits = $a(); /*24979*/
				$k[$j++] = Infinity; /*24984*/
				$aload($1.cdf); /*24981*/
				$k[$j++] = 1; /*24983*/
				$k[$j++] = 1; /*24983*/
				$k[$j++] = 1; /*24983*/
				$k[$j++] = 1; /*24983*/
				$k[$j++] = 1; /*24983*/
				$aload($1.nbits); /*24983*/
				$aload($1.abits); /*24984*/
				$1.cdf = $a(); /*24984*/
			} /*24985*/
			if ($ne($1.mode, "alpha")) {
				/*25003*/
				$k[$j++] = Infinity; /*24988*/
				$forall($1.ai90rem); /*24988*/
				if ($1.ais.length > 1) { //no-else/*24988*/
					$k[$j++] = $1.fnc1; /*24988*/
				} /*24988*/
				$1.gpf = $a(); /*24988*/
			} else {
				/*25003*/
				$k[$j++] = Infinity; /*24990*/
				$forall($1.ai90rem); /*24990*/
				if ($1.ais.length > 1) { //no-else/*24990*/
					$k[$j++] = $1.fnc1; /*24990*/
				} /*24990*/
				$1.in = $a(); /*24990*/
				$1.out = $a($1.in.length * 6); /*24991*/
				$1.j = 0; /*24992*/
				for (var _5P = 0, _5O = $1.in.length - 1; _5P <= _5O; _5P += 1) {
					/*24997*/
					var _5T = $get($1.alpha, $get($1.in, _5P)); /*24994*/
					$k[$j++] = _5T; /*24995*/
					$k[$j++] = _5T; /*24995*/
					$k[$j++] = Infinity; /*24995*/
					var _5U = $k[--$j]; /*24995*/
					var _5V = $k[--$j]; /*24995*/
					$k[$j++] = _5U; /*24995*/
					$forall(_5V, function() {
						/*24995*/
						var _5W = $k[--$j]; /*24995*/
						$k[$j++] = _5W - 48; /*24995*/
					}); /*24995*/
					$puti($1.out, $1.j, $a()); /*24995*/
					$1.j = $k[--$j].length + $1.j; /*24996*/
				} /*24996*/
				$k[$j++] = Infinity; /*25000*/
				$aload($1.cdf); /*24999*/
				$aload($geti($1.out, 0, $1.j)); /*25000*/
				$1.cdf = $a(); /*25000*/
				$1.gpf = $a([]); /*25002*/
				if ($1.ais.length > 1) { //no-else/*25003*/
					$1.mode = "numeric"; /*25003*/
				} /*25003*/
			} /*25003*/
			$1.ais = $geti($1.ais, 1, $1.ais.length - 1); /*25005*/
			$1.vals = $geti($1.vals, 1, $1.vals.length - 1); /*25006*/
			if ($1.ais.length != 0) { //no-else/*25017*/
				if ($eq($1.ais1, "21") || $eq($1.ais1, "8004")) { //no-else/*25016*/
					$k[$j++] = Infinity; /*25011*/
					$aload($1.gpf); /*25010*/
					$forall($1.vals1); /*25011*/
					$1.gpf = $a(); /*25011*/
					$1.ais = $geti($1.ais, 1, $1.ais.length - 1); /*25013*/
					$1.vals = $geti($1.vals, 1, $1.vals.length - 1); /*25014*/
					if ($1.ais.length != 0) { //no-else/*25015*/
						$k[$j++] = Infinity; /*25015*/
						$aload($1.gpf); /*25015*/
						$k[$j++] = $1.fnc1; /*25015*/
						$1.gpf = $a(); /*25015*/
					} /*25015*/
				} /*25015*/
			} /*25015*/
		} /*25015*/
		if ($eq($1.method, "0")) { //no-else/*25024*/
			$1.cdf = $a([0]); /*25021*/
			$1.gpf = $a([]); /*25022*/
			$1.mode = "numeric"; /*25023*/
		} /*25023*/
		$1.aifixed = new Map; /*25029*/
		$k[$j++] = Infinity; /*25031*/
		for (var _68 = 0; _68 <= 4; _68 += 1) {
			/*25031*/
			$k[$j++] = _68; /*25031*/
		} /*25031*/
		var _69 = $a(); /*25031*/
		for (var _6A = 0, _6B = _69.length; _6A < _6B; _6A++) {
			/*25034*/
			var _6E = $strcpy($s(2), "00"); /*25033*/
			$put(_6E, 1, $get(_69, _6A) + 48); /*25033*/
			$put($1.aifixed, _6E, _6E); /*25033*/
		} /*25033*/
		$k[$j++] = Infinity; /*25039*/
		for (var _6G = 11; _6G <= 20; _6G += 1) {
			/*25036*/
			$k[$j++] = _6G; /*25036*/
		} /*25036*/
		$k[$j++] = 23; /*25038*/
		for (var _6H = 31; _6H <= 36; _6H += 1) {
			/*25038*/
			$k[$j++] = _6H; /*25038*/
		} /*25038*/
		$k[$j++] = 41; /*25039*/
		var _6I = $a(); /*25039*/
		for (var _6J = 0, _6K = _6I.length; _6J < _6K; _6J++) {
			/*25042*/
			var _6N = $cvrs($s(2), $get(_6I, _6J), 10); /*25041*/
			$put($1.aifixed, _6N, _6N); /*25041*/
		} /*25041*/
		for (var _6R = 0, _6Q = $1.ais.length - 1; _6R <= _6Q; _6R += 1) {
			/*25060*/
			$1.i = _6R; /*25046*/
			$1.ai = $get($1.ais, $1.i); /*25047*/
			$1.val = $get($1.vals, $1.i); /*25048*/
			var _6b = $a(($1.gpf.length + $1.ai.length) + $1.val.length); /*25049*/
			$puti(_6b, 0, $1.gpf); /*25050*/
			$k[$j++] = _6b; /*25051*/
			$k[$j++] = _6b; /*25051*/
			$k[$j++] = $1.gpf.length; /*25051*/
			$k[$j++] = $1.ai; /*25051*/
			$k[$j++] = Infinity; /*25051*/
			var _6f = $k[--$j]; /*25051*/
			var _6g = $k[--$j]; /*25051*/
			$k[$j++] = _6f; /*25051*/
			$forall(_6g); /*25051*/
			var _6h = $a(); /*25051*/
			var _6i = $k[--$j]; /*25051*/
			$puti($k[--$j], _6i, _6h); /*25051*/
			var _6k = $k[--$j]; /*25052*/
			$k[$j++] = _6k; /*25052*/
			$k[$j++] = _6k; /*25052*/
			$k[$j++] = $1.gpf.length + $1.ai.length; /*25052*/
			$k[$j++] = $1.val; /*25052*/
			$k[$j++] = Infinity; /*25052*/
			var _6o = $k[--$j]; /*25052*/
			var _6p = $k[--$j]; /*25052*/
			$k[$j++] = _6o; /*25052*/
			$forall(_6p); /*25052*/
			var _6q = $a(); /*25052*/
			var _6r = $k[--$j]; /*25052*/
			$puti($k[--$j], _6r, _6q); /*25052*/
			$1.gpf = $k[--$j]; /*25053*/
			var _6z = $get($1.aifixed, $geti($1.ai, 0, 2)) !== undefined; /*25054*/
			if (($1.i != ($1.ais.length - 1)) && (!_6z)) { //no-else/*25059*/
				var _71 = $a($1.gpf.length + 1); /*25055*/
				$puti(_71, 0, $1.gpf); /*25056*/
				$put(_71, $1.gpf.length, $1.fnc1); /*25057*/
				$1.gpf = _71; /*25058*/
			} /*25058*/
		} /*25058*/
		$1.rembits = function() {
			$1.used = $k[--$j]; /*25064*/
			if ($ne($1.ccversion, "c")) {
				/*25096*/
				var _7F = new Map([
					["a", $a([$a([167, 138, 118, 108, 88, 78, 59]), $a([167, 138, 118, 98, 78]), $a([197, 167, 138, 108, 78])])],
					["b", $a([$a([336, 296, 256, 208, 160, 104, 56]), $a([768, 648, 536, 416, 304, 208, 152, 112, 72, 32]), $a([1184, 1016, 840, 672, 496, 352, 264, 208, 152, 96, 56])])]
				]); /*25075*/
				$1.bitcaps = $get($get(_7F, $1.ccversion), $1.cccolumns - 2); /*25077*/
				$k[$j++] = -1; /*25078*/
				$forall($1.bitcaps, function() {
					/*25078*/
					var _7L = $k[--$j]; /*25078*/
					$k[$j++] = _7L; /*25078*/
					if ($ge(_7L, $1.used)) { //no-else/*25078*/
						var _7N = $k[--$j]; /*25078*/
						var _7O = $k[--$j]; /*25078*/
						$k[$j++] = _7N; /*25078*/
						$k[$j++] = _7O; /*25078*/
					} /*25078*/
					$j--; /*25078*/
				}); /*25078*/
				var _7P = $k[--$j]; /*25079*/
				$k[$j++] = _7P; /*25079*/
				if (_7P != -1) { //no-else/*25079*/
					var _7R = $k[--$j]; /*25079*/
					$k[$j++] = _7R - $1.used; /*25079*/
				} /*25079*/
			} else {
				/*25096*/
				var _7S = new Map([
					["c", -1]
				]); /*25081*/
				var _7U = $get(_7S, $1.ccversion); /*25081*/
				var _7W = ~~Math.ceil($1.used / 8); /*25082*/
				$1.m = ((~~(_7W / 6)) * 5) + (_7W % 6); /*25082*/
				if ($1.m <= 40) { //no-else/*25083*/
					$k[$j++] = 8; /*25083*/
				} /*25083*/
				if (($1.m >= 41) && ($1.m <= 160)) { //no-else/*25084*/
					$k[$j++] = 16; /*25084*/
				} /*25084*/
				if (($1.m >= 161) && ($1.m <= 320)) { //no-else/*25085*/
					$k[$j++] = 32; /*25085*/
				} /*25085*/
				if (($1.m >= 321) && ($1.m <= 833)) { //no-else/*25086*/
					$k[$j++] = 64; /*25086*/
				} /*25086*/
				if ($1.m >= 834) { //no-else/*25087*/
					$k[$j++] = 32; /*25087*/
				} /*25087*/
				$1.eccws = $k[--$j]; /*25088*/
				$1.m = ($1.m + $1.eccws) + 3; /*25089*/
				for (;;) {
					/*25093*/
					if (((~~Math.ceil($1.m / $1.cccolumns)) <= 30) || ($1.cccolumns >= 30)) { //no-else/*25091*/
						break; /*25091*/
					} /*25091*/
					$1.cccolumns = $1.cccolumns + 1; /*25092*/
				} /*25092*/
				$1.r = ~~Math.ceil($1.m / $1.cccolumns); /*25094*/
				var _7r = (($1.cccolumns * $1.r) - $1.eccws) - 3; /*25095*/
				$1.tgt = (((~~(_7r / 5)) * 6) + (_7r % 5)) * 8; /*25095*/
				if ($1.used <= 8304) {
					/*25096*/
					$k[$j++] = $1.tgt - $1.used; /*25096*/
				} else {
					/*25096*/
					$k[$j++] = -1; /*25096*/
				} /*25096*/
			} /*25096*/
			var _7v = $k[--$j]; /*25098*/
			$k[$j++] = _7v; /*25111*/
			if (_7v == -1) { //no-else/*25111*/
				$j--; /*25099*/
				if ($eq($1.ccversion, "a")) {
					/*25107*/
					$1.ccversion = "b"; /*25101*/
				} else {
					/*25107*/
					if ($eq($1.ccversion, "b") && $eq($1.lintype, "gs1-128")) {
						/*25107*/
						$1.ccversion = "c"; /*25104*/
						$1.cccolumns = ~~(($1.linwidth - 52) / 17); /*25105*/
					} else {
						/*25107*/
						$1.ccversion = -1; /*25107*/
					} /*25107*/
				} /*25107*/
				$k[$j++] = $1.used; /*25110*/
				$1.rembits(); /*25110*/
			} /*25110*/
		}; /*25112*/
		$1.encode = function() {
			var _81 = $k[--$j]; /*25115*/
			$k[$j++] = _81; /*25115*/
			if ($ne(_81, 'raw')) {
				/*25115*/
				var _82 = $k[--$j]; /*25115*/
				var _84 = $get(_82, $k[--$j]); /*25115*/
				$k[$j++] = _84; /*25115*/
			} else {
				/*25115*/
				$j--; /*25115*/
			} /*25115*/
			$k[$j++] = Infinity; /*25116*/
			var _85 = $k[--$j]; /*25116*/
			var _86 = $k[--$j]; /*25116*/
			$k[$j++] = _85; /*25116*/
			$forall(_86, function() {
				/*25116*/
				var _87 = $k[--$j]; /*25116*/
				$k[$j++] = _87 - 48; /*25116*/
			}); /*25116*/
			var _88 = $a(); /*25116*/
			$puti($1.gpfenc, $1.j, _88); /*25118*/
			$1.j = _88.length + $1.j; /*25119*/
		}; /*25120*/
		$k[$j++] = Infinity; /*25123*/
		for (var _8D = 0, _8E = $1.gpf.length; _8D < _8E; _8D++) {
			/*25123*/
			$k[$j++] = 0; /*25123*/
		} /*25123*/
		$k[$j++] = 0; /*25123*/
		$k[$j++] = -1; /*25123*/
		$1.numericruns = $a(); /*25123*/
		$k[$j++] = Infinity; /*25124*/
		for (var _8H = 0, _8I = $1.gpf.length; _8H < _8I; _8H++) {
			/*25124*/
			$k[$j++] = 0; /*25124*/
		} /*25124*/
		$k[$j++] = 0; /*25124*/
		$1.alphanumericruns = $a(); /*25124*/
		$k[$j++] = Infinity; /*25125*/
		for (var _8L = 0, _8M = $1.gpf.length; _8L < _8M; _8L++) {
			/*25125*/
			$k[$j++] = 0; /*25125*/
		} /*25125*/
		$k[$j++] = 9999; /*25125*/
		$1.nextiso646only = $a(); /*25125*/
		for (var _8P = $1.gpf.length - 1; _8P >= 0; _8P -= 1) {
			/*25147*/
			$1.i = _8P; /*25127*/
			var _8U = $strcpy($s(2), "00"); /*25129*/
			var _8X = $get($1.gpf, $1.i); /*25130*/
			$k[$j++] = $get($1.gpf, $1.i); /*25130*/
			$k[$j++] = _8U; /*25130*/
			$k[$j++] = _8U; /*25130*/
			$k[$j++] = 0; /*25130*/
			$k[$j++] = _8X; /*25130*/
			if (_8X == $1.fnc1) { //no-else/*25130*/
				$j--; /*25130*/
				$k[$j++] = 94; /*25130*/
			} /*25130*/
			var _8Z = $k[--$j]; /*25130*/
			var _8a = $k[--$j]; /*25130*/
			$put($k[--$j], _8a, _8Z); /*25130*/
			if ($1.i < ($1.gpf.length - 1)) { //no-else/*25131*/
				var _8e = $k[--$j]; /*25131*/
				var _8h = $get($1.gpf, $1.i + 1); /*25131*/
				$k[$j++] = _8e; /*25131*/
				$k[$j++] = _8e; /*25131*/
				$k[$j++] = 1; /*25131*/
				$k[$j++] = _8h; /*25131*/
				if (_8h == $1.fnc1) { //no-else/*25131*/
					$j--; /*25131*/
					$k[$j++] = 94; /*25131*/
				} /*25131*/
				var _8j = $k[--$j]; /*25131*/
				var _8k = $k[--$j]; /*25131*/
				$put($k[--$j], _8k, _8j); /*25131*/
			} /*25131*/
			var _8o = $get($1.numeric, $k[--$j]) !== undefined; /*25132*/
			if (_8o) {
				/*25135*/
				$put($1.numericruns, $1.i, $get($1.numericruns, $1.i + 2) + 2); /*25133*/
			} else {
				/*25135*/
				$put($1.numericruns, $1.i, 0); /*25135*/
			} /*25135*/
			var _8w = $k[--$j]; /*25137*/
			var _8y = $get($1.alphanumeric, _8w) !== undefined; /*25137*/
			$k[$j++] = _8w; /*25141*/
			if (_8y) {
				/*25140*/
				$put($1.alphanumericruns, $1.i, $get($1.alphanumericruns, $1.i + 1) + 1); /*25138*/
			} else {
				/*25140*/
				$put($1.alphanumericruns, $1.i, 0); /*25140*/
			} /*25140*/
			var _96 = $k[--$j]; /*25142*/
			var _98 = $get($1.iso646, _96) !== undefined; /*25142*/
			var _9A = $get($1.alphanumeric, _96) !== undefined; /*25142*/
			if (_98 && (!_9A)) {
				/*25145*/
				$put($1.nextiso646only, $1.i, 0); /*25143*/
			} else {
				/*25145*/
				$put($1.nextiso646only, $1.i, $get($1.nextiso646only, $1.i + 1) + 1); /*25145*/
			} /*25145*/
		} /*25145*/
		$1.gpfenc = $a(8304); /*25150*/
		$1.i = 0; /*25151*/
		$1.j = 0; /*25151*/
		for (;;) {
			/*25241*/
			if ($1.i == $1.gpf.length) { //no-else/*25153*/
				break; /*25153*/
			} /*25153*/
			for (;;) {
				/*25240*/
				if ($eq($1.mode, "numeric")) { //no-else/*25189*/
					if ($1.i <= ($1.gpf.length - 2)) {
						/*25186*/
						var _9O = $s(2); /*25158*/
						var _9R = $get($1.gpf, $1.i); /*25159*/
						$k[$j++] = _9O; /*25159*/
						$k[$j++] = _9O; /*25159*/
						$k[$j++] = 0; /*25159*/
						$k[$j++] = _9R; /*25159*/
						if (_9R == $1.fnc1) { //no-else/*25159*/
							$j--; /*25159*/
							$k[$j++] = 94; /*25159*/
						} /*25159*/
						var _9T = $k[--$j]; /*25159*/
						var _9U = $k[--$j]; /*25159*/
						$put($k[--$j], _9U, _9T); /*25159*/
						var _9W = $k[--$j]; /*25160*/
						var _9Z = $get($1.gpf, $1.i + 1); /*25160*/
						$k[$j++] = _9W; /*25160*/
						$k[$j++] = _9W; /*25160*/
						$k[$j++] = 1; /*25160*/
						$k[$j++] = _9Z; /*25160*/
						if (_9Z == $1.fnc1) { //no-else/*25160*/
							$j--; /*25160*/
							$k[$j++] = 94; /*25160*/
						} /*25160*/
						var _9b = $k[--$j]; /*25160*/
						var _9c = $k[--$j]; /*25160*/
						$put($k[--$j], _9c, _9b); /*25160*/
						var _9e = $k[--$j]; /*25161*/
						var _9g = $get($1.numeric, _9e) !== undefined; /*25161*/
						$k[$j++] = _9e; /*25165*/
						if (_9g) { //no-else/*25165*/
							$k[$j++] = $1.numeric; /*25162*/
							$1.encode(); /*25162*/
							$1.i = $1.i + 2; /*25163*/
							break; /*25164*/
						} /*25164*/
						$j--; /*25166*/
						$k[$j++] = $1.lalphanumeric; /*25167*/
						$k[$j++] = $1.numeric; /*25167*/
						$1.encode(); /*25167*/
						$1.mode = "alphanumeric"; /*25168*/
						break; /*25169*/
					} else {
						/*25186*/
						var _9n = $get($1.gpf, $1.i); /*25171*/
						if ((_9n < 48) || (_9n > 57)) { //no-else/*25175*/
							$k[$j++] = $1.lalphanumeric; /*25172*/
							$k[$j++] = $1.numeric; /*25172*/
							$1.encode(); /*25172*/
							$1.mode = "alphanumeric"; /*25173*/
							break; /*25174*/
						} /*25174*/
						$k[$j++] = 'rem'; /*25176*/
						$k[$j++] = $1.cdf.length + $1.j; /*25176*/
						$1.rembits(); /*25176*/
						var _9s = $k[--$j]; /*25176*/
						$1[$k[--$j]] = _9s; /*25176*/
						if (($1.rem >= 4) && ($1.rem <= 6)) {
							/*25186*/
							var _9z = $geti($strcpy($s(6), "000000"), 0, $1.rem); /*25178*/
							var _A4 = $cvrs($s(4), $get($1.gpf, $1.i) - 47, 2); /*25179*/
							$puti(_9z, 4 - _A4.length, _A4); /*25180*/
							$k[$j++] = _9z; /*25180*/
							$k[$j++] = 'raw'; /*25180*/
							$1.encode(); /*25180*/
							$1.i = $1.i + 1; /*25181*/
							break; /*25182*/
						} else {
							/*25186*/
							var _A6 = $s(2); /*25184*/
							$put(_A6, 0, $get($1.gpf, $1.i)); /*25184*/
							$put(_A6, 1, 94); /*25184*/
							$k[$j++] = _A6; /*25184*/
							$k[$j++] = $1.numeric; /*25184*/
							$1.encode(); /*25184*/
							$1.i = $1.i + 1; /*25185*/
							break; /*25186*/
						} /*25186*/
					} /*25186*/
				} /*25186*/
				if ($eq($1.mode, "alphanumeric")) { //no-else/*25216*/
					if ($get($1.gpf, $1.i) == $1.fnc1) { //no-else/*25197*/
						$k[$j++] = $1.fnc1; /*25193*/
						$k[$j++] = $1.alphanumeric; /*25193*/
						$1.encode(); /*25193*/
						$1.mode = "numeric"; /*25194*/
						$1.i = $1.i + 1; /*25195*/
						break; /*25196*/
					} /*25196*/
					var _AM = $get($1.gpf, $1.i); /*25198*/
					var _AO = $get($1.iso646, _AM) !== undefined; /*25198*/
					var _AQ = $get($1.alphanumeric, _AM) !== undefined; /*25198*/
					if (_AO && (!_AQ)) { //no-else/*25202*/
						$k[$j++] = $1.liso646; /*25199*/
						$k[$j++] = $1.alphanumeric; /*25199*/
						$1.encode(); /*25199*/
						$1.mode = "iso646"; /*25200*/
						break; /*25201*/
					} /*25201*/
					if ($get($1.numericruns, $1.i) >= 6) { //no-else/*25207*/
						$k[$j++] = $1.lnumeric; /*25204*/
						$k[$j++] = $1.alphanumeric; /*25204*/
						$1.encode(); /*25204*/
						$1.mode = "numeric"; /*25205*/
						break; /*25206*/
					} /*25206*/
					var _Aa = $get($1.numericruns, $1.i); /*25208*/
					if ((_Aa >= 4) && ((_Aa + $1.i) == $1.gpf.length)) { //no-else/*25212*/
						$k[$j++] = $1.lnumeric; /*25209*/
						$k[$j++] = $1.alphanumeric; /*25209*/
						$1.encode(); /*25209*/
						$1.mode = "numeric"; /*25210*/
						break; /*25211*/
					} /*25211*/
					$k[$j++] = $get($1.gpf, $1.i); /*25213*/
					$k[$j++] = $1.alphanumeric; /*25213*/
					$1.encode(); /*25213*/
					$1.i = $1.i + 1; /*25214*/
					break; /*25215*/
				} /*25215*/
				if ($eq($1.mode, "iso646")) { //no-else/*25238*/
					if ($get($1.gpf, $1.i) == $1.fnc1) { //no-else/*25224*/
						$k[$j++] = $1.fnc1; /*25220*/
						$k[$j++] = $1.iso646; /*25220*/
						$1.encode(); /*25220*/
						$1.mode = "numeric"; /*25221*/
						$1.i = $1.i + 1; /*25222*/
						break; /*25223*/
					} /*25223*/
					if (($get($1.numericruns, $1.i) >= 4) && ($get($1.nextiso646only, $1.i) >= 10)) { //no-else/*25229*/
						$k[$j++] = $1.lnumeric; /*25226*/
						$k[$j++] = $1.iso646; /*25226*/
						$1.encode(); /*25226*/
						$1.mode = "numeric"; /*25227*/
						break; /*25228*/
					} /*25228*/
					if (($get($1.alphanumericruns, $1.i) >= 5) && ($get($1.nextiso646only, $1.i) >= 10)) { //no-else/*25234*/
						$k[$j++] = $1.lalphanumeric; /*25231*/
						$k[$j++] = $1.iso646; /*25231*/
						$1.encode(); /*25231*/
						$1.mode = "alphanumeric"; /*25232*/
						break; /*25233*/
					} /*25233*/
					$k[$j++] = $get($1.gpf, $1.i); /*25235*/
					$k[$j++] = $1.iso646; /*25235*/
					$1.encode(); /*25235*/
					$1.i = $1.i + 1; /*25236*/
					break; /*25237*/
				} /*25237*/
			} /*25237*/
		} /*25237*/
		$1.gpf = $geti($1.gpfenc, 0, $1.j); /*25242*/
		$k[$j++] = 'pad'; /*25245*/
		$k[$j++] = $1.cdf.length + $1.gpf.length; /*25245*/
		$1.rembits(); /*25245*/
		var _BJ = $a($k[--$j]); /*25245*/
		$1[$k[--$j]] = _BJ; /*25245*/
		if ($1.pad.length > 0) { //no-else/*25257*/
			for (var _BO = 0, _BN = $1.pad.length - 1; _BO <= _BN; _BO += 5) {
				/*25250*/
				$1.i = _BO; /*25248*/
				var _BP = $1.pad; /*25249*/
				var _BQ = $1.i; /*25249*/
				var _BR = $a([0, 0, 1, 0, 0]); /*25249*/
				var _BS = $1.pad; /*25249*/
				var _BT = $1.i; /*25249*/
				var _BU = 5; /*25249*/
				var _BV = _BS.length - _BT; /*25249*/
				if ((_BS.length - _BT) > 5) { //no-else/*25249*/
					var _ = _BU; /*25249*/
					_BU = _BV; /*25249*/
					_BV = _; /*25249*/
				} /*25249*/
				$puti(_BP, _BQ, $geti(_BR, 0, _BV)); /*25249*/
			} /*25249*/
			if ($eq($1.mode, "numeric")) { //no-else/*25253*/
				$k[$j++] = Infinity; /*25252*/
				$k[$j++] = 0; /*25252*/
				$k[$j++] = 0; /*25252*/
				$k[$j++] = 0; /*25252*/
				$k[$j++] = 0; /*25252*/
				$aload($1.pad); /*25252*/
				$1.pad = $geti($a(), 0, $1.pad.length); /*25252*/
			} /*25252*/
			if ($eq($1.mode, "alpha")) { //no-else/*25256*/
				$k[$j++] = Infinity; /*25255*/
				$k[$j++] = 1; /*25255*/
				$k[$j++] = 1; /*25255*/
				$k[$j++] = 1; /*25255*/
				$k[$j++] = 1; /*25255*/
				$k[$j++] = 1; /*25255*/
				$k[$j++] = 0; /*25255*/
				$k[$j++] = 0; /*25255*/
				$k[$j++] = 0; /*25255*/
				$k[$j++] = 0; /*25255*/
				$aload($1.pad); /*25255*/
				$1.pad = $geti($a(), 0, $1.pad.length); /*25255*/
			} /*25255*/
		} /*25255*/
		$k[$j++] = Infinity; /*25263*/
		$aload($1.cdf); /*25261*/
		$aload($1.gpf); /*25262*/
		$aload($1.pad); /*25263*/
		$1.bits = $a(); /*25263*/
		if ($1.ccversion == "a") { //no-else/*25319*/
			$k[$j++] = Infinity; /*25269*/
			$k[$j++] = $a([0, 0, 0, 0, 0, 0, 1]); /*25269*/
			for (var _Bn = 0, _Bo = 68; _Bn < _Bo; _Bn++) {
				/*25269*/
				$k[$j++] = $a(7); /*25269*/
			} /*25269*/
			$1.pwr928 = $a(); /*25269*/
			for (var _Br = 1; _Br <= 68; _Br += 1) {
				/*25280*/
				$1.j = _Br; /*25272*/
				$1.v = 0; /*25273*/
				for (var _Bs = 6; _Bs >= 1; _Bs -= 1) {
					/*25278*/
					$1.i = _Bs; /*25275*/
					$1.v = ($get($get($1.pwr928, $1.j - 1), $1.i) * 2) + (~~($1.v / 928)); /*25276*/
					$put($get($1.pwr928, $1.j), $1.i, $1.v % 928); /*25277*/
				} /*25277*/
				$put($get($1.pwr928, $1.j), 0, ($get($get($1.pwr928, $1.j - 1), 0) * 2) + (~~($1.v / 928))); /*25279*/
			} /*25279*/
			$k[$j++] = Infinity; /*25281*/
			for (var _CC = 0, _CD = 28; _CC < _CD; _CC++) {
				/*25281*/
				$k[$j++] = 0; /*25281*/
			} /*25281*/
			$1.cws = $a(); /*25281*/
			$1.b = 0; /*25282*/
			$1.c = 0; /*25282*/
			for (;;) {
				/*25306*/
				if ($1.b == $1.bits.length) { //no-else/*25284*/
					break; /*25284*/
				} /*25284*/
				var _CH = $1.bits; /*25285*/
				var _CI = $1.b; /*25285*/
				var _CJ = $1.bits; /*25285*/
				var _CK = $1.b; /*25285*/
				var _CL = _CJ.length - _CK; /*25285*/
				var _CM = 69; /*25285*/
				if (69 > (_CJ.length - _CK)) { //no-else/*25285*/
					var _ = _CL; /*25285*/
					_CL = _CM; /*25285*/
					_CM = _; /*25285*/
				} /*25285*/
				$1.bs = $geti(_CH, _CI, _CM); /*25285*/
				$1.bsl = $1.bs.length; /*25286*/
				$1.cs = $geti($1.cws, $1.c, (~~($1.bsl / 10)) + 1); /*25287*/
				$1.csl = $1.cs.length; /*25288*/
				for (var _CW = 0, _CV = $1.bsl - 1; _CW <= _CV; _CW += 1) {
					/*25298*/
					$1.i = _CW; /*25290*/
					for (var _CZ = 0, _CY = $1.csl - 1; _CZ <= _CY; _CZ += 1) {
						/*25297*/
						$1.j = _CZ; /*25292*/
						var _Ca = $1.cs; /*25293*/
						var _Cb = $1.j; /*25293*/
						$put(_Ca, _Cb, $get(_Ca, _Cb) + ($get($get($1.pwr928, $1.i), ($1.j + 7) - $1.csl) * $get($1.bs, ($1.bsl - $1.i) - 1))); /*25296*/
					} /*25296*/
				} /*25296*/
				for (var _Co = $1.csl - 1; _Co >= 1; _Co -= 1) {
					/*25303*/
					$1.i = _Co; /*25300*/
					var _Cp = $1.cs; /*25301*/
					var _Cq = $1.i; /*25301*/
					$put(_Cp, _Cq - 1, $get(_Cp, _Cq - 1) + (~~($get($1.cs, $1.i) / 928))); /*25301*/
					var _Cv = $1.cs; /*25302*/
					var _Cw = $1.i; /*25302*/
					$put(_Cv, _Cw, $get(_Cv, _Cw) % 928); /*25302*/
				} /*25302*/
				$1.b = $1.b + $1.bsl; /*25304*/
				$1.c = $1.c + $1.csl; /*25305*/
			} /*25305*/
			$1.cws = $geti($1.cws, 0, $1.c); /*25307*/
			$1.barcode = $s($1.cws.length * 4); /*25308*/
			for (var _D9 = 0, _D8 = $1.cws.length - 1; _D9 <= _D8; _D9 += 1) {
				/*25314*/
				$1.i = _D9; /*25310*/
				var _DB = $strcpy($s(4), "^   "); /*25311*/
				var _DG = $cvrs($s(4), $get($1.cws, $1.i), 10); /*25311*/
				$puti(_DB, 4 - _DG.length, _DG); /*25312*/
				$puti($1.barcode, $1.i * 4, _DB); /*25313*/
			} /*25313*/
			$put($1.options, "dontdraw", true); /*25315*/
			$put($1.options, "cca", true); /*25316*/
			$put($1.options, "columns", $1.cccolumns); /*25317*/
			$k[$j++] = 'args'; /*25318*/
			$k[$j++] = $1.barcode; /*25318*/
			$k[$j++] = $1.options; /*25318*/
			$0.micropdf417(); /*25318*/
			var _DP = $k[--$j]; /*25318*/
			$1[$k[--$j]] = _DP; /*25318*/
		} /*25318*/
		if ($1.ccversion == "b") { //no-else/*25332*/
			$1.barcode = $s(~~($1.bits.length / 8)); /*25322*/
			for (var _DW = 0, _DV = $1.barcode.length - 1; _DW <= _DV; _DW += 1) {
				/*25327*/
				$1.i = _DW; /*25324*/
				$k[$j++] = 0; /*25325*/
				$forall($geti($1.bits, $1.i * 8, 8), function() {
					/*25325*/
					var _Da = $k[--$j]; /*25325*/
					var _Db = $k[--$j]; /*25325*/
					$k[$j++] = (_Db + _Da) * 2; /*25325*/
				}); /*25325*/
				$put($1.barcode, $1.i, ~~($k[--$j] / 2)); /*25326*/
			} /*25326*/
			$put($1.options, "dontdraw", true); /*25328*/
			$put($1.options, "ccb", true); /*25329*/
			$put($1.options, "columns", $1.cccolumns); /*25330*/
			$k[$j++] = 'args'; /*25331*/
			$k[$j++] = $1.barcode; /*25331*/
			$k[$j++] = $1.options; /*25331*/
			$0.micropdf417(); /*25331*/
			var _Dl = $k[--$j]; /*25331*/
			$1[$k[--$j]] = _Dl; /*25331*/
		} /*25331*/
		if ($1.ccversion == "c") { //no-else/*25346*/
			$1.barcode = $s(~~($1.bits.length / 8)); /*25335*/
			for (var _Ds = 0, _Dr = $1.barcode.length - 1; _Ds <= _Dr; _Ds += 1) {
				/*25340*/
				$1.i = _Ds; /*25337*/
				$k[$j++] = 0; /*25338*/
				$forall($geti($1.bits, $1.i * 8, 8), function() {
					/*25338*/
					var _Dw = $k[--$j]; /*25338*/
					var _Dx = $k[--$j]; /*25338*/
					$k[$j++] = (_Dx + _Dw) * 2; /*25338*/
				}); /*25338*/
				$put($1.barcode, $1.i, ~~($k[--$j] / 2)); /*25339*/
			} /*25339*/
			$put($1.options, "dontdraw", true); /*25341*/
			$put($1.options, "ccc", true); /*25342*/
			$put($1.options, "columns", $1.cccolumns); /*25343*/
			$put($1.options, "eclevel", (~~(Math.log($1.eccws) / Math.log(2))) - 1); /*25344*/
			$k[$j++] = 'args'; /*25345*/
			$k[$j++] = $1.barcode; /*25345*/
			$k[$j++] = $1.options; /*25345*/
			$0.pdf417(); /*25345*/
			var _E9 = $k[--$j]; /*25345*/
			$1[$k[--$j]] = _E9; /*25345*/
		} /*25345*/
		$k[$j++] = $1.args; /*25349*/
		if (!$1.dontdraw) { //no-else/*25349*/
			$0.renmatrix(); /*25349*/
		} /*25349*/
	};
	$0.ean13composite = function() {
		var $1 = {}; /*25381*/
		$1.options = $k[--$j]; /*25383*/
		$1.barcode = $k[--$j]; /*25384*/
		$1.dontdraw = false; /*25386*/
		$forall($1.options, function() {
			/*25397*/
			var _3 = $k[--$j]; /*25397*/
			$1[$k[--$j]] = _3; /*25397*/
		}); /*25397*/
		$search($1.barcode, "|"); /*25400*/
		if ($k[--$j]) {
			/*25405*/
			$1.linear = $k[--$j]; /*25401*/
			$j--; /*25402*/
			$1.comp = $k[--$j]; /*25403*/
		} else {
			/*25405*/
			$j--; /*25405*/
		} /*25405*/
		$$.save(); /*25408*/
		$put($1.options, "lintype", "ean13"); /*25410*/
		$put($1.options, "inkspread", "0"); /*25411*/
		$put($1.options, "dontdraw", true); /*25412*/
		$k[$j++] = $1.linear; /*25415*/
		$k[$j++] = $1.options; /*25415*/
		$0.ean13(); /*25415*/
		$0.renlinear(); /*25415*/
		$$.rmoveto(-1, 72); /*25418*/
		$k[$j++] = Infinity; /*25429*/
		$k[$j++] = Infinity; /*25423*/
		$k[$j++] = 0; /*25421*/
		$k[$j++] = 1; /*25421*/
		for (var _E = 0, _F = 93; _E < _F; _E++) {
			/*25421*/
			$k[$j++] = 0; /*25421*/
		} /*25421*/
		$k[$j++] = 1; /*25422*/
		$k[$j++] = 0; /*25422*/
		$k[$j++] = 1; /*25422*/
		$k[$j++] = 0; /*25422*/
		for (var _G = 0, _H = 93; _G < _H; _G++) {
			/*25422*/
			$k[$j++] = 0; /*25422*/
		} /*25422*/
		$k[$j++] = 0; /*25423*/
		$k[$j++] = 1; /*25423*/
		$k[$j++] = 0; /*25423*/
		$k[$j++] = 1; /*25423*/
		for (var _I = 0, _J = 93; _I < _J; _I++) {
			/*25423*/
			$k[$j++] = 0; /*25423*/
		} /*25423*/
		$k[$j++] = 1; /*25423*/
		$k[$j++] = 0; /*25423*/
		var _K = $a(); /*25423*/
		$k[$j++] = 'ren'; /*25429*/
		$k[$j++] = $0.renmatrix; /*25429*/
		$k[$j++] = 'pixs'; /*25429*/
		$k[$j++] = _K; /*25429*/
		$k[$j++] = 'pixx'; /*25429*/
		$k[$j++] = 97; /*25429*/
		$k[$j++] = 'pixy'; /*25429*/
		$k[$j++] = 3; /*25429*/
		$k[$j++] = 'height'; /*25429*/
		$k[$j++] = 6 / 72; /*25429*/
		$k[$j++] = 'width'; /*25429*/
		$k[$j++] = 97 / 72; /*25429*/
		$k[$j++] = 'opt'; /*25429*/
		$k[$j++] = $1.options; /*25429*/
		var _M = $d(); /*25429*/
		$k[$j++] = _M; /*25430*/
		$0.renmatrix(); /*25430*/
		$$.rmoveto(-2, 6); /*25433*/
		$k[$j++] = $1.comp; /*25433*/
		$k[$j++] = $1.options; /*25433*/
		$0["gs1-cc"](); /*25433*/
		$0.renmatrix(); /*25433*/
		$$.restore(); /*25435*/
	};
	$0.ean8composite = function() {
		var $1 = {}; /*25467*/
		$1.options = $k[--$j]; /*25469*/
		$1.barcode = $k[--$j]; /*25470*/
		$1.dontdraw = false; /*25472*/
		$forall($1.options, function() {
			/*25483*/
			var _3 = $k[--$j]; /*25483*/
			$1[$k[--$j]] = _3; /*25483*/
		}); /*25483*/
		$search($1.barcode, "|"); /*25486*/
		if ($k[--$j]) {
			/*25491*/
			$1.linear = $k[--$j]; /*25487*/
			$j--; /*25488*/
			$1.comp = $k[--$j]; /*25489*/
		} else {
			/*25491*/
			$j--; /*25491*/
		} /*25491*/
		$$.save(); /*25494*/
		$put($1.options, "lintype", "ean8"); /*25497*/
		$put($1.options, "inkspread", "0"); /*25498*/
		$put($1.options, "dontdraw", true); /*25499*/
		$k[$j++] = $1.linear; /*25502*/
		$k[$j++] = $1.options; /*25502*/
		$0.ean8(); /*25502*/
		$0.renlinear(); /*25502*/
		$$.rmoveto(-1, 72); /*25505*/
		$k[$j++] = Infinity; /*25516*/
		$k[$j++] = Infinity; /*25510*/
		$k[$j++] = 0; /*25508*/
		$k[$j++] = 1; /*25508*/
		for (var _E = 0, _F = 65; _E < _F; _E++) {
			/*25508*/
			$k[$j++] = 0; /*25508*/
		} /*25508*/
		$k[$j++] = 1; /*25509*/
		$k[$j++] = 0; /*25509*/
		$k[$j++] = 1; /*25509*/
		$k[$j++] = 0; /*25509*/
		for (var _G = 0, _H = 65; _G < _H; _G++) {
			/*25509*/
			$k[$j++] = 0; /*25509*/
		} /*25509*/
		$k[$j++] = 0; /*25510*/
		$k[$j++] = 1; /*25510*/
		$k[$j++] = 0; /*25510*/
		$k[$j++] = 1; /*25510*/
		for (var _I = 0, _J = 65; _I < _J; _I++) {
			/*25510*/
			$k[$j++] = 0; /*25510*/
		} /*25510*/
		$k[$j++] = 1; /*25510*/
		$k[$j++] = 0; /*25510*/
		var _K = $a(); /*25510*/
		$k[$j++] = 'ren'; /*25516*/
		$k[$j++] = $0.renmatrix; /*25516*/
		$k[$j++] = 'pixs'; /*25516*/
		$k[$j++] = _K; /*25516*/
		$k[$j++] = 'pixx'; /*25516*/
		$k[$j++] = 69; /*25516*/
		$k[$j++] = 'pixy'; /*25516*/
		$k[$j++] = 3; /*25516*/
		$k[$j++] = 'height'; /*25516*/
		$k[$j++] = 6 / 72; /*25516*/
		$k[$j++] = 'width'; /*25516*/
		$k[$j++] = 69 / 72; /*25516*/
		$k[$j++] = 'opt'; /*25516*/
		$k[$j++] = $1.options; /*25516*/
		var _M = $d(); /*25516*/
		$k[$j++] = _M; /*25517*/
		$0.renmatrix(); /*25517*/
		$k[$j++] = $1.comp; /*25520*/
		$k[$j++] = $1.options; /*25520*/
		$0["gs1-cc"](); /*25520*/
		var _P = $k[--$j]; /*25521*/
		$$.rmoveto(69 - $get(_P, "pixx"), 6); /*25521*/
		$k[$j++] = _P; /*25522*/
		$0.renmatrix(); /*25522*/
		$$.restore(); /*25524*/
	};
	$0.upcacomposite = function() {
		var $1 = {}; /*25556*/
		$1.options = $k[--$j]; /*25558*/
		$1.barcode = $k[--$j]; /*25559*/
		$1.dontdraw = false; /*25561*/
		$forall($1.options, function() {
			/*25572*/
			var _3 = $k[--$j]; /*25572*/
			$1[$k[--$j]] = _3; /*25572*/
		}); /*25572*/
		$search($1.barcode, "|"); /*25575*/
		if ($k[--$j]) {
			/*25580*/
			$1.linear = $k[--$j]; /*25576*/
			$j--; /*25577*/
			$1.comp = $k[--$j]; /*25578*/
		} else {
			/*25580*/
			$j--; /*25580*/
		} /*25580*/
		$$.save(); /*25583*/
		$put($1.options, "lintype", "ean13"); /*25585*/
		$put($1.options, "inkspread", "0"); /*25586*/
		$put($1.options, "dontdraw", true); /*25587*/
		$k[$j++] = $1.linear; /*25590*/
		$k[$j++] = $1.options; /*25590*/
		$0.upca(); /*25590*/
		$0.renlinear(); /*25590*/
		$$.rmoveto(-1, 72); /*25593*/
		$k[$j++] = Infinity; /*25604*/
		$k[$j++] = Infinity; /*25598*/
		$k[$j++] = 0; /*25596*/
		$k[$j++] = 1; /*25596*/
		for (var _E = 0, _F = 93; _E < _F; _E++) {
			/*25596*/
			$k[$j++] = 0; /*25596*/
		} /*25596*/
		$k[$j++] = 1; /*25597*/
		$k[$j++] = 0; /*25597*/
		$k[$j++] = 1; /*25597*/
		$k[$j++] = 0; /*25597*/
		for (var _G = 0, _H = 93; _G < _H; _G++) {
			/*25597*/
			$k[$j++] = 0; /*25597*/
		} /*25597*/
		$k[$j++] = 0; /*25598*/
		$k[$j++] = 1; /*25598*/
		$k[$j++] = 0; /*25598*/
		$k[$j++] = 1; /*25598*/
		for (var _I = 0, _J = 93; _I < _J; _I++) {
			/*25598*/
			$k[$j++] = 0; /*25598*/
		} /*25598*/
		$k[$j++] = 1; /*25598*/
		$k[$j++] = 0; /*25598*/
		var _K = $a(); /*25598*/
		$k[$j++] = 'ren'; /*25604*/
		$k[$j++] = $0.renmatrix; /*25604*/
		$k[$j++] = 'pixs'; /*25604*/
		$k[$j++] = _K; /*25604*/
		$k[$j++] = 'pixx'; /*25604*/
		$k[$j++] = 97; /*25604*/
		$k[$j++] = 'pixy'; /*25604*/
		$k[$j++] = 3; /*25604*/
		$k[$j++] = 'height'; /*25604*/
		$k[$j++] = 6 / 72; /*25604*/
		$k[$j++] = 'width'; /*25604*/
		$k[$j++] = 97 / 72; /*25604*/
		$k[$j++] = 'opt'; /*25604*/
		$k[$j++] = $1.options; /*25604*/
		var _M = $d(); /*25604*/
		$k[$j++] = _M; /*25605*/
		$0.renmatrix(); /*25605*/
		$$.rmoveto(-2, 6); /*25608*/
		$k[$j++] = $1.comp; /*25608*/
		$k[$j++] = $1.options; /*25608*/
		$0["gs1-cc"](); /*25608*/
		$0.renmatrix(); /*25608*/
		$$.restore(); /*25610*/
	};
	$0.upcecomposite = function() {
		var $1 = {}; /*25642*/
		$1.options = $k[--$j]; /*25644*/
		$1.barcode = $k[--$j]; /*25645*/
		$1.dontdraw = false; /*25647*/
		$forall($1.options, function() {
			/*25658*/
			var _3 = $k[--$j]; /*25658*/
			$1[$k[--$j]] = _3; /*25658*/
		}); /*25658*/
		$search($1.barcode, "|"); /*25661*/
		if ($k[--$j]) {
			/*25666*/
			$1.linear = $k[--$j]; /*25662*/
			$j--; /*25663*/
			$1.comp = $k[--$j]; /*25664*/
		} else {
			/*25666*/
			$j--; /*25666*/
		} /*25666*/
		$k[$j++] = Infinity; /*25681*/
		$k[$j++] = Infinity; /*25675*/
		$k[$j++] = 0; /*25673*/
		$k[$j++] = 1; /*25673*/
		for (var _9 = 0, _A = 49; _9 < _A; _9++) {
			/*25673*/
			$k[$j++] = 0; /*25673*/
		} /*25673*/
		$k[$j++] = 1; /*25674*/
		$k[$j++] = 0; /*25674*/
		$k[$j++] = 1; /*25674*/
		$k[$j++] = 0; /*25674*/
		for (var _B = 0, _C = 49; _B < _C; _B++) {
			/*25674*/
			$k[$j++] = 0; /*25674*/
		} /*25674*/
		$k[$j++] = 0; /*25675*/
		$k[$j++] = 1; /*25675*/
		$k[$j++] = 0; /*25675*/
		$k[$j++] = 1; /*25675*/
		for (var _D = 0, _E = 49; _D < _E; _D++) {
			/*25675*/
			$k[$j++] = 0; /*25675*/
		} /*25675*/
		$k[$j++] = 1; /*25675*/
		$k[$j++] = 0; /*25675*/
		var _F = $a(); /*25675*/
		$k[$j++] = 'ren'; /*25681*/
		$k[$j++] = $0.renmatrix; /*25681*/
		$k[$j++] = 'pixs'; /*25681*/
		$k[$j++] = _F; /*25681*/
		$k[$j++] = 'pixx'; /*25681*/
		$k[$j++] = 53; /*25681*/
		$k[$j++] = 'pixy'; /*25681*/
		$k[$j++] = 3; /*25681*/
		$k[$j++] = 'height'; /*25681*/
		$k[$j++] = 6 / 72; /*25681*/
		$k[$j++] = 'width'; /*25681*/
		$k[$j++] = 53 / 72; /*25681*/
		$k[$j++] = 'opt'; /*25681*/
		$k[$j++] = $1.options; /*25681*/
		$1.sep = $d(); /*25682*/
		$$.save(); /*25684*/
		$put($1.options, "lintype", "upce"); /*25686*/
		$put($1.options, "inkspread", "0"); /*25687*/
		$put($1.options, "dontdraw", true); /*25688*/
		$k[$j++] = $1.linear; /*25691*/
		$k[$j++] = $1.options; /*25691*/
		$0.upce(); /*25691*/
		$0.renlinear(); /*25691*/
		$$.rmoveto(-1, 72); /*25694*/
		$k[$j++] = Infinity; /*25705*/
		$k[$j++] = Infinity; /*25699*/
		$k[$j++] = 0; /*25697*/
		$k[$j++] = 1; /*25697*/
		for (var _N = 0, _O = 49; _N < _O; _N++) {
			/*25697*/
			$k[$j++] = 0; /*25697*/
		} /*25697*/
		$k[$j++] = 1; /*25698*/
		$k[$j++] = 0; /*25698*/
		$k[$j++] = 1; /*25698*/
		$k[$j++] = 0; /*25698*/
		for (var _P = 0, _Q = 49; _P < _Q; _P++) {
			/*25698*/
			$k[$j++] = 0; /*25698*/
		} /*25698*/
		$k[$j++] = 0; /*25699*/
		$k[$j++] = 1; /*25699*/
		$k[$j++] = 0; /*25699*/
		$k[$j++] = 1; /*25699*/
		for (var _R = 0, _S = 49; _R < _S; _R++) {
			/*25699*/
			$k[$j++] = 0; /*25699*/
		} /*25699*/
		$k[$j++] = 1; /*25699*/
		$k[$j++] = 0; /*25699*/
		var _T = $a(); /*25699*/
		$k[$j++] = 'ren'; /*25705*/
		$k[$j++] = $0.renmatrix; /*25705*/
		$k[$j++] = 'pixs'; /*25705*/
		$k[$j++] = _T; /*25705*/
		$k[$j++] = 'pixx'; /*25705*/
		$k[$j++] = 53; /*25705*/
		$k[$j++] = 'pixy'; /*25705*/
		$k[$j++] = 3; /*25705*/
		$k[$j++] = 'height'; /*25705*/
		$k[$j++] = 6 / 72; /*25705*/
		$k[$j++] = 'width'; /*25705*/
		$k[$j++] = 53 / 72; /*25705*/
		$k[$j++] = 'opt'; /*25705*/
		$k[$j++] = $1.options; /*25705*/
		var _V = $d(); /*25705*/
		$k[$j++] = _V; /*25706*/
		$0.renmatrix(); /*25706*/
		$$.rmoveto(-2, 6); /*25709*/
		$k[$j++] = $1.comp; /*25709*/
		$k[$j++] = $1.options; /*25709*/
		$0["gs1-cc"](); /*25709*/
		$0.renmatrix(); /*25709*/
		$$.restore(); /*25711*/
	};
	$0.databaromnicomposite = function() {
		var $1 = {}; /*25743*/
		$1.options = $k[--$j]; /*25745*/
		$1.barcode = $k[--$j]; /*25746*/
		$1.dontdraw = false; /*25748*/
		$forall($1.options, function() {
			/*25759*/
			var _3 = $k[--$j]; /*25759*/
			$1[$k[--$j]] = _3; /*25759*/
		}); /*25759*/
		$search($1.barcode, "|"); /*25762*/
		if ($k[--$j]) {
			/*25767*/
			$1.linear = $k[--$j]; /*25763*/
			$j--; /*25764*/
			$1.comp = $k[--$j]; /*25765*/
		} else {
			/*25767*/
			$j--; /*25767*/
		} /*25767*/
		$$.save(); /*25770*/
		$put($1.options, "lintype", "databaromni"); /*25772*/
		$put($1.options, "linkage", true); /*25773*/
		$put($1.options, "inkspread", "0"); /*25774*/
		$put($1.options, "dontdraw", true); /*25775*/
		$k[$j++] = $1.linear; /*25778*/
		$k[$j++] = $1.options; /*25778*/
		$0.databaromni(); /*25778*/
		var _F = $k[--$j]; /*25779*/
		$1.linsbs = $get(_F, "sbs"); /*25779*/
		$1.linheight = $get($get(_F, "bhs"), 0) * 72; /*25780*/
		$k[$j++] = _F; /*25781*/
		$0.renlinear(); /*25781*/
		$1.sepfinder = function() {
			$1.fp = $k[--$j]; /*25785*/
			for (var _N = $1.fp, _M = $1.fp + 12; _N <= _M; _N += 1) {
				/*25798*/
				$1.i = _N; /*25787*/
				if ($get($1.bot, $1.i) == 0) {
					/*25795*/
					if ($get($1.bot, $1.i - 1) == 1) {
						/*25792*/
						$k[$j++] = 1; /*25790*/
					} else {
						/*25792*/
						var _X = ($get($1.sep, $1.i - 1) == 0) ? 1 : 0; /*25792*/
						$k[$j++] = _X; /*25792*/
					} /*25792*/
				} else {
					/*25795*/
					$k[$j++] = 0; /*25795*/
				} /*25795*/
				$put($1.sep, $1.i, $k[--$j]); /*25797*/
			} /*25797*/
			$1.f3 = $a([1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1]); /*25799*/
			$k[$j++] = true; /*25800*/
			for (var _c = 0; _c <= 12; _c += 1) {
				/*25800*/
				var _i = $k[--$j]; /*25800*/
				$k[$j++] = _i && $eq($get($1.bot, _c + $1.fp), $get($1.f3, _c)); /*25800*/
			} /*25800*/
			if ($k[--$j]) { //no-else/*25803*/
				$puti($1.sep, $1.fp, $a([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0])); /*25802*/
			} /*25802*/
		}; /*25804*/
		$k[$j++] = Infinity; /*25805*/
		$k[$j++] = 0; /*25806*/
		$forall($1.linsbs, function() {
			/*25806*/
			var _o = $k[--$j]; /*25806*/
			var _p = $k[--$j]; /*25806*/
			var _q = (_p == 1) ? 0 : 1; /*25806*/
			$k[$j++] = _p; /*25806*/
			for (var _r = 0, _s = _o; _r < _s; _r++) {
				/*25806*/
				$k[$j++] = _q /*25806*/
			} /*25806*/
		}); /*25806*/
		$astore($a($counttomark() - 1)); /*25807*/
		$1.bot = $k[--$j]; /*25807*/
		$j -= 2; /*25807*/
		$k[$j++] = Infinity; /*25808*/
		$forall($1.bot, function() {
			/*25808*/
			var _x = $k[--$j]; /*25808*/
			$k[$j++] = 1 - _x; /*25808*/
		}); /*25808*/
		$1.sep = $a(); /*25808*/
		$puti($1.sep, 0, $a([0, 0, 0])); /*25809*/
		$puti($1.sep, $1.sep.length - 4, $a([0, 0, 0, 0])); /*25810*/
		$k[$j++] = 18; /*25811*/
		$1.sepfinder(); /*25811*/
		$k[$j++] = 64; /*25811*/
		$1.sepfinder(); /*25811*/
		$$.rmoveto(0, $1.linheight); /*25812*/
		var _19 = new Map([
			["ren", $0.renmatrix],
			["pixs", $1.sep],
			["pixx", $1.sep.length],
			["pixy", 1],
			["height", 1 / 72],
			["width", $1.sep.length / 72],
			["opt", $1.options]
		]); /*25819*/
		$k[$j++] = _19; /*25820*/
		$0.renmatrix(); /*25820*/
		$$.rmoveto(-5, 1); /*25823*/
		$k[$j++] = $1.comp; /*25823*/
		$k[$j++] = $1.options; /*25823*/
		$0["gs1-cc"](); /*25823*/
		$0.renmatrix(); /*25823*/
		$$.restore(); /*25825*/
	};
	$0.databarstackedcomposite = function() {
		var $1 = {}; /*25856*/
		$1.options = $k[--$j]; /*25858*/
		$1.barcode = $k[--$j]; /*25859*/
		$1.dontdraw = false; /*25861*/
		$forall($1.options, function() {
			/*25872*/
			var _3 = $k[--$j]; /*25872*/
			$1[$k[--$j]] = _3; /*25872*/
		}); /*25872*/
		$search($1.barcode, "|"); /*25875*/
		if ($k[--$j]) {
			/*25880*/
			$1.linear = $k[--$j]; /*25876*/
			$j--; /*25877*/
			$1.comp = $k[--$j]; /*25878*/
		} else {
			/*25880*/
			$j--; /*25880*/
		} /*25880*/
		$$.save(); /*25883*/
		$put($1.options, "lintype", "databarstacked"); /*25885*/
		$put($1.options, "linkage", true); /*25886*/
		$put($1.options, "inkspread", "0"); /*25887*/
		$put($1.options, "dontdraw", true); /*25888*/
		$k[$j++] = $1.linear; /*25891*/
		$k[$j++] = $1.options; /*25891*/
		$0.databarstacked(); /*25891*/
		var _F = $k[--$j]; /*25892*/
		$1.bot = $geti($get(_F, "pixs"), 0, $get(_F, "pixx")); /*25892*/
		$1.linheight = $get(_F, "pixy"); /*25893*/
		$k[$j++] = _F; /*25894*/
		$0.renmatrix(); /*25894*/
		$1.sepfinder = function() {
			$1.fp = $k[--$j]; /*25898*/
			for (var _O = $1.fp, _N = $1.fp + 12; _O <= _N; _O += 1) {
				/*25911*/
				$1.i = _O; /*25900*/
				if ($get($1.bot, $1.i) == 0) {
					/*25908*/
					if ($get($1.bot, $1.i - 1) == 1) {
						/*25905*/
						$k[$j++] = 1; /*25903*/
					} else {
						/*25905*/
						var _Y = ($get($1.sep, $1.i - 1) == 0) ? 1 : 0; /*25905*/
						$k[$j++] = _Y; /*25905*/
					} /*25905*/
				} else {
					/*25908*/
					$k[$j++] = 0; /*25908*/
				} /*25908*/
				$put($1.sep, $1.i, $k[--$j]); /*25910*/
			} /*25910*/
			$1.f3 = $a([1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1]); /*25912*/
			$k[$j++] = true; /*25913*/
			for (var _d = 0; _d <= 12; _d += 1) {
				/*25913*/
				var _j = $k[--$j]; /*25913*/
				$k[$j++] = _j && $eq($get($1.bot, _d + $1.fp), $get($1.f3, _d)); /*25913*/
			} /*25913*/
			if ($k[--$j]) { //no-else/*25916*/
				$puti($1.sep, $1.fp, $a([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0])); /*25915*/
			} /*25915*/
		}; /*25917*/
		$k[$j++] = Infinity; /*25918*/
		$forall($1.bot, function() {
			/*25918*/
			var _p = $k[--$j]; /*25918*/
			$k[$j++] = 1 - _p; /*25918*/
		}); /*25918*/
		$1.sep = $a(); /*25918*/
		$puti($1.sep, 0, $a([0, 0, 0, 0])); /*25919*/
		$puti($1.sep, $1.sep.length - 4, $a([0, 0, 0, 0])); /*25920*/
		$k[$j++] = 18; /*25921*/
		$1.sepfinder(); /*25921*/
		$$.rmoveto(0, $1.linheight); /*25922*/
		var _11 = new Map([
			["ren", $0.renmatrix],
			["pixs", $1.sep],
			["pixx", $1.sep.length],
			["pixy", 1],
			["height", 1 / 72],
			["width", $1.sep.length / 72],
			["opt", $1.options]
		]); /*25929*/
		$k[$j++] = _11; /*25930*/
		$0.renmatrix(); /*25930*/
		$$.rmoveto(1, 1); /*25933*/
		$k[$j++] = $1.comp; /*25933*/
		$k[$j++] = $1.options; /*25933*/
		$0["gs1-cc"](); /*25933*/
		$0.renmatrix(); /*25933*/
		$$.restore(); /*25935*/
	};
	$0.databarstackedomnicomposite = function() {
		var $1 = {}; /*25966*/
		$1.options = $k[--$j]; /*25968*/
		$1.barcode = $k[--$j]; /*25969*/
		$1.dontdraw = false; /*25971*/
		$forall($1.options, function() {
			/*25982*/
			var _3 = $k[--$j]; /*25982*/
			$1[$k[--$j]] = _3; /*25982*/
		}); /*25982*/
		$search($1.barcode, "|"); /*25985*/
		if ($k[--$j]) {
			/*25990*/
			$1.linear = $k[--$j]; /*25986*/
			$j--; /*25987*/
			$1.comp = $k[--$j]; /*25988*/
		} else {
			/*25990*/
			$j--; /*25990*/
		} /*25990*/
		$$.save(); /*25993*/
		$put($1.options, "lintype", "databarstackedomni"); /*25995*/
		$put($1.options, "linkage", true); /*25996*/
		$put($1.options, "inkspread", "0"); /*25997*/
		$put($1.options, "dontdraw", true); /*25998*/
		$k[$j++] = $1.linear; /*26001*/
		$k[$j++] = $1.options; /*26001*/
		$0.databarstackedomni(); /*26001*/
		var _F = $k[--$j]; /*26002*/
		$1.bot = $geti($get(_F, "pixs"), 0, $get(_F, "pixx")); /*26002*/
		$1.linheight = $get(_F, "pixy"); /*26003*/
		$k[$j++] = _F; /*26004*/
		$0.renmatrix(); /*26004*/
		$1.sepfinder = function() {
			$1.fp = $k[--$j]; /*26008*/
			for (var _O = $1.fp, _N = $1.fp + 12; _O <= _N; _O += 1) {
				/*26021*/
				$1.i = _O; /*26010*/
				if ($get($1.bot, $1.i) == 0) {
					/*26018*/
					if ($get($1.bot, $1.i - 1) == 1) {
						/*26015*/
						$k[$j++] = 1; /*26013*/
					} else {
						/*26015*/
						var _Y = ($get($1.sep, $1.i - 1) == 0) ? 1 : 0; /*26015*/
						$k[$j++] = _Y; /*26015*/
					} /*26015*/
				} else {
					/*26018*/
					$k[$j++] = 0; /*26018*/
				} /*26018*/
				$put($1.sep, $1.i, $k[--$j]); /*26020*/
			} /*26020*/
			$1.f3 = $a([1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1]); /*26022*/
			$k[$j++] = true; /*26023*/
			for (var _d = 0; _d <= 12; _d += 1) {
				/*26023*/
				var _j = $k[--$j]; /*26023*/
				$k[$j++] = _j && $eq($get($1.bot, _d + $1.fp), $get($1.f3, _d)); /*26023*/
			} /*26023*/
			if ($k[--$j]) { //no-else/*26026*/
				$puti($1.sep, $1.fp, $a([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0])); /*26025*/
			} /*26025*/
		}; /*26027*/
		$k[$j++] = Infinity; /*26028*/
		$forall($1.bot, function() {
			/*26028*/
			var _p = $k[--$j]; /*26028*/
			$k[$j++] = 1 - _p; /*26028*/
		}); /*26028*/
		$1.sep = $a(); /*26028*/
		$puti($1.sep, 0, $a([0, 0, 0, 0])); /*26029*/
		$puti($1.sep, $1.sep.length - 4, $a([0, 0, 0, 0])); /*26030*/
		$k[$j++] = 18; /*26031*/
		$1.sepfinder(); /*26031*/
		$$.rmoveto(0, $1.linheight); /*26032*/
		var _11 = new Map([
			["ren", $0.renmatrix],
			["pixs", $1.sep],
			["pixx", $1.sep.length],
			["pixy", 1],
			["height", 1 / 72],
			["width", $1.sep.length / 72],
			["opt", $1.options]
		]); /*26039*/
		$k[$j++] = _11; /*26040*/
		$0.renmatrix(); /*26040*/
		$$.rmoveto(1, 1); /*26043*/
		$k[$j++] = $1.comp; /*26043*/
		$k[$j++] = $1.options; /*26043*/
		$0["gs1-cc"](); /*26043*/
		$0.renmatrix(); /*26043*/
		$$.restore(); /*26045*/
	};
	$0.databartruncatedcomposite = function() {
		var $1 = {}; /*26077*/
		$1.options = $k[--$j]; /*26079*/
		$1.barcode = $k[--$j]; /*26080*/
		$1.dontdraw = false; /*26082*/
		$forall($1.options, function() {
			/*26093*/
			var _3 = $k[--$j]; /*26093*/
			$1[$k[--$j]] = _3; /*26093*/
		}); /*26093*/
		$search($1.barcode, "|"); /*26096*/
		if ($k[--$j]) {
			/*26101*/
			$1.linear = $k[--$j]; /*26097*/
			$j--; /*26098*/
			$1.comp = $k[--$j]; /*26099*/
		} else {
			/*26101*/
			$j--; /*26101*/
		} /*26101*/
		$$.save(); /*26104*/
		$put($1.options, "lintype", "databartruncated"); /*26106*/
		$put($1.options, "linkage", true); /*26107*/
		$put($1.options, "inkspread", "0"); /*26108*/
		$put($1.options, "dontdraw", true); /*26109*/
		$k[$j++] = $1.linear; /*26112*/
		$k[$j++] = $1.options; /*26112*/
		$0.databartruncated(); /*26112*/
		var _F = $k[--$j]; /*26113*/
		$1.linsbs = $get(_F, "sbs"); /*26113*/
		$1.linheight = $get($get(_F, "bhs"), 0) * 72; /*26114*/
		$k[$j++] = _F; /*26115*/
		$0.renlinear(); /*26115*/
		$1.sepfinder = function() {
			$1.fp = $k[--$j]; /*26119*/
			for (var _N = $1.fp, _M = $1.fp + 12; _N <= _M; _N += 1) {
				/*26132*/
				$1.i = _N; /*26121*/
				if ($get($1.bot, $1.i) == 0) {
					/*26129*/
					if ($get($1.bot, $1.i - 1) == 1) {
						/*26126*/
						$k[$j++] = 1; /*26124*/
					} else {
						/*26126*/
						var _X = ($get($1.sep, $1.i - 1) == 0) ? 1 : 0; /*26126*/
						$k[$j++] = _X; /*26126*/
					} /*26126*/
				} else {
					/*26129*/
					$k[$j++] = 0; /*26129*/
				} /*26129*/
				$put($1.sep, $1.i, $k[--$j]); /*26131*/
			} /*26131*/
			$1.f3 = $a([1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1]); /*26133*/
			$k[$j++] = true; /*26134*/
			for (var _c = 0; _c <= 12; _c += 1) {
				/*26134*/
				var _i = $k[--$j]; /*26134*/
				$k[$j++] = _i && $eq($get($1.bot, _c + $1.fp), $get($1.f3, _c)); /*26134*/
			} /*26134*/
			if ($k[--$j]) { //no-else/*26137*/
				$puti($1.sep, $1.fp, $a([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0])); /*26136*/
			} /*26136*/
		}; /*26138*/
		$k[$j++] = Infinity; /*26139*/
		$k[$j++] = 0; /*26140*/
		$forall($1.linsbs, function() {
			/*26140*/
			var _o = $k[--$j]; /*26140*/
			var _p = $k[--$j]; /*26140*/
			var _q = (_p == 1) ? 0 : 1; /*26140*/
			$k[$j++] = _p; /*26140*/
			for (var _r = 0, _s = _o; _r < _s; _r++) {
				/*26140*/
				$k[$j++] = _q /*26140*/
			} /*26140*/
		}); /*26140*/
		$astore($a($counttomark() - 1)); /*26141*/
		$1.bot = $k[--$j]; /*26141*/
		$j -= 2; /*26141*/
		$k[$j++] = Infinity; /*26142*/
		$forall($1.bot, function() {
			/*26142*/
			var _x = $k[--$j]; /*26142*/
			$k[$j++] = 1 - _x; /*26142*/
		}); /*26142*/
		$1.sep = $a(); /*26142*/
		$puti($1.sep, 0, $a([0, 0, 0])); /*26143*/
		$puti($1.sep, $1.sep.length - 4, $a([0, 0, 0, 0])); /*26144*/
		$k[$j++] = 18; /*26145*/
		$1.sepfinder(); /*26145*/
		$k[$j++] = 64; /*26145*/
		$1.sepfinder(); /*26145*/
		$$.rmoveto(0, $1.linheight); /*26146*/
		var _19 = new Map([
			["ren", $0.renmatrix],
			["pixs", $1.sep],
			["pixx", $1.sep.length],
			["pixy", 1],
			["height", 1 / 72],
			["width", $1.sep.length / 72],
			["opt", $1.options]
		]); /*26153*/
		$k[$j++] = _19; /*26154*/
		$0.renmatrix(); /*26154*/
		$$.rmoveto(-5, 1); /*26157*/
		$k[$j++] = $1.comp; /*26157*/
		$k[$j++] = $1.options; /*26157*/
		$0["gs1-cc"](); /*26157*/
		$0.renmatrix(); /*26157*/
		$$.restore(); /*26159*/
	};
	$0.databarlimitedcomposite = function() {
		var $1 = {}; /*26191*/
		$1.options = $k[--$j]; /*26193*/
		$1.barcode = $k[--$j]; /*26194*/
		$1.dontdraw = false; /*26196*/
		$forall($1.options, function() {
			/*26207*/
			var _3 = $k[--$j]; /*26207*/
			$1[$k[--$j]] = _3; /*26207*/
		}); /*26207*/
		$search($1.barcode, "|"); /*26210*/
		if ($k[--$j]) {
			/*26215*/
			$1.linear = $k[--$j]; /*26211*/
			$j--; /*26212*/
			$1.comp = $k[--$j]; /*26213*/
		} else {
			/*26215*/
			$j--; /*26215*/
		} /*26215*/
		$$.save(); /*26218*/
		$put($1.options, "lintype", "databarlimited"); /*26220*/
		$put($1.options, "linkage", true); /*26221*/
		$put($1.options, "inkspread", "0"); /*26222*/
		$put($1.options, "dontdraw", true); /*26223*/
		$k[$j++] = $1.linear; /*26226*/
		$k[$j++] = $1.options; /*26226*/
		$0.databarlimited(); /*26226*/
		var _F = $k[--$j]; /*26227*/
		$1.linsbs = $get(_F, "sbs"); /*26227*/
		$1.linheight = $get($get(_F, "bhs"), 0) * 72; /*26228*/
		$k[$j++] = _F; /*26229*/
		$0.renlinear(); /*26229*/
		$k[$j++] = Infinity; /*26232*/
		$k[$j++] = 1; /*26233*/
		$forall($1.linsbs, function() {
			/*26233*/
			var _K = $k[--$j]; /*26233*/
			var _L = $k[--$j]; /*26233*/
			var _M = (_L == 0) ? 1 : 0; /*26233*/
			$k[$j++] = _L; /*26233*/
			for (var _N = 0, _O = _K; _N < _O; _N++) {
				/*26233*/
				$k[$j++] = _M /*26233*/
			} /*26233*/
		}); /*26233*/
		$astore($a($counttomark() - 1)); /*26234*/
		$1.sep = $k[--$j]; /*26234*/
		$j -= 2; /*26234*/
		$puti($1.sep, 0, $a([0, 0, 0])); /*26235*/
		$puti($1.sep, $1.sep.length - 9, $a([0, 0, 0, 0, 0, 0, 0, 0, 0])); /*26236*/
		$$.rmoveto(0, $1.linheight); /*26237*/
		var _c = new Map([
			["ren", $0.renmatrix],
			["pixs", $1.sep],
			["pixx", $1.sep.length],
			["pixy", 1],
			["height", 1 / 72],
			["width", $1.sep.length / 72],
			["opt", $1.options]
		]); /*26244*/
		$k[$j++] = _c; /*26245*/
		$0.renmatrix(); /*26245*/
		$k[$j++] = $1.comp; /*26248*/
		$k[$j++] = $1.options; /*26248*/
		$0["gs1-cc"](); /*26248*/
		var _f = $k[--$j]; /*26249*/
		$$.rmoveto(72 - $get(_f, "pixx"), 1); /*26249*/
		$k[$j++] = _f; /*26250*/
		$0.renmatrix(); /*26250*/
		$$.restore(); /*26252*/
	};
	$0.databarexpandedcomposite = function() {
		var $1 = {}; /*26284*/
		$1.options = $k[--$j]; /*26286*/
		$1.barcode = $k[--$j]; /*26287*/
		$1.dontdraw = false; /*26289*/
		$forall($1.options, function() {
			/*26300*/
			var _3 = $k[--$j]; /*26300*/
			$1[$k[--$j]] = _3; /*26300*/
		}); /*26300*/
		$search($1.barcode, "|"); /*26303*/
		if ($k[--$j]) {
			/*26308*/
			$1.linear = $k[--$j]; /*26304*/
			$j--; /*26305*/
			$1.comp = $k[--$j]; /*26306*/
		} else {
			/*26308*/
			$j--; /*26308*/
		} /*26308*/
		$$.save(); /*26311*/
		$put($1.options, "lintype", "databarexpanded"); /*26313*/
		$put($1.options, "linkage", true); /*26314*/
		$put($1.options, "inkspread", "0"); /*26315*/
		$put($1.options, "dontdraw", true); /*26316*/
		$k[$j++] = $1.linear; /*26319*/
		$k[$j++] = $1.options; /*26319*/
		$0.databarexpanded(); /*26319*/
		var _F = $k[--$j]; /*26320*/
		$1.linsbs = $get(_F, "sbs"); /*26320*/
		$1.linheight = $get($get(_F, "bhs"), 0) * 72; /*26321*/
		$k[$j++] = _F; /*26322*/
		$0.renlinear(); /*26322*/
		$1.sepfinder = function() {
			$1.fp = $k[--$j]; /*26326*/
			for (var _N = $1.fp, _M = $1.fp + 12; _N <= _M; _N += 1) {
				/*26339*/
				$1.i = _N; /*26328*/
				if ($get($1.bot, $1.i) == 0) {
					/*26336*/
					if ($get($1.bot, $1.i - 1) == 1) {
						/*26333*/
						$k[$j++] = 1; /*26331*/
					} else {
						/*26333*/
						var _X = ($get($1.sep, $1.i - 1) == 0) ? 1 : 0; /*26333*/
						$k[$j++] = _X; /*26333*/
					} /*26333*/
				} else {
					/*26336*/
					$k[$j++] = 0; /*26336*/
				} /*26336*/
				$put($1.sep, $1.i, $k[--$j]); /*26338*/
			} /*26338*/
		}; /*26340*/
		$k[$j++] = Infinity; /*26341*/
		$k[$j++] = 0; /*26342*/
		$forall($1.linsbs, function() {
			/*26342*/
			var _c = $k[--$j]; /*26342*/
			var _d = $k[--$j]; /*26342*/
			var _e = (_d == 1) ? 0 : 1; /*26342*/
			$k[$j++] = _d; /*26342*/
			for (var _f = 0, _g = _c; _f < _g; _f++) {
				/*26342*/
				$k[$j++] = _e /*26342*/
			} /*26342*/
		}); /*26342*/
		$astore($a($counttomark() - 1)); /*26343*/
		$1.bot = $k[--$j]; /*26343*/
		$j -= 2; /*26343*/
		$k[$j++] = Infinity; /*26344*/
		$forall($1.bot, function() {
			/*26344*/
			var _l = $k[--$j]; /*26344*/
			$k[$j++] = 1 - _l; /*26344*/
		}); /*26344*/
		$1.sep = $a(); /*26344*/
		$puti($1.sep, 0, $a([0, 0, 0])); /*26345*/
		$puti($1.sep, $1.sep.length - 4, $a([0, 0, 0, 0])); /*26346*/
		$k[$j++] = Infinity; /*26349*/
		for (var _u = 18, _t = $1.bot.length - 13; _u <= _t; _u += 98) {
			/*26348*/
			$k[$j++] = _u; /*26348*/
		} /*26348*/
		for (var _x = 69, _w = $1.bot.length - 13; _x <= _w; _x += 98) {
			/*26349*/
			$k[$j++] = _x; /*26349*/
		} /*26349*/
		var _y = $a(); /*26349*/
		for (var _z = 0, _10 = _y.length; _z < _10; _z++) {
			/*26350*/
			$k[$j++] = $get(_y, _z); /*26350*/
			$1.sepfinder(); /*26350*/
		} /*26350*/
		$$.rmoveto(0, $1.linheight); /*26351*/
		var _17 = new Map([
			["ren", $0.renmatrix],
			["pixs", $1.sep],
			["pixx", $1.sep.length],
			["pixy", 1],
			["height", 1 / 72],
			["width", $1.sep.length / 72],
			["opt", $1.options]
		]); /*26358*/
		$k[$j++] = _17; /*26359*/
		$0.renmatrix(); /*26359*/
		$$.rmoveto(1, 1); /*26362*/
		$k[$j++] = $1.comp; /*26362*/
		$k[$j++] = $1.options; /*26362*/
		$0["gs1-cc"](); /*26362*/
		$0.renmatrix(); /*26362*/
		$$.restore(); /*26364*/
	};
	$0.databarexpandedstackedcomposite = function() {
		var $1 = {}; /*26395*/
		$1.options = $k[--$j]; /*26397*/
		$1.barcode = $k[--$j]; /*26398*/
		$1.dontdraw = false; /*26400*/
		$forall($1.options, function() {
			/*26411*/
			var _3 = $k[--$j]; /*26411*/
			$1[$k[--$j]] = _3; /*26411*/
		}); /*26411*/
		$search($1.barcode, "|"); /*26414*/
		if ($k[--$j]) {
			/*26419*/
			$1.linear = $k[--$j]; /*26415*/
			$j--; /*26416*/
			$1.comp = $k[--$j]; /*26417*/
		} else {
			/*26419*/
			$j--; /*26419*/
		} /*26419*/
		$$.save(); /*26422*/
		$put($1.options, "lintype", "databarexpandedstacked"); /*26424*/
		$put($1.options, "linkage", true); /*26425*/
		$put($1.options, "inkspread", "0"); /*26426*/
		$put($1.options, "dontdraw", true); /*26427*/
		$k[$j++] = $1.linear; /*26430*/
		$k[$j++] = $1.options; /*26430*/
		$0.databarexpandedstacked(); /*26430*/
		var _F = $k[--$j]; /*26431*/
		$1.bot = $geti($get(_F, "pixs"), 0, $get(_F, "pixx")); /*26431*/
		$1.linheight = $get(_F, "pixy"); /*26432*/
		$k[$j++] = _F; /*26433*/
		$0.renmatrix(); /*26433*/
		$1.sepfinder = function() {
			$1.fp = $k[--$j]; /*26437*/
			for (var _O = $1.fp, _N = $1.fp + 12; _O <= _N; _O += 1) {
				/*26450*/
				$1.i = _O; /*26439*/
				if ($get($1.bot, $1.i) == 0) {
					/*26447*/
					if ($get($1.bot, $1.i - 1) == 1) {
						/*26444*/
						$k[$j++] = 1; /*26442*/
					} else {
						/*26444*/
						var _Y = ($get($1.sep, $1.i - 1) == 0) ? 1 : 0; /*26444*/
						$k[$j++] = _Y; /*26444*/
					} /*26444*/
				} else {
					/*26447*/
					$k[$j++] = 0; /*26447*/
				} /*26447*/
				$put($1.sep, $1.i, $k[--$j]); /*26449*/
			} /*26449*/
		}; /*26451*/
		$k[$j++] = Infinity; /*26452*/
		$forall($1.bot, function() {
			/*26452*/
			var _d = $k[--$j]; /*26452*/
			$k[$j++] = 1 - _d; /*26452*/
		}); /*26452*/
		$1.sep = $a(); /*26452*/
		$puti($1.sep, 0, $a([0, 0, 0])); /*26453*/
		$puti($1.sep, $1.sep.length - 4, $a([0, 0, 0, 0])); /*26454*/
		$k[$j++] = Infinity; /*26457*/
		for (var _m = 19, _l = $1.bot.length - 13; _m <= _l; _m += 98) {
			/*26456*/
			$k[$j++] = _m; /*26456*/
		} /*26456*/
		for (var _p = 70, _o = $1.bot.length - 13; _p <= _o; _p += 98) {
			/*26457*/
			$k[$j++] = _p; /*26457*/
		} /*26457*/
		var _q = $a(); /*26457*/
		for (var _r = 0, _s = _q.length; _r < _s; _r++) {
			/*26458*/
			$k[$j++] = $get(_q, _r); /*26458*/
			$1.sepfinder(); /*26458*/
		} /*26458*/
		$$.rmoveto(0, $1.linheight); /*26459*/
		var _z = new Map([
			["ren", $0.renmatrix],
			["pixs", $1.sep],
			["pixx", $1.sep.length],
			["pixy", 1],
			["height", 1 / 72],
			["width", $1.sep.length / 72],
			["opt", $1.options]
		]); /*26466*/
		$k[$j++] = _z; /*26467*/
		$0.renmatrix(); /*26467*/
		var _12 = ($get($1.bot, 0) == 0) ? 2 : 0; /*26470*/
		$$.rmoveto(_12, 1); /*26470*/
		$k[$j++] = $1.comp; /*26471*/
		$k[$j++] = $1.options; /*26471*/
		$0["gs1-cc"](); /*26471*/
		$0.renmatrix(); /*26471*/
		$$.restore(); /*26473*/
	};
	$0['gs1-128composite'] = function() {
		var $1 = {}; /*26505*/
		$1.options = $k[--$j]; /*26507*/
		$1.barcode = $k[--$j]; /*26508*/
		$1.dontdraw = false; /*26510*/
		$forall($1.options, function() {
			/*26521*/
			var _3 = $k[--$j]; /*26521*/
			$1[$k[--$j]] = _3; /*26521*/
		}); /*26521*/
		$search($1.barcode, "|"); /*26524*/
		if ($k[--$j]) {
			/*26529*/
			$1.linear = $k[--$j]; /*26525*/
			$j--; /*26526*/
			$1.comp = $k[--$j]; /*26527*/
		} else {
			/*26529*/
			$j--; /*26529*/
		} /*26529*/
		$$.save(); /*26532*/
		$put($1.options, "inkspread", "0"); /*26534*/
		$put($1.options, "dontdraw", true); /*26535*/
		$put($1.options, "linkagea", true); /*26538*/
		$k[$j++] = $1.linear; /*26539*/
		$k[$j++] = Infinity; /*26539*/
		$forall($1.options); /*26539*/
		var _E = $d(); /*26539*/
		$k[$j++] = _E; /*26539*/
		$0["gs1-128"](); /*26539*/
		var _G = $get($k[--$j], "sbs"); /*26540*/
		$k[$j++] = 0; /*26540*/
		$forall(_G, function() {
			/*26540*/
			var _H = $k[--$j]; /*26540*/
			var _I = $k[--$j]; /*26540*/
			$k[$j++] = _I + _H; /*26540*/
		}); /*26540*/
		$1.linwidth = $k[--$j]; /*26540*/
		$put($1.options, "lintype", "gs1-128"); /*26543*/
		$put($1.options, "linwidth", $1.linwidth); /*26544*/
		$k[$j++] = $1.comp; /*26545*/
		$k[$j++] = $1.options; /*26545*/
		$0["gs1-cc"](); /*26545*/
		$1.compsym = $k[--$j]; /*26545*/
		if ($get($1.compsym, "pixx") == 99) {
			/*26546*/
			$k[$j++] = "a"; /*26546*/
		} else {
			/*26546*/
			$k[$j++] = "c"; /*26546*/
		} /*26546*/
		$1.linktype = $k[--$j]; /*26546*/
		if ($eq($1.linktype, "a")) {
			/*26554*/
			$put($1.options, "linkagea", true); /*26550*/
			$put($1.options, "linkagec", false); /*26551*/
		} else {
			/*26554*/
			$put($1.options, "linkagea", false); /*26553*/
			$put($1.options, "linkagec", true); /*26554*/
		} /*26554*/
		$k[$j++] = $1.linear; /*26556*/
		$k[$j++] = Infinity; /*26556*/
		$forall($1.options); /*26556*/
		var _a = $d(); /*26556*/
		$k[$j++] = _a; /*26556*/
		$0["gs1-128"](); /*26556*/
		var _b = $k[--$j]; /*26557*/
		$1.linsbs = $get(_b, "sbs"); /*26557*/
		$1.linheight = $get($get(_b, "bhs"), 0) * 72; /*26558*/
		$k[$j++] = _b; /*26559*/
		$0.renlinear(); /*26559*/
		$k[$j++] = Infinity; /*26562*/
		$k[$j++] = 1; /*26563*/
		$forall($1.linsbs, function() {
			/*26563*/
			var _g = $k[--$j]; /*26563*/
			var _h = $k[--$j]; /*26563*/
			var _i = (_h == 0) ? 1 : 0; /*26563*/
			$k[$j++] = _h; /*26563*/
			for (var _j = 0, _k = _g; _j < _k; _j++) {
				/*26563*/
				$k[$j++] = _i /*26563*/
			} /*26563*/
		}); /*26563*/
		$astore($a($counttomark() - 1)); /*26564*/
		$1.sep = $k[--$j]; /*26564*/
		$j -= 2; /*26564*/
		$$.rmoveto(0, $1.linheight); /*26565*/
		var _t = new Map([
			["ren", $0.renmatrix],
			["pixs", $1.sep],
			["pixx", $1.sep.length],
			["pixy", 1],
			["height", 1 / 72],
			["width", $1.sep.length / 72],
			["opt", $1.options]
		]); /*26572*/
		$k[$j++] = _t; /*26573*/
		$0.renmatrix(); /*26573*/
		if ($eq($1.linktype, "a")) {
			/*26582*/
			$1.s = ~~(($1.linwidth - 2) / 11); /*26577*/
			$1.p = ~~(($1.s - 9) / 2); /*26578*/
			$k[$j++] = 'x'; /*26579*/
			$k[$j++] = ((($1.s - $1.p) - 1) * 11) + 10; /*26579*/
			if ($1.p == 0) { //no-else/*26579*/
				var _10 = $k[--$j]; /*26579*/
				$k[$j++] = _10 + 2; /*26579*/
			} /*26579*/
			var _11 = $k[--$j]; /*26579*/
			$1[$k[--$j]] = _11 - 99; /*26579*/
			$$.rmoveto($1.x, 1); /*26580*/
		} else {
			/*26582*/
			$$.rmoveto(-7, 1); /*26582*/
		} /*26582*/
		$k[$j++] = $1.compsym; /*26585*/
		$0.renmatrix(); /*26585*/
		$$.restore(); /*26587*/
	};
	$0.gs1datamatrix = function() {
		var $1 = {}; /*26617*/
		$1.options = $k[--$j]; /*26619*/
		$1.barcode = $k[--$j]; /*26620*/
		$1.dontdraw = false; /*26622*/
		$forall($1.options, function() {
			/*26633*/
			var _3 = $k[--$j]; /*26633*/
			$1[$k[--$j]] = _3; /*26633*/
		}); /*26633*/
		$1.expand = function() {
			$1.in = $k[--$j]; /*26637*/
			$1.out = $s($1.in.length); /*26638*/
			$1.j = 0; /*26639*/
			$k[$j++] = $1.in; /*26653*/
			for (;;) {
				/*26653*/
				$search($k[--$j], "^"); /*26642*/
				if ($k[--$j]) {
					/*26651*/
					var _B = $k[--$j]; /*26643*/
					$puti($1.out, $1.j, _B); /*26643*/
					$1.j = (_B.length + $1.j) + 1; /*26644*/
					$j--; /*26645*/
					var _F = $k[--$j]; /*26646*/
					$put($1.out, $1.j - 1, ~~$z($geti(_F, 0, 3))); /*26646*/
					$k[$j++] = $geti(_F, 3, _F.length - 3); /*26647*/
				} else {
					/*26651*/
					var _K = $k[--$j]; /*26649*/
					$puti($1.out, $1.j, _K); /*26649*/
					$1.j = _K.length + $1.j; /*26650*/
					$k[$j++] = $geti($1.out, 0, $1.j); /*26651*/
					break; /*26651*/
				} /*26651*/
			} /*26651*/
		}; /*26654*/
		$1.ais = $a([]); /*26657*/
		$1.vals = $a([]); /*26658*/
		var _T = $1.barcode; /*26659*/
		$k[$j++] = $geti(_T, 1, _T.length - 1); /*26672*/
		for (;;) {
			/*26672*/
			var _V = $k[--$j]; /*26661*/
			$k[$j++] = _V; /*26661*/
			if ($eq(_V, "")) { //no-else/*26661*/
				break; /*26661*/
			} /*26661*/
			$search($k[--$j], ")"); /*26662*/
			$j--; /*26662*/
			var _X = $k[--$j]; /*26663*/
			var _Y = $k[--$j]; /*26663*/
			var _Z = $k[--$j]; /*26664*/
			$k[$j++] = _X; /*26664*/
			$search(_Z, "("); /*26664*/
			if ($k[--$j]) {
				/*26667*/
				var _b = $k[--$j]; /*26665*/
				var _c = $k[--$j]; /*26665*/
				var _d = $k[--$j]; /*26665*/
				var _e = $k[--$j]; /*26665*/
				$k[$j++] = _d; /*26665*/
				$k[$j++] = _e; /*26665*/
				$k[$j++] = _b; /*26665*/
			} else {
				/*26667*/
				var _f = $k[--$j]; /*26667*/
				var _g = $k[--$j]; /*26667*/
				$k[$j++] = ""; /*26667*/
				$k[$j++] = _g; /*26667*/
				$k[$j++] = _f; /*26667*/
			} /*26667*/
			$k[$j++] = Infinity; /*26669*/
			$aload($1.ais); /*26669*/
			var _j = $k[$j - 1 - ($counttomark() + 2)]; /*26669*/
			$k[$j++] = _j; /*26669*/
			$1.ais = $a(); /*26669*/
			$k[$j++] = Infinity; /*26670*/
			$aload($1.vals); /*26670*/
			var _n = $k[$j - 1 - ($counttomark() + 1)]; /*26670*/
			$k[$j++] = _n; /*26670*/
			$1.expand(); /*26670*/
			$1.vals = $a(); /*26670*/
			$j -= 2; /*26671*/
		} /*26671*/
		$j--; /*26673*/
		$1.aifixed = new Map; /*26678*/
		$k[$j++] = Infinity; /*26680*/
		for (var _p = 0; _p <= 4; _p += 1) {
			/*26680*/
			$k[$j++] = _p; /*26680*/
		} /*26680*/
		var _q = $a(); /*26680*/
		for (var _r = 0, _s = _q.length; _r < _s; _r++) {
			/*26683*/
			var _v = $strcpy($s(2), "00"); /*26682*/
			$put(_v, 1, $get(_q, _r) + 48); /*26682*/
			$put($1.aifixed, _v, _v); /*26682*/
		} /*26682*/
		$k[$j++] = Infinity; /*26688*/
		for (var _x = 11; _x <= 20; _x += 1) {
			/*26685*/
			$k[$j++] = _x; /*26685*/
		} /*26685*/
		$k[$j++] = 23; /*26687*/
		for (var _y = 31; _y <= 36; _y += 1) {
			/*26687*/
			$k[$j++] = _y; /*26687*/
		} /*26687*/
		$k[$j++] = 41; /*26688*/
		var _z = $a(); /*26688*/
		for (var _10 = 0, _11 = _z.length; _10 < _11; _10++) {
			/*26691*/
			var _14 = $cvrs($s(2), $get(_z, _10), 10); /*26690*/
			$put($1.aifixed, _14, _14); /*26690*/
		} /*26690*/
		$1.fnc1 = -1; /*26694*/
		$1.dmtx = $a([$1.fnc1]); /*26695*/
		for (var _1A = 0, _19 = $1.ais.length - 1; _1A <= _19; _1A += 1) {
			/*26711*/
			$1.i = _1A; /*26697*/
			$1.ai = $get($1.ais, $1.i); /*26698*/
			$1.val = $get($1.vals, $1.i); /*26699*/
			var _1K = $a(($1.dmtx.length + $1.ai.length) + $1.val.length); /*26700*/
			$puti(_1K, 0, $1.dmtx); /*26701*/
			$k[$j++] = _1K; /*26702*/
			$k[$j++] = _1K; /*26702*/
			$k[$j++] = $1.dmtx.length; /*26702*/
			$k[$j++] = $1.ai; /*26702*/
			$k[$j++] = Infinity; /*26702*/
			var _1O = $k[--$j]; /*26702*/
			var _1P = $k[--$j]; /*26702*/
			$k[$j++] = _1O; /*26702*/
			$forall(_1P); /*26702*/
			var _1Q = $a(); /*26702*/
			var _1R = $k[--$j]; /*26702*/
			$puti($k[--$j], _1R, _1Q); /*26702*/
			var _1T = $k[--$j]; /*26703*/
			$k[$j++] = _1T; /*26703*/
			$k[$j++] = _1T; /*26703*/
			$k[$j++] = $1.dmtx.length + $1.ai.length; /*26703*/
			$k[$j++] = $1.val; /*26703*/
			$k[$j++] = Infinity; /*26703*/
			var _1X = $k[--$j]; /*26703*/
			var _1Y = $k[--$j]; /*26703*/
			$k[$j++] = _1X; /*26703*/
			$forall(_1Y); /*26703*/
			var _1Z = $a(); /*26703*/
			var _1a = $k[--$j]; /*26703*/
			$puti($k[--$j], _1a, _1Z); /*26703*/
			$1.dmtx = $k[--$j]; /*26704*/
			var _1i = $get($1.aifixed, $geti($1.ai, 0, 2)) !== undefined; /*26705*/
			if (($1.i != ($1.ais.length - 1)) && (!_1i)) { //no-else/*26710*/
				var _1k = $a($1.dmtx.length + 1); /*26706*/
				$puti(_1k, 0, $1.dmtx); /*26707*/
				$put(_1k, $1.dmtx.length, $1.fnc1); /*26708*/
				$1.dmtx = _1k; /*26709*/
			} /*26709*/
		} /*26709*/
		$1.barcode = $s(($1.dmtx.length + 1) * 5); /*26714*/
		$1.i = 0; /*26715*/
		$1.j = 0; /*26715*/
		for (;;) {
			/*26725*/
			if ($1.i == $1.dmtx.length) { //no-else/*26716*/
				break; /*26716*/
			} /*26716*/
			var _1u = $get($1.dmtx, $1.i); /*26717*/
			$k[$j++] = _1u; /*26722*/
			if (_1u == $1.fnc1) {
				/*26721*/
				$j--; /*26718*/
				$puti($1.barcode, $1.j, "^FNC1"); /*26718*/
				$1.j = $1.j + 4; /*26719*/
			} else {
				/*26721*/
				$put($1.barcode, $1.j, $k[--$j]); /*26721*/
			} /*26721*/
			$1.i = $1.i + 1; /*26723*/
			$1.j = $1.j + 1; /*26724*/
		} /*26724*/
		$1.barcode = $geti($1.barcode, 0, $1.j); /*26726*/
		$put($1.options, "dontdraw", true); /*26729*/
		$put($1.options, "parsefnc", true); /*26730*/
		$k[$j++] = 'args'; /*26731*/
		$k[$j++] = $1.barcode; /*26731*/
		$k[$j++] = $1.options; /*26731*/
		$0.datamatrix(); /*26731*/
		var _2B = $k[--$j]; /*26731*/
		$1[$k[--$j]] = _2B; /*26731*/
		$put($1.args, "opt", $1.options); /*26733*/
		$k[$j++] = $1.args; /*26736*/
		if (!$1.dontdraw) { //no-else/*26736*/
			$0.renmatrix(); /*26736*/
		} /*26736*/
	};
	$0.gs1datamatrixrectangular = function() {
		var $1 = {}; /*26766*/
		$1.options = $k[--$j]; /*26768*/
		$1.barcode = $k[--$j]; /*26769*/
		$1.dontdraw = false; /*26771*/
		$forall($1.options, function() {
			/*26782*/
			var _3 = $k[--$j]; /*26782*/
			$1[$k[--$j]] = _3; /*26782*/
		}); /*26782*/
		$1.expand = function() {
			$1.in = $k[--$j]; /*26786*/
			$1.out = $s($1.in.length); /*26787*/
			$1.j = 0; /*26788*/
			$k[$j++] = $1.in; /*26802*/
			for (;;) {
				/*26802*/
				$search($k[--$j], "^"); /*26791*/
				if ($k[--$j]) {
					/*26800*/
					var _B = $k[--$j]; /*26792*/
					$puti($1.out, $1.j, _B); /*26792*/
					$1.j = (_B.length + $1.j) + 1; /*26793*/
					$j--; /*26794*/
					var _F = $k[--$j]; /*26795*/
					$put($1.out, $1.j - 1, ~~$z($geti(_F, 0, 3))); /*26795*/
					$k[$j++] = $geti(_F, 3, _F.length - 3); /*26796*/
				} else {
					/*26800*/
					var _K = $k[--$j]; /*26798*/
					$puti($1.out, $1.j, _K); /*26798*/
					$1.j = _K.length + $1.j; /*26799*/
					$k[$j++] = $geti($1.out, 0, $1.j); /*26800*/
					break; /*26800*/
				} /*26800*/
			} /*26800*/
		}; /*26803*/
		$1.ais = $a([]); /*26806*/
		$1.vals = $a([]); /*26807*/
		var _T = $1.barcode; /*26808*/
		$k[$j++] = $geti(_T, 1, _T.length - 1); /*26821*/
		for (;;) {
			/*26821*/
			var _V = $k[--$j]; /*26810*/
			$k[$j++] = _V; /*26810*/
			if ($eq(_V, "")) { //no-else/*26810*/
				break; /*26810*/
			} /*26810*/
			$search($k[--$j], ")"); /*26811*/
			$j--; /*26811*/
			var _X = $k[--$j]; /*26812*/
			var _Y = $k[--$j]; /*26812*/
			var _Z = $k[--$j]; /*26813*/
			$k[$j++] = _X; /*26813*/
			$search(_Z, "("); /*26813*/
			if ($k[--$j]) {
				/*26816*/
				var _b = $k[--$j]; /*26814*/
				var _c = $k[--$j]; /*26814*/
				var _d = $k[--$j]; /*26814*/
				var _e = $k[--$j]; /*26814*/
				$k[$j++] = _d; /*26814*/
				$k[$j++] = _e; /*26814*/
				$k[$j++] = _b; /*26814*/
			} else {
				/*26816*/
				var _f = $k[--$j]; /*26816*/
				var _g = $k[--$j]; /*26816*/
				$k[$j++] = ""; /*26816*/
				$k[$j++] = _g; /*26816*/
				$k[$j++] = _f; /*26816*/
			} /*26816*/
			$k[$j++] = Infinity; /*26818*/
			$aload($1.ais); /*26818*/
			var _j = $k[$j - 1 - ($counttomark() + 2)]; /*26818*/
			$k[$j++] = _j; /*26818*/
			$1.ais = $a(); /*26818*/
			$k[$j++] = Infinity; /*26819*/
			$aload($1.vals); /*26819*/
			var _n = $k[$j - 1 - ($counttomark() + 1)]; /*26819*/
			$k[$j++] = _n; /*26819*/
			$1.expand(); /*26819*/
			$1.vals = $a(); /*26819*/
			$j -= 2; /*26820*/
		} /*26820*/
		$j--; /*26822*/
		$1.aifixed = new Map; /*26827*/
		$k[$j++] = Infinity; /*26829*/
		for (var _p = 0; _p <= 4; _p += 1) {
			/*26829*/
			$k[$j++] = _p; /*26829*/
		} /*26829*/
		var _q = $a(); /*26829*/
		for (var _r = 0, _s = _q.length; _r < _s; _r++) {
			/*26832*/
			var _v = $strcpy($s(2), "00"); /*26831*/
			$put(_v, 1, $get(_q, _r) + 48); /*26831*/
			$put($1.aifixed, _v, _v); /*26831*/
		} /*26831*/
		$k[$j++] = Infinity; /*26837*/
		for (var _x = 11; _x <= 20; _x += 1) {
			/*26834*/
			$k[$j++] = _x; /*26834*/
		} /*26834*/
		$k[$j++] = 23; /*26836*/
		for (var _y = 31; _y <= 36; _y += 1) {
			/*26836*/
			$k[$j++] = _y; /*26836*/
		} /*26836*/
		$k[$j++] = 41; /*26837*/
		var _z = $a(); /*26837*/
		for (var _10 = 0, _11 = _z.length; _10 < _11; _10++) {
			/*26840*/
			var _14 = $cvrs($s(2), $get(_z, _10), 10); /*26839*/
			$put($1.aifixed, _14, _14); /*26839*/
		} /*26839*/
		$1.fnc1 = -1; /*26843*/
		$1.dmtx = $a([$1.fnc1]); /*26844*/
		for (var _1A = 0, _19 = $1.ais.length - 1; _1A <= _19; _1A += 1) {
			/*26860*/
			$1.i = _1A; /*26846*/
			$1.ai = $get($1.ais, $1.i); /*26847*/
			$1.val = $get($1.vals, $1.i); /*26848*/
			var _1K = $a(($1.dmtx.length + $1.ai.length) + $1.val.length); /*26849*/
			$puti(_1K, 0, $1.dmtx); /*26850*/
			$k[$j++] = _1K; /*26851*/
			$k[$j++] = _1K; /*26851*/
			$k[$j++] = $1.dmtx.length; /*26851*/
			$k[$j++] = $1.ai; /*26851*/
			$k[$j++] = Infinity; /*26851*/
			var _1O = $k[--$j]; /*26851*/
			var _1P = $k[--$j]; /*26851*/
			$k[$j++] = _1O; /*26851*/
			$forall(_1P); /*26851*/
			var _1Q = $a(); /*26851*/
			var _1R = $k[--$j]; /*26851*/
			$puti($k[--$j], _1R, _1Q); /*26851*/
			var _1T = $k[--$j]; /*26852*/
			$k[$j++] = _1T; /*26852*/
			$k[$j++] = _1T; /*26852*/
			$k[$j++] = $1.dmtx.length + $1.ai.length; /*26852*/
			$k[$j++] = $1.val; /*26852*/
			$k[$j++] = Infinity; /*26852*/
			var _1X = $k[--$j]; /*26852*/
			var _1Y = $k[--$j]; /*26852*/
			$k[$j++] = _1X; /*26852*/
			$forall(_1Y); /*26852*/
			var _1Z = $a(); /*26852*/
			var _1a = $k[--$j]; /*26852*/
			$puti($k[--$j], _1a, _1Z); /*26852*/
			$1.dmtx = $k[--$j]; /*26853*/
			var _1i = $get($1.aifixed, $geti($1.ai, 0, 2)) !== undefined; /*26854*/
			if (($1.i != ($1.ais.length - 1)) && (!_1i)) { //no-else/*26859*/
				var _1k = $a($1.dmtx.length + 1); /*26855*/
				$puti(_1k, 0, $1.dmtx); /*26856*/
				$put(_1k, $1.dmtx.length, $1.fnc1); /*26857*/
				$1.dmtx = _1k; /*26858*/
			} /*26858*/
		} /*26858*/
		$1.barcode = $s(($1.dmtx.length + 1) * 5); /*26863*/
		$1.i = 0; /*26864*/
		$1.j = 0; /*26864*/
		for (;;) {
			/*26874*/
			if ($1.i == $1.dmtx.length) { //no-else/*26865*/
				break; /*26865*/
			} /*26865*/
			var _1u = $get($1.dmtx, $1.i); /*26866*/
			$k[$j++] = _1u; /*26871*/
			if (_1u == $1.fnc1) {
				/*26870*/
				$j--; /*26867*/
				$puti($1.barcode, $1.j, "^FNC1"); /*26867*/
				$1.j = $1.j + 4; /*26868*/
			} else {
				/*26870*/
				$put($1.barcode, $1.j, $k[--$j]); /*26870*/
			} /*26870*/
			$1.i = $1.i + 1; /*26872*/
			$1.j = $1.j + 1; /*26873*/
		} /*26873*/
		$1.barcode = $geti($1.barcode, 0, $1.j); /*26875*/
		$put($1.options, "dontdraw", true); /*26878*/
		$put($1.options, "parsefnc", true); /*26879*/
		$put($1.options, "format", "rectangle"); /*26880*/
		$k[$j++] = 'args'; /*26881*/
		$k[$j++] = $1.barcode; /*26881*/
		$k[$j++] = $1.options; /*26881*/
		$0.datamatrix(); /*26881*/
		var _2C = $k[--$j]; /*26881*/
		$1[$k[--$j]] = _2C; /*26881*/
		$put($1.args, "opt", $1.options); /*26883*/
		$k[$j++] = $1.args; /*26886*/
		if (!$1.dontdraw) { //no-else/*26886*/
			$0.renmatrix(); /*26886*/
		} /*26886*/
	};
	$0.gs1qrcode = function() {
		var $1 = {}; /*26915*/
		$1.options = $k[--$j]; /*26917*/
		$1.barcode = $k[--$j]; /*26918*/
		$1.dontdraw = false; /*26920*/
		$forall($1.options, function() {
			/*26931*/
			var _3 = $k[--$j]; /*26931*/
			$1[$k[--$j]] = _3; /*26931*/
		}); /*26931*/
		$1.expand = function() {
			$1.in = $k[--$j]; /*26935*/
			$1.out = $s($1.in.length); /*26936*/
			$1.j = 0; /*26937*/
			$k[$j++] = $1.in; /*26951*/
			for (;;) {
				/*26951*/
				$search($k[--$j], "^"); /*26940*/
				if ($k[--$j]) {
					/*26949*/
					var _B = $k[--$j]; /*26941*/
					$puti($1.out, $1.j, _B); /*26941*/
					$1.j = (_B.length + $1.j) + 1; /*26942*/
					$j--; /*26943*/
					var _F = $k[--$j]; /*26944*/
					$put($1.out, $1.j - 1, ~~$z($geti(_F, 0, 3))); /*26944*/
					$k[$j++] = $geti(_F, 3, _F.length - 3); /*26945*/
				} else {
					/*26949*/
					var _K = $k[--$j]; /*26947*/
					$puti($1.out, $1.j, _K); /*26947*/
					$1.j = _K.length + $1.j; /*26948*/
					$k[$j++] = $geti($1.out, 0, $1.j); /*26949*/
					break; /*26949*/
				} /*26949*/
			} /*26949*/
		}; /*26952*/
		$1.ais = $a([]); /*26955*/
		$1.vals = $a([]); /*26956*/
		var _T = $1.barcode; /*26957*/
		$k[$j++] = $geti(_T, 1, _T.length - 1); /*26970*/
		for (;;) {
			/*26970*/
			var _V = $k[--$j]; /*26959*/
			$k[$j++] = _V; /*26959*/
			if ($eq(_V, "")) { //no-else/*26959*/
				break; /*26959*/
			} /*26959*/
			$search($k[--$j], ")"); /*26960*/
			$j--; /*26960*/
			var _X = $k[--$j]; /*26961*/
			var _Y = $k[--$j]; /*26961*/
			var _Z = $k[--$j]; /*26962*/
			$k[$j++] = _X; /*26962*/
			$search(_Z, "("); /*26962*/
			if ($k[--$j]) {
				/*26965*/
				var _b = $k[--$j]; /*26963*/
				var _c = $k[--$j]; /*26963*/
				var _d = $k[--$j]; /*26963*/
				var _e = $k[--$j]; /*26963*/
				$k[$j++] = _d; /*26963*/
				$k[$j++] = _e; /*26963*/
				$k[$j++] = _b; /*26963*/
			} else {
				/*26965*/
				var _f = $k[--$j]; /*26965*/
				var _g = $k[--$j]; /*26965*/
				$k[$j++] = ""; /*26965*/
				$k[$j++] = _g; /*26965*/
				$k[$j++] = _f; /*26965*/
			} /*26965*/
			$k[$j++] = Infinity; /*26967*/
			$aload($1.ais); /*26967*/
			var _j = $k[$j - 1 - ($counttomark() + 2)]; /*26967*/
			$k[$j++] = _j; /*26967*/
			$1.ais = $a(); /*26967*/
			$k[$j++] = Infinity; /*26968*/
			$aload($1.vals); /*26968*/
			var _n = $k[$j - 1 - ($counttomark() + 1)]; /*26968*/
			$k[$j++] = _n; /*26968*/
			$1.expand(); /*26968*/
			$1.vals = $a(); /*26968*/
			$j -= 2; /*26969*/
		} /*26969*/
		$j--; /*26971*/
		$1.aifixed = new Map; /*26976*/
		$k[$j++] = Infinity; /*26978*/
		for (var _p = 0; _p <= 4; _p += 1) {
			/*26978*/
			$k[$j++] = _p; /*26978*/
		} /*26978*/
		var _q = $a(); /*26978*/
		for (var _r = 0, _s = _q.length; _r < _s; _r++) {
			/*26981*/
			var _v = $strcpy($s(2), "00"); /*26980*/
			$put(_v, 1, $get(_q, _r) + 48); /*26980*/
			$put($1.aifixed, _v, _v); /*26980*/
		} /*26980*/
		$k[$j++] = Infinity; /*26986*/
		for (var _x = 11; _x <= 20; _x += 1) {
			/*26983*/
			$k[$j++] = _x; /*26983*/
		} /*26983*/
		$k[$j++] = 23; /*26985*/
		for (var _y = 31; _y <= 36; _y += 1) {
			/*26985*/
			$k[$j++] = _y; /*26985*/
		} /*26985*/
		$k[$j++] = 41; /*26986*/
		var _z = $a(); /*26986*/
		for (var _10 = 0, _11 = _z.length; _10 < _11; _10++) {
			/*26989*/
			var _14 = $cvrs($s(2), $get(_z, _10), 10); /*26988*/
			$put($1.aifixed, _14, _14); /*26988*/
		} /*26988*/
		$1.fnc1 = -1; /*26992*/
		$1.qrc = $a([$1.fnc1]); /*26993*/
		for (var _1A = 0, _19 = $1.ais.length - 1; _1A <= _19; _1A += 1) {
			/*27009*/
			$1.i = _1A; /*26995*/
			$1.ai = $get($1.ais, $1.i); /*26996*/
			$1.val = $get($1.vals, $1.i); /*26997*/
			var _1K = $a(($1.qrc.length + $1.ai.length) + $1.val.length); /*26998*/
			$puti(_1K, 0, $1.qrc); /*26999*/
			$k[$j++] = _1K; /*27000*/
			$k[$j++] = _1K; /*27000*/
			$k[$j++] = $1.qrc.length; /*27000*/
			$k[$j++] = $1.ai; /*27000*/
			$k[$j++] = Infinity; /*27000*/
			var _1O = $k[--$j]; /*27000*/
			var _1P = $k[--$j]; /*27000*/
			$k[$j++] = _1O; /*27000*/
			$forall(_1P); /*27000*/
			var _1Q = $a(); /*27000*/
			var _1R = $k[--$j]; /*27000*/
			$puti($k[--$j], _1R, _1Q); /*27000*/
			var _1T = $k[--$j]; /*27001*/
			$k[$j++] = _1T; /*27001*/
			$k[$j++] = _1T; /*27001*/
			$k[$j++] = $1.qrc.length + $1.ai.length; /*27001*/
			$k[$j++] = $1.val; /*27001*/
			$k[$j++] = Infinity; /*27001*/
			var _1X = $k[--$j]; /*27001*/
			var _1Y = $k[--$j]; /*27001*/
			$k[$j++] = _1X; /*27001*/
			$forall(_1Y); /*27001*/
			var _1Z = $a(); /*27001*/
			var _1a = $k[--$j]; /*27001*/
			$puti($k[--$j], _1a, _1Z); /*27001*/
			$1.qrc = $k[--$j]; /*27002*/
			var _1i = $get($1.aifixed, $geti($1.ai, 0, 2)) !== undefined; /*27003*/
			if (($1.i != ($1.ais.length - 1)) && (!_1i)) { //no-else/*27008*/
				var _1k = $a($1.qrc.length + 1); /*27004*/
				$puti(_1k, 0, $1.qrc); /*27005*/
				$put(_1k, $1.qrc.length, $1.fnc1); /*27006*/
				$1.qrc = _1k; /*27007*/
			} /*27007*/
		} /*27007*/
		$1.barcode = $s(($1.qrc.length + 1) * 5); /*27012*/
		$1.i = 0; /*27013*/
		$1.j = 0; /*27013*/
		for (;;) {
			/*27023*/
			if ($1.i == $1.qrc.length) { //no-else/*27014*/
				break; /*27014*/
			} /*27014*/
			var _1u = $get($1.qrc, $1.i); /*27015*/
			$k[$j++] = _1u; /*27020*/
			if (_1u == $1.fnc1) {
				/*27019*/
				$j--; /*27016*/
				$puti($1.barcode, $1.j, "^FNC1"); /*27016*/
				$1.j = $1.j + 4; /*27017*/
			} else {
				/*27019*/
				$put($1.barcode, $1.j, $k[--$j]); /*27019*/
			} /*27019*/
			$1.i = $1.i + 1; /*27021*/
			$1.j = $1.j + 1; /*27022*/
		} /*27022*/
		$1.barcode = $geti($1.barcode, 0, $1.j); /*27024*/
		$put($1.options, "dontdraw", true); /*27027*/
		$put($1.options, "parsefnc", true); /*27028*/
		$k[$j++] = 'args'; /*27029*/
		$k[$j++] = $1.barcode; /*27029*/
		$k[$j++] = $1.options; /*27029*/
		$0.qrcode(); /*27029*/
		var _2B = $k[--$j]; /*27029*/
		$1[$k[--$j]] = _2B; /*27029*/
		$put($1.args, "opt", $1.options); /*27031*/
		$k[$j++] = $1.args; /*27034*/
		if (!$1.dontdraw) { //no-else/*27034*/
			$0.renmatrix(); /*27034*/
		} /*27034*/
	};
	$0.hibccode39 = function() {
		var $1 = {}; /*27064*/
		$1.options = $k[--$j]; /*27066*/
		$1.barcode = $k[--$j]; /*27067*/
		$1.dontdraw = false; /*27069*/
		$1.textfont = "OCR-B"; /*27070*/
		$1.textsize = 10; /*27071*/
		$1.textyoffset = -8.5; /*27072*/
		$1.textxoffset = 0; /*27073*/
		$1.validatecheck = false; /*27074*/
		$forall($1.options, function() {
			/*27085*/
			var _3 = $k[--$j]; /*27085*/
			$1[$k[--$j]] = _3; /*27085*/
		}); /*27085*/
		$1.textfont = "" + $1.textfont; /*27087*/
		$1.textsize = +$1.textsize; /*27088*/
		$1.textyoffset = +$1.textyoffset; /*27089*/
		$1.textxoffset = +$1.textxoffset; /*27090*/
		$1.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; /*27093*/
		$1.charvals = new Map; /*27094*/
		for (var _9 = 0; _9 <= 42; _9 += 1) {
			/*27095*/
			$put($1.charvals, $geti($1.barchars, _9, 1), _9); /*27095*/
		} /*27095*/
		for (var _F = 0, _E = $1.barcode.length - 1; _F <= _E; _F += 1) {
			/*27102*/
			var _J = $get($1.charvals, $geti($1.barcode, _F, 1)) !== undefined; /*27099*/
			if (!_J) { //no-else/*27101*/
				$k[$j++] = 'bwipp.hibccode39badCharacter'; /*27100*/
				$k[$j++] = "HIBC Code 39 must contain only digits, capital letters, spaces and the symbols -.$/+%"; /*27100*/
				$0.raiseerror(); /*27100*/
			} /*27100*/
		} /*27100*/
		$k[$j++] = 'barlen'; /*27104*/
		$k[$j++] = $1.barcode.length; /*27104*/
		if ($1.validatecheck) { //no-else/*27104*/
			var _M = $k[--$j]; /*27104*/
			$k[$j++] = _M - 1; /*27104*/
		} /*27104*/
		var _N = $k[--$j]; /*27104*/
		$1[$k[--$j]] = _N; /*27104*/
		$1.checksum = 41; /*27106*/
		for (var _R = 0, _Q = $1.barlen - 1; _R <= _Q; _R += 1) {
			/*27110*/
			$1.checksum = $get($1.charvals, $geti($1.barcode, _R, 1)) + $1.checksum; /*27109*/
		} /*27109*/
		$1.checksum = $1.checksum % 43; /*27111*/
		if ($1.validatecheck) { //no-else/*27117*/
			if ($get($1.barcode, $1.barlen) != $get($1.barchars, $1.checksum)) { //no-else/*27115*/
				$k[$j++] = 'bwipp.hibccode39badCheckDigit'; /*27114*/
				$k[$j++] = "Incorrect HIBC Code 39 check digit provided"; /*27114*/
				$0.raiseerror(); /*27114*/
			} /*27114*/
			$1.barcode = $geti($1.barcode, 0, $1.barlen); /*27116*/
		} /*27116*/
		var _j = $s($1.barlen + 2); /*27119*/
		$puti(_j, 1, $1.barcode); /*27119*/
		$1.barcode = _j; /*27119*/
		$put($1.barcode, 0, 43); /*27120*/
		$put($1.barcode, $1.barlen + 1, $get($1.barchars, $1.checksum)); /*27121*/
		$1.text = $s($1.barlen + 4); /*27123*/
		$put($1.text, 0, 42); /*27124*/
		$puti($1.text, 1, $1.barcode); /*27125*/
		var _10 = $get($1.barcode, $1.barlen + 1); /*27126*/
		$k[$j++] = $1.text; /*27126*/
		$k[$j++] = $1.barlen + 2; /*27126*/
		$k[$j++] = _10; /*27126*/
		if (_10 == 32) { //no-else/*27126*/
			$j--; /*27126*/
			$k[$j++] = 95; /*27126*/
		} /*27126*/
		var _11 = $k[--$j]; /*27126*/
		var _12 = $k[--$j]; /*27126*/
		$put($k[--$j], _12, _11); /*27126*/
		$put($1.text, $1.barlen + 3, 42); /*27127*/
		$put($1.options, "dontdraw", true); /*27130*/
		$put($1.options, "includecheck", false); /*27131*/
		$put($1.options, "validatecheck", false); /*27132*/
		$k[$j++] = 'args'; /*27133*/
		$k[$j++] = $1.barcode; /*27133*/
		$k[$j++] = $1.options; /*27133*/
		$0.code39(); /*27133*/
		var _1B = $k[--$j]; /*27133*/
		$1[$k[--$j]] = _1B; /*27133*/
		$put($1.args, "txt", $a([$a([$1.text, $1.textxoffset, $1.textyoffset, $1.textfont, $1.textsize])])); /*27135*/
		$put($1.args, "textxalign", "center"); /*27136*/
		$put($1.args, "opt", $1.options); /*27137*/
		$k[$j++] = $1.args; /*27140*/
		if (!$1.dontdraw) { //no-else/*27140*/
			$0.renlinear(); /*27140*/
		} /*27140*/
	};
	$0.hibccode128 = function() {
		var $1 = {}; /*27170*/
		$1.options = $k[--$j]; /*27172*/
		$1.barcode = $k[--$j]; /*27173*/
		$1.dontdraw = false; /*27175*/
		$1.textfont = "OCR-B"; /*27176*/
		$1.textsize = 10; /*27177*/
		$1.textyoffset = -8.5; /*27178*/
		$1.textxoffset = 0; /*27179*/
		$1.validatecheck = false; /*27180*/
		$forall($1.options, function() {
			/*27191*/
			var _3 = $k[--$j]; /*27191*/
			$1[$k[--$j]] = _3; /*27191*/
		}); /*27191*/
		$1.textfont = "" + $1.textfont; /*27193*/
		$1.textsize = +$1.textsize; /*27194*/
		$1.textyoffset = +$1.textyoffset; /*27195*/
		$1.textxoffset = +$1.textxoffset; /*27196*/
		$1.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; /*27199*/
		$1.charvals = new Map; /*27200*/
		for (var _9 = 0; _9 <= 42; _9 += 1) {
			/*27201*/
			$put($1.charvals, $geti($1.barchars, _9, 1), _9); /*27201*/
		} /*27201*/
		for (var _F = 0, _E = $1.barcode.length - 1; _F <= _E; _F += 1) {
			/*27208*/
			var _J = $get($1.charvals, $geti($1.barcode, _F, 1)) !== undefined; /*27205*/
			if (!_J) { //no-else/*27207*/
				$k[$j++] = 'bwipp.hibccode128badCharacter'; /*27206*/
				$k[$j++] = "HIBC Code 128 must contain only digits, capital letters, spaces and the symbols -.$/+%"; /*27206*/
				$0.raiseerror(); /*27206*/
			} /*27206*/
		} /*27206*/
		$k[$j++] = 'barlen'; /*27210*/
		$k[$j++] = $1.barcode.length; /*27210*/
		if ($1.validatecheck) { //no-else/*27210*/
			var _M = $k[--$j]; /*27210*/
			$k[$j++] = _M - 1; /*27210*/
		} /*27210*/
		var _N = $k[--$j]; /*27210*/
		$1[$k[--$j]] = _N; /*27210*/
		$1.checksum = 41; /*27212*/
		for (var _R = 0, _Q = $1.barlen - 1; _R <= _Q; _R += 1) {
			/*27216*/
			$1.checksum = $get($1.charvals, $geti($1.barcode, _R, 1)) + $1.checksum; /*27215*/
		} /*27215*/
		$1.checksum = $1.checksum % 43; /*27217*/
		if ($1.validatecheck) { //no-else/*27223*/
			if ($get($1.barcode, $1.barlen) != $get($1.barchars, $1.checksum)) { //no-else/*27221*/
				$k[$j++] = 'bwipp.hibccode128badCheckDigit'; /*27220*/
				$k[$j++] = "Incorrect HIBC Code 128 check digit provided"; /*27220*/
				$0.raiseerror(); /*27220*/
			} /*27220*/
			$1.barcode = $geti($1.barcode, 0, $1.barlen); /*27222*/
		} /*27222*/
		var _j = $s($1.barlen + 2); /*27225*/
		$puti(_j, 1, $1.barcode); /*27225*/
		$1.barcode = _j; /*27225*/
		$put($1.barcode, 0, 43); /*27226*/
		$put($1.barcode, $1.barlen + 1, $get($1.barchars, $1.checksum)); /*27227*/
		$1.text = $s($1.barlen + 4); /*27229*/
		$put($1.text, 0, 42); /*27230*/
		$puti($1.text, 1, $1.barcode); /*27231*/
		var _10 = $get($1.barcode, $1.barlen + 1); /*27232*/
		$k[$j++] = $1.text; /*27232*/
		$k[$j++] = $1.barlen + 2; /*27232*/
		$k[$j++] = _10; /*27232*/
		if (_10 == 32) { //no-else/*27232*/
			$j--; /*27232*/
			$k[$j++] = 95; /*27232*/
		} /*27232*/
		var _11 = $k[--$j]; /*27232*/
		var _12 = $k[--$j]; /*27232*/
		$put($k[--$j], _12, _11); /*27232*/
		$put($1.text, $1.barlen + 3, 42); /*27233*/
		$put($1.options, "dontdraw", true); /*27236*/
		$put($1.options, "validatecheck", false); /*27237*/
		$k[$j++] = 'args'; /*27238*/
		$k[$j++] = $1.barcode; /*27238*/
		$k[$j++] = $1.options; /*27238*/
		$0.code128(); /*27238*/
		var _1A = $k[--$j]; /*27238*/
		$1[$k[--$j]] = _1A; /*27238*/
		$put($1.args, "txt", $a([$a([$1.text, $1.textxoffset, $1.textyoffset, $1.textfont, $1.textsize])])); /*27240*/
		$put($1.args, "textxalign", "center"); /*27241*/
		$put($1.args, "opt", $1.options); /*27242*/
		$k[$j++] = $1.args; /*27245*/
		if (!$1.dontdraw) { //no-else/*27245*/
			$0.renlinear(); /*27245*/
		} /*27245*/
	};
	$0.hibcdatamatrix = function() {
		var $1 = {}; /*27275*/
		$1.options = $k[--$j]; /*27277*/
		$1.barcode = $k[--$j]; /*27278*/
		$1.dontdraw = false; /*27280*/
		$1.validatecheck = false; /*27281*/
		$forall($1.options, function() {
			/*27292*/
			var _3 = $k[--$j]; /*27292*/
			$1[$k[--$j]] = _3; /*27292*/
		}); /*27292*/
		$1.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; /*27295*/
		$1.charvals = new Map; /*27296*/
		for (var _5 = 0; _5 <= 42; _5 += 1) {
			/*27297*/
			$put($1.charvals, $geti($1.barchars, _5, 1), _5); /*27297*/
		} /*27297*/
		for (var _B = 0, _A = $1.barcode.length - 1; _B <= _A; _B += 1) {
			/*27304*/
			var _F = $get($1.charvals, $geti($1.barcode, _B, 1)) !== undefined; /*27301*/
			if (!_F) { //no-else/*27303*/
				$k[$j++] = 'bwipp.hibcdatamatrixBadCharacter'; /*27302*/
				$k[$j++] = "HIBC Data Matrix must contain only digits, capital letters, spaces and the symbols -.$/+%"; /*27302*/
				$0.raiseerror(); /*27302*/
			} /*27302*/
		} /*27302*/
		$k[$j++] = 'barlen'; /*27306*/
		$k[$j++] = $1.barcode.length; /*27306*/
		if ($1.validatecheck) { //no-else/*27306*/
			var _I = $k[--$j]; /*27306*/
			$k[$j++] = _I - 1; /*27306*/
		} /*27306*/
		var _J = $k[--$j]; /*27306*/
		$1[$k[--$j]] = _J; /*27306*/
		$1.checksum = 41; /*27308*/
		for (var _N = 0, _M = $1.barlen - 1; _N <= _M; _N += 1) {
			/*27312*/
			$1.checksum = $get($1.charvals, $geti($1.barcode, _N, 1)) + $1.checksum; /*27311*/
		} /*27311*/
		$1.checksum = $1.checksum % 43; /*27313*/
		if ($1.validatecheck) { //no-else/*27319*/
			if ($get($1.barcode, $1.barlen) != $get($1.barchars, $1.checksum)) { //no-else/*27317*/
				$k[$j++] = 'bwipp.hibcdatamatrixBadCheckDigit'; /*27316*/
				$k[$j++] = "Incorrect HIBC Data Matrix check digit provided"; /*27316*/
				$0.raiseerror(); /*27316*/
			} /*27316*/
			$1.barcode = $geti($1.barcode, 0, $1.barlen); /*27318*/
		} /*27318*/
		var _f = $s($1.barlen + 2); /*27321*/
		$puti(_f, 1, $1.barcode); /*27321*/
		$1.barcode = _f; /*27321*/
		$put($1.barcode, 0, 43); /*27322*/
		$put($1.barcode, $1.barlen + 1, $get($1.barchars, $1.checksum)); /*27323*/
		$put($1.options, "dontdraw", true); /*27326*/
		$put($1.options, "validatecheck", false); /*27327*/
		$k[$j++] = 'args'; /*27328*/
		$k[$j++] = $1.barcode; /*27328*/
		$k[$j++] = $1.options; /*27328*/
		$0.datamatrix(); /*27328*/
		var _r = $k[--$j]; /*27328*/
		$1[$k[--$j]] = _r; /*27328*/
		$put($1.args, "opt", $1.options); /*27330*/
		$k[$j++] = $1.args; /*27333*/
		if (!$1.dontdraw) { //no-else/*27333*/
			$0.renmatrix(); /*27333*/
		} /*27333*/
	};
	$0.hibcdatamatrixrectangular = function() {
		var $1 = {}; /*27363*/
		$1.options = $k[--$j]; /*27365*/
		$1.barcode = $k[--$j]; /*27366*/
		$1.dontdraw = false; /*27368*/
		$1.validatecheck = false; /*27369*/
		$forall($1.options, function() {
			/*27380*/
			var _3 = $k[--$j]; /*27380*/
			$1[$k[--$j]] = _3; /*27380*/
		}); /*27380*/
		$1.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; /*27383*/
		$1.charvals = new Map; /*27384*/
		for (var _5 = 0; _5 <= 42; _5 += 1) {
			/*27385*/
			$put($1.charvals, $geti($1.barchars, _5, 1), _5); /*27385*/
		} /*27385*/
		for (var _B = 0, _A = $1.barcode.length - 1; _B <= _A; _B += 1) {
			/*27392*/
			var _F = $get($1.charvals, $geti($1.barcode, _B, 1)) !== undefined; /*27389*/
			if (!_F) { //no-else/*27391*/
				$k[$j++] = 'bwipp.hibcdatamatrixrectangularBadCharacter'; /*27390*/
				$k[$j++] = "HIBC Data Matrix Rectangular must contain only digits, capital letters, spaces and the symbols -.$/+%"; /*27390*/
				$0.raiseerror(); /*27390*/
			} /*27390*/
		} /*27390*/
		$k[$j++] = 'barlen'; /*27394*/
		$k[$j++] = $1.barcode.length; /*27394*/
		if ($1.validatecheck) { //no-else/*27394*/
			var _I = $k[--$j]; /*27394*/
			$k[$j++] = _I - 1; /*27394*/
		} /*27394*/
		var _J = $k[--$j]; /*27394*/
		$1[$k[--$j]] = _J; /*27394*/
		$1.checksum = 41; /*27396*/
		for (var _N = 0, _M = $1.barlen - 1; _N <= _M; _N += 1) {
			/*27400*/
			$1.checksum = $get($1.charvals, $geti($1.barcode, _N, 1)) + $1.checksum; /*27399*/
		} /*27399*/
		$1.checksum = $1.checksum % 43; /*27401*/
		if ($1.validatecheck) { //no-else/*27407*/
			if ($get($1.barcode, $1.barlen) != $get($1.barchars, $1.checksum)) { //no-else/*27405*/
				$k[$j++] = 'bwipp.hibcdatamatrixrectangularBadCheckDigit'; /*27404*/
				$k[$j++] = "Incorrect HIBC Data Matrix Rectangular check digit provided"; /*27404*/
				$0.raiseerror(); /*27404*/
			} /*27404*/
			$1.barcode = $geti($1.barcode, 0, $1.barlen); /*27406*/
		} /*27406*/
		var _f = $s($1.barlen + 2); /*27409*/
		$puti(_f, 1, $1.barcode); /*27409*/
		$1.barcode = _f; /*27409*/
		$put($1.barcode, 0, 43); /*27410*/
		$put($1.barcode, $1.barlen + 1, $get($1.barchars, $1.checksum)); /*27411*/
		$put($1.options, "dontdraw", true); /*27414*/
		$put($1.options, "validatecheck", false); /*27415*/
		$put($1.options, "format", "rectangle"); /*27416*/
		$k[$j++] = 'args'; /*27417*/
		$k[$j++] = $1.barcode; /*27417*/
		$k[$j++] = $1.options; /*27417*/
		$0.datamatrix(); /*27417*/
		var _s = $k[--$j]; /*27417*/
		$1[$k[--$j]] = _s; /*27417*/
		$put($1.args, "opt", $1.options); /*27419*/
		$k[$j++] = $1.args; /*27422*/
		if (!$1.dontdraw) { //no-else/*27422*/
			$0.renmatrix(); /*27422*/
		} /*27422*/
	};
	$0.hibcpdf417 = function() {
		var $1 = {}; /*27452*/
		$1.options = $k[--$j]; /*27454*/
		$1.barcode = $k[--$j]; /*27455*/
		$1.dontdraw = false; /*27457*/
		$1.columns = 2; /*27458*/
		$1.validatecheck = false; /*27459*/
		$forall($1.options, function() {
			/*27470*/
			var _3 = $k[--$j]; /*27470*/
			$1[$k[--$j]] = _3; /*27470*/
		}); /*27470*/
		$1.columns = ~~$1.columns; /*27472*/
		$1.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; /*27475*/
		$1.charvals = new Map; /*27476*/
		for (var _6 = 0; _6 <= 42; _6 += 1) {
			/*27477*/
			$put($1.charvals, $geti($1.barchars, _6, 1), _6); /*27477*/
		} /*27477*/
		for (var _C = 0, _B = $1.barcode.length - 1; _C <= _B; _C += 1) {
			/*27484*/
			var _G = $get($1.charvals, $geti($1.barcode, _C, 1)) !== undefined; /*27481*/
			if (!_G) { //no-else/*27483*/
				$k[$j++] = 'bwipp.hibcpdf417BadCharacter'; /*27482*/
				$k[$j++] = "HIBC PDF417 must contain only digits, capital letters, spaces and the symbols -.$/+%"; /*27482*/
				$0.raiseerror(); /*27482*/
			} /*27482*/
		} /*27482*/
		$k[$j++] = 'barlen'; /*27486*/
		$k[$j++] = $1.barcode.length; /*27486*/
		if ($1.validatecheck) { //no-else/*27486*/
			var _J = $k[--$j]; /*27486*/
			$k[$j++] = _J - 1; /*27486*/
		} /*27486*/
		var _K = $k[--$j]; /*27486*/
		$1[$k[--$j]] = _K; /*27486*/
		$1.checksum = 41; /*27488*/
		for (var _O = 0, _N = $1.barlen - 1; _O <= _N; _O += 1) {
			/*27492*/
			$1.checksum = $get($1.charvals, $geti($1.barcode, _O, 1)) + $1.checksum; /*27491*/
		} /*27491*/
		$1.checksum = $1.checksum % 43; /*27493*/
		if ($1.validatecheck) { //no-else/*27499*/
			if ($get($1.barcode, $1.barlen) != $get($1.barchars, $1.checksum)) { //no-else/*27497*/
				$k[$j++] = 'bwipp.hibcpdf417BadCheckDigit'; /*27496*/
				$k[$j++] = "Incorrect HIBC PDF417 check digit provided"; /*27496*/
				$0.raiseerror(); /*27496*/
			} /*27496*/
			$1.barcode = $geti($1.barcode, 0, $1.barlen); /*27498*/
		} /*27498*/
		var _g = $s($1.barlen + 2); /*27501*/
		$puti(_g, 1, $1.barcode); /*27501*/
		$1.barcode = _g; /*27501*/
		$put($1.barcode, 0, 43); /*27502*/
		$put($1.barcode, $1.barlen + 1, $get($1.barchars, $1.checksum)); /*27503*/
		$put($1.options, "dontdraw", true); /*27506*/
		$put($1.options, "columns", $1.columns); /*27507*/
		$put($1.options, "validatecheck", false); /*27508*/
		$k[$j++] = 'args'; /*27509*/
		$k[$j++] = $1.barcode; /*27509*/
		$k[$j++] = $1.options; /*27509*/
		$0.pdf417(); /*27509*/
		var _u = $k[--$j]; /*27509*/
		$1[$k[--$j]] = _u; /*27509*/
		$put($1.args, "opt", $1.options); /*27511*/
		$k[$j++] = $1.args; /*27514*/
		if (!$1.dontdraw) { //no-else/*27514*/
			$0.renmatrix(); /*27514*/
		} /*27514*/
	};
	$0.hibcmicropdf417 = function() {
		var $1 = {}; /*27544*/
		$1.options = $k[--$j]; /*27546*/
		$1.barcode = $k[--$j]; /*27547*/
		$1.dontdraw = false; /*27549*/
		$1.columns = 2; /*27550*/
		$1.validatecheck = false; /*27551*/
		$forall($1.options, function() {
			/*27562*/
			var _3 = $k[--$j]; /*27562*/
			$1[$k[--$j]] = _3; /*27562*/
		}); /*27562*/
		$1.columns = ~~$1.columns; /*27564*/
		$1.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; /*27567*/
		$1.charvals = new Map; /*27568*/
		for (var _6 = 0; _6 <= 42; _6 += 1) {
			/*27569*/
			$put($1.charvals, $geti($1.barchars, _6, 1), _6); /*27569*/
		} /*27569*/
		for (var _C = 0, _B = $1.barcode.length - 1; _C <= _B; _C += 1) {
			/*27576*/
			var _G = $get($1.charvals, $geti($1.barcode, _C, 1)) !== undefined; /*27573*/
			if (!_G) { //no-else/*27575*/
				$k[$j++] = 'bwipp.hibcmicropdf417BadCharacter'; /*27574*/
				$k[$j++] = "HIBC MicroPDF417 must contain only digits, capital letters, spaces and the symbols -.$/+%"; /*27574*/
				$0.raiseerror(); /*27574*/
			} /*27574*/
		} /*27574*/
		$k[$j++] = 'barlen'; /*27578*/
		$k[$j++] = $1.barcode.length; /*27578*/
		if ($1.validatecheck) { //no-else/*27578*/
			var _J = $k[--$j]; /*27578*/
			$k[$j++] = _J - 1; /*27578*/
		} /*27578*/
		var _K = $k[--$j]; /*27578*/
		$1[$k[--$j]] = _K; /*27578*/
		$1.checksum = 41; /*27580*/
		for (var _O = 0, _N = $1.barlen - 1; _O <= _N; _O += 1) {
			/*27584*/
			$1.checksum = $get($1.charvals, $geti($1.barcode, _O, 1)) + $1.checksum; /*27583*/
		} /*27583*/
		$1.checksum = $1.checksum % 43; /*27585*/
		if ($1.validatecheck) { //no-else/*27591*/
			if ($get($1.barcode, $1.barlen) != $get($1.barchars, $1.checksum)) { //no-else/*27589*/
				$k[$j++] = 'bwipp.hibcmicropdf417BadCheckDigit'; /*27588*/
				$k[$j++] = "Incorrect HIBC MicroPDF417 check digit provided"; /*27588*/
				$0.raiseerror(); /*27588*/
			} /*27588*/
			$1.barcode = $geti($1.barcode, 0, $1.barlen); /*27590*/
		} /*27590*/
		var _g = $s($1.barlen + 2); /*27593*/
		$puti(_g, 1, $1.barcode); /*27593*/
		$1.barcode = _g; /*27593*/
		$put($1.barcode, 0, 43); /*27594*/
		$put($1.barcode, $1.barlen + 1, $get($1.barchars, $1.checksum)); /*27595*/
		$put($1.options, "dontdraw", true); /*27598*/
		$put($1.options, "columns", $1.columns); /*27599*/
		$put($1.options, "validatecheck", false); /*27600*/
		$k[$j++] = 'args'; /*27601*/
		$k[$j++] = $1.barcode; /*27601*/
		$k[$j++] = $1.options; /*27601*/
		$0.micropdf417(); /*27601*/
		var _u = $k[--$j]; /*27601*/
		$1[$k[--$j]] = _u; /*27601*/
		$put($1.args, "opt", $1.options); /*27603*/
		$k[$j++] = $1.args; /*27606*/
		if (!$1.dontdraw) { //no-else/*27606*/
			$0.renmatrix(); /*27606*/
		} /*27606*/
	};
	$0.hibcqrcode = function() {
		var $1 = {}; /*27636*/
		$1.options = $k[--$j]; /*27638*/
		$1.barcode = $k[--$j]; /*27639*/
		$1.dontdraw = false; /*27641*/
		$1.validatecheck = false; /*27642*/
		$forall($1.options, function() {
			/*27653*/
			var _3 = $k[--$j]; /*27653*/
			$1[$k[--$j]] = _3; /*27653*/
		}); /*27653*/
		$1.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; /*27656*/
		$1.charvals = new Map; /*27657*/
		for (var _5 = 0; _5 <= 42; _5 += 1) {
			/*27658*/
			$put($1.charvals, $geti($1.barchars, _5, 1), _5); /*27658*/
		} /*27658*/
		for (var _B = 0, _A = $1.barcode.length - 1; _B <= _A; _B += 1) {
			/*27665*/
			var _F = $get($1.charvals, $geti($1.barcode, _B, 1)) !== undefined; /*27662*/
			if (!_F) { //no-else/*27664*/
				$k[$j++] = 'bwipp.hibcqrcodeBadCharacter'; /*27663*/
				$k[$j++] = "HIBC QR Code must contain only digits, capital letters, spaces and the symbols -.$/+%"; /*27663*/
				$0.raiseerror(); /*27663*/
			} /*27663*/
		} /*27663*/
		$k[$j++] = 'barlen'; /*27667*/
		$k[$j++] = $1.barcode.length; /*27667*/
		if ($1.validatecheck) { //no-else/*27667*/
			var _I = $k[--$j]; /*27667*/
			$k[$j++] = _I - 1; /*27667*/
		} /*27667*/
		var _J = $k[--$j]; /*27667*/
		$1[$k[--$j]] = _J; /*27667*/
		$1.checksum = 41; /*27669*/
		for (var _N = 0, _M = $1.barlen - 1; _N <= _M; _N += 1) {
			/*27673*/
			$1.checksum = $get($1.charvals, $geti($1.barcode, _N, 1)) + $1.checksum; /*27672*/
		} /*27672*/
		$1.checksum = $1.checksum % 43; /*27674*/
		if ($1.validatecheck) { //no-else/*27680*/
			if ($get($1.barcode, $1.barlen) != $get($1.barchars, $1.checksum)) { //no-else/*27678*/
				$k[$j++] = 'bwipp.hibcqrcodeBadCheckDigit'; /*27677*/
				$k[$j++] = "Incorrect HIBC QR Code check digit provided"; /*27677*/
				$0.raiseerror(); /*27677*/
			} /*27677*/
			$1.barcode = $geti($1.barcode, 0, $1.barlen); /*27679*/
		} /*27679*/
		var _f = $s($1.barlen + 2); /*27682*/
		$puti(_f, 1, $1.barcode); /*27682*/
		$1.barcode = _f; /*27682*/
		$put($1.barcode, 0, 43); /*27683*/
		$put($1.barcode, $1.barlen + 1, $get($1.barchars, $1.checksum)); /*27684*/
		$put($1.options, "dontdraw", true); /*27687*/
		$put($1.options, "validatecheck", false); /*27688*/
		$k[$j++] = 'args'; /*27689*/
		$k[$j++] = $1.barcode; /*27689*/
		$k[$j++] = $1.options; /*27689*/
		$0.qrcode(); /*27689*/
		var _r = $k[--$j]; /*27689*/
		$1[$k[--$j]] = _r; /*27689*/
		$put($1.args, "opt", $1.options); /*27691*/
		$k[$j++] = $1.args; /*27694*/
		if (!$1.dontdraw) { //no-else/*27694*/
			$0.renmatrix(); /*27694*/
		} /*27694*/
	};
	$0.hibccodablockf = function() {
		var $1 = {}; /*27724*/
		$1.options = $k[--$j]; /*27726*/
		$1.barcode = $k[--$j]; /*27727*/
		$1.dontdraw = false; /*27729*/
		$1.validatecheck = false; /*27730*/
		$forall($1.options, function() {
			/*27741*/
			var _3 = $k[--$j]; /*27741*/
			$1[$k[--$j]] = _3; /*27741*/
		}); /*27741*/
		$1.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; /*27744*/
		$1.charvals = new Map; /*27745*/
		for (var _5 = 0; _5 <= 42; _5 += 1) {
			/*27746*/
			$put($1.charvals, $geti($1.barchars, _5, 1), _5); /*27746*/
		} /*27746*/
		for (var _B = 0, _A = $1.barcode.length - 1; _B <= _A; _B += 1) {
			/*27753*/
			var _F = $get($1.charvals, $geti($1.barcode, _B, 1)) !== undefined; /*27750*/
			if (!_F) { //no-else/*27752*/
				$k[$j++] = 'bwipp.codablockfBadCharacter'; /*27751*/
				$k[$j++] = "HIBC Codablock F must contain only digits, capital letters, spaces and the symbols -.$/+%"; /*27751*/
				$0.raiseerror(); /*27751*/
			} /*27751*/
		} /*27751*/
		$k[$j++] = 'barlen'; /*27755*/
		$k[$j++] = $1.barcode.length; /*27755*/
		if ($1.validatecheck) { //no-else/*27755*/
			var _I = $k[--$j]; /*27755*/
			$k[$j++] = _I - 1; /*27755*/
		} /*27755*/
		var _J = $k[--$j]; /*27755*/
		$1[$k[--$j]] = _J; /*27755*/
		$1.checksum = 41; /*27757*/
		for (var _N = 0, _M = $1.barlen - 1; _N <= _M; _N += 1) {
			/*27761*/
			$1.checksum = $get($1.charvals, $geti($1.barcode, _N, 1)) + $1.checksum; /*27760*/
		} /*27760*/
		$1.checksum = $1.checksum % 43; /*27762*/
		if ($1.validatecheck) { //no-else/*27768*/
			if ($get($1.barcode, $1.barlen) != $get($1.barchars, $1.checksum)) { //no-else/*27766*/
				$k[$j++] = 'bwipp.hibccodablockfBadCheckDigit'; /*27765*/
				$k[$j++] = "Incorrect HIBC Codablock F check digit provided"; /*27765*/
				$0.raiseerror(); /*27765*/
			} /*27765*/
			$1.barcode = $geti($1.barcode, 0, $1.barlen); /*27767*/
		} /*27767*/
		var _f = $s($1.barlen + 2); /*27770*/
		$puti(_f, 1, $1.barcode); /*27770*/
		$1.barcode = _f; /*27770*/
		$put($1.barcode, 0, 43); /*27771*/
		$put($1.barcode, $1.barlen + 1, $get($1.barchars, $1.checksum)); /*27772*/
		$put($1.options, "dontdraw", true); /*27775*/
		$put($1.options, "validatecheck", false); /*27776*/
		$k[$j++] = 'args'; /*27777*/
		$k[$j++] = $1.barcode; /*27777*/
		$k[$j++] = $1.options; /*27777*/
		$0.codablockf(); /*27777*/
		var _r = $k[--$j]; /*27777*/
		$1[$k[--$j]] = _r; /*27777*/
		$put($1.args, "opt", $1.options); /*27779*/
		$k[$j++] = $1.args; /*27782*/
		if (!$1.dontdraw) { //no-else/*27782*/
			$0.renmatrix(); /*27782*/
		} /*27782*/
	};
	$0.hibcazteccode = function() {
		var $1 = {}; /*27812*/
		$1.options = $k[--$j]; /*27814*/
		$1.barcode = $k[--$j]; /*27815*/
		$1.dontdraw = false; /*27817*/
		$1.validatecheck = false; /*27818*/
		$forall($1.options, function() {
			/*27829*/
			var _3 = $k[--$j]; /*27829*/
			$1[$k[--$j]] = _3; /*27829*/
		}); /*27829*/
		$1.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; /*27832*/
		$1.charvals = new Map; /*27833*/
		for (var _5 = 0; _5 <= 42; _5 += 1) {
			/*27834*/
			$put($1.charvals, $geti($1.barchars, _5, 1), _5); /*27834*/
		} /*27834*/
		for (var _B = 0, _A = $1.barcode.length - 1; _B <= _A; _B += 1) {
			/*27841*/
			var _F = $get($1.charvals, $geti($1.barcode, _B, 1)) !== undefined; /*27838*/
			if (!_F) { //no-else/*27840*/
				$k[$j++] = 'bwipp.hibcazteccodeBadCharacter'; /*27839*/
				$k[$j++] = "HIBC Aztec Code must contain only digits, capital letters, spaces and the symbols -.$/+%"; /*27839*/
				$0.raiseerror(); /*27839*/
			} /*27839*/
		} /*27839*/
		$k[$j++] = 'barlen'; /*27843*/
		$k[$j++] = $1.barcode.length; /*27843*/
		if ($1.validatecheck) { //no-else/*27843*/
			var _I = $k[--$j]; /*27843*/
			$k[$j++] = _I - 1; /*27843*/
		} /*27843*/
		var _J = $k[--$j]; /*27843*/
		$1[$k[--$j]] = _J; /*27843*/
		$1.checksum = 41; /*27845*/
		for (var _N = 0, _M = $1.barlen - 1; _N <= _M; _N += 1) {
			/*27849*/
			$1.checksum = $get($1.charvals, $geti($1.barcode, _N, 1)) + $1.checksum; /*27848*/
		} /*27848*/
		$1.checksum = $1.checksum % 43; /*27850*/
		if ($1.validatecheck) { //no-else/*27856*/
			if ($get($1.barcode, $1.barlen) != $get($1.barchars, $1.checksum)) { //no-else/*27854*/
				$k[$j++] = 'bwipp.hibcazteccodeBadCheckDigit'; /*27853*/
				$k[$j++] = "Incorrect HIBC Aztec Code check digit provided"; /*27853*/
				$0.raiseerror(); /*27853*/
			} /*27853*/
			$1.barcode = $geti($1.barcode, 0, $1.barlen); /*27855*/
		} /*27855*/
		var _f = $s($1.barlen + 2); /*27858*/
		$puti(_f, 1, $1.barcode); /*27858*/
		$1.barcode = _f; /*27858*/
		$put($1.barcode, 0, 43); /*27859*/
		$put($1.barcode, $1.barlen + 1, $get($1.barchars, $1.checksum)); /*27860*/
		$put($1.options, "dontdraw", true); /*27863*/
		$put($1.options, "validatecheck", false); /*27864*/
		$k[$j++] = 'args'; /*27865*/
		$k[$j++] = $1.barcode; /*27865*/
		$k[$j++] = $1.options; /*27865*/
		$0.azteccode(); /*27865*/
		var _r = $k[--$j]; /*27865*/
		$1[$k[--$j]] = _r; /*27865*/
		$put($1.args, "opt", $1.options); /*27867*/
		$k[$j++] = $1.args; /*27870*/
		if (!$1.dontdraw) { //no-else/*27870*/
			$0.renmatrix(); /*27870*/
		} /*27870*/
	};
	$0.channelcode = function() {
		var $1 = {}; /*27900*/
		$1.options = $k[--$j]; /*27902*/
		$1.barcode = $k[--$j]; /*27903*/
		$1.dontdraw = false; /*27905*/
		$1.shortfinder = false; /*27906*/
		$1.includetext = false; /*27907*/
		$1.includecheck = false; /*27908*/
		$1.height = 1; /*27909*/
		$forall($1.options, function() {
			/*27920*/
			var _3 = $k[--$j]; /*27920*/
			$1[$k[--$j]] = _3; /*27920*/
		}); /*27920*/
		$1.height = +$1.height; /*27922*/
		if (($1.barcode.length < 2) || ($1.barcode.length > 7)) { //no-else/*27927*/
			$k[$j++] = 'bwipp.channelcodeBadLength'; /*27926*/
			$k[$j++] = "Channel Code must be 2 to 7 digits"; /*27926*/
			$0.raiseerror(); /*27926*/
		} /*27926*/
		$forall($1.barcode, function() {
			/*27932*/
			var _9 = $k[--$j]; /*27929*/
			if ((_9 < 48) || (_9 > 57)) { //no-else/*27931*/
				$k[$j++] = 'bwipp.channelcodeBadCharacter'; /*27930*/
				$k[$j++] = "Channel Code must contain only digits"; /*27930*/
				$0.raiseerror(); /*27930*/
			} /*27930*/
		}); /*27930*/
		if ((~~$z($1.barcode)) > $get($a([26, 292, 3493, 44072, 576688, 7742862]), $1.barcode.length - 2)) { //no-else/*27935*/
			$k[$j++] = 'bwipp.channelcodeTooBig'; /*27934*/
			$k[$j++] = "The Channel Code value is too big for the number of channels"; /*27934*/
			$0.raiseerror(); /*27934*/
		} /*27934*/
		$1.nextb = function() {
			var _E = $k[--$j]; /*27938*/
			var _N = (($get($1.s, _E) + ($get($1.b, _E - 1) + ($get($1.b, _E - 2) + $get($1.s, _E - 1)))) > 4) ? 1 : 2; /*27943*/
			$k[$j++] = _E; /*27959*/
			$k[$j++] = _N; /*27959*/
			if (_E < ($1.chan + 2)) {
				/*27957*/
				var _P = $k[--$j]; /*27945*/
				var _Q = $k[--$j]; /*27945*/
				var _R = $k[--$j]; /*27945*/
				$k[$j++] = _R; /*27948*/
				$k[$j++] = _Q; /*27948*/
				$k[$j++] = _P; /*27948*/
				for (var _T = _P, _S = _R; _T <= _S; _T += 1) {
					/*27948*/
					var _V = $k[--$j]; /*27946*/
					var _W = $k[--$j]; /*27946*/
					$put($1.b, _W, _T); /*27946*/
					var _X = $k[--$j]; /*27947*/
					var _Y = $k[--$j]; /*27947*/
					$k[$j++] = _Y; /*27947*/
					$k[$j++] = _X; /*27947*/
					$k[$j++] = _W; /*27947*/
					$k[$j++] = _V; /*27947*/
					$k[$j++] = (_X - _T) + 1; /*27947*/
					$k[$j++] = _Y; /*27947*/
					$k[$j++] = _W + 1; /*27947*/
					$1.nexts(); /*27947*/
				} /*27947*/
			} else {
				/*27957*/
				var _Z = $k[--$j]; /*27950*/
				var _a = $k[--$j]; /*27950*/
				var _b = $k[--$j]; /*27950*/
				$k[$j++] = _b; /*27958*/
				$k[$j++] = _a; /*27958*/
				$k[$j++] = _Z; /*27958*/
				if ($le(_Z, _b)) { //no-else/*27958*/
					var _d = $k[--$j]; /*27951*/
					var _e = $k[--$j]; /*27951*/
					var _f = $k[--$j]; /*27951*/
					$put($1.b, _e, _f); /*27951*/
					$k[$j++] = _f; /*27956*/
					$k[$j++] = _e; /*27956*/
					$k[$j++] = _d; /*27956*/
					if ($1.value == $1.target) { //no-else/*27956*/
						$k[$j++] = Infinity; /*27954*/
						for (var _i = 3; _i <= 10; _i += 1) {
							/*27954*/
							$k[$j++] = $get($1.s, _i); /*27954*/
							$k[$j++] = $get($1.b, _i); /*27954*/
						} /*27954*/
						$1.out = $geti($a(), 0, $1.chan * 2); /*27955*/
					} /*27955*/
					$1.value = $1.value + 1; /*27957*/
				} /*27957*/
			} /*27957*/
			$j -= 4; /*27960*/
		}; /*27961*/
		$1.nexts = function() {
			var _r = $k[--$j]; /*27964*/
			$k[$j++] = _r; /*27964*/
			if (_r < ($1.chan + 2)) {
				/*27964*/
				$k[$j++] = 1; /*27964*/
			} else {
				/*27964*/
				var _t = $k[--$j]; /*27964*/
				var _u = $k[--$j]; /*27964*/
				$k[$j++] = _u; /*27964*/
				$k[$j++] = _t; /*27964*/
				$k[$j++] = _u; /*27964*/
			} /*27964*/
			var _v = $k[--$j]; /*27964*/
			var _w = $k[--$j]; /*27964*/
			var _x = $k[--$j]; /*27964*/
			$k[$j++] = _x; /*27967*/
			$k[$j++] = _w; /*27967*/
			for (var _z = _v, _y = _x; _z <= _y; _z += 1) {
				/*27967*/
				var _11 = $k[--$j]; /*27965*/
				$put($1.s, _11, _z); /*27965*/
				var _12 = $k[--$j]; /*27966*/
				var _13 = $k[--$j]; /*27966*/
				$k[$j++] = _13; /*27966*/
				$k[$j++] = _12; /*27966*/
				$k[$j++] = _11; /*27966*/
				$k[$j++] = (_12 - _z) + 1; /*27966*/
				$k[$j++] = _13; /*27966*/
				$k[$j++] = _11; /*27966*/
				$1.nextb(); /*27966*/
			} /*27966*/
			$j -= 3; /*27968*/
		}; /*27969*/
		$1.encode = function() {
			$1.chan = $k[--$j]; /*27972*/
			$1.target = $k[--$j]; /*27973*/
			$1.value = 0; /*27974*/
			$1.out = -1; /*27975*/
			$1.b = $a([1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]); /*27976*/
			$1.s = $a([0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]); /*27977*/
			var _18 = $1.chan; /*27978*/
			$k[$j++] = _18; /*27978*/
			$k[$j++] = _18; /*27978*/
			$k[$j++] = 3; /*27978*/
			$1.nexts(); /*27978*/
			$k[$j++] = $1.out; /*27979*/
		}; /*27980*/
		$1.barlen = $1.barcode.length; /*27982*/
		$k[$j++] = 'finder'; /*27985*/
		if ($1.shortfinder) {
			/*27985*/
			$k[$j++] = $a([1, 1, 1, 1, 1]); /*27985*/
		} else {
			/*27985*/
			$k[$j++] = $a([1, 1, 1, 1, 1, 1, 1, 1, 1]); /*27985*/
		} /*27985*/
		var _1E = $k[--$j]; /*27985*/
		$1[$k[--$j]] = _1E; /*27985*/
		$k[$j++] = 'data'; /*27988*/
		$k[$j++] = ~~$z($1.barcode); /*27988*/
		$k[$j++] = $1.barlen + 1; /*27988*/
		$1.encode(); /*27988*/
		var _1I = $k[--$j]; /*27988*/
		$1[$k[--$j]] = _1I; /*27988*/
		$1.check = $a([]); /*27991*/
		if ($1.includecheck) { //no-else/*28007*/
			$1.mod23 = $get($a([$a([]), $a([]), $a([13, 12, 4, 9, 3, 1]), $a([13, 2, 12, 3, 18, 16, 4, 1]), $a([11, 16, 17, 8, 20, 4, 10, 2, 5, 1]), $a([1, 4, 16, 18, 3, 12, 2, 8, 9, 13, 6, 1]), $a([20, 16, 22, 13, 15, 12, 5, 4, 8, 9, 21, 3, 7, 1]), $a([2, 6, 18, 8, 1, 3, 9, 4, 12, 13, 16, 2, 6, 18, 8, 1])]), $1.barlen); /*28001*/
			$k[$j++] = 0; /*28005*/
			for (var _1Z = 0, _1Y = $1.data.length - 1; _1Z <= _1Y; _1Z += 1) {
				/*28005*/
				var _1e = $k[--$j]; /*28004*/
				$k[$j++] = _1e + (($get($1.data, _1Z) - 1) * $get($1.mod23, _1Z)); /*28004*/
			} /*28004*/
			var _1f = $k[--$j]; /*28006*/
			$k[$j++] = _1f % 23; /*28006*/
			$k[$j++] = 3; /*28006*/
			$1.encode(); /*28006*/
			$1.check = $k[--$j]; /*28006*/
		} /*28006*/
		$k[$j++] = Infinity; /*28013*/
		$aload($1.finder); /*28011*/
		$aload($1.data); /*28012*/
		$aload($1.check); /*28013*/
		$1.sbs = $a(); /*28013*/
		$1.txt = $a($1.barlen); /*28017*/
		for (var _1p = 0, _1o = $1.barlen - 1; _1p <= _1o; _1p += 1) {
			/*28021*/
			$1.i = _1p; /*28019*/
			$put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), 0, 0, "", 0])); /*28020*/
		} /*28020*/
		$k[$j++] = Infinity; /*28031*/
		var _1w = $1.sbs; /*28026*/
		$k[$j++] = Infinity; /*28027*/
		for (var _1y = 0, _1z = ~~(($1.sbs.length + 1) / 2); _1y < _1z; _1y++) {
			/*28027*/
			$k[$j++] = $1.height; /*28027*/
		} /*28027*/
		var _21 = $a(); /*28027*/
		$k[$j++] = Infinity; /*28028*/
		for (var _23 = 0, _24 = ~~(($1.sbs.length + 1) / 2); _23 < _24; _23++) {
			/*28028*/
			$k[$j++] = 0; /*28028*/
		} /*28028*/
		var _25 = $a(); /*28028*/
		$k[$j++] = 'ren'; /*28031*/
		$k[$j++] = $0.renlinear; /*28031*/
		$k[$j++] = 'sbs'; /*28031*/
		$k[$j++] = _1w; /*28031*/
		$k[$j++] = 'bhs'; /*28031*/
		$k[$j++] = _21; /*28031*/
		$k[$j++] = 'bbs'; /*28031*/
		$k[$j++] = _25; /*28031*/
		$k[$j++] = 'txt'; /*28031*/
		$k[$j++] = $1.txt; /*28031*/
		$k[$j++] = 'textxalign'; /*28031*/
		$k[$j++] = "center"; /*28031*/
		$k[$j++] = 'opt'; /*28031*/
		$k[$j++] = $1.options; /*28031*/
		var _28 = $d(); /*28031*/
		$k[$j++] = _28; /*28034*/
		if (!$1.dontdraw) { //no-else/*28034*/
			$0.renlinear(); /*28034*/
		} /*28034*/
	};
	$0.renlinear = function() {
		if ($0.bwipjs_dontdraw) { //no-else/*28055*/
			return; /*28055*/
		} /*28055*/
		var $1 = {}; /*28056*/
		$1.args = $k[--$j]; /*28058*/
		$1.sbs = $a([]); /*28061*/
		$1.bhs = $a([]); /*28062*/
		$1.bbs = $a([]); /*28063*/
		$1.txt = $a([]); /*28064*/
		$1.barcolor = "unset"; /*28065*/
		$1.includetext = false; /*28066*/
		$1.textcolor = "unset"; /*28067*/
		$1.textxalign = "unset"; /*28068*/
		$1.textyalign = "unset"; /*28069*/
		$1.textfont = "OCR-B"; /*28070*/
		$1.textsize = 10; /*28071*/
		$1.textxoffset = 0; /*28072*/
		$1.textyoffset = 0; /*28073*/
		$1.textgaps = 0; /*28074*/
		$1.alttext = ""; /*28075*/
		$1.bordercolor = "unset"; /*28076*/
		$1.backgroundcolor = "unset"; /*28077*/
		$1.inkspread = 0; /*28078*/
		$1.width = 0; /*28079*/
		$1.barratio = 1; /*28080*/
		$1.spaceratio = 1; /*28081*/
		$1.showborder = false; /*28082*/
		$1.borderleft = 10; /*28083*/
		$1.borderright = 10; /*28084*/
		$1.bordertop = 1; /*28085*/
		$1.borderbottom = 1; /*28086*/
		$1.borderwidth = 0.5; /*28087*/
		$1.guardwhitespace = false; /*28088*/
		$1.guardleftpos = 0; /*28089*/
		$1.guardleftypos = 0; /*28090*/
		$1.guardrightpos = 0; /*28091*/
		$1.guardrightypos = 0; /*28092*/
		$1.guardwidth = 7; /*28093*/
		$1.guardheight = 7; /*28094*/
		$forall($1.args, function() {
			/*28097*/
			var _7 = $k[--$j]; /*28097*/
			$1[$k[--$j]] = _7; /*28097*/
		}); /*28097*/
		var _9 = $1.opt; /*28098*/
		for (var _E = _9.size, _D = _9.keys(), _C = 0; _C < _E; _C++) {
			/*28098*/
			var _A = _D.next().value; /*28098*/
			$1[_A] = _9.get(_A); /*28098*/
		} /*28098*/
		$1.barcolor = "" + $1.barcolor; /*28100*/
		$1.textcolor = "" + $1.textcolor; /*28101*/
		$1.textxalign = "" + $1.textxalign; /*28102*/
		$1.textyalign = "" + $1.textyalign; /*28103*/
		$1.textfont = "" + $1.textfont; /*28104*/
		$1.textsize = +$1.textsize; /*28105*/
		$1.textxoffset = +$1.textxoffset; /*28106*/
		$1.textyoffset = +$1.textyoffset; /*28107*/
		$1.textgaps = +$1.textgaps; /*28108*/
		$1.alttext = "" + $1.alttext; /*28109*/
		$1.bordercolor = "" + $1.bordercolor; /*28110*/
		$1.backgroundcolor = "" + $1.backgroundcolor; /*28111*/
		$1.inkspread = +$1.inkspread; /*28112*/
		$1.width = +$1.width; /*28113*/
		$1.barratio = +$1.barratio; /*28114*/
		$1.spaceratio = +$1.spaceratio; /*28115*/
		$1.borderleft = +$1.borderleft; /*28116*/
		$1.borderright = +$1.borderright; /*28117*/
		$1.bordertop = +$1.bordertop; /*28118*/
		$1.borderbottom = +$1.borderbottom; /*28119*/
		$1.borderwidth = +$1.borderwidth; /*28120*/
		$1.guardleftpos = +$1.guardleftpos; /*28121*/
		$1.guardleftypos = +$1.guardleftypos; /*28122*/
		$1.guardrightpos = +$1.guardrightpos; /*28123*/
		$1.guardrightypos = +$1.guardrightypos; /*28124*/
		$1.guardwidth = +$1.guardwidth; /*28125*/
		$1.guardheight = +$1.guardheight; /*28126*/
		$1.bars = $a(~~(($1.sbs.length + 1) / 2)); /*28129*/
		$1.x = 0; /*28130*/
		$1.maxh = 0; /*28130*/
		for (var _k = 0, _j = ((~~(($1.sbs.length + 1) / 2)) * 2) - 2; _k <= _j; _k += 1) {
			/*28149*/
			$1.i = _k; /*28132*/
			if (($1.i % 2) == 0) {
				/*28146*/
				$1.d = (($get($1.sbs, $1.i) * $1.barratio) - $1.barratio) + 1; /*28134*/
				if ($get($1.sbs, $1.i) != 0) {
					/*28143*/
					$1.h = $get($1.bhs, ~~($1.i / 2)) * 72; /*28136*/
					$1.c = ($1.d / 2) + $1.x; /*28137*/
					$1.y = $get($1.bbs, ~~($1.i / 2)) * 72; /*28138*/
					$1.w = $1.d - $1.inkspread; /*28139*/
					$put($1.bars, ~~($1.i / 2), $a([$1.h, $1.c, $1.y, $1.w])); /*28140*/
					if (($1.h + $1.y) > $1.maxh) { //no-else/*28141*/
						$1.maxh = $1.h + $1.y; /*28141*/
					} /*28141*/
				} else {
					/*28143*/
					$put($1.bars, ~~($1.i / 2), -1); /*28143*/
				} /*28143*/
			} else {
				/*28146*/
				$1.d = (($get($1.sbs, $1.i) * $1.spaceratio) - $1.spaceratio) + 1; /*28146*/
			} /*28146*/
			$1.x = $1.x + $1.d; /*28148*/
		} /*28148*/
		$$.save(); /*28151*/
		var _1P = $$.currpos(); /*28153*/
		$$.translate(_1P.x, _1P.y); /*28153*/
		if ($1.width != 0) { //no-else/*28158*/
			$$.scale(($1.width * 72) / $1.x, 1); /*28157*/
		} /*28157*/
		$$.newpath(); /*28161*/
		$$.moveto(-$1.borderleft, -$1.borderbottom); /*28162*/
		$$.rlineto(($1.x + $1.borderleft) + $1.borderright, 0); /*28163*/
		$$.rlineto(0, ($1.maxh + $1.borderbottom) + $1.bordertop); /*28164*/
		$$.rlineto(-(($1.x + $1.borderleft) + $1.borderright), 0); /*28165*/
		$$.rlineto(0, -(($1.maxh + $1.borderbottom) + $1.bordertop)); /*28166*/
		$$.closepath(); /*28167*/
		if ($1.showborder) { //no-else/*28175*/
			$$.save(); /*28171*/
			if ($ne($1.bordercolor, "unset")) { //no-else/*28172*/
				$$.setcolor($1.bordercolor); /*28172*/
			} /*28172*/
			$$.setlinewidth($1.borderwidth); /*28173*/
			$$.stroke(); /*28173*/
			$$.restore(); /*28174*/
		} /*28174*/
		$$.save(); /*28178*/
		if ($ne($1.barcolor, "unset")) { //no-else/*28180*/
			$$.setcolor($1.barcolor); /*28180*/
		} /*28180*/
		var _1n = $1.bars; /*28181*/
		for (var _1o = 0, _1p = _1n.length; _1o < _1p; _1o++) {
			/*28187*/
			var _1q = $get(_1n, _1o); /*28187*/
			$k[$j++] = _1q; /*28186*/
			if (_1q != -1) {
				/*28185*/
				$aload($k[--$j]); /*28183*/
				$$.newpath(); /*28183*/
				$$.setlinewidth($k[--$j]); /*28183*/
				var _1t = $k[--$j]; /*28183*/
				$$.moveto($k[--$j], _1t); /*28183*/
				$$.rlineto(0, $k[--$j]); /*28183*/
				$$.stroke(); /*28183*/
			} else {
				/*28185*/
				$j--; /*28185*/
			} /*28185*/
		} /*28185*/
		$$.restore(); /*28188*/
		if ($ne($1.textcolor, "unset")) { //no-else/*28191*/
			$$.setcolor($1.textcolor); /*28191*/
		} /*28191*/
		if ($1.includetext) { //no-else/*28248*/
			if (($eq($1.textxalign, "unset") && $eq($1.textyalign, "unset")) && $eq($1.alttext, "")) {
				/*28246*/
				$1.s = 0; /*28194*/
				$1.fn = ""; /*28194*/
				var _22 = $1.txt; /*28195*/
				for (var _23 = 0, _24 = _22.length; _23 < _24; _23++) {
					/*28204*/
					$forall($get(_22, _23)); /*28196*/
					var _26 = $k[--$j]; /*28197*/
					var _27 = $k[--$j]; /*28197*/
					$k[$j++] = _27; /*28202*/
					$k[$j++] = _26; /*28202*/
					if ((_26 != $1.s) || $ne(_27, $1.fn)) {
						/*28201*/
						var _2A = $k[--$j]; /*28198*/
						var _2B = $k[--$j]; /*28198*/
						$1.s = _2A; /*28198*/
						$1.fn = _2B; /*28198*/
						$$.selectfont(_2B, _2A); /*28199*/
					} else {
						/*28201*/
						$j -= 2; /*28201*/
					} /*28201*/
					var _2C = $k[--$j]; /*28203*/
					$$.moveto($k[--$j], _2C); /*28203*/
					$$.show($k[--$j], 0, 0); /*28203*/
				} /*28203*/
			} else {
				/*28246*/
				$$.selectfont($1.textfont, $1.textsize); /*28206*/
				if ($eq($1.alttext, "")) {
					/*28212*/
					$k[$j++] = Infinity; /*28208*/
					var _2I = $1.txt; /*28208*/
					for (var _2J = 0, _2K = _2I.length; _2J < _2K; _2J++) {
						/*28208*/
						$forall($get($get(_2I, _2J), 0)); /*28208*/
					} /*28208*/
					$1.txt = $a(); /*28208*/
					$1.tstr = $s($1.txt.length); /*28209*/
					for (var _2S = 0, _2R = $1.txt.length - 1; _2S <= _2R; _2S += 1) {
						/*28210*/
						$put($1.tstr, _2S, $get($1.txt, _2S)); /*28210*/
					} /*28210*/
				} else {
					/*28212*/
					$1.tstr = $1.alttext; /*28212*/
				} /*28212*/
				if ($1.tstr.length == 0) {
					/*28222*/
					$k[$j++] = 0; /*28217*/
				} else {
					/*28222*/
					$$.save(); /*28219*/
					$$.newpath(); /*28220*/
					$$.moveto(0, 0); /*28220*/
					$$.charpath("0", false); /*28220*/
					var _2Y = $$.pathbbox(); /*28220*/
					$$.restore(); /*28222*/
					$k[$j++] = _2Y.ury; /*28222*/
				} /*28222*/
				$1.textascent = $k[--$j]; /*28231*/
				var _2b = $$.stringwidth($1.tstr); /*28232*/
				$1.textwidth = _2b.w + (($1.tstr.length - 1) * $1.textgaps); /*28232*/
				$1.textxpos = $1.textxoffset + (($1.x - $1.textwidth) / 2); /*28234*/
				if ($eq($1.textxalign, "left")) { //no-else/*28235*/
					$1.textxpos = $1.textxoffset; /*28235*/
				} /*28235*/
				if ($eq($1.textxalign, "right")) { //no-else/*28236*/
					$1.textxpos = ($1.x - $1.textxoffset) - $1.textwidth; /*28236*/
				} /*28236*/
				if ($eq($1.textxalign, "offleft")) { //no-else/*28237*/
					$1.textxpos = -($1.textwidth + $1.textxoffset); /*28237*/
				} /*28237*/
				if ($eq($1.textxalign, "offright")) { //no-else/*28238*/
					$1.textxpos = $1.x + $1.textxoffset; /*28238*/
				} /*28238*/
				if ($eq($1.textxalign, "justify") && ($1.textwidth < $1.x)) { //no-else/*28242*/
					$1.textxpos = 0; /*28240*/
					$1.textgaps = ($1.x - $1.textwidth) / ($1.tstr.length - 1); /*28241*/
				} /*28241*/
				$1.textypos = -(($1.textyoffset + $1.textascent) + 1); /*28243*/
				if ($eq($1.textyalign, "above")) { //no-else/*28244*/
					$1.textypos = ($1.textyoffset + $1.maxh) + 1; /*28244*/
				} /*28244*/
				if ($eq($1.textyalign, "center")) { //no-else/*28245*/
					$1.textypos = $1.textyoffset + (($1.maxh - $1.textascent) / 2); /*28245*/
				} /*28245*/
				$$.moveto($1.textxpos, $1.textypos); /*28246*/
				$$.show($1.tstr, $1.textgaps, 0); /*28246*/
			} /*28246*/
		} /*28246*/
		if ($1.guardwhitespace) { //no-else/*28261*/
			$$.selectfont("OCR-B", $1.guardheight * 2); /*28252*/
			if ($1.guardleftpos != 0) { //no-else/*28256*/
				$$.moveto((-$1.guardleftpos) - 1, ($1.guardleftypos - ($1.guardheight / 2)) - 1.5); /*28254*/
				$$.show("<", 0, 0); /*28255*/
			} /*28255*/
			if ($1.guardrightpos != 0) { //no-else/*28260*/
				$$.moveto((($1.guardrightpos + $1.x) - $1.guardwidth) + 1, ($1.guardrightypos - ($1.guardheight / 2)) - 1.5); /*28258*/
				$$.show(">", 0, 0); /*28259*/
			} /*28259*/
		} /*28259*/
		$$.restore(); /*28263*/
	};
	$0.renmaximatrix = function() {
		if ($0.bwipjs_dontdraw) { //no-else/*28283*/
			return; /*28283*/
		} /*28283*/
		var $1 = {}; /*28285*/
		$1.args = $k[--$j]; /*28287*/
		$1.barcolor = "unset"; /*28290*/
		$1.backgroundcolor = "unset"; /*28291*/
		$forall($1.args, function() {
			/*28294*/
			var _3 = $k[--$j]; /*28294*/
			$1[$k[--$j]] = _3; /*28294*/
		}); /*28294*/
		var _5 = $1.opt; /*28295*/
		for (var _A = _5.size, _9 = _5.keys(), _8 = 0; _8 < _A; _8++) {
			/*28295*/
			var _6 = _9.next().value; /*28295*/
			$1[_6] = _5.get(_6); /*28295*/
		} /*28295*/
		$1.barcolor = "" + $1.barcolor; /*28297*/
		$1.backgroundcolor = "" + $1.backgroundcolor; /*28298*/
		$$.save(); /*28300*/
		if ($ne($1.barcolor, "unset")) { //no-else/*28302*/
			$$.setcolor($1.barcolor); /*28302*/
		} /*28302*/
		$$.maxicode($1.pixs); /*28303*/
		$$.restore(); /*28305*/
	};
	// bwip-js/barcode-ftr.js
	//
	// This code is injected below the cross-compiled barcode.ps.

	// The BWIPP symbol is a factory object.  When called, it returns this
	// function, which is a re-usable postscript emulation for BWIPP.
	return function(bwipjs, encoder, text, opts, dontdraw) {
		if (!$0[encoder]) {
			throw new Error('bwipp.unknownEncoder: ' + encoder);
		}
		if (typeof text !== 'string') {
			throw new Error('bwipp.typeError: barcode text not a string (' +
				text + ')');
		}
		opts = opts || {};
		if (typeof opts === 'string') {
			var tmp = opts.split(' ');
			opts = {};
			for (var i = 0; i < tmp.length; i++) {
				if (!tmp[i]) {
					continue;
				}
				var eq = tmp[i].indexOf('=');
				if (eq == -1) {
					opts[tmp[i]] = true;
				} else {
					opts[tmp[i].substr(0, eq)] = tmp[i].substr(eq + 1);
				}
			}
		} else if (typeof opts !== 'object' || opts.constructor !== Object) {
			throw new Error('bwipp.typeError: options not an object');
		}

		// Convert utf-16 to utf-8 but leave binary (8-bit) strings untouched.
		if (/[\u0100-\uffff]/.test(text)) {
			text = unescape(encodeURIComponent(text));
		}

		// Handle the `parse` option here rather than in BWIPP - eliminates
		// conflict with the parsefnc option and allows removing the parsing
		// code from BWIPP.
		if (opts.parse) {
			text = text.replace(/\^(\d\d\d)/g, function($0, $1) {
				var v = +$1;
				if (v > 255) {
					throw new Error('bwipp.rangeError:' +
						' ^NNN out-of-range (' + $0 + ')');
				}
				return String.fromCharCode(v);
			});
			delete opts.parse;
		}

		// Don't draw? (See file runtest)
		$0.bwipjs_dontdraw = opts.dontdraw || dontdraw || false;

		// Convert opts to a Map
		var map = new Map;
		for (var id in opts) {
			if (opts.hasOwnProperty(id)) {
				map.set(id, opts[id]);
			}
		}

		// Invoke the encoder
		$$ = bwipjs;
		$k = [text, map];
		$j = 2;
		$0[encoder]();

		// Return what is left on the stack.  This branch should only be taken
		// when running with the dontdraw option.
		if ($j) {
			return $k.splice(0, $j);
		}

		return true;
	}
}
BWIPP.VERSION = '2020-10-02';
// file : bwipjs.js
//
// Graphics-context interface to the BWIPP cross-compiled code

var BWIPJS = (function() {
"use strict";

// Math.floor(), etc. are notoriously slow.  Caching seems to help.
var floor = Math.floor;
var round = Math.round;
var ceil  = Math.ceil;
var min	  = Math.min;
var max	  = Math.max;

function BWIPJS(drawing) {
	if (this.constructor !== BWIPJS) {
		return new BWIPJS(drawing);
	}
	this.gstk	 = [];		// Graphics save/restore stack
	this.cmds	 = [];		// Graphics primitives to replay when rendering
	this.drawing = drawing;	// Drawing interface

	this.reset();

	// Drawing surface bounding box
	this.minx = this.miny = Infinity;
	this.maxx = this.maxy = -Infinity;
};

// All graphics state that must be saved/restored is given a prefix of g_
BWIPJS.prototype.reset = function() {
	// Current Transform Matrix - since we don't do rotation, we can fake
	// the matrix math
	this.g_tdx	= 0;		// CTM x-offset
	this.g_tdy	= 0;		// CTM y-offset
	this.g_tsx	= 1;		// CTM x-scale factor
	this.g_tsy	= 1;		// CTM y-scale factor

	this.g_posx	= 0;		// current x position
	this.g_posy	= 0;		// current y position
	this.g_penw	= 1;		// current line/pen width
	this.g_path	= [];		// current path
	this.g_font	= null;		// current font object
	this.g_rgb  = [0,0,0];	// current color (black)
};
BWIPJS.prototype.save = function() {
	// clone all g_ properties
	var ctx = {};
	for (var id in this) {
		if (id.indexOf('g_') == 0) {
			ctx[id] = clone(this[id]);
		}
	}
	this.gstk.push(ctx);

	// Perform a deep clone of the graphics state properties
	function clone(v) {
		if (v instanceof Array) {
			var t = [];
			for (var i = 0; i < v.length; i++)
				t[i] = clone(v[i]);
			return t;
		}
		if (v instanceof Object) {
			var t = {};
			for (var id in v)
				t[id] = clone(v[id]);
			return t;
		}
		return v;
	}
};
BWIPJS.prototype.restore = function() {
	if (!this.gstk.length) {
		throw new Error('grestore: stack underflow');
	}
	var ctx = this.gstk.pop();
	for (var id in ctx) {
		this[id] = ctx[id];
	}
};
// Per the postscript spec:
//	As discussed in Section 4.4.1, Current Path, points entered into a path
//	are immediately converted to device coordinates by the current
//	transformation matrix (CTM); subsequent modifications to the CTM do not
//	affect existing points.  `currentpoint` computes the user space
//	coordinates corresponding to the current point according to the current
//	value of the CTM. Thus, if a current point is set and then the CTM is
//	changed, the coordinates returned by currentpoint will be different
//	from those that were originally specified for the point. 
BWIPJS.prototype.currpos = function() {
	return { x:(this.g_posx-this.g_tdx)/this.g_tsx,
			 y:(this.g_posy-this.g_tdy)/this.g_tsy
		};
};
BWIPJS.prototype.currfont = function() {
	return this.g_font;
};
BWIPJS.prototype.translate = function(x, y) {
	this.g_tdx = this.g_tsx * x;
	this.g_tdy = this.g_tsy * y;
};
BWIPJS.prototype.scale = function(x, y) {
	this.g_tsx *= x;
	this.g_tsy *= y;
	var sxy = this.drawing.scale(this.g_tsx, this.g_tsy);
	if (sxy && sxy[0] && sxy[1]) {
		this.g_tsx = sxy[0];
		this.g_tsy = sxy[1];
	}
};
BWIPJS.prototype.setlinewidth = function(w) {
	this.g_penw = w;
};
BWIPJS.prototype.selectfont = function(f, z) {
	this.g_font = { FontName:this.jsstring(f), FontSize:+z };
};
BWIPJS.prototype.getfont = function() {
	return this.g_font.FontName;
};
// Special function for converting a Uint8Array string to string.
BWIPJS.prototype.jsstring = function(s) {
	if (s instanceof Uint8Array) {
		// Postscript (like C) treats nul-char as end of string.
		for (var i = 0, l = s.length; i < l && s[i]; i++);
		if (i < l) {
			return String.fromCharCode.apply(null,s.subarray(0, i));
		}
		return String.fromCharCode.apply(null,s)
	}
	return ''+s;
};
// Special function to replace setanycolor in BWIPP
// Takes a string of hex digits either 6 chars in length (rrggbb) or
// 8 chars (ccmmyykk).
BWIPJS.prototype.setcolor = function(s) {
	if (s instanceof Uint8Array) {
		s = this.jsstring(s);
	}
	if (s.length == 6) {
		var r = parseInt(s.substr(0,2), 16);
		var g = parseInt(s.substr(2,2), 16);
		var b = parseInt(s.substr(4,2), 16);
		this.g_rgb = [ r, g, b ];
	} else if (s.length == 8) {
		var c = parseInt(s.substr(0,2), 16) / 255;
		var m = parseInt(s.substr(2,2), 16) / 255;
		var y = parseInt(s.substr(4,2), 16) / 255;
		var k = parseInt(s.substr(6,2), 16) / 255;
		var r = round((1-c) * (1-k) * 255);
		var g = round((1-m) * (1-k) * 255);
		var b = round((1-y) * (1-k) * 255);
		this.g_rgb = [ r, g, b ];
	}
};
// Returns the current rgb values as a 'RRGGBB'
BWIPJS.prototype.getRGB = function() {
	var r = this.g_rgb[0].toString(16);
	var g = this.g_rgb[1].toString(16);
	var b = this.g_rgb[2].toString(16);
	return '00'.substr(r.length) + r + '00'.substr(g.length) + g + '00'.substr(b.length) + b;
};
BWIPJS.prototype.newpath = function() {
	this.g_path = [];
};
BWIPJS.prototype.closepath = function() {
	var path = this.g_path;
	var plen = path.length;
	if (!plen) return;

	var f = plen-1;
	for ( ; f >= 0 && path[f].op == 'l'; f--);
	f++;
	if (f < plen-1) {
		var poly = [];
		var xmin = Infinity;
		var ymin = Infinity;
		var xmax = -Infinity;
		var ymax = -Infinity;
		for (var i = f; i < plen; i++) {
			var a = path[i];
			poly.push([ a.x0, a.y0 ]);
			if (xmin > a.x0) xmin = a.x0;
			if (xmax < a.x0) xmax = a.x0;
			if (ymin > a.y0) ymin = a.y0;
			if (ymax < a.y0) ymax = a.y0;
		}
		var a = path[plen-1];
		var b = path[f];
		if (a.x1 != b.x0 || a.y1 != b.y0) {
			poly.push([ a.x1, a.y1 ]);
			if (xmin > a.x1) xmin = a.x1;
			if (xmax < a.x1) xmax = a.x1;
			if (ymin > a.y1) ymin = a.y1;
			if (ymax < a.y1) ymax = a.y1;
		}
		path.splice(f, plen-f,
					{ op:'p', x0:xmin, y0:ymin, x1:xmax, y1:ymax, poly:poly });
	} else {
		path.push({ op:'c' });
	}
};
BWIPJS.prototype.moveto = function(x,y) {
	this.g_posx = this.g_tdx + this.g_tsx * x;
	this.g_posy = this.g_tdy + this.g_tsy * y;
};
BWIPJS.prototype.rmoveto = function(x,y) {
	this.g_posx += this.g_tsx * x;
	this.g_posy += this.g_tsy * y;
};
BWIPJS.prototype.lineto = function(x,y) {
	var x0 = this.g_posx;
	var y0 = this.g_posy;
	var x1 = this.g_posx = this.g_tdx + this.g_tsx * x;
	var y1 = this.g_posy = this.g_tdy + this.g_tsy * y;

	this.g_path.push({ op:'l', x0:x0, y0:y0, x1:x1, y1:y1 });
};
BWIPJS.prototype.rlineto = function(x,y) {
	var x0 = this.g_posx;
	var y0 = this.g_posy;
	this.g_posx += this.g_tsx * x;
	this.g_posy += this.g_tsy * y;
	var x1 = this.g_posx;
	var y1 = this.g_posy;

	this.g_path.push({ op:'l', x0:x0, y0:y0, x1:x1, y1:y1 });
};
// implements both arc and arcn
BWIPJS.prototype.arc = function(x,y,r,sa,ea,ccw) {
	if (sa == ea) {
		return;
	}
	// For now, we only implement full circles...
	if (sa != 0 && sa != 360 || ea != 0 && ea != 360) {
		throw new Error('arc: not a full circle (' + sa + ',' + ea + ')');
	}

	x = this.g_tdx + this.g_tsx * x;
	y = this.g_tdy + this.g_tsy * y;

	// e == ellipse
	var rx = r * this.g_tsx;
	var ry = r * this.g_tsy;
	this.g_path.push({ op:'e', x0:x-rx, y0:y-ry, x1:x+rx, y1:y+ry,
								x:x, y:y, rx:rx, ry:ry, sa:sa, ea:ea, ccw:ccw });
};
BWIPJS.prototype.stringwidth = function(str) {
	var tsx  = this.g_tsx;
	var tsy  = this.g_tsy;
	var size = +this.g_font.FontSize || 10;

	// The string can be either a uint8-string or regular string
	str = this.jsstring(str);

	var bbox = this.drawing.measure(str, this.g_font.FontName, size*tsx, size*tsy);

	return { w:bbox.width/tsx, h:(bbox.ascent+bbox.descent)/tsy,
			 a:bbox.ascent/tsy, d:bbox.descent/tsy };
};
BWIPJS.prototype.charpath = function(str, b) {
	var sw = this.stringwidth(str);

	// Emulate the char-path by placing a rectangle around it
	this.rlineto(0, sw.a);
	this.rlineto(sw.w, 0);
	this.rlineto(0, -sw.h);
};
BWIPJS.prototype.pathbbox = function() {
	if (!this.g_path.length)	throw new Error('pathbbox: --nocurrentpoint--');
	var path = this.g_path;
	var llx = Infinity;
	var lly = Infinity;
	var urx = -Infinity;
	var ury = -Infinity;
	for (var i = 0; i < path.length; i++) {
		var a = path[i];
		if (a.op == 'c') {
			continue;
		}
		if (a.x0 < a.x1) {
			if (llx > a.x0) llx = a.x0;
			if (urx < a.x1) urx = a.x1;
		} else {
			if (llx > a.x1) llx = a.x1;
			if (urx < a.x0) urx = a.x0;
		}
		if (a.y0 < a.y1) {
			if (lly > a.y0) lly = a.y0;
			if (ury < a.y1) ury = a.y1;
		} else {
			if (lly > a.y1) lly = a.y1;
			if (ury < a.y0) ury = a.y0;
		}
	}

	// Convert to user-space coordinates
	var rv = {	llx:(llx-this.g_tdx)/this.g_tsx,
				lly:(lly-this.g_tdy)/this.g_tsy,
				urx:(urx-this.g_tdx)/this.g_tsx,
				ury:(ury-this.g_tdy)/this.g_tsy };
	return rv;
};
// Tranforms the pts array to standard (not y-inverted), unscalled values.
BWIPJS.prototype.transform = function(pts) {
	var minx = this.minx;
	var maxy = this.maxy;

	for (var i = 0; i < pts.length; i++) {
		var pt = pts[i];
		pt[0] = pt[0] - minx;
		pt[1] = maxy - pt[1];
	}
};
BWIPJS.prototype.stroke = function() {
	var tsx  = this.g_tsx;
	var tsy  = this.g_tsy;
	var path = this.g_path;
	var rgb  = this.getRGB();
	this.g_path = [];

	// This is a "super majority" round i.e. if over .66 round up.
	var penw = floor(this.g_penw * tsx + 0.66);
	var penh = floor(this.g_penw * tsy + 0.66);

	// Calculate the bounding boxes
	var nlines = 0, npolys = 0;
	for (var i = 0; i < path.length; i++) {
		var a = path[i];
		if (a.op == 'l') {
			// We only stroke vertical and horizontal lines.  Complex shapes are
			// always filled.
			if (a.x0 != a.x1 && a.y0 != a.y1) {
				throw new Error('stroke: --not-orthogonal--');
			}
			var x0 = a.x0;
			var y0 = a.y0;
			var x1 = a.x1;
			var y1 = a.y1;

			// Half widths (may be factional)
			var penw2 = penw/2;
			var penh2 = penh/2;

			if (x0 > x1) { var t = x0; x0 = x1; x1 = t; }
			if (y0 > y1) { var t = y0; y0 = y1; y1 = t; }
			if (x0 == x1) {
				this.bbox(x0-penw2, y0, x0+penw-penw2-1, y1); 	// vertical line
			} else {
				this.bbox(x0, y0-penh+penh2+1, x1, y1+penh2);	// horizontal line
			}
			nlines++;
		} else if (a.op == 'p') {
			// Closed (rectangular) poly (border around the barcode)
			var minx = Infinity;
			var miny = Infinity;
			var maxx = -Infinity;
			var maxy = -Infinity;
			var pts  = a.poly;
			if (pts.length != 4) {
				throw new Error('stroke: --not-a-rect--');
			}
			for (var i = 0, j = pts.length-1; i < pts.length; j = i++) {
				var xj = pts[j][0];
				var yj = pts[j][1];
				var xi = pts[i][0];
				var yi = pts[i][1];

				if (xi != xj && yi != yj) {
					throw new Error('stroke: --not-orthogonal--');
				}

				if (xi < minx) minx = xi;
				if (xi > maxx) maxx = xi;
				if (yi < miny) miny = yi;
				if (yi > maxy) maxy = yi;
			}

			// Half widths (integer)
			var penw2 = ceil(penw/2);
			var penh2 = ceil(penh/2);

			// We render these as two polygons plus a fill.
			// When border width is odd, allocate the bigger half to the outside.
			this.bbox(minx-penw2, miny-penh2, maxx+penw2, maxy+penh2);
			npolys++;
		} else {
			throw new Error('stroke: --not-a-line--');
		}
	}

	// Draw the lines
	var self = this;
	this.cmds.push(function() {
		// Half widths (big half and remaining half)
		var bigw2 = ceil(penw/2);
		var bigh2 = ceil(penh/2);
		var remw2 = penw - bigw2;
		var remh2 = penh - bigh2;

		for (var i = 0; i < path.length; i++) {
			var a = path[i]
			if (a.op == 'l') {
				var pts = [ [ a.x0, a.y0 ], [ a.x1, a.y1 ] ];
				self.transform(pts);
				self.drawing.line(pts[0][0], pts[0][1], pts[1][0], pts[1][1],
							a.x0 == a.x1 ? penw : penh, rgb);
				self.fill(rgb);
			} else {
				var pts = a.poly;
				self.transform(pts);
				var x0 = min(pts[0][0], pts[2][0]);
				var x1 = max(pts[0][0], pts[2][0]);
				var y0 = min(pts[0][1], pts[2][1]);
				var y1 = max(pts[0][1], pts[2][1]);

				// Top and left edges are "inside" the polygon.
				// Bottom and right edges are outside.
				self.drawing.polygon([
						[ x0-bigw2, y0-bigh2 ],
						[ x0-bigw2, y1+bigh2+1 ],
						[ x1+bigw2+1, y1+bigh2+1 ],
						[ x1+bigw2+1, y0-bigh2 ]
					]);
				self.drawing.polygon([
						[ x0+remw2, y0+remh2 ],
						[ x0+remw2, y1-remh2+1 ],
						[ x1-remw2+1, y1-remh2+1 ],
						[ x1-remw2+1, y0+remh2 ],
					]);
				self.drawing.fill(rgb);
			}
		}
	});
};
BWIPJS.prototype.fill = function() {
	var path = this.g_path;
	var rgb  = this.getRGB();
	this.g_path = [];

	// Calculate the bounding boxes
	for (var p = 0; p < path.length; p++) {
		var a = path[p];
		if (a.op == 'p') {  // polygon
			var minx = Infinity;
			var miny = Infinity;
			var maxx = -Infinity;
			var maxy = -Infinity;
			var pts  = a.poly;
			for (var i = 0; i < pts.length; i++) {
				var xi = pts[i][0];
				var yi = pts[i][1];

				if (xi < minx) minx = xi;
				if (xi > maxx) maxx = xi;
				if (yi < miny) miny = yi;
				if (yi > maxy) maxy = yi;
			}
			// With polygons, the right and bottom edges are "outside" and do not
			// contribute to the bounding box.  But we are in postscript inverted-y
			// mode.
			this.bbox(minx, miny+1, maxx-1, maxy);
		} else if (a.op == 'e') {	// ellipse
			this.bbox(a.x - a.rx, a.y - a.ry, a.x + a.rx, a.y + a.ry);
		} else {
			throw new Error('fill: --not-a-polygon--');
		}
	}

	// Render the poly
	var self = this;
	this.cmds.push(function() {
		for (var i = 0; i < path.length; i++) {
			var a = path[i];
			if (a.op == 'p') {
				var pts = a.poly
				self.transform(pts);
				self.drawing.polygon(pts);
			} else if (a.op == 'e') {
				var pts = [ [ a.x, a.y ] ];
				self.transform(pts);
				self.drawing.ellipse(pts[0][0], pts[0][1], a.rx, a.ry, a.ccw);
			}
		}
		self.drawing.fill(rgb);
	});
};

// The pix array is in standard (not y-inverted postscript) orientation.
BWIPJS.prototype.maxicode = function(pix) {
	var tsx = this.g_tsx;
	var tsy = this.g_tsy;
	var rgb = this.getRGB();

	// Module width.  Module height is an integer multiple of tsy.
	var twidth = 1.04 * tsx * 100;
	var mwidth = (twidth / 30)|0;
	if (twidth - (mwidth*30-1) > 9) {
		mwidth++;
	}

	// Dimensions needed for plotting the hexagons.  These must be integer values.
	var w, h, wgap, hgap;
	// if (opts.??? ) {
	//	// Create a one or two pixel gap
	//	wgap = (mwidth & 1) ? 1 : 2;
	//	hgap = 1;
	//	w = mwidth - gap;
	//	h = 4 * tsy;
	// } else {
		// Create a 1/8mm gap
		wgap = (tsx/2)|0;
		hgap = (tsy/2)|0;
		w = mwidth - wgap;
		if (w & 1) {
			w--;
		}
		h = ((4*tsy)|0) - hgap;
	//}

	// These must be integer values
	var w2 = w / 2 - 1;			// half width
	var qh = ((w2+1) / 2)|0;	// quarter height
	var vh = h - 2 - 2 * qh;	// side height

	// Bounding box
	this.bbox(0, 0, mwidth*30 - wgap, tsy * 3 * 32 + tsy * 4 - hgap);

	// Render the elements
	var self = this;
	this.cmds.push(function() {
		// Draw the hexagons
		for (var i = 0; i < pix.length; i++) {
			var c = pix[i];
			var x = c % 30;
			var y = (c / 30)|0;

			// Adjust x,y to the top of hexagon
			x *= mwidth;
			x += (y & 1) ? mwidth : mwidth/2;
			x = x|0;

			y = 33 - y;	// invert for postscript notation
			y *= tsy * 3;
			y += tsy * 2 - h/2;
			y = y|0;
			
			// Build bottom up so the drawing is top-down.
			var pts = [ [ x-0.5, y-- ] ]; 
			y -= qh-1;
			pts.push([x-1-w2, y--]);
			y -= vh;
			pts.push([x-1-w2, y--]);
			y -= qh-1;
			pts.push([x-0.5, y++]);
			y += qh-1;
			pts.push([x+w2, y++]);
			y += vh;
			pts.push([x+w2, y++]);

			self.transform(pts);
			self.drawing.hexagon(pts, rgb);
		}
		self.drawing.fill(rgb);


		// Draw the rings
		var x = (14 * mwidth + mwidth/2 + 0.01)|0;
		var y = ((12 * 4 + 3) * tsy - qh/2 + 0.01)|0;
		self.drawing.ellipse(x, y, (0.5774*3.5*tsx+0.01)|0, (0.5774*3.5*tsy+0.01)|0, true);
		self.drawing.ellipse(x, y, (1.3359*3.5*tsx+0.01)|0, (1.3359*3.5*tsy+0.01)|0, false);
		self.drawing.fill(rgb);
		self.drawing.ellipse(x, y, (2.1058*3.5*tsx+0.01)|0, (2.1058*3.5*tsy+0.01)|0, true);
		self.drawing.ellipse(x, y, (2.8644*3.5*tsx+0.01)|0, (2.8644*3.5*tsy+0.01)|0, false);
		self.drawing.fill(rgb);
		self.drawing.ellipse(x, y, (3.6229*3.5*tsx+0.01)|0, (3.6229*3.5*tsy+0.01)|0, true);
		self.drawing.ellipse(x, y, (4.3814*3.5*tsx+0.01)|0, (4.3814*3.5*tsy+0.01)|0, false);
		self.drawing.fill(rgb);

	});
};

// dx,dy are inter-character gaps
BWIPJS.prototype.show = function(str, dx, dy) {
	if (!str.length) {
		return;
	}

	// Capture current graphics state
	var tsx	 = this.g_tsx;
	var tsy  = this.g_tsy;
	var name = this.g_font.FontName || 'OCR-B';
	var size = (this.g_font.FontSize || 10);
	var szx  = size * tsx;
	var szy  = size * tsy;
	var posx = this.g_posx;
	var posy = this.g_posy;
	var rgb  = this.getRGB();

	// The string can be either a uint8-string or regular string
	str = this.jsstring(str);

	// Convert dx,dy to device space
	dx = tsx * dx || 0;
	dy = tsy * dy || 0;

	// Bounding box.
	var base = posy + dy;
	var bbox = this.drawing.measure(str, name, szx, szy);
	var width = bbox.width + (str.length-1) * dx;
	this.bbox(posx, base-bbox.descent+1, posx+width-1, base+bbox.ascent);
	this.g_posx += width;

	var self = this;
	self.cmds.push(function() {
		// self.transform()
		var x = posx - self.minx;
		var y = self.maxy - posy;
		self.drawing.text(x, y, str, rgb, { name:name, width:szx, height:szy, dx:dx });
	});
};
// drawing surface bounding box
BWIPJS.prototype.bbox = function(x0, y0, x1, y1) {
	if (x0 > x1) { var t = x0; x0 = x1; x1 = t; }
	if (y0 > y1) { var t = y0; y0 = y1; y1 = t; }

	x0 = floor(x0);
	y0 = floor(y0);
	x1 = ceil(x1);
	y1 = ceil(y1);

	if (this.minx > x0) this.minx = x0;
    if (this.maxx < x1)	this.maxx = x1;
    if (this.miny > y0)	this.miny = y0;
	if (this.maxy < y1)	this.maxy = y1;
};
BWIPJS.prototype.render = function() {
	if (this.minx === Infinity) {
        // Most likely, `dontdraw` was set in the options
        return new Promise(function (resolve, reject) {
            resolve(null);
        });
	}
	// Draw the image
	this.drawing.init(this.maxx - this.minx + 1, this.maxy - this.miny + 1,
					  this.g_tsx, this.g_tsy);
	for (var i = 0, l = this.cmds.length; i < l; i++) {
		this.cmds[i]();
	}
	return this.drawing.end();
};

return BWIPJS;
})();	// BWIPJS closure
// drawing-builtin.js
//
// The aliased (except the fonts) graphics used by drawing-canvas.js and
// drawing-png.js
//
// All x,y and lengths are integer values.
//
// For the methods that take a color `rgb` parameter, the value is always a
// string with format RRGGBB.
//
// opts is the same options object passed into the bwipjs methods.
function DrawingBuiltin(opts) {
	var floor = Math.floor;

	// Unrolled x,y rotate/translate matrix
	var tx0 = 0, tx1 = 0, tx2 = 0, tx3 = 0;
	var ty0 = 0, ty1 = 0, ty2 = 0, ty3 = 0;

	var gs_image, gs_rowbyte;	// rowbyte will be 1 for png's, 0 for canvas
	var gs_width, gs_height;	// image size, in pixels
	var gs_dx, gs_dy;			// x,y translate (padding)
	var gs_r, gs_g, gs_b;		// rgb
	var gs_xymap;				// even-odd edge map

	return {
		// Ensure compliant bar codes by always using integer scaling factors.
		scale : function(sx, sy) {
			return [ (sx|0)||1, (sy|0)||1 ];
		},

		// Measure text.  This and scale() are the only drawing primitives that
		// are called before init().
		//
		// `font` is the font name typically OCR-A or OCR-B.
		// `fwidth` and `fheight` are the requested font cell size.  They will
		// usually be the same, except when the scaling is not symetric.
		measure : function(str, font, fwidth, fheight) {
			fwidth = fwidth|0;
			fheight = fheight|0;

			var fontid = FontLib.lookup(font);
			var width = 0;
			var ascent = 0;
			var descent = 0;
			for (var i = 0, l = str.length; i < l; i++) {
				var ch = str.charCodeAt(i);
				var glyph = FontLib.getglyph(fontid, ch, fwidth, fheight);

				ascent  = Math.max(ascent, glyph.top);
				descent = Math.max(descent, glyph.height - glyph.top);

				if (i == l-1) {
					width += glyph.left + glyph.width;
				} else {
					width += glyph.advance;
				}
			}
			return { width:width, ascent:ascent, descent:descent };
		},

		// width and height represent the maximum bounding box the graphics will occupy.
		// The dimensions are for an unrotated rendering.  Adjust as necessary.
		init : function(width, height) {
			// Add in the effects of padding.  These are always set before the
			// drawing constructor is called.
			var padl = opts.paddingleft;
			var padr = opts.paddingright;
			var padt = opts.paddingtop;
			var padb = opts.paddingbottom;
			var rot  = opts.rotate || 'N';

			width  += padl + padr;
			height += padt + padb;

			if (+opts.sizelimit && +opts.sizelimit < width * height) {
				throw new Error('Image size over limit');
			}

			// Transform indexes are: x, y, w, h
			switch (rot) {
			// tx = w-y, ty = x
			case 'R': tx1 = -1; tx2 = 1; ty0 = 1; break;
			// tx = w-x, ty = h-y
			case 'I': tx0 = -1; tx2 = 1; ty1 = -1; ty3 = 1; break;
			// tx = y, ty = h-x
			case 'L': tx1 = 1; ty0 = -1; ty3 = 1; break;
			// tx = x, ty = y
			default:  tx0 = ty1 = 1; break;
			}

			// Setup the graphics state
			var swap = rot == 'L' || rot == 'R';
			gs_width  = swap ? height : width;
			gs_height = swap ? width : height;
			gs_dx = padl;
			gs_dy = padt;
			gs_xymap = [];
			gs_xymap.min = Infinity;
			gs_r = gs_g = gs_b = 0;

			// Get the rgba image from the constructor
			var res = this.image(gs_width, gs_height);
			gs_image   = res.buffer;
			gs_rowbyte = res.ispng ? 1 : 0;
		},
		// Unconnected stroked lines are used to draw the bars in linear barcodes;
		// and the border around a linear barcode (e.g. ITF-14)
		// No line cap should be applied.  These lines are always orthogonal.
		line : function(x0, y0, x1, y1, lw, rgb) {
			x0 = x0|0;
			y0 = y0|0;
			x1 = x1|0;
			y1 = y1|0;

			// Most linear barcodes, the line width will be integral.  The exceptions
			// are variable width barcodes (e.g. code39) and the postal 4-state codes.
			lw = Math.round(lw) || 1;

			if (y1 < y0) { var t = y0; y0 = y1; y1 = t; }
			if (x1 < x0) { var t = x0; x0 = x1; x1 = t; }

			gs_r = parseInt(rgb.substr(0,2), 16);
			gs_g = parseInt(rgb.substr(2,2), 16);
			gs_b = parseInt(rgb.substr(4,2), 16);

			// Horizontal or vertical line?
			var w2 = (lw/2)|0;
			if (x0 == x1) {
				// Vertical line
				x0 = x0 - w2;
				x1 = x1 + lw - w2 - 1;
			} else {
				// Horizontal line
				y0 = y0 - w2;
				y1 = y1 + lw - w2 - 1;
			}
			for (var y = y0; y <= y1; y++) {
				for (var x = x0; x <= x1; x++) {
					set(x, y, 255);
				}
			}
		},

		// Polygons are used to draw the connected regions in a 2d barcode.
		// These will always be unstroked, filled, non-intersecting,
		// orthogonal shapes.
		// You will see a series of polygon() calls, followed by a fill().
		polygon : function(pts) {
			var npts = pts.length;
			for (var j = npts-1, i = 0; i < npts; j = i++) {
				if (pts[j][0] == pts[i][0]) {
					// Vertical lines do not get their end points. End points
					// are added by the horizontal line logic.
					var xj = pts[j][0]|0;	// i or j, doesn't matter
					var yj = pts[j][1]|0;
					var yi = pts[i][1]|0;
					if (yj > yi) {
						for (var y = yi+1; y < yj; y++) {
							addPoint(xj, y);
						}
					} else {
						for (var y = yj+1; y < yi; y++) {
							addPoint(xj, y);
						}
					}
				} else {
					var xj = pts[j][0]|0;
					var xi = pts[i][0]|0;
					var yj = pts[j][1]|0;	// i or j, doesn't matter

					// Horizontal lines are tricky.  As a rule, top lines get filled,
					// bottom lines do not (similar to how left edges get filled and
					// right edges do not).
					//
					// Where it gets complex is deciding whether the line actually
					// adds edges.  There are cases where a horizontal line does
					// not add anything to the scanline plotting.  And it doesn't
					// actually matter whether the line is a top or bottom edge,
					// the logic is the same.
					//
					// A left edge is added if the edge to its left is below.
					// A right edge is added if the edge to its right is below.
					if (xj < xi) {
						var yl = pts[j == 0 ? npts-1 : j-1][1];	// left edge
						var yr = pts[i == npts-1 ? 0 : i+1][1];	// right edge
						if (yl > yj) {
							addPoint(xj, yj);
						}
						if (yr > yj) {
							addPoint(xi, yj);
						}
					} else {
						var yl = pts[i == npts-1 ? 0 : i+1][1];	// left edge
						var yr = pts[j == 0 ? npts-1 : j-1][1];	// right edge
						if (yl > yj) {
							addPoint(xi, yj);
						}
						if (yr > yj) {
							addPoint(xj, yj);
						}
					}
				}
			}
		},
		// An unstroked, filled hexagon used by maxicode.  You can choose to fill
		// each individually, or wait for the final fill().
		//
		// The hexagon is drawn from the top, counter-clockwise.
		//
		// The X-coordinate for the top and bottom points on the hexagon is always
		// .5 pixels.  We draw our hexagons with a 2 pixel flat top.
		//
		// All other points of the polygon/hexagon are guaranteed to be integer values.
		hexagon : function(pts, rgb) {
			var x = pts[0][0]|0;
			var y = pts[0][1]|0;
			var qh = pts[1][1] - pts[0][1];		// height of triangle (quarter height)
			var vh = pts[2][1] - pts[1][1] - 1;	// height of vertical side
			var xl = pts[2][0];					// left side
			var xr = pts[4][0];					// right side

			gs_r = parseInt(rgb.substr(0,2), 16);
			gs_g = parseInt(rgb.substr(2,2), 16);
			gs_b = parseInt(rgb.substr(4,2), 16);

			fillSegment(x, x+1, y++);
			for (var k = 1; k < qh; k++) {
				fillSegment(x-2*k, x+1+2*k, y++);
			}
			for (var k = 0; k <= vh; k++) {
				fillSegment(xl, xr, y++);
			}
			for (var k = qh-1; k >= 1; k--) {
				fillSegment(x-2*k, x+1+2*k, y++);
			}
			fillSegment(x, x+1, y);
		},
		// An unstroked, filled ellipse.  Used by dotcode and maxicode at present.
		// maxicode issues pairs of ellipse calls (one cw, one ccw) followed by a fill()
		// to create the bullseye rings.  dotcode issues all of its ellipses then a
		// fill().
		ellipse : function(x, y, rx, ry, ccw) {
			drawEllipse(x-rx, y-ry, x+rx, y+ry, ccw);
		},
		// PostScript's default fill rule is even-odd.
		fill : function(rgb) {
			gs_r = parseInt(rgb.substr(0,2), 16);
			gs_g = parseInt(rgb.substr(2,2), 16);
			gs_b = parseInt(rgb.substr(4,2), 16);

			evenodd();
			gs_xymap = [];
			gs_xymap.min = Infinity;
		},
		// Draw text with optional inter-character spacing.  `y` is the baseline.
		// font is an object with properties { name, width, height, dx }
		// width and height are the font cell size.
		// dx is extra space requested between characters (usually zero).
		text : function(x, y, str, rgb, font) {
			x = x|0;
			y = y|0;

			gs_r = parseInt(rgb.substr(0,2), 16);
			gs_g = parseInt(rgb.substr(2,2), 16);
			gs_b = parseInt(rgb.substr(4,2), 16);

			var fontid  = FontLib.lookup(font.name);
			var fwidth  = font.width|0;
			var fheight = font.height|0;
			var dx      = font.dx|0;
			for (var k = 0; k < str.length; k++) {
				var ch = str.charCodeAt(k);
				var glyph = FontLib.getglyph(fontid, ch, fwidth, fheight);

				var gt = y - glyph.top;
				var gl = glyph.left;
				var gw = glyph.width;
				var gh = glyph.height;
				var gb = glyph.bytes;
				var go = glyph.offset;		// offset into bytes

				for (var i = 0; i < gw; i++) {
					for (var j = 0; j < gh; j++) {
						var a = gb[go + j * gw + i];
						if (a) {
							set(x+gl+i, gt+j, a);
						}
					}
				}
				x += glyph.advance + dx;
			}
		},
		// Called after all drawing is complete.
		end : function() {
		},
	};

	// This code is specialized to deal with two types of RGBA buffers:
	// - canvas style, which is true RGBA
	// - PNG style, which has a one-byte "filter code" prefixing each row.
	function set(x, y, a) {
		// translate/rotate
		x += gs_dx;
		y += gs_dy;
		var tx = tx0 * x + tx1 * y + tx2 * (gs_width-1) + tx3 * (gs_height-1);
		var ty = ty0 * x + ty1 * y + ty2 * (gs_width-1) + ty3 * (gs_height-1);

		// https://en.wikipedia.org/wiki/Alpha_compositing
		var offs = (ty * gs_width + tx) * 4 + (ty+1) * gs_rowbyte;
		var dsta = gs_image[offs+3] / 255;
		var srca = a / 255;
		var inva = (1 - srca) * dsta;
		var outa = srca + inva;

		gs_image[offs+0] = ((gs_r * srca + gs_image[offs+0] * inva) / outa)|0;
		gs_image[offs+1] = ((gs_g * srca + gs_image[offs+1] * inva) / outa)|0;
		gs_image[offs+2] = ((gs_b * srca + gs_image[offs+2] * inva) / outa)|0;
		gs_image[offs+3] = (255 * outa)|0;
	}

	// Add a point on an edge to the scanline map.
	function addPoint(x, y) {
		if (gs_xymap.min > y) gs_xymap.min = y;
		if (!gs_xymap[y]) {
			gs_xymap[y] = [ x ];
		} else {
			gs_xymap[y].push(x);
		}
	}

	function fillSegment(x0, x1, y) {
		while (x0 <= x1) {
			set(x0++, y, 255);
		}
	}

	// even-odd fill
	//
	// This implementation is optimized for BWIPP's simple usage.
	// It is not a general purpose scanline fill.  It relies heavily on
	// polygon() creating the correct intersections.
	function evenodd() {
		var ymin = gs_xymap.min;
		var ymax = gs_xymap.length-1;

		for (var y = ymin; y <= ymax; y++) {
			var pts = gs_xymap[y];
			if (!pts) {
				continue
			}
			pts.sort(function(a, b) { return a - b; });

			var wn = false;
			var xl = 0;
			for (var n = 0, npts = pts.length; n < npts; n++) {
				var x = pts[n];
				if (wn) {
					fillSegment(xl, x-1, y);
				} else {
					xl = x;
				}
				wn = !wn;
			}
		}
	}

	function drawEllipse(x0, y0, x1, y1, dir) {
		x0 = x0|0;
		y0 = y0|0;
		x1 = x1|0;
		y1 = y1|0;

		var a = Math.abs(x1-x0);
		var b = Math.abs(y1-y0);
		var b1 = b & 1;
		var dx = 4*(1-a)*b*b;
		var dy = 4*(b1+1)*a*a;
		var err = dx + dy + b1*a*a;
		var e2;

		// Left and right edges
		var left = [], right = [];
		left.min = right.min = Infinity;

		if (x0 > x1) { x0 = x1; x1 += a; }
		if (y0 > y1) y0 = y1;
		y0 += ((b+1)/2)|0;
		y1 = y0 - b1;
		a *= 8*a; b1 = 8*b*b;

		do {
			maxedge(right, x1, y0);	// 1st quadrant
			minedge(left, x0, y0);	// 2nd quadrant
			minedge(left, x0, y1);	// 3rd quadrant
			maxedge(right, x1, y1);	// 4th quadrant
			e2 = 2*err;
			if (e2 >= dx) { x0++; x1--; dx += b1; err += dx; }
			if (e2 <= dy) { y0++; y1--; dy += a;  err += dy; }
		} while (x0 <= x1);

		while (y0-y1 < b) {	// too early stop of flat ellipse
			maxedge(right, x1+1, y0);
			minedge(left, x0-1, y0++);
			minedge(left, x0-1, y1);
			maxedge(right, x1+1, y1--);
		}

		for (var y = left.min, max = left.length-1; y <= max; y++) {
			addPoint(left[y], y);
		}
		// The points we calculated are "inside".  The fill algorithm excludes 
		// right edges, so +1 on each x.
		for (var y = right.min, max = right.length-1; y <= max; y++) {
			addPoint(right[y]+1, y);
		}

		function minedge(e, x, y) {
			if (e.min > y) e.min = y;
			var ey = e[y];
			if (ey == null || ey > x) {
				e[y] = x;
			}
		}

		function maxedge(e, x, y) {
			if (e.min > y) e.min = y;
			var ey = e[y];
			if (ey == null || ey < x) {
				e[y] = x;
			}
		}
	}

	// Returns 1 if clockwise, -1 if ccw.
	function polydir(pts) {
		var xp = 0;
		for (var i = 0, l = pts.length, j = l-1; i < l; j = i++) {
			xp += pts[j][0] * pts[i][1] - pts[i][0] * pts[j][1];
		}
		return xp > 0 ? 1 : -1;
	}
}
// drawing-zlibpng.js
//
var PNGTYPE_PALETTE = 3;
var PNGTYPE_TRUEALPHA = 6;
var PNG_TEXT = "Software\0bwip-js.metafloor.com";
var PNG_CRC = (function() {
	var precalc = [];
	for (var i = 0; i < 256; i++) {
		var c = i;
		for (var j = 0; j < 8; j++) {
			if (c & 1) {
				c = 0xedb88320 ^ (c >>> 1);
			} else {
				c = c >>> 1;
			}
		}
		precalc[i] = c;
	}
	return precalc;
})();

var PNG_ZLIB = require('zlib');
require('stream');  // fix for https://github.com/nodejs/node/issues/37021

// opts is the same options object passed into the bwipjs methods.
function DrawingZlibPng(opts, callback) {
	var image_buffer, image_width, image_height;

	// Provide our specializations for the builtin drawing
	var drawing = DrawingBuiltin(opts);
	drawing.image = image;
	drawing.end = end;
	return drawing;

	// Called by DrawingBuiltin.init() to get the RGBA image data for rendering.
	function image(width, height) {
		// PNG RGBA buffers are prefixed with a one-byte filter type
		image_buffer = Buffer.alloc ? Buffer.alloc(width * height * 4 + height)
									: new Buffer(width * height * 4 + height);
		image_width = width;
		image_height = height;

		// Set background 
		if (/^[0-9a-fA-F]{6}$/.test(''+opts.backgroundcolor)) {
			var rgb = opts.backgroundcolor;
			fillRGB(parseInt(rgb.substr(0,2), 16),
					parseInt(rgb.substr(2,2), 16),
					parseInt(rgb.substr(4,2), 16));
		}

		// The return value is designed to accommodate both canvas pure-RGBA buffers
		// and PNG's row-filter prefixed RGBA buffers.
		return { buffer:image_buffer, ispng:true };
	}

	function fillRGB(r, g, b) {
		var color = ((r << 24) | (g << 16) | (b << 8) | 0xff) >>> 0;

		// This is made complex by the filter byte that prefixes each row...
		var len = image_width * 4 + 1;
		var row = Buffer.alloc ? Buffer.alloc(len) : new Buffer(len);
		for (var i = 1; i < len; i += 4) {
			row.writeUInt32BE(color, i);
		}
		image_buffer.fill(row);
	}

	function end() {
		if (!callback) {
			return new Promise(makePNG);
		} else {
			makePNG(function(png) { callback(null, png); }, function(err) { callback(err); });
		}
	}

	function makePNG(resolve, reject) {
		// DEFLATE the image data
		var bufs = [];
		var buflen = 0;
		var deflator = PNG_ZLIB.createDeflate({
				chunkSize: 32 * 1024,
				level : PNG_ZLIB.Z_DEFAULT_COMPRESSION,
				strategy: PNG_ZLIB.Z_DEFAULT_STRATEGY });
		deflator.on('error', reject);
		deflator.on('data', function(data) { bufs.push(data); buflen += data.length; });
		deflator.on('end', returnPNG);
		deflator.end(image_buffer);

		function returnPNG() {
			var length = 8 + 12 + 13 + 			// PNG Header + IHDR chunk
						 12 + PNG_TEXT.length +	// tEXt
						 12 + buflen +			// IDAT
						 12;					// IEND
			if (opts.dpi) {
				length += 12 + 9;				// pHYs
			}

			// Emulate a byte-stream
			var png = Buffer.alloc(length);
			var pngoff = 0;	// running offset into the png buffer

			write('\x89PNG\x0d\x0a\x1a\x0a'); // PNG file header
			writeIHDR();
			writeTEXT();
			if (opts.dpi) {
				writePHYS();
			}
			writeIDAT();
			writeIEND();

			// Success
			resolve(png);

			function writeIHDR() {
				write32(13);	// chunk length
				var crcoff = pngoff;

				write('IHDR');
				write32(image_width);
				write32(image_height);
				write8(8);		// bit depth
				write8(PNGTYPE_TRUEALPHA);
				write8(0);		// compression default
				write8(0);		// filter default
				write8(0);		// no interlace

				writeCRC(crcoff);
			}
			function writeTEXT() {
				write32(PNG_TEXT.length);	// chunk length
				var crcoff = pngoff;

				write('tEXt');
				write(PNG_TEXT);
				writeCRC(crcoff);
			}
			function writePHYS() {
				write32(9);
				var crcoff = pngoff;

				var pxm = ((opts.dpi || 72) / 0.0254)|0;
				write('pHYs');
				write32(pxm);	// x-axis
				write32(pxm);	// y-axis
				write8(1);		// px/m (the only usable option)
				writeCRC(crcoff);
			}
			function writeIDAT() {
				write32(buflen);	// chunk length
				var crcoff = pngoff;

				write('IDAT');
				for (var i = 0; i < bufs.length; i++) {
					bufs[i].copy(png, pngoff);
					pngoff += bufs[i].length;
				}
				writeCRC(crcoff);
			}
			function writeIEND() {
				write32(0);				// chunk length;
				var crcoff = pngoff;

				write('IEND');
				writeCRC(crcoff);
			}

			function write(s) {
				png.write(s, pngoff, 'binary');
				pngoff += s.length;
			}
			function write32(v) {
				png.writeUInt32BE(v, pngoff);
				pngoff += 4;
			}
			function write16(v) {
				png.writeUInt16BE(v, pngoff);
				pngoff += 2;
			}
			function write8(v) {
				png[pngoff++] = v;
			}
			function writeCRC(off) {
				var crc = -1;
				while (off < pngoff) {
					crc = PNG_CRC[(crc ^ png[off++]) & 0xff] ^ (crc >>> 8);
				}
				write32((crc ^ -1) >>> 0);
			}
		}
	}
}
// fontlib.js
var FontLib = (function() {
    var fonts = [];
    var names = {};
    var glyphcache = {};
    var glyphmru = {};
    var glyphcount = 0;

    // Sentinel to simplify moving entries around in the list.
    glyphmru.next = glyphmru;
    glyphmru.prev = glyphmru;

    return {
        lookup:lookup,
        monochrome:monochrome,
        getglyph:getglyph,
        getpaths:getpaths,
        loadFont:loadFont,
    };

    // loadFont(name, data)
    // loadFont(name, mult, data)
    // loadFont(name, multy, multx, data)   // note order: y,x
    // data must be the font data, either a binary or base64 encoded string.
    function loadFont(name /*...args*/) {
        var multx = 100;
        var multy = 100;
        var data = null;

        if (arguments.length == 2) {
            data = arguments[1];
        } else if (arguments.length == 3) {
            multx = multy = +arguments[1] || 100;
            data = arguments[2];
        } else if (arguments.length == 4) {
            multy = +arguments[1] || 100;
            multx = +arguments[2] || 100;
            data = arguments[3];
        } else {
            throw new Error("loadFont(): invalid number of arguments");
        }

        var font = STBTT.InitFont(toUint8Array(data));
        font.bwipjs_name = name;
        font.bwipjs_multx = multx;
        font.bwipjs_multy = multy;

        var fontid = fonts.push(font)-1;
        names[name.toUpperCase()] = fontid;
        return fontid;
    }

    // Always returns a valid font-id (default OCR-B)
    function lookup(name) {
        var fontid = names[name.toUpperCase()];
        return fontid === undefined ? 1 : fontid;       // OCR B default
    }

    // Not supported by stbtt
    function monochrome(mono) {
        if (mono) {
            throw new Error('fontlib: monochrome not implemented');
        }
    }

    function getglyph(fontid, charcode, width, height) {
        fontid   = fontid|0;
        charcode = charcode|0;
        width    = +width;
        height   = +height;
        if (!width || width < 8) {
            width = 8;
        }
        if (!height || height < 8) {
            height = width;
        }
        if (fontid < 0 || fontid >= fonts.length) {
            fontid = 1;     // OCR B default
        }
        if (!charcode || charcode < 32) {
            charcode = 32;
        }

        // In the cache?
        var cachekey = '' + fontid + 'c' + charcode + 'w' + width + 'h' + height; 
        var glyph = glyphcache[cachekey];
        if (glyph) {
            // Unthread from the MRU
            glyph.prev.next = glyph.next;
            glyph.next.prev = glyph.prev;

            // Thread back onto the top
            var sntl = glyphmru;
            sntl.next.prev = glyph;
            glyph.next = sntl.next;
            glyph.prev = sntl;
            sntl.next = glyph;
            
            return glyph;
        }

        var font = fonts[fontid];
        var glyph = STBTT.GetGlyph(font, charcode, width * font.bwipjs_multx / 100,
                                                   height * font.bwipjs_multy / 100);
        
        glyph.bytes = glyph.pixels;
        glyph.cachekey = cachekey;
        glyph.offset = 0;

        //glyph = {
        //      top:font.GlyphTop(),
        //      left:font.GlyphLeft(),
        //      width:font.GlyphWidth(),
        //      height:font.GlyphHeight(),
        //      advance:font.GlyphAdvance(),
        //      bitmap:font.GlyphBitmap(),
        //      offset:0,
        //      cachekey:cachekey,
        //  };

        // Purge old
        if (glyphcount > 250) {
            var sntl = glyphmru;
            var temp = sntl.prev;
            temp.prev.next = sntl;
            sntl.prev = temp.prev;
            temp.next = temp.prev = null;
            delete glyphcache[temp.cachekey];
        } else {
            glyphcount++;
        }

        // Add to cache and to the top of the MRU
        glyphcache[cachekey] = glyph;

        var sntl = glyphmru;
        sntl.next.prev = glyph;
        glyph.next = sntl.next;
        glyph.prev = sntl;
        sntl.next = glyph;

        return glyph;
    }

    function getpaths(fontid, charcode, width, height) {
        fontid   = fontid|0;
        charcode = charcode|0;
        width    = +width;
        height   = +height;
        if (!width || width < 8) {
            width = 8;
        }
        if (!height || height < 8) {
            height = width;
        }
        if (fontid < 0 || fontid >= fonts.length) {
            fontid = 1;     // OCR B default
        }
        if (!charcode || charcode < 32) {
            charcode = 32;
        }

        var font = fonts[fontid];
        return STBTT.GetPaths(font, charcode, width * font.bwipjs_multx / 100,
                                              height * font.bwipjs_multy / 100);
    }
})();

// bwip-js/stb_trutype.js
//
// JavaScript implementation of stb_truetype.h @ https://github.com/nothings/stb.
//
// This file is part of the bwip-js project available at:
//
// 		http://metafloor.github.io/bwip-js
//
// Copyright (c) 2019 Mark Warren : MIT LICENSE

// Copyright notice from stb_truetype.h:
//
// MIT License
//
// Copyright (c) 2017 Sean Barrett
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of
// this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
// of the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

var STBTT = (function () {
	"use strict";

var	STBTT_vmove	 = 1,
	STBTT_vline	 = 2,
	STBTT_vcurve = 3,
	STBTT_vcubic = 4,

	STBTT_PLATFORM_ID_UNICODE	= 0,
	STBTT_PLATFORM_ID_MAC		= 1,
	STBTT_PLATFORM_ID_ISO		= 2,
	STBTT_PLATFORM_ID_MICROSOFT = 3,

	STBTT_UNICODE_EID_UNICODE_1_0		= 0,
	STBTT_UNICODE_EID_UNICODE_1_1		= 1,
	STBTT_UNICODE_EID_ISO_10646			= 2,
	STBTT_UNICODE_EID_UNICODE_2_0_BMP	= 3,
	STBTT_UNICODE_EID_UNICODE_2_0_FULL	= 4,

	STBTT_MS_EID_SYMBOL			= 0,
	STBTT_MS_EID_UNICODE_BMP	= 1,
	STBTT_MS_EID_SHIFTJIS		= 2,
	STBTT_MS_EID_UNICODE_FULL	= 10;

var floor = Math.floor;
var ceil  = Math.ceil;
var sqrt  = Math.sqrt;
var abs   = Math.abs;

// Allocate an array of objects - replaces malloc(sizeof struct * n)
function oalloc(n) {
	var o = [];
	for (var i = 0; i < n; i++) {
		o.push({});
	}
	return o;
}

//static unsigned char stbtt__buf_get8(stbtt__buf * b)
function stbtt__buf_get8(b) {
    return b[b.cursor++]||0;
}

//static unsigned char stbtt__buf_peek8(stbtt__buf * b)
function stbtt__buf_peek8(b) {
    return b[b.cursor];
}

//static void stbtt__buf_seek(stbtt__buf * b, int o)
function stbtt__buf_seek(b, o) {
    b.cursor = (o > b.length || o < 0) ? b.length : o;
}

//static void stbtt__buf_skip(stbtt__buf * b, int o)
function stbtt__buf_skip(b, o) {
    stbtt__buf_seek(b, b.cursor + o);
}

//static unsigned int stbtt__buf_get(stbtt__buf * b, int n)
function stbtt__buf_get(b, n) {
    var v = 0;
    for (var i = 0; i < n; i++) {
        v = (v << 8) | stbtt__buf_get8(b);
    }
    return v;
}

// This function is only called once with a real 'p', all other uses are
// for a NULL buffer.  The for real usage, the code is inlined.
//static stbtt__buf stbtt__new_buf(const void *p, int size)
function stbtt__null_buf() {
	return { length:0 };
}

//static stbtt__buf stbtt__buf_range(const stbtt__buf * b, int o, int s)
function stbtt__buf_range(b, o, s) {
    if (o < 0 || s < 0 || o > b.length || s > b.length - o) {
        return stbtt__null_buf();
    }
	var r = b.subarray(o, o + s);
	r.cursor = 0;
	return r;
}

//static stbtt__buf stbtt__cff_get_index(stbtt__buf * b)
function stbtt__cff_get_index(b) {
    var start = b.cursor;
    var count = stbtt__buf_get(b, 2);
    if (count) {
        var offsize = stbtt__buf_get8(b);
        stbtt__buf_skip(b, offsize * count);
        stbtt__buf_skip(b, stbtt__buf_get(b, offsize) - 1);
    }
    return stbtt__buf_range(b, start, b.cursor - start);
}

//static unsigned int stbtt__cff_int(stbtt__buf * b)
function stbtt__cff_int(b) {
    var b0 = stbtt__buf_get8(b);
    if (b0 >= 32 && b0 <= 246) {
        return b0 - 139;
    } else if (b0 >= 247 && b0 <= 250) {
        return (b0 - 247) * 256 + stbtt__buf_get8(b) + 108;
    } else if (b0 >= 251 && b0 <= 254) {
        return -(b0 - 251) * 256 - stbtt__buf_get8(b) - 108;
    } else if (b0 == 28) {
        return stbtt__buf_get(b, 2);
    } else if (b0 == 29) {
        return stbtt__buf_get(b, 4);
    }
    return 0;
}

//static void stbtt__cff_skip_operand(stbtt__buf * b)
function stbtt__cff_skip_operand(b) {
    var b0 = stbtt__buf_peek8(b);
    if (b0 == 30) {
        stbtt__buf_skip(b, 1);
        while (b.cursor < b.length) {
            var v = stbtt__buf_get8(b);
            if ((v & 0xF) == 0xF || (v >> 4) == 0xF) {
                break;
            }
        }
    } else {
        stbtt__cff_int(b);
    }
}

//static stbtt__buf stbtt__dict_get(stbtt__buf * b, int key)
function stbtt__dict_get(b, key) {
    stbtt__buf_seek(b, 0);
    while (b.cursor < b.length) {
        var start = b.cursor, end, op;
        while (stbtt__buf_peek8(b) >= 28) {
            stbtt__cff_skip_operand(b);
        }
        end = b.cursor;
        op = stbtt__buf_get8(b);
        if (op == 12) {
            op = stbtt__buf_get8(b) | 0x100;
        }
        if (op == key) {
            return stbtt__buf_range(b, start, end - start);
        }
    }
    return stbtt__buf_range(b, 0, 0);
}

//static void stbtt__dict_get_ints(stbtt__buf * b, int key, int outcount, unsigned int *out)
function stbtt__dict_get_ints(b, key, outcount, out) {
    var operands = stbtt__dict_get(b, key);
    for (var i = 0; i < outcount && operands.cursor < operands.length; i++) {
        out[i] = stbtt__cff_int(operands);
    }
}
// single-integer format of above since javascript doesn't have address-of
function stbtt__dict_get_int(b, key, out) {
    var operands = stbtt__dict_get(b, key);
    if (operands.cursor < operands.length) {
        out = stbtt__cff_int(operands);
    }
	return out;
}

//static int stbtt__cff_index_count(stbtt__buf * b)
function stbtt__cff_index_count(b) {
    stbtt__buf_seek(b, 0);
    return stbtt__buf_get(b, 2);
}

//static stbtt__buf stbtt__cff_index_get(stbtt__buf b, int i)
function stbtt__cff_index_get(b, i) {
    var count, offsize, start, end;
    stbtt__buf_seek(b, 0);
    count = stbtt__buf_get(b, 2);
    offsize = stbtt__buf_get8(b);
    stbtt__buf_skip(b, i * offsize);
    start = stbtt__buf_get(b, offsize);
    end = stbtt__buf_get(b, offsize);
    return stbtt__buf_range(b, 2 + (count + 1) * offsize + start, end - start);
}

// Convert sign-extend a 16-bit integer to JS number
function INT16(n) {
	return n & 0x8000 ? (0xffff0000|n)>>0 : n;
}

//static unsigned short ttUSHORT(unsigned char *p)
function ttUSHORT(b, o) {
    return b[o] * 256 + b[o+1];
}

//static short ttSHORT(unsigned char *p)
function ttSHORT(b, o) {
    var n = b[o] * 256 + b[o+1];
	return n & 0x8000 ? (0xffff0000|n)>>0 : n;
}

//static unsigned int ttULONG(unsigned char *p)
function ttULONG(b, o) {
    return (b[o] << 24) + (b[o+1] << 16) + (b[o+2] << 8) + b[o+3];
}

//static unsigned int stbtt__find_table(unsigned char *data, unsigned int fontstart, const char *tag)
function stbtt__find_table(data, fontstart, tag) {
    var num_tables = ttUSHORT(data, fontstart + 4);
    var tabledir = fontstart + 12;
    for (var i = 0; i < num_tables; ++i) {
        var loc = tabledir + 16 * i;
        if (data[loc] == tag[0] && data[loc+1] == tag[1] && data[loc+2] == tag[2] && data[loc+3] == tag[3]) {
            return ttULONG(data, loc + 8);
        }
    }
    return 0;
}

//static stbtt__buf stbtt__get_subrs(stbtt__buf cff, stbtt__buf fontdict)
function stbtt__get_subrs(cff, fontdict) {
    var private_loc = [ 0, 0 ];
    stbtt__dict_get_ints(fontdict, 18, 2, private_loc);
    if (!private_loc[1] || !private_loc[0]) {
        return stbtt__null_buf();
    }
    var pdict = stbtt__buf_range(cff, private_loc[1], private_loc[0]);
    var subrsoff = stbtt__dict_get_int(pdict, 19, 0);
    if (!subrsoff) {
        return stbtt__null_buf();
    }
    stbtt__buf_seek(cff, private_loc[1] + subrsoff);
    return stbtt__cff_get_index(cff);
}

//static int stbtt_InitFont_internal(stbtt_fontinfo * info, unsigned char *data, int fontstart)
function stbtt_InitFont_internal(info, data, fontstart) {
    var cmap, t, i, numTables;

    info.data = data;
    info.fontstart = fontstart;
    info.cff = stbtt__null_buf();

    cmap = stbtt__find_table(data, fontstart, [ 99, 109, 97, 112 ]);		//"cmap"
    info.loca = stbtt__find_table(data, fontstart, [ 108, 111, 99, 97 ]);	//"loca"
    info.head = stbtt__find_table(data, fontstart, [ 104, 101, 97, 100 ]);	//"head"
    info.glyf = stbtt__find_table(data, fontstart, [ 103, 108, 121, 102 ]);	//"glyf"
    info.hhea = stbtt__find_table(data, fontstart, [ 104, 104, 101, 97 ]);	//"hhea"
    info.hmtx = stbtt__find_table(data, fontstart, [ 104, 109, 116, 120 ]);	//"hmtx"
    info.kern = stbtt__find_table(data, fontstart, [ 107, 101, 114, 110 ]);	//"kern"

    if (!cmap || !info.head || !info.hhea || !info.hmtx) {
        return 0;
    }
    if (info.glyf) {
        if (!info.loca) {
            return 0;
        }
    } else {
        var b, topdict, topdictidx, cff,
			cstype = 2, charstrings = 0, fdarrayoff = 0, fdselectoff = 0;

        cff = stbtt__find_table(data, fontstart, [ 67, 70, 70, 32 ]);	//"CFF "
        if (!cff) {
            return 0;
        }

        info.fontdicts = stbtt__null_buf();
        info.fdselect = stbtt__null_buf();

        info.cff = data.subarray(cff); //stbtt__new_buf(data + cff, 512 * 1024 * 1024);
		info.cff.cursor = 0;
        b = info.cff;

        stbtt__buf_skip(b, 2);
        stbtt__buf_seek(b, stbtt__buf_get8(b));

        stbtt__cff_get_index(b);
        topdictidx = stbtt__cff_get_index(b);
        topdict = stbtt__cff_index_get(topdictidx, 0);
        stbtt__cff_get_index(b);
        info.gsubrs = stbtt__cff_get_index(b);

        charstrings = stbtt__dict_get_int(topdict, 17, charstrings);
        cstype = stbtt__dict_get_int(topdict, 0x100 | 6, cstype);
        fdarrayoff = stbtt__dict_get_int(topdict, 0x100 | 36, fdarrayoff);
        fdselectoff = stbtt__dict_get_int(topdict, 0x100 | 37, fdselectoff);
        info.subrs = stbtt__get_subrs(b, topdict);

        if (cstype != 2) {
            return 0;
        }
        if (charstrings == 0) {
            return 0;
        }

        if (fdarrayoff) {
            if (!fdselectoff) {
                return 0;
            }
            stbtt__buf_seek(b, fdarrayoff);
            info.fontdicts = stbtt__cff_get_index(b);
            info.fdselect = stbtt__buf_range(b, fdselectoff, b.length - fdselectoff);
        }

        stbtt__buf_seek(b, charstrings);
        info.charstrings = stbtt__cff_get_index(b);
    }

    t = stbtt__find_table(data, fontstart, [ 109, 97, 120, 112 ]);	//"maxp"
    if (t) {
        info.numGlyphs = ttUSHORT(data, t + 4);
    }
    else {
        info.numGlyphs = 0xffff;
    }

    numTables = ttUSHORT(data, cmap + 2);
    info.index_map = 0;
    for (i = 0; i < numTables; ++i) {
        var encoding_record = cmap + 4 + 8 * i;

        switch (ttUSHORT(data, encoding_record)) {
        case STBTT_PLATFORM_ID_MICROSOFT:
            switch (ttUSHORT(data, encoding_record + 2)) {
            case STBTT_MS_EID_UNICODE_BMP:
            case STBTT_MS_EID_UNICODE_FULL:
                info.index_map = cmap + ttULONG(data, encoding_record + 4);
                break;
            }
            break;
        case STBTT_PLATFORM_ID_UNICODE:
            info.index_map = cmap + ttULONG(data, encoding_record + 4);
            break;
        }
    }
    if (info.index_map == 0) {
        return 0;
    }

    info.indexToLocFormat = ttUSHORT(data, info.head + 50);
    return 1;
}

//extern int stbtt_FindGlyphIndex(const stbtt_fontinfo * info, int unicode_codepoint)
function stbtt_FindGlyphIndex(info, unicode_codepoint) {
    var data = info.data, index_map = info.index_map;

    var format = ttUSHORT(data, index_map + 0);
    if (format == 0) {
        var bytes = ttUSHORT(data, index_map + 2);
        if (unicode_codepoint < bytes - 6) {
            return data[index_map + 6 + unicode_codepoint];
		}
        return 0;
    } else if (format == 6) {
        var first = ttUSHORT(data, index_map + 6),
            count = ttUSHORT(data, index_map + 8);
        if (unicode_codepoint >= first && unicode_codepoint < first + count) {
            return ttUSHORT(data, index_map + 10 + (unicode_codepoint - first) * 2);
		}
        return 0;
    } else if (format == 2) {
        return 0;
    } else if (format == 4) {
        var segcount = ttUSHORT(data, index_map + 6) >> 1,
            searchRange = ttUSHORT(data, index_map + 8) >> 1,
            entrySelector = ttUSHORT(data, index_map + 10),
            rangeShift = ttUSHORT(data, index_map + 12) >> 1,
			endCount = index_map + 14,
            search = endCount;

        if (unicode_codepoint > 0xffff) {
            return 0;
        }

        if (unicode_codepoint >= ttUSHORT(data, search + rangeShift * 2)) {
            search += rangeShift * 2;
        }

        search -= 2;
        while (entrySelector) {
            searchRange >>= 1;
            var end = ttUSHORT(data, search + searchRange * 2);
            if (unicode_codepoint > end) {
                search += searchRange * 2;
            }
            --entrySelector;
        }
        search += 2;

		var offset, start, item = (search - endCount) >>> 1;

		start = ttUSHORT(data, index_map + 14 + segcount * 2 + 2 + 2 * item);
		if (unicode_codepoint < start) {
			return 0;
		}

		offset = ttUSHORT(data, index_map + 14 + segcount * 6 + 2 + 2 * item);
		if (offset == 0) {
			return unicode_codepoint + ttSHORT(data, index_map + 14 + segcount * 4 + 2 + 2 * item);
		}
		return ttUSHORT(data, offset + (unicode_codepoint - start) * 2 +
								index_map + 14 + segcount * 6 + 2 +	2 * item);
    } else if (format == 12 || format == 13) {
        var ngroups = ttULONG(data, index_map + 12),
			low = 0, high = ngroups;
         while (low < high) {
            var mid = low + ((high - low) >> 1);
            var start_char = ttULONG(data, index_map + 16 + mid * 12);
            var end_char = ttULONG(data, index_map + 16 + mid * 12 + 4);
            if (unicode_codepoint < start_char) {
                high = mid;
            } else if (unicode_codepoint > end_char) {
                low = mid + 1;
            } else {
                var start_glyph = ttULONG(data, index_map + 16 + mid * 12 + 8);
                if (format == 12) {
                    return start_glyph + unicode_codepoint - start_char;
				} else {
                    return start_glyph;
                }
            }
        }
        return 0;
    }
    return 0;
}

//static void stbtt_setvertex(stbtt_vertex * v, unsigned char type, int x, int y, int cx, int cy)
function stbtt_setvertex(v, type, x, y, cx, cy) {
    v.type = type;
    v.x = x;
    v.y = y;
    v.cx = cx;
    v.cy = cy;
}

//static int stbtt__GetGlyfOffset(const stbtt_fontinfo * info, int glyph_index)
function stbtt__GetGlyfOffset(info, glyph_index) {
    var  g1, g2;
    if (glyph_index >= info.numGlyphs) {
        return -1;
    }
    if (info.indexToLocFormat >= 2) {
        return -1;
    }

    if (info.indexToLocFormat == 0) {
        g1 = info.glyf + ttUSHORT(info.data, info.loca + glyph_index * 2) * 2;
        g2 = info.glyf + ttUSHORT(info.data, info.loca + glyph_index * 2 + 2) * 2;
    } else {
        g1 = info.glyf + ttULONG(info.data, info.loca + glyph_index * 4);
        g2 = info.glyf + ttULONG(info.data, info.loca + glyph_index * 4 + 4);
    }

    return g1 == g2 ? -1 : g1;
}

//extern int stbtt_GetGlyphBox(const stbtt_fontinfo * info, int glyph_index, int *x0, int *y0, int *x1, int *y1)
function stbtt_GetGlyphBox(info, glyph_index, out) {
    if (info.cff.length) {
        stbtt__GetGlyphInfoT2(info, glyph_index, out);
    } else {
        var g = stbtt__GetGlyfOffset(info, glyph_index);
        if (g < 0) {
            return 0;
        }
	    out.x0 = ttSHORT(info.data, g + 2);
		out.y0 = ttSHORT(info.data, g + 4);
		out.x1 = ttSHORT(info.data, g + 6);
		out.y1 = ttSHORT(info.data, g + 8);
    }
    return 1;
}

//static int stbtt__close_shape(stbtt_vertex * vertices, int num_vertices, int was_off,
//                   int start_off, int sx, int sy, int scx, int scy, int cx, int cy)
function stbtt__close_shape(vertices, num_vertices, was_off, start_off, sx, sy, scx, scy, cx, cy) {
    if (start_off) {
        if (was_off) {
            stbtt_setvertex(vertices[num_vertices++], STBTT_vcurve,
                            (cx + scx) >> 1, (cy + scy) >> 1, cx, cy);
		}
        stbtt_setvertex(vertices[num_vertices++], STBTT_vcurve, sx, sy, scx, scy);
    } else {
        if (was_off) {
            stbtt_setvertex(vertices[num_vertices++], STBTT_vcurve, sx, sy, cx, cy);
		} else {
            stbtt_setvertex(vertices[num_vertices++], STBTT_vline, sx, sy, 0, 0);
		}
    }
    return num_vertices;
}

//static int stbtt__GetGlyphShapeTT(const stbtt_fontinfo * info, int glyph_index, stbtt_vertex ** pvertices)
function stbtt__GetGlyphShapeTT(info, glyph_index) {
    var data = info.data,
		g = stbtt__GetGlyfOffset(info, glyph_index);

	if (g < 0) {
        return null;
    }

	var vertices = [];
    var numberOfContours = ttSHORT(data, g);
    if (numberOfContours > 0) {
        var flags = 0, flagcount,
			i, j = 0, m, n, next_move, was_off = 0, off, start_off = 0,
			x, y, cx, cy, sx, sy, scx, scy;
        var endPtsOfContours = g + 10;
        var ins = ttUSHORT(data, g + 10 + numberOfContours * 2);
        var points = data.subarray(g + 10 + numberOfContours * 2 + 2 + ins);
		var ptsoff = 0;

        n = 1 + ttUSHORT(data, endPtsOfContours + numberOfContours * 2 - 2);
        m = n + 2 * numberOfContours;

        vertices = oalloc(m);
        next_move = 0;
        flagcount = 0;
        off = m - n;

        for (i = 0; i < n; ++i) {
            if (flagcount == 0) {
                flags = points[ptsoff++];
                if (flags & 8) {
                    flagcount = points[ptsoff++];
                }
            } else {
                --flagcount;
            }
            vertices[off + i].type = flags;
        }

        x = 0;
        for (i = 0; i < n; ++i) {
            flags = vertices[off + i].type;
            if (flags & 2) {
                var dx = points[ptsoff++];
                x += (flags & 16) ? dx : -dx;
            } else {
                if (!(flags & 16)) {
                    x = x + INT16(points[ptsoff] * 256 + points[ptsoff+1]);
                    ptsoff += 2;
                }
            }
            vertices[off + i].x = x;
        }

        y = 0;
        for (i = 0; i < n; ++i) {
            flags = vertices[off + i].type;
            if (flags & 4) {
                var dy = points[ptsoff++];
                y += (flags & 32) ? dy : -dy;
            } else {
                if (!(flags & 32)) {
                    y = y + INT16(points[ptsoff] * 256 + points[ptsoff+1]);
                    ptsoff += 2;
                }
            }
            vertices[off + i].y = y;
        }

        var num_vertices = 0;
        sx = sy = cx = cy = scx = scy = 0;
        for (i = 0; i < n; ++i) {
            flags = vertices[off + i].type;
            x = vertices[off + i].x;
            y = vertices[off + i].y;

            if (next_move == i) {
                if (i != 0) {
                    num_vertices = stbtt__close_shape(vertices, num_vertices, was_off, start_off,
											sx, sy, scx, scy, cx, cy);
				}
                start_off = !(flags & 1);
                if (start_off) {
                    scx = x;
                    scy = y;
                    if (!(vertices[off + i + 1].type & 1)) {
                        sx = (x + vertices[off + i + 1].x) >> 1;
                        sy = (y + vertices[off + i + 1].y) >> 1;
                    } else {
                        sx = vertices[off + i + 1].x;
                        sy = vertices[off + i + 1].y;
                        ++i;
                    }
                } else {
                    sx = x;
                    sy = y;
                }
                stbtt_setvertex(vertices[num_vertices++], STBTT_vmove, sx, sy, 0, 0);
                was_off = 0;
                next_move = 1 + ttUSHORT(data, endPtsOfContours + j * 2);
                ++j;
            } else {
                if (!(flags & 1)) {
                    if (was_off) {
                        stbtt_setvertex(vertices[num_vertices++], STBTT_vcurve,
                                        (cx + x) >> 1, (cy + y) >> 1, cx, cy);
					}
                    cx = x;
                    cy = y;
                    was_off = 1;
                } else {
                    if (was_off) {
                        stbtt_setvertex(vertices[num_vertices++], STBTT_vcurve, x, y, cx, cy);
                    } else {
                        stbtt_setvertex(vertices[num_vertices++], STBTT_vline, x, y, 0, 0);
					}
                    was_off = 0;
                }
            }
        }
        vertices.length = stbtt__close_shape(vertices, num_vertices, was_off, start_off,
												sx, sy, scx, scy, cx, cy);
    } else if (numberOfContours == -1) {
        var more = 1;
        var comp = g + 10;
         while (more) {
            var flags, gidx, mtx = [ 1, 0, 0, 1, 0, 0 ];

            flags = ttSHORT(data, comp);
            comp += 2;
            gidx = ttSHORT(data, comp);
            comp += 2;

            if (flags & 2) {
                if (flags & 1) {
                    mtx[4] = ttSHORT(data, comp);
                    comp += 2;
                    mtx[5] = ttSHORT(data, comp);
                    comp += 2;
                } else {
                    mtx[4] = stbtt__buf_get8(data, comp);
                    comp += 1;
                    mtx[5] = stbtt__buf_get8(data, comp);
                    comp += 1;
                }
            }
            if (flags & (1 << 3)) {
                mtx[0] = mtx[3] = ttSHORT(data, comp) / 16384.0;
                comp += 2;
                mtx[1] = mtx[2] = 0;
            } else if (flags & (1 << 6)) {
                mtx[0] = ttSHORT(data, comp) / 16384.0;
                comp += 2;
                mtx[1] = mtx[2] = 0;
                mtx[3] = ttSHORT(data, comp) / 16384.0;
                comp += 2;
            } else if (flags & (1 << 7)) {
                mtx[0] = ttSHORT(data, comp) / 16384.0;
                comp += 2;
                mtx[1] = ttSHORT(data, comp) / 16384.0;
                comp += 2;
                mtx[2] = ttSHORT(data, comp) / 16384.0;
                comp += 2;
                mtx[3] = ttSHORT(data, comp) / 16384.0;
                comp += 2;
            }

            var m = sqrt(mtx[0] * mtx[0] + mtx[1] * mtx[1]);
            var n = sqrt(mtx[2] * mtx[2] + mtx[3] * mtx[3]);
            var comp_verts = stbtt_GetGlyphShape(info, gidx);
            if (comp_verts.length > 0) {
                for (var i = 0, l = comp_verts.length; i < l; ++i) {
                    var v = comp_verts[i], x, y;
					x = v.x;
					y = v.y;
                    v.x = floor(m * (mtx[0] * x + mtx[2] * y + mtx[4]));
                    v.y = floor(n * (mtx[1] * x + mtx[3] * y + mtx[5]));
                    x = v.cx;
                    y = v.cy;
                    v.cx = floor(m * (mtx[0] * x + mtx[2] * y + mtx[4]));
                    v.cy = floor(n * (mtx[1] * x + mtx[3] * y + mtx[5]));
                }

				vertices = vertices.concat(comp_verts);
            }
            more = flags & (1 << 5);
        }
    }
	//console.log('vertices(' + vertices.length + ')');
	//for (var i = 0; i < vertices.length; i++) {
	//	var pt = vertices[i];
	//	console.log(`${i}: ${pt.x},${pt.y} / ${pt.cx},${pt.cy} / ${pt.type}`);
	//}

    return vertices;
}

//static void stbtt__track_vertex(stbtt__csctx * c, int x, int y)
function stbtt__track_vertex(c, x, y) {
    if (x > c.max_x || !c.started) {
        c.max_x = x;
    }
    if (y > c.max_y || !c.started) {
        c.max_y = y;
    }
    if (x < c.min_x || !c.started) {
        c.min_x = x;
    }
    if (y < c.min_y || !c.started) {
        c.min_y = y;
    }
    c.started = 1;
}

//static void stbtt__csctx_v(stbtt__csctx * c, unsigned char type, int x, int y, int cx, int cy, int cx1, int cy1)
function stbtt__csctx_v(c, type, x, y, cx, cy, cx1, cy1) {
	stbtt__track_vertex(c, x, y);
	if (type == STBTT_vcubic) {
		stbtt__track_vertex(c, cx, cy);
		stbtt__track_vertex(c, cx1, cy1);
	}
	var v = {};
	stbtt_setvertex(v, type, x, y, cx, cy);
	v.cx1 = cx1;
	v.cy1 = cy1;
	c.vertices.push(v);
 }

//static void stbtt__csctx_close_shape(stbtt__csctx * ctx)
function stbtt__csctx_close_shape(ctx) {
    if (ctx.first_x != ctx.x || ctx.first_y != ctx.y) {
        stbtt__csctx_v(ctx, STBTT_vline, ctx.first_x, ctx.first_y, 0, 0, 0, 0);
	}
}

//static void stbtt__csctx_rmove_to(stbtt__csctx * ctx, float dx, float dy)
function stbtt__csctx_rmove_to(ctx, dx, dy) {
    stbtt__csctx_close_shape(ctx);
    ctx.first_x = ctx.x = ctx.x + dx;
    ctx.first_y = ctx.y = ctx.y + dy;
    stbtt__csctx_v(ctx, STBTT_vmove, ctx.x, ctx.y, 0, 0, 0, 0);
}

//static void stbtt__csctx_rline_to(stbtt__csctx * ctx, float dx, float dy)
function stbtt__csctx_rline_to(ctx, dx, dy) {
    ctx.x += dx;
    ctx.y += dy;
    stbtt__csctx_v(ctx, STBTT_vline, ctx.x, ctx.y, 0, 0, 0, 0);
}

//static void stbtt__csctx_rccurve_to(stbtt__csctx * ctx, float dx1, float dy1, float dx2,
//									float dy2, float dx3, float dy3)
function stbtt__csctx_rccurve_to(ctx, dx1, dy1, dx2, dy2, dx3, dy3) {
    var cx1 = ctx.x + dx1,
		cy1 = ctx.y + dy1,
		cx2 = cx1 + dx2,
		cy2 = cy1 + dy2;
    ctx.x = cx2 + dx3;
    ctx.y = cy2 + dy3;
    stbtt__csctx_v(ctx, STBTT_vcubic, ctx.x, ctx.y, cx1, cy1, cx2, cy2);
}

//static stbtt__buf stbtt__get_subr(stbtt__buf idx, int n)
function stbtt__get_subr(b, n) {
    var count = stbtt__cff_index_count(b);
    var bias = 107;
    if (count >= 33900) {
        bias = 32768;
    } else if (count >= 1240) {
        bias = 1131;
    }
    n += bias;
    if (n < 0 || n >= count) {
        return stbtt__null_buf();
    }
    return stbtt__cff_index_get(b, n);
}

//static stbtt__buf stbtt__cid_get_glyph_subrs(const stbtt_fontinfo * info, int glyph_index)
function stbtt__cid_get_glyph_subrs(info, glyph_index) {
    var fdselect = info.fdselect;
    var nranges, start, end, v, fmt, fdselector = -1, i;

    stbtt__buf_seek(fdselect, 0);
    fmt = stbtt__buf_get8(fdselect);
    if (fmt == 0) {
        stbtt__buf_skip(fdselect, glyph_index);
        fdselector = stbtt__buf_get8(fdselect);
    } else if (fmt == 3) {
        nranges = stbtt__buf_get(fdselect, 2);
        start = stbtt__buf_get(fdselect, 2);
        for (i = 0; i < nranges; i++) {
            v = stbtt__buf_get8(fdselect);
            end = stbtt__buf_get(fdselect, 2);
            if (glyph_index >= start && glyph_index < end) {
                fdselector = v;
                break;
            }
            start = end;
        }
    }
    if (fdselector == -1) {
        stbtt__null_buf();
    }
    return stbtt__get_subrs(info.cff, stbtt__cff_index_get(info.fontdicts, fdselector));
}

//static int stbtt__run_charstring(const stbtt_fontinfo * info, int glyph_index,
//								   stbtt__csctx * c)
function stbtt__run_charstring(info, glyph_index, c) {
    var in_header = 1, maskbits = 0, subr_stack_height = 0, sp = 0, v, i, b0,
		has_subrs = 0, clear_stack,
		s = [], subr_stack = [], subrs = info.subrs, b, f;

    b = stbtt__cff_index_get(info.charstrings, glyph_index);
    while (b.cursor < b.length) {
        i = 0;
        clear_stack = 1;
        b0 = stbtt__buf_get8(b);
        switch (b0) {
        case 0x13:
        case 0x14:
            if (in_header) {
                maskbits += (sp / 2)|0;
            }
            in_header = 0;
            stbtt__buf_skip(b, ((maskbits + 7) / 8)|0);
            break;

        case 0x01:
        case 0x03:
        case 0x12:
        case 0x17:
            maskbits += (sp / 2)|0;
            break;

        case 0x15:
            in_header = 0;
            if (sp < 2) {
                return 0;
            }
            stbtt__csctx_rmove_to(c, s[sp - 2], s[sp - 1]);
            break;
        case 0x04:
            in_header = 0;
            if (sp < 1) {
                return 0;
            }
            stbtt__csctx_rmove_to(c, 0, s[sp - 1]);
            break;
        case 0x16:
            in_header = 0;
            if (sp < 1) {
                return 0;
            }
            stbtt__csctx_rmove_to(c, s[sp - 1], 0);
            break;

        case 0x05:
            if (sp < 2) {
                return 0;
            }
            for (; i + 1 < sp; i += 2) {
                stbtt__csctx_rline_to(c, s[i], s[i + 1]);
            }
            break;

        case 0x07:
            if (sp < 1) {
                return 0;
            }
			for (;;) {
                if (i >= sp) {
                    break;
                }
                stbtt__csctx_rline_to(c, 0, s[i]);
                i++;
                if (i >= sp) {
                    break;
                }
                stbtt__csctx_rline_to(c, s[i], 0);
                i++;
			}
			break;
        case 0x06:
            if (sp < 1) {
                return 0;
            }
            for (;;) {
                if (i >= sp) {
                    break;
                }
                stbtt__csctx_rline_to(c, s[i], 0);
                i++;
                if (i >= sp) {
                    break;
                }
                stbtt__csctx_rline_to(c, 0, s[i]);
                i++;
            }
            break;

        case 0x1F:
            if (sp < 4) {
                return 0;
            }
			for (;;) {
                if (i + 3 >= sp) {
                    break;
                }
                stbtt__csctx_rccurve_to(c, s[i], 0, s[i + 1], s[i + 2],
                                        (sp - i == 5) ? s[i + 4] : 0.0,
                                        s[i + 3]);
                i += 4;
                if (i + 3 >= sp) {
                    break;
                }
                stbtt__csctx_rccurve_to(c, 0, s[i], s[i + 1],
                                        s[i + 2], s[i + 3],
                                        (sp - i == 5) ? s[i + 4] : 0.0);
                i += 4;
			}
			break;
        case 0x1E:
            if (sp < 4) {
                return 0;
            }
            for (;;) {
                if (i + 3 >= sp) {
                    break;
                }
                stbtt__csctx_rccurve_to(c, 0, s[i], s[i + 1],
                                        s[i + 2], s[i + 3],
                                        (sp - i == 5) ? s[i + 4] : 0.0);
                i += 4;
                if (i + 3 >= sp) {
                    break;
                }
                stbtt__csctx_rccurve_to(c, s[i], 0, s[i + 1], s[i + 2],
                                        (sp - i == 5) ? s[i + 4] : 0.0,
                                        s[i + 3]);
                i += 4;
            }
            break;

        case 0x08:
            if (sp < 6) {
                return 0;
            }
            for (; i + 5 < sp; i += 6) {
                stbtt__csctx_rccurve_to(c, s[i], s[i + 1],
                                        s[i + 2], s[i + 3],
                                        s[i + 4], s[i + 5]);
			}
            break;

        case 0x18:
            if (sp < 8) {
                return 0;
            }
            for (; i + 5 < sp - 2; i += 6) {
                stbtt__csctx_rccurve_to(c, s[i], s[i + 1],
                                        s[i + 2], s[i + 3],
                                        s[i + 4], s[i + 5]);
			}
            if (i + 1 >= sp) {
                return 0;
            }
            stbtt__csctx_rline_to(c, s[i], s[i + 1]);
            break;

        case 0x19:
            if (sp < 8) {
                return 0;
            }
            for (; i + 1 < sp - 6; i += 2) {
                stbtt__csctx_rline_to(c, s[i], s[i + 1]);
            }
            if (i + 5 >= sp) {
                return 0;
            }
            stbtt__csctx_rccurve_to(c, s[i], s[i + 1], s[i + 2],
                                    s[i + 3], s[i + 4], s[i + 5]);
            break;

        case 0x1A:
        case 0x1B:
            if (sp < 4) {
                return 0;
            }
            f = 0.0;
            if (sp & 1) {
                f = s[i];
                i++;
            }
            for (; i + 3 < sp; i += 4) {
                if (b0 == 0x1B) {
                    stbtt__csctx_rccurve_to(c, s[i], f,
                                            s[i + 1],
                                            s[i + 2],
                                            s[i + 3], 0.0);
                } else {
                    stbtt__csctx_rccurve_to(c, f, s[i],
                                            s[i + 1],
                                            s[i + 2], 0.0,
                                            s[i + 3]);
				}
                f = 0.0;
            }
            break;

        case 0x0A:
            if (!has_subrs) {
                if (info.fdselect.length) {
                    subrs = stbtt__cid_get_glyph_subrs(info, glyph_index);
				}
                has_subrs = 1;
            }

        case 0x1D:
            if (sp < 1) {
                return 0;
            }
            v = s[--sp]|0;
            if (subr_stack_height >= 10) {
                return 0;
            }
            subr_stack[subr_stack_height++] = b;
            b = stbtt__get_subr(b0 == 0x0A ? subrs : info.gsubrs, v);
            if (b.length == 0) {
                return 0;
            }
            b.cursor = 0;
            clear_stack = 0;
            break;

        case 0x0B:
            if (subr_stack_height <= 0) {
                return 0;
            }
            b = subr_stack[--subr_stack_height];
            clear_stack = 0;
            break;

        case 0x0E:
            stbtt__csctx_close_shape(c);
            return 1;

        case 0x0C:
            var dx1, dx2, dx3, dx4, dx5, dx6, dy1, dy2, dy3, dy4, dy5, dy6,
				dx, dy, b1 = stbtt__buf_get8(b);
            switch (b1) {
            case 0x22:
                if (sp < 7) {
                    return 0;
                }
                dx1 = s[0];
                dx2 = s[1];
                dy2 = s[2];
                dx3 = s[3];
                dx4 = s[4];
                dx5 = s[5];
                dx6 = s[6];
                stbtt__csctx_rccurve_to(c, dx1, 0, dx2, dy2, dx3, 0);
                stbtt__csctx_rccurve_to(c, dx4, 0, dx5, -dy2, dx6, 0);
                break;

            case 0x23:
                if (sp < 13) {
                    return 0;
                }
                dx1 = s[0];
                dy1 = s[1];
                dx2 = s[2];
                dy2 = s[3];
                dx3 = s[4];
                dy3 = s[5];
                dx4 = s[6];
                dy4 = s[7];
                dx5 = s[8];
                dy5 = s[9];
                dx6 = s[10];
                dy6 = s[11];

                stbtt__csctx_rccurve_to(c, dx1, dy1, dx2, dy2, dx3, dy3);
                stbtt__csctx_rccurve_to(c, dx4, dy4, dx5, dy5, dx6, dy6);
                break;

            case 0x24:
                if (sp < 9) {
                    return 0;
                }
                dx1 = s[0];
                dy1 = s[1];
                dx2 = s[2];
                dy2 = s[3];
                dx3 = s[4];
                dx4 = s[5];
                dx5 = s[6];
                dy5 = s[7];
                dx6 = s[8];
                stbtt__csctx_rccurve_to(c, dx1, dy1, dx2, dy2, dx3, 0);
                stbtt__csctx_rccurve_to(c, dx4, 0, dx5, dy5, dx6, -(dy1 + dy2 + dy5));
                break;

            case 0x25:
                if (sp < 11) {
                    return 0;
                }
                dx1 = s[0];
                dy1 = s[1];
                dx2 = s[2];
                dy2 = s[3];
                dx3 = s[4];
                dy3 = s[5];
                dx4 = s[6];
                dy4 = s[7];
                dx5 = s[8];
                dy5 = s[9];
                dx6 = dy6 = s[10];
                dx = dx1 + dx2 + dx3 + dx4 + dx5;
                dy = dy1 + dy2 + dy3 + dy4 + dy5;
                if (abs(dx) > abs(dy)) {
                    dy6 = -dy;
                } else {
                    dx6 = -dx;
                }
                stbtt__csctx_rccurve_to(c, dx1, dy1, dx2, dy2, dx3, dy3);
                stbtt__csctx_rccurve_to(c, dx4, dy4, dx5, dy5, dx6, dy6);
                break;

            default:
                return 0;
            }
        	break;

        default:
            if (b0 != 255 && b0 != 28 && (b0 < 32 || b0 > 254)) {
                return 0;
            }
            if (b0 == 255) {
                f = stbtt__buf_get(b, 4) / 0x10000;
            } else {
                stbtt__buf_skip(b, -1);
                f = stbtt__cff_int(b);
            }
            if (sp >= 48) {
                return 0;
            }
            s[sp++] = f;
            clear_stack = 0;
            break;
        }
        if (clear_stack) {
            sp = 0;
        }
    }
    return 0;
}

function stbtt__csctx_init() {
	return { started:0, first_x:0, first_y:0, x:0, y:0,
			min_x:0, max_x:0, min_y:0, max_y:0,
			vertices:[]
		};
}

//static int stbtt__GetGlyphShapeT2(const stbtt_fontinfo * info, int glyph_index,
//									stbtt_vertex ** pvertices)
function stbtt__GetGlyphShapeT2(info, glyph_index) {
    var output_ctx = stbtt__csctx_init();
    if (stbtt__run_charstring(info, glyph_index, output_ctx)) {
		return output_ctx.vertices;
    }
    return null;
}

//static int stbtt__GetGlyphInfoT2(const stbtt_fontinfo * info, int glyph_index, int *x0,
//                      int *y0, int *x1, int *y1)
function stbtt__GetGlyphInfoT2(info, glyph_index, out) {
    var c = stbtt__csctx_init();
    var r = stbtt__run_charstring(info, glyph_index, c);
	out.x0 = r ? c.min_x : 0;
	out.y0 = r ? c.min_y : 0;
	out.x1 = r ? c.max_x : 0;
	out.y1 = r ? c.max_y : 0;
    return r && c.vertices ? c.vertices.length : 0;
}

//extern int stbtt_GetGlyphShape(const stbtt_fontinfo * info, int glyph_index,
//								 stbtt_vertex ** pvertices)
function stbtt_GetGlyphShape(info, glyph_index) {
    if (!info.cff.length) {
        return stbtt__GetGlyphShapeTT(info, glyph_index);
    } else {
        return stbtt__GetGlyphShapeT2(info, glyph_index);
    }
}

//extern void stbtt_GetGlyphHMetrics(const stbtt_fontinfo * info, int glyph_index,
//                       int *advanceWidth, int *leftSideBearing)
function stbtt_GetGlyphHMetrics(info, glyph_index) {
    var numOfLongHorMetrics = ttUSHORT(info.data, info.hhea + 34);
    if (glyph_index < numOfLongHorMetrics) {
		return {
				advanceWidth:   ttSHORT(info.data, info.hmtx + 4 * glyph_index),
				leftSideBearing:ttSHORT(info.data, info.hmtx + 4 * glyph_index + 2)
			};
    } else {
		return {
				advanceWidth:   ttSHORT(info.data, info.hmtx + 4 * (numOfLongHorMetrics - 1)),
				leftSideBearing:ttSHORT(info.data, info.hmtx + 4 * numOfLongHorMetrics +
											2 * (glyph_index - numOfLongHorMetrics))
			};
    }
}

//extern void stbtt_GetCodepointHMetrics(const stbtt_fontinfo * info, int codepoint,
//                           int *advanceWidth, int *leftSideBearing)
function stbtt_GetCodepointHMetrics(info, codepoint) {
     return stbtt_GetGlyphHMetrics(info, stbtt_FindGlyphIndex(info, codepoint));
}

//extern void stbtt_GetFontVMetrics(const stbtt_fontinfo * info, int *ascent, int *descent, int *lineGap)
function stbtt_GetFontVMetrics(info) {
	return {
        ascent:	ttSHORT(info.data, info.hhea + 4),
        descent:ttSHORT(info.data, info.hhea + 6),
        linegap:ttSHORT(info.data, info.hhea + 8),
	};
}

//extern void stbtt_GetGlyphBitmapBoxSubpixel(const stbtt_fontinfo * font, int glyph,
//                              float scale_x, float scale_y, float shift_x, float shift_y,
//								int *ix0, int *iy0, int *ix1, int *iy1)
function stbtt_GetGlyphBitmapBoxSubpixel(font, glyph, scale_x, scale_y, shift_x, shift_y) {
    var tmp = {};
    if (!stbtt_GetGlyphBox(font, glyph, tmp)) {
		return { x0:0, y0:0, x1:0, y1:0 };
    }
	return {
			x0:floor(tmp.x0 * scale_x + shift_x),
			y0:floor(-tmp.y1 * scale_y + shift_y),
			x1:ceil(tmp.x1 * scale_x + shift_x),
			y1:ceil(-tmp.y0 * scale_y + shift_y),
		};
}

//extern void stbtt_GetCodepointBitmapBoxSubpixel(const stbtt_fontinfo * font,
//                                    int codepoint, float scale_x, float scale_y, float shift_x,
//                                    float shift_y, int *ix0, int *iy0, int *ix1, int *iy1)
function stbtt_GetCodepointBitmapBoxSubpixel(font, codepoint, scale_x, scale_y, shift_x, shift_y) {
    return stbtt_GetGlyphBitmapBoxSubpixel(font, stbtt_FindGlyphIndex(font, codepoint),
											scale_x, scale_y, shift_x, shift_y);
}

//extern void stbtt_GetCodepointBitmapBox(const stbtt_fontinfo * font, int codepoint,	float scale_x, float scale_y,
//										int *ix0, int *iy0, int *ix1, int *iy1)
function stbtt_GetCodepointBitmapBox(font, codepoint, scale_x, scale_y) {
    return stbtt_GetCodepointBitmapBoxSubpixel(font, codepoint, scale_x, scale_y, 0, 0);
}

//static stbtt__active_edge *stbtt__new_active(stbtt__hheap * hh, stbtt__edge * e, int off_x, float start_point, void *userdata)
function stbtt__new_active(e, off_x, start_point) {
    var dxdy = (e.x1 - e.x0) / (e.y1 - e.y0);
	return {
		fdx:dxdy,
		fdy:dxdy != 0.0 ? (1.0 / dxdy) : 0.0,
		fx:(e.x0 + dxdy * (start_point - e.y0)) - (off_x|0),
		direction:e.invert ? 1.0 : -1.0,
		sy:e.y0,
		ey:e.y1,
		next:0,
    };
}

//static void stbtt__handle_clipped_edge(float *scanline, int x, stbtt__active_edge * e,
//                           float x0, float y0, float x1, float y1)
function stbtt__handle_clipped_edge(scanline, x, e, x0, y0, x1, y1) {
	x = x|0;
    if (y0 == y1) {
        return;
    }
    if (y0 > e.ey) {
        return;
    }
    if (y1 < e.sy) {
        return;
    }
    if (y0 < e.sy) {
        x0 += (x1 - x0) * (e.sy - y0) / (y1 - y0);
        y0 = e.sy;
    }
    if (y1 > e.ey) {
        x1 += (x1 - x0) * (e.ey - y1) / (y1 - y0);
        y1 = e.ey;
    }

    if (x0 <= x && x1 <= x) {
        scanline[x] += e.direction * (y1 - y0);
    } else if (x0 >= x + 1 && x1 >= x + 1) {

    } else {
        scanline[x] += e.direction * (y1 - y0) * (1 - ((x0 - x) + (x1 - x)) / 2);
    }
}

//static void stbtt__fill_active_edges_new(float *scanline, float *scanline_fill, int len,
//                             stbtt__active_edge * e, float y_top)
// The C implementation passed scanline_fill as a +1 pointer on the call, and then -1 in
// places in this function.  That doesn't work with array-views, so we reverse the handling.
function stbtt__fill_active_edges_new(scanline, scanline_fill, len, e, y_top) {
    var y_bottom = y_top + 1;
    while (e) {
        if (e.fdx == 0) {
            var x0 = e.fx;
            if (x0 < len) {
                if (x0 >= 0) {
                    stbtt__handle_clipped_edge(scanline, x0, e, x0, y_top, x0, y_bottom);
                    stbtt__handle_clipped_edge(scanline_fill, x0+1, e, x0, y_top, x0, y_bottom);
                } else {
                    stbtt__handle_clipped_edge(scanline_fill, 0, e, x0, y_top, x0, y_bottom);
                }
            }
        } else {
            var x0 = e.fx,
				dx = e.fdx,
				xb = x0 + dx,
				x_top, x_bottom,
				sy0, sy1,
				dy = e.fdy;

            if (e.sy > y_top) {
                x_top = x0 + dx * (e.sy - y_top);
                sy0 = e.sy;
            } else {
                x_top = x0;
                sy0 = y_top;
            }
            if (e.ey < y_bottom) {
                x_bottom = x0 + dx * (e.ey - y_top);
                sy1 = e.ey;
            } else {
                x_bottom = xb;
                sy1 = y_bottom;
            }

            if (x_top >= 0 && x_bottom >= 0 && x_top < len && x_bottom < len) {
                if ((x_top|0) == (x_bottom|0)) {
                    var height = sy1 - sy0,
						x = x_top|0;
                    scanline[x] += e.direction * (1 - ((x_top - x) + (x_bottom - x)) / 2) * height;
                    scanline_fill[x+1] += e.direction * height;
                } else {
                    var t, x, x1, x2, y_crossing, step, sign, area;
                    if (x_top > x_bottom) {
                        sy0 = y_bottom - (sy0 - y_top);
                        sy1 = y_bottom - (sy1 - y_top);
                        t = sy0, sy0 = sy1, sy1 = t;
                        t = x_bottom, x_bottom = x_top, x_top = t;
                        dx = -dx;
                        dy = -dy;
                        t = x0, x0 = xb, xb = t;
                    }

                    x1 = x_top|0;
                    x2 = x_bottom|0;
                    y_crossing = (x1 + 1 - x0) * dy + y_top;
                    sign = e.direction;
                    area = sign * (y_crossing - sy0);

                    scanline[x1] += area * (1 - ((x_top - x1) + (x1 + 1 - x1)) / 2);

                    step = sign * dy;
                    for (x = x1 + 1; x < x2; ++x) {
                        scanline[x] += area + step / 2;
                        area += step;
                    }
                    y_crossing += dy * (x2 - (x1 + 1));

                    scanline[x2] += area + sign * (1 - ((x2 - x2) + (x_bottom - x2)) / 2) *
												(sy1 - y_crossing);
                    scanline_fill[x2+1] += sign * (sy1 - sy0);
                }
            } else {
                for (var x = 0; x < len; ++x) {
                    var y0 = y_top,
						x1 = x,
						x2 = x + 1,
						x3 = xb,
						y3 = y_bottom,
						y1 = (x - x0) / dx + y_top,
						y2 = (x + 1 - x0) / dx + y_top;

                    if (x0 < x1 && x3 > x2) {
                        stbtt__handle_clipped_edge(scanline, x, e, x0, y0, x1, y1);
                        stbtt__handle_clipped_edge(scanline, x, e, x1, y1, x2, y2);
                        stbtt__handle_clipped_edge(scanline, x, e, x2, y2, x3, y3);
                    } else if (x3 < x1 && x0 > x2) {
                        stbtt__handle_clipped_edge(scanline, x, e, x0, y0, x2, y2);
                        stbtt__handle_clipped_edge(scanline, x, e, x2, y2, x1, y1);
                        stbtt__handle_clipped_edge(scanline, x, e, x1, y1, x3, y3);
                    } else if (x0 < x1 && x3 > x1) {
                        stbtt__handle_clipped_edge(scanline, x, e, x0, y0, x1, y1);
                        stbtt__handle_clipped_edge(scanline, x, e, x1, y1, x3, y3);
                    } else if (x3 < x1 && x0 > x1) {
                        stbtt__handle_clipped_edge(scanline, x, e, x0, y0, x1, y1);
                        stbtt__handle_clipped_edge(scanline, x, e, x1, y1, x3, y3);
                    } else if (x0 < x2 && x3 > x2) {
                        stbtt__handle_clipped_edge(scanline, x, e, x0, y0, x2, y2);
                        stbtt__handle_clipped_edge(scanline, x, e, x2, y2, x3, y3);
                    } else if (x3 < x2 && x0 > x2) {
                        stbtt__handle_clipped_edge(scanline, x, e, x0, y0, x2, y2);
                        stbtt__handle_clipped_edge(scanline, x, e, x2, y2, x3, y3);
                    } else {
                        stbtt__handle_clipped_edge(scanline, x, e, x0, y0, x3, y3);
                    }
                }
            }
        }
        e = e.next;
    }
}

//static void stbtt__rasterize_sorted_edges(stbtt__bitmap * result, stbtt__edge * e, int n,
//                              int vsubsample, int off_x, int off_y, void *userdata)
function stbtt__rasterize_sorted_edges(result, edges, nedges, vsubsample, off_x, off_y) {
	vsubsample |= 0, off_x |= 0, off_y |= 0;
    var active = null, z;
    var y = off_y, j = 0, i;
    var scanline = new Float32Array(result.w * 2 + 1);
    var scanline2 = scanline.subarray(result.w);
	var eoff = 0;

    edges[nedges].y0 = off_y + result.h + 1;
    while (j < result.h) {
        var scan_y_top = y + 0.0,
			scan_y_bottom = y + 1.0,
			step = active;

		// F'ing IE
		if (scanline.fill) { scanline.fill(0); }
		else { for (var $i = 0, $l = scanline.length; $i < $l; $i++) scanline[$i] = 0; }

        while (step) {
            z = step;
			step = z.next;
            if (z.ey <= scan_y_top) {
                z.direction = 0;
            } else {
			}
        }

        while (edges[eoff].y0 <= scan_y_bottom) {
            if (edges[eoff].y0 != edges[eoff].y1) {
                z = stbtt__new_active(edges[eoff], off_x, scan_y_top);
				z.next = active;
				active = z;
            }
            ++eoff;
        }

        if (active) {
			// C implementation passed scanline2+1.  See function for details.
            stbtt__fill_active_edges_new(scanline, scanline2, result.w, active, scan_y_top);
		}
		for (var i = 0, sum = 0; i < result.w; ++i) {
			var k, m;
			sum += scanline2[i];
			k = scanline[i] + sum;
			k = abs(k) * 255 + 0.5;
			m = k>>>0;
			if (m > 255) {
				m = 255;
			}
			result.pixels[j * result.stride + i] = m;
        }

        step = active;
        while (step) {
            z = step;
            z.fx += z.fdx;
            step = z.next;
        }
        ++y;
        ++j;
    }
}

//static void stbtt__sort_edges_ins_sort(stbtt__edge * p, int n)
function stbtt__sort_edges_ins_sort(p, n) {
    for (var i = 1; i < n; ++i) {
        var t = p[i], j = i;
        while (j > 0 && t.y0 < p[j-1].y0) {
             p[j] = p[j - 1];
            --j;
        }
        if (i != j) {
            p[j] = t;
        }
    }
}

//static void stbtt__sort_edges_quicksort(stbtt__edge * p, int n)
// The C implementation messed with the p pointer.  JS uses an offset instead.
function stbtt__sort_edges_quicksort(p, o, n) {
    while (n > 12) {
        var t, c, i, j, z,
			m = n >> 1,
			c01 = p[o].y0 < p[o+m].y0,
			c12 = p[o+m].y0 < p[o+n-1].y0;

        if (c01 != c12) {
            c = p[o].y0 < p[o+n-11].y0;
            z = (c == c12) ? 0 : n - 1;
            t = p[o+z];
            p[o+z] = p[o+m];
            p[o+m] = t;
        }

        t = p[o];
        p[o] = p[o+m];
        p[o+m] = t;

        i = 1;
        j = n - 1;
        for (;;) {
            for ( ; p[o+i].y0 < p[o].y0; ++i) {
            }
            for ( ; p[o].y0 < p[o+j].y0; --j) {
            }
            if (i >= j) {
                break;
            }
            t = p[o+i];
            p[o+i] = p[o+j];
            p[o+j] = t;

            ++i;
            --j;
        }

        if (j < n - i) {
            stbtt__sort_edges_quicksort(p, o, j);
            o += i;
            n -= i;
        } else {
            stbtt__sort_edges_quicksort(p, o + i, n - i);
            n = j;
        }
    }
}

//static void stbtt__sort_edges(stbtt__edge * p, int n)
function stbtt__sort_edges(p, n) {
    stbtt__sort_edges_quicksort(p, 0, n);
    stbtt__sort_edges_ins_sort(p, n);
}

//static void stbtt__rasterize(stbtt__bitmap * result, stbtt__point * pts, int *wcount,
//                 int windings, float scale_x, float scale_y, float shift_x,
//                 float shift_y, int off_x, int off_y, int invert,
//                 void *userdata)
function stbtt__rasterize(result, pts, wcount, scale_x, scale_y, shift_x, shift_y, off_x, off_y, invert) {
    var y_scale_inv = invert ? -scale_y : scale_y,
		e, n, i, j, k, m,
		vsubsample = 1;

    n = 0;
    for (i = 0; i < wcount.length; ++i) {
        n += wcount[i];
    }

    e = oalloc(n + 1);
    n = 0;
    m = 0;
    for (i = 0; i < wcount.length; ++i) {
        var p = m;
        m += wcount[i];
        j = wcount[i] - 1;
        for (k = 0; k < wcount[i]; j = k++) {
            var a = k, b = j;
            if (pts[p+j].y == pts[p+k].y) {
                continue;
            }

            e[n].invert = 0;
            if (invert ? pts[p+j].y > pts[p+k].y : pts[p+j].y < pts[p+k].y) {
                e[n].invert = 1;
                a = j, b = k;
            }
            e[n].x0 = pts[p+a].x * scale_x + shift_x;
            e[n].y0 = (pts[p+a].y * y_scale_inv + shift_y) * vsubsample;
            e[n].x1 = pts[p+b].x * scale_x + shift_x;
            e[n].y1 = (pts[p+b].y * y_scale_inv + shift_y) * vsubsample;
            ++n;
        }
    }

    stbtt__sort_edges(e, n);
    stbtt__rasterize_sorted_edges(result, e, n, vsubsample, off_x, off_y);
 }

//static int stbtt__tesselate_curve(stbtt__point * points, int *num_points, float x0,
//                       float y0, float x1, float y1, float x2, float y2,
//                       float objspace_flatness_squared, int n)
function stbtt__tesselate_curve(points, x0, y0, x1, y1, x2, y2, objspace_flatness_squared, n) {
    var mx = (x0 + 2 * x1 + x2) / 4,
		my = (y0 + 2 * y1 + y2) / 4,
		dx = (x0 + x2) / 2 - mx,
		dy = (y0 + y2) / 2 - my;
    if (n > 16) {
        return 1;
    }
    if (dx * dx + dy * dy > objspace_flatness_squared) {
        stbtt__tesselate_curve(points, x0, y0, (x0 + x1) / 2.0, (y0 + y1) / 2.0, mx, my,
                               objspace_flatness_squared, n + 1);
        stbtt__tesselate_curve(points, mx, my, (x1 + x2) / 2.0, (y1 + y2) / 2.0, x2, y2,
                               objspace_flatness_squared, n + 1);
    } else {
		points.push({ x:x2, y:y2 });
    }
    return 1;
}

//static void stbtt__tesselate_cubic(stbtt__point * points, int *num_points, float x0,
//                       float y0, float x1, float y1, float x2, float y2,
//                       float x3, float y3, float objspace_flatness_squared, int n)
function stbtt__tesselate_cubic(points, x0, y0, x1, y1, x2, y2, x3, y3, objspace_flatness_squared, n) {
    var dx0 = x1 - x0,
		dy0 = y1 - y0,
		dx1 = x2 - x1,
		dy1 = y2 - y1,
		dx2 = x3 - x2,
		dy2 = y3 - y2,
		dx = x3 - x0,
		dy = y3 - y0,
		longlen = sqrt(dx0 * dx0 + dy0 * dy0) +
				  sqrt(dx1 * dx1 + dy1 * dy1) +
                  sqrt(dx2 * dx2 + dy2 * dy2),
		shortlen = sqrt(dx * dx + dy * dy),
		flatness_squared = longlen * longlen - shortlen * shortlen;
    if (n > 16) {
        return;
    }

    if (flatness_squared > objspace_flatness_squared) {
        var x01 = (x0 + x1) / 2,
			y01 = (y0 + y1) / 2,
			x12 = (x1 + x2) / 2,
			y12 = (y1 + y2) / 2,
			x23 = (x2 + x3) / 2,
			y23 = (y2 + y3) / 2,
			xa = (x01 + x12) / 2,
			ya = (y01 + y12) / 2,
			xb = (x12 + x23) / 2,
			yb = (y12 + y23) / 2,
			mx = (xa + xb) / 2,
			my = (ya + yb) / 2;

        stbtt__tesselate_cubic(points, x0, y0, x01, y01, xa, ya, mx, my,
								objspace_flatness_squared, n + 1);
        stbtt__tesselate_cubic(points, mx, my, xb, yb, x23, y23, x3, y3,
								objspace_flatness_squared, n + 1);
    } else {
		points.push({ x:x3, y:y3 });
    }
}

//static stbtt__point *stbtt_FlattenCurves(stbtt_vertex * vertices, int num_verts,
//        float objspace_flatness, int **contour_lengths, int *num_contours, void *userdata)
function stbtt_FlattenCurves(vertices, objspace_flatness, contour_lengths) {
    var points = [],
		objspace_flatness_squared = objspace_flatness * objspace_flatness,
		n = -1, start = 0,
		x = 0, y = 0;
	for (var i = 0, nverts = vertices.length; i < nverts; ++i) {
		switch (vertices[i].type) {
		case STBTT_vmove:
			if (n >= 0) {
				contour_lengths[n] = points.length - start;
			}
			++n;
			start = points.length;
			x = vertices[i].x, y = vertices[i].y;
			points.push({ x:x, y:y });
			break;
		case STBTT_vline:
			x = vertices[i].x, y = vertices[i].y;
			points.push({ x:x, y:y });
			break;
		case STBTT_vcurve:
			stbtt__tesselate_curve(points, x, y, vertices[i].cx, vertices[i].cy,
								   vertices[i].x, vertices[i].y, objspace_flatness_squared, 0);
			x = vertices[i].x, y = vertices[i].y;
			break;
		case STBTT_vcubic:
			stbtt__tesselate_cubic(points, x, y, vertices[i].cx, vertices[i].cy,
								   vertices[i].cx1, vertices[i].cy1, vertices[i].x, vertices[i].y,
								   objspace_flatness_squared, 0);
			x = vertices[i].x, y = vertices[i].y;
			break;
		}
	}
	contour_lengths[n] = points.length - start;

	//console.log("--cl(" + (n+1) + '):');
	//for (var i = 0; i <= n; i++) {
	//	console.log(" %d", contour_lengths[i]);
	//}
	//console.log("\n--pts(" + points.length + '):');
	//for (var i = 0; i < points.length; i++) {
	//	var pt = points[i];
	//	console.log(i + ': ' + pt.x  + ',' + pt.y);
	//}

    return points;
}

//extern void stbtt_Rasterize(stbtt__bitmap * result, float flatness_in_pixels,
//                stbtt_vertex * vertices, int num_verts, float scale_x,
//                float scale_y, float shift_x, float shift_y, int x_off,
//                int y_off, int invert, void *userdata)
function stbtt_Rasterize(result, flatness_in_pixels, vertices, scale_x, scale_y, shift_x, shift_y,
						 x_off, y_off, invert) {
	x_off |= 0, y_off |= 0;
    var scale = scale_x > scale_y ? scale_y : scale_x,
		wcount = [],
		windings = stbtt_FlattenCurves(vertices, flatness_in_pixels / scale, wcount);
    if (windings) {
        stbtt__rasterize(result, windings, wcount, scale_x, scale_y,
						 shift_x, shift_y, x_off, y_off, invert);
    }
}

//extern void stbtt_MakeGlyphBitmapSubpixel(const stbtt_fontinfo * info,
//                              unsigned char *output, int out_w, int out_h,
//                              int out_stride, float scale_x, float scale_y,
//                              float shift_x, float shift_y, int glyph)
function stbtt_MakeGlyphBitmapSubpixel(info, buffer, out_w, out_h, out_stride,
									scale_x, scale_y, shift_x, shift_y, glyph) {
    var vertices = stbtt_GetGlyphShape(info, glyph);
    var gbm = {};
    var rect = stbtt_GetGlyphBitmapBoxSubpixel(info, glyph, scale_x, scale_y, shift_x, shift_y);
    gbm.pixels = buffer;
    gbm.w = out_w|0;
    gbm.h = out_h|0;
    gbm.stride = out_stride|0;

    if (gbm.w && gbm.h) {
        stbtt_Rasterize(gbm, 0.35, vertices, scale_x, scale_y, shift_x, shift_y, rect.x0, rect.y0, 1);
	}
}

//extern void stbtt_MakeCodepointBitmapSubpixel(const stbtt_fontinfo * info,
//                                  unsigned char *output, int out_w,
//                                  int out_h, int out_stride, float scale_x,
//                                  float scale_y, float shift_x,
//                                  float shift_y, int codepoint)
function stbtt_MakeCodepointBitmapSubpixel(info, buffer, out_w, out_h, out_stride,
									scale_x, scale_y, shift_x, shift_y, codepoint) {
    stbtt_MakeGlyphBitmapSubpixel(info, buffer, out_w, out_h, out_stride,
                                  scale_x, scale_y, shift_x, shift_y,
                                  stbtt_FindGlyphIndex(info, codepoint));
}

//extern int stbtt_InitFont(stbtt_fontinfo * info, const unsigned char *data, int offset)
function stbtt_InitFont(font, data, offset) {
    return stbtt_InitFont_internal(font, data, offset);
}


function InitFont(data) {
	var font = {};
    if (!stbtt_InitFont_internal(font, data, 0)) {
		return null;
	}

	var vm = stbtt_GetFontVMetrics(font);

	font.ascent = vm.ascent;
	font.descent = vm.descent;
	font.linegap = vm.linegap;

	return font;
}

function GetGlyph(font, codepoint, size_x, size_y) {
	size_y = size_y || size_x;
	var scale_x = size_x / font.ascent;
	var scale_y = size_y / font.ascent;

	var glyph = stbtt_FindGlyphIndex(font, codepoint);
	if (!glyph && codepoint) {
		return null;
	}

    var vertices = stbtt_GetGlyphShape(font, glyph);
	var rect = stbtt_GetGlyphBitmapBoxSubpixel(font, glyph, scale_x, scale_y, 0, 0);
	var width = rect.x1 - rect.x0;
	var height = rect.y1 - rect.y0;
	var pixels = null;

	if (width && height) {
		var gbm = {
			pixels : (pixels = new Uint8Array(width * height)),
			w : width,
			h : height,
			stride : width,
		}
		stbtt_Rasterize(gbm, 0.35, vertices, scale_x, scale_y, 0, 0, rect.x0, rect.y0, 1);
	}

	var hmetrics = stbtt_GetGlyphHMetrics(font, glyph);
	return {
		glyph:glyph, pixels:pixels, width:width, height:height, top:-rect.y0, left:rect.x0,
		advance:floor(hmetrics.advanceWidth * scale_x),
	}
}
function GetPaths(font, codepoint, size_x, size_y) {
	size_y = size_y || size_x;
	var scale_x = size_x / font.ascent;
	var scale_y = size_y / font.ascent;

	var glyph = stbtt_FindGlyphIndex(font, codepoint);
	if (!glyph && codepoint) {
		return null;
	}
    var vertices = stbtt_GetGlyphShape(font, glyph);
	var hmetrics = stbtt_GetGlyphHMetrics(font, glyph);

	// The hmetrics just give us advance.  We need ascent and descent as well.
	var ascent = 0;
	var descent = 0;

	// Convert to SVG notation
	var paths = [];
	if (vertices) {
		for (var i = 0, l = vertices.length; i < l; i++) {
			var v = vertices[i];
			var path;
			if (v.type == STBTT_vmove) {
				path = { type:'M', x:v.x * scale_x, y:v.y * scale_y };
			} else if (v.type == STBTT_vline) {
				path = { type:'L', x:v.x * scale_x, y:v.y * scale_y };
			} else if (v.type == STBTT_vcurve) {
				path = { type:'Q', x:v.x * scale_x, y:v.y * scale_y,
								  cx:v.cx * scale_x, cy:v.cy * scale_y };
			} else if (v.type == STBTT_vcubic) {
				path = { type:'C', x:v.x * scale_x, y:v.y * scale_y,
								 cx1:v.cx * scale_x, cy1:v.cy * scale_y,
								 cx2:v.cx1 * scale_x, cy2:v.cy1 * scale_y };
			} else {
				continue;
			}
			if (path.y > ascent)  ascent  = path.y;
			if (path.y < descent) descent = path.y;
			paths.push(path);
		}
	}

	// Add the glyph metrics to the returned array.
	paths.advance = hmetrics.advanceWidth * scale_x;
	paths.ascent  = ascent;
	paths.descent = descent;
	return paths;
}


// exports
return {
	InitFont:	InitFont,
	GetGlyph:	GetGlyph,
	GetPaths:	GetPaths,
}

})();
function toUint8Array(data) {
    if (typeof data == "string") {
        var binary = /[^A-Za-z0-9+\/=\s]/.test(data);
        return Buffer.from ? Buffer.from(data, binary ? 'binary' : 'base64')
                           : new Buffer(data, binary ? 'binary' : 'base64');
    } else if (data instanceof Uint8Array) {
        return data;
    } else if (data instanceof ArrayBuffer) {
        return new Uint8Array(data);
    }
    throw new ReferenceError("data must be a binary or base64 encoded string or a Buffer/Uint8Array");
}

FontLib.loadFont("OCR-A", 100, 100, "");
FontLib.loadFont("OCR-B", 96, 100, "");

return {
        // The public interface
        request:Request, toBuffer:ToBuffer, render:Render, raw:Raw,
        fixupOptions:FixupOptions,
        loadFont:FontLib.loadFont,
        VERSION:'2.0.12 (2021-02-03)',

        // Internals
        BWIPJS:BWIPJS, BWIPP:BWIPP, STBTT:STBTT, FontLib:FontLib,
        DrawingBuiltin:DrawingBuiltin, DrawingZlibPng:DrawingZlibPng,
    };
}));
